
Hecaton_Raid_EYE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001301c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006b8  080131f0  080131f0  000231f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080138a8  080138a8  00030210  2**0
                  CONTENTS
  4 .ARM          00000008  080138a8  080138a8  000238a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080138b0  080138b0  00030210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080138b0  080138b0  000238b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080138b4  080138b4  000238b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000210  20000000  080138b8  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001420  20000210  08013ac8  00030210  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001630  08013ac8  00031630  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030210  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030240  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001e385  00000000  00000000  00030283  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000045c5  00000000  00000000  0004e608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000018f0  00000000  00000000  00052bd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000136f  00000000  00000000  000544c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026b7e  00000000  00000000  0005582f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ffcf  00000000  00000000  0007c3ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dcefe  00000000  00000000  0009c37c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007fa8  00000000  00000000  0017927c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004c  00000000  00000000  00181224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000210 	.word	0x20000210
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080131d4 	.word	0x080131d4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000214 	.word	0x20000214
 800020c:	080131d4 	.word	0x080131d4

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_ldivmod>:
 8000cb8:	b97b      	cbnz	r3, 8000cda <__aeabi_ldivmod+0x22>
 8000cba:	b972      	cbnz	r2, 8000cda <__aeabi_ldivmod+0x22>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bfbe      	ittt	lt
 8000cc0:	2000      	movlt	r0, #0
 8000cc2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000cc6:	e006      	blt.n	8000cd6 <__aeabi_ldivmod+0x1e>
 8000cc8:	bf08      	it	eq
 8000cca:	2800      	cmpeq	r0, #0
 8000ccc:	bf1c      	itt	ne
 8000cce:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000cd2:	f04f 30ff 	movne.w	r0, #4294967295
 8000cd6:	f000 b9f1 	b.w	80010bc <__aeabi_idiv0>
 8000cda:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cde:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce2:	2900      	cmp	r1, #0
 8000ce4:	db09      	blt.n	8000cfa <__aeabi_ldivmod+0x42>
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	db1a      	blt.n	8000d20 <__aeabi_ldivmod+0x68>
 8000cea:	f000 f883 	bl	8000df4 <__udivmoddi4>
 8000cee:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf6:	b004      	add	sp, #16
 8000cf8:	4770      	bx	lr
 8000cfa:	4240      	negs	r0, r0
 8000cfc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	db1b      	blt.n	8000d3c <__aeabi_ldivmod+0x84>
 8000d04:	f000 f876 	bl	8000df4 <__udivmoddi4>
 8000d08:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d10:	b004      	add	sp, #16
 8000d12:	4240      	negs	r0, r0
 8000d14:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d18:	4252      	negs	r2, r2
 8000d1a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d1e:	4770      	bx	lr
 8000d20:	4252      	negs	r2, r2
 8000d22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d26:	f000 f865 	bl	8000df4 <__udivmoddi4>
 8000d2a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d32:	b004      	add	sp, #16
 8000d34:	4240      	negs	r0, r0
 8000d36:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d3a:	4770      	bx	lr
 8000d3c:	4252      	negs	r2, r2
 8000d3e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d42:	f000 f857 	bl	8000df4 <__udivmoddi4>
 8000d46:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d4a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d4e:	b004      	add	sp, #16
 8000d50:	4252      	negs	r2, r2
 8000d52:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d56:	4770      	bx	lr

08000d58 <__aeabi_uldivmod>:
 8000d58:	b953      	cbnz	r3, 8000d70 <__aeabi_uldivmod+0x18>
 8000d5a:	b94a      	cbnz	r2, 8000d70 <__aeabi_uldivmod+0x18>
 8000d5c:	2900      	cmp	r1, #0
 8000d5e:	bf08      	it	eq
 8000d60:	2800      	cmpeq	r0, #0
 8000d62:	bf1c      	itt	ne
 8000d64:	f04f 31ff 	movne.w	r1, #4294967295
 8000d68:	f04f 30ff 	movne.w	r0, #4294967295
 8000d6c:	f000 b9a6 	b.w	80010bc <__aeabi_idiv0>
 8000d70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d78:	f000 f83c 	bl	8000df4 <__udivmoddi4>
 8000d7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d84:	b004      	add	sp, #16
 8000d86:	4770      	bx	lr

08000d88 <__aeabi_d2lz>:
 8000d88:	b538      	push	{r3, r4, r5, lr}
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	4604      	mov	r4, r0
 8000d90:	460d      	mov	r5, r1
 8000d92:	f7ff febb 	bl	8000b0c <__aeabi_dcmplt>
 8000d96:	b928      	cbnz	r0, 8000da4 <__aeabi_d2lz+0x1c>
 8000d98:	4620      	mov	r0, r4
 8000d9a:	4629      	mov	r1, r5
 8000d9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000da0:	f000 b80a 	b.w	8000db8 <__aeabi_d2ulz>
 8000da4:	4620      	mov	r0, r4
 8000da6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000daa:	f000 f805 	bl	8000db8 <__aeabi_d2ulz>
 8000dae:	4240      	negs	r0, r0
 8000db0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000db4:	bd38      	pop	{r3, r4, r5, pc}
 8000db6:	bf00      	nop

08000db8 <__aeabi_d2ulz>:
 8000db8:	b5d0      	push	{r4, r6, r7, lr}
 8000dba:	4b0c      	ldr	r3, [pc, #48]	; (8000dec <__aeabi_d2ulz+0x34>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	4606      	mov	r6, r0
 8000dc0:	460f      	mov	r7, r1
 8000dc2:	f7ff fc31 	bl	8000628 <__aeabi_dmul>
 8000dc6:	f7ff ff07 	bl	8000bd8 <__aeabi_d2uiz>
 8000dca:	4604      	mov	r4, r0
 8000dcc:	f7ff fbb2 	bl	8000534 <__aeabi_ui2d>
 8000dd0:	4b07      	ldr	r3, [pc, #28]	; (8000df0 <__aeabi_d2ulz+0x38>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	f7ff fc28 	bl	8000628 <__aeabi_dmul>
 8000dd8:	4602      	mov	r2, r0
 8000dda:	460b      	mov	r3, r1
 8000ddc:	4630      	mov	r0, r6
 8000dde:	4639      	mov	r1, r7
 8000de0:	f7ff fa6a 	bl	80002b8 <__aeabi_dsub>
 8000de4:	f7ff fef8 	bl	8000bd8 <__aeabi_d2uiz>
 8000de8:	4621      	mov	r1, r4
 8000dea:	bdd0      	pop	{r4, r6, r7, pc}
 8000dec:	3df00000 	.word	0x3df00000
 8000df0:	41f00000 	.word	0x41f00000

08000df4 <__udivmoddi4>:
 8000df4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000df8:	9e08      	ldr	r6, [sp, #32]
 8000dfa:	460d      	mov	r5, r1
 8000dfc:	4604      	mov	r4, r0
 8000dfe:	460f      	mov	r7, r1
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d14a      	bne.n	8000e9a <__udivmoddi4+0xa6>
 8000e04:	428a      	cmp	r2, r1
 8000e06:	4694      	mov	ip, r2
 8000e08:	d965      	bls.n	8000ed6 <__udivmoddi4+0xe2>
 8000e0a:	fab2 f382 	clz	r3, r2
 8000e0e:	b143      	cbz	r3, 8000e22 <__udivmoddi4+0x2e>
 8000e10:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e14:	f1c3 0220 	rsb	r2, r3, #32
 8000e18:	409f      	lsls	r7, r3
 8000e1a:	fa20 f202 	lsr.w	r2, r0, r2
 8000e1e:	4317      	orrs	r7, r2
 8000e20:	409c      	lsls	r4, r3
 8000e22:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000e26:	fa1f f58c 	uxth.w	r5, ip
 8000e2a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000e2e:	0c22      	lsrs	r2, r4, #16
 8000e30:	fb0e 7711 	mls	r7, lr, r1, r7
 8000e34:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000e38:	fb01 f005 	mul.w	r0, r1, r5
 8000e3c:	4290      	cmp	r0, r2
 8000e3e:	d90a      	bls.n	8000e56 <__udivmoddi4+0x62>
 8000e40:	eb1c 0202 	adds.w	r2, ip, r2
 8000e44:	f101 37ff 	add.w	r7, r1, #4294967295
 8000e48:	f080 811c 	bcs.w	8001084 <__udivmoddi4+0x290>
 8000e4c:	4290      	cmp	r0, r2
 8000e4e:	f240 8119 	bls.w	8001084 <__udivmoddi4+0x290>
 8000e52:	3902      	subs	r1, #2
 8000e54:	4462      	add	r2, ip
 8000e56:	1a12      	subs	r2, r2, r0
 8000e58:	b2a4      	uxth	r4, r4
 8000e5a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000e5e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000e62:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e66:	fb00 f505 	mul.w	r5, r0, r5
 8000e6a:	42a5      	cmp	r5, r4
 8000e6c:	d90a      	bls.n	8000e84 <__udivmoddi4+0x90>
 8000e6e:	eb1c 0404 	adds.w	r4, ip, r4
 8000e72:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e76:	f080 8107 	bcs.w	8001088 <__udivmoddi4+0x294>
 8000e7a:	42a5      	cmp	r5, r4
 8000e7c:	f240 8104 	bls.w	8001088 <__udivmoddi4+0x294>
 8000e80:	4464      	add	r4, ip
 8000e82:	3802      	subs	r0, #2
 8000e84:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e88:	1b64      	subs	r4, r4, r5
 8000e8a:	2100      	movs	r1, #0
 8000e8c:	b11e      	cbz	r6, 8000e96 <__udivmoddi4+0xa2>
 8000e8e:	40dc      	lsrs	r4, r3
 8000e90:	2300      	movs	r3, #0
 8000e92:	e9c6 4300 	strd	r4, r3, [r6]
 8000e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d908      	bls.n	8000eb0 <__udivmoddi4+0xbc>
 8000e9e:	2e00      	cmp	r6, #0
 8000ea0:	f000 80ed 	beq.w	800107e <__udivmoddi4+0x28a>
 8000ea4:	2100      	movs	r1, #0
 8000ea6:	e9c6 0500 	strd	r0, r5, [r6]
 8000eaa:	4608      	mov	r0, r1
 8000eac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eb0:	fab3 f183 	clz	r1, r3
 8000eb4:	2900      	cmp	r1, #0
 8000eb6:	d149      	bne.n	8000f4c <__udivmoddi4+0x158>
 8000eb8:	42ab      	cmp	r3, r5
 8000eba:	d302      	bcc.n	8000ec2 <__udivmoddi4+0xce>
 8000ebc:	4282      	cmp	r2, r0
 8000ebe:	f200 80f8 	bhi.w	80010b2 <__udivmoddi4+0x2be>
 8000ec2:	1a84      	subs	r4, r0, r2
 8000ec4:	eb65 0203 	sbc.w	r2, r5, r3
 8000ec8:	2001      	movs	r0, #1
 8000eca:	4617      	mov	r7, r2
 8000ecc:	2e00      	cmp	r6, #0
 8000ece:	d0e2      	beq.n	8000e96 <__udivmoddi4+0xa2>
 8000ed0:	e9c6 4700 	strd	r4, r7, [r6]
 8000ed4:	e7df      	b.n	8000e96 <__udivmoddi4+0xa2>
 8000ed6:	b902      	cbnz	r2, 8000eda <__udivmoddi4+0xe6>
 8000ed8:	deff      	udf	#255	; 0xff
 8000eda:	fab2 f382 	clz	r3, r2
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	f040 8090 	bne.w	8001004 <__udivmoddi4+0x210>
 8000ee4:	1a8a      	subs	r2, r1, r2
 8000ee6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eea:	fa1f fe8c 	uxth.w	lr, ip
 8000eee:	2101      	movs	r1, #1
 8000ef0:	fbb2 f5f7 	udiv	r5, r2, r7
 8000ef4:	fb07 2015 	mls	r0, r7, r5, r2
 8000ef8:	0c22      	lsrs	r2, r4, #16
 8000efa:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000efe:	fb0e f005 	mul.w	r0, lr, r5
 8000f02:	4290      	cmp	r0, r2
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x124>
 8000f06:	eb1c 0202 	adds.w	r2, ip, r2
 8000f0a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f0e:	d202      	bcs.n	8000f16 <__udivmoddi4+0x122>
 8000f10:	4290      	cmp	r0, r2
 8000f12:	f200 80cb 	bhi.w	80010ac <__udivmoddi4+0x2b8>
 8000f16:	4645      	mov	r5, r8
 8000f18:	1a12      	subs	r2, r2, r0
 8000f1a:	b2a4      	uxth	r4, r4
 8000f1c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000f20:	fb07 2210 	mls	r2, r7, r0, r2
 8000f24:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000f28:	fb0e fe00 	mul.w	lr, lr, r0
 8000f2c:	45a6      	cmp	lr, r4
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x14e>
 8000f30:	eb1c 0404 	adds.w	r4, ip, r4
 8000f34:	f100 32ff 	add.w	r2, r0, #4294967295
 8000f38:	d202      	bcs.n	8000f40 <__udivmoddi4+0x14c>
 8000f3a:	45a6      	cmp	lr, r4
 8000f3c:	f200 80bb 	bhi.w	80010b6 <__udivmoddi4+0x2c2>
 8000f40:	4610      	mov	r0, r2
 8000f42:	eba4 040e 	sub.w	r4, r4, lr
 8000f46:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000f4a:	e79f      	b.n	8000e8c <__udivmoddi4+0x98>
 8000f4c:	f1c1 0720 	rsb	r7, r1, #32
 8000f50:	408b      	lsls	r3, r1
 8000f52:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f56:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f5a:	fa05 f401 	lsl.w	r4, r5, r1
 8000f5e:	fa20 f307 	lsr.w	r3, r0, r7
 8000f62:	40fd      	lsrs	r5, r7
 8000f64:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f68:	4323      	orrs	r3, r4
 8000f6a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000f6e:	fa1f fe8c 	uxth.w	lr, ip
 8000f72:	fb09 5518 	mls	r5, r9, r8, r5
 8000f76:	0c1c      	lsrs	r4, r3, #16
 8000f78:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000f7c:	fb08 f50e 	mul.w	r5, r8, lr
 8000f80:	42a5      	cmp	r5, r4
 8000f82:	fa02 f201 	lsl.w	r2, r2, r1
 8000f86:	fa00 f001 	lsl.w	r0, r0, r1
 8000f8a:	d90b      	bls.n	8000fa4 <__udivmoddi4+0x1b0>
 8000f8c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f90:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f94:	f080 8088 	bcs.w	80010a8 <__udivmoddi4+0x2b4>
 8000f98:	42a5      	cmp	r5, r4
 8000f9a:	f240 8085 	bls.w	80010a8 <__udivmoddi4+0x2b4>
 8000f9e:	f1a8 0802 	sub.w	r8, r8, #2
 8000fa2:	4464      	add	r4, ip
 8000fa4:	1b64      	subs	r4, r4, r5
 8000fa6:	b29d      	uxth	r5, r3
 8000fa8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000fac:	fb09 4413 	mls	r4, r9, r3, r4
 8000fb0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000fb4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000fb8:	45a6      	cmp	lr, r4
 8000fba:	d908      	bls.n	8000fce <__udivmoddi4+0x1da>
 8000fbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000fc0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000fc4:	d26c      	bcs.n	80010a0 <__udivmoddi4+0x2ac>
 8000fc6:	45a6      	cmp	lr, r4
 8000fc8:	d96a      	bls.n	80010a0 <__udivmoddi4+0x2ac>
 8000fca:	3b02      	subs	r3, #2
 8000fcc:	4464      	add	r4, ip
 8000fce:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000fd2:	fba3 9502 	umull	r9, r5, r3, r2
 8000fd6:	eba4 040e 	sub.w	r4, r4, lr
 8000fda:	42ac      	cmp	r4, r5
 8000fdc:	46c8      	mov	r8, r9
 8000fde:	46ae      	mov	lr, r5
 8000fe0:	d356      	bcc.n	8001090 <__udivmoddi4+0x29c>
 8000fe2:	d053      	beq.n	800108c <__udivmoddi4+0x298>
 8000fe4:	b156      	cbz	r6, 8000ffc <__udivmoddi4+0x208>
 8000fe6:	ebb0 0208 	subs.w	r2, r0, r8
 8000fea:	eb64 040e 	sbc.w	r4, r4, lr
 8000fee:	fa04 f707 	lsl.w	r7, r4, r7
 8000ff2:	40ca      	lsrs	r2, r1
 8000ff4:	40cc      	lsrs	r4, r1
 8000ff6:	4317      	orrs	r7, r2
 8000ff8:	e9c6 7400 	strd	r7, r4, [r6]
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	2100      	movs	r1, #0
 8001000:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001004:	f1c3 0120 	rsb	r1, r3, #32
 8001008:	fa02 fc03 	lsl.w	ip, r2, r3
 800100c:	fa20 f201 	lsr.w	r2, r0, r1
 8001010:	fa25 f101 	lsr.w	r1, r5, r1
 8001014:	409d      	lsls	r5, r3
 8001016:	432a      	orrs	r2, r5
 8001018:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800101c:	fa1f fe8c 	uxth.w	lr, ip
 8001020:	fbb1 f0f7 	udiv	r0, r1, r7
 8001024:	fb07 1510 	mls	r5, r7, r0, r1
 8001028:	0c11      	lsrs	r1, r2, #16
 800102a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800102e:	fb00 f50e 	mul.w	r5, r0, lr
 8001032:	428d      	cmp	r5, r1
 8001034:	fa04 f403 	lsl.w	r4, r4, r3
 8001038:	d908      	bls.n	800104c <__udivmoddi4+0x258>
 800103a:	eb1c 0101 	adds.w	r1, ip, r1
 800103e:	f100 38ff 	add.w	r8, r0, #4294967295
 8001042:	d22f      	bcs.n	80010a4 <__udivmoddi4+0x2b0>
 8001044:	428d      	cmp	r5, r1
 8001046:	d92d      	bls.n	80010a4 <__udivmoddi4+0x2b0>
 8001048:	3802      	subs	r0, #2
 800104a:	4461      	add	r1, ip
 800104c:	1b49      	subs	r1, r1, r5
 800104e:	b292      	uxth	r2, r2
 8001050:	fbb1 f5f7 	udiv	r5, r1, r7
 8001054:	fb07 1115 	mls	r1, r7, r5, r1
 8001058:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800105c:	fb05 f10e 	mul.w	r1, r5, lr
 8001060:	4291      	cmp	r1, r2
 8001062:	d908      	bls.n	8001076 <__udivmoddi4+0x282>
 8001064:	eb1c 0202 	adds.w	r2, ip, r2
 8001068:	f105 38ff 	add.w	r8, r5, #4294967295
 800106c:	d216      	bcs.n	800109c <__udivmoddi4+0x2a8>
 800106e:	4291      	cmp	r1, r2
 8001070:	d914      	bls.n	800109c <__udivmoddi4+0x2a8>
 8001072:	3d02      	subs	r5, #2
 8001074:	4462      	add	r2, ip
 8001076:	1a52      	subs	r2, r2, r1
 8001078:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800107c:	e738      	b.n	8000ef0 <__udivmoddi4+0xfc>
 800107e:	4631      	mov	r1, r6
 8001080:	4630      	mov	r0, r6
 8001082:	e708      	b.n	8000e96 <__udivmoddi4+0xa2>
 8001084:	4639      	mov	r1, r7
 8001086:	e6e6      	b.n	8000e56 <__udivmoddi4+0x62>
 8001088:	4610      	mov	r0, r2
 800108a:	e6fb      	b.n	8000e84 <__udivmoddi4+0x90>
 800108c:	4548      	cmp	r0, r9
 800108e:	d2a9      	bcs.n	8000fe4 <__udivmoddi4+0x1f0>
 8001090:	ebb9 0802 	subs.w	r8, r9, r2
 8001094:	eb65 0e0c 	sbc.w	lr, r5, ip
 8001098:	3b01      	subs	r3, #1
 800109a:	e7a3      	b.n	8000fe4 <__udivmoddi4+0x1f0>
 800109c:	4645      	mov	r5, r8
 800109e:	e7ea      	b.n	8001076 <__udivmoddi4+0x282>
 80010a0:	462b      	mov	r3, r5
 80010a2:	e794      	b.n	8000fce <__udivmoddi4+0x1da>
 80010a4:	4640      	mov	r0, r8
 80010a6:	e7d1      	b.n	800104c <__udivmoddi4+0x258>
 80010a8:	46d0      	mov	r8, sl
 80010aa:	e77b      	b.n	8000fa4 <__udivmoddi4+0x1b0>
 80010ac:	3d02      	subs	r5, #2
 80010ae:	4462      	add	r2, ip
 80010b0:	e732      	b.n	8000f18 <__udivmoddi4+0x124>
 80010b2:	4608      	mov	r0, r1
 80010b4:	e70a      	b.n	8000ecc <__udivmoddi4+0xd8>
 80010b6:	4464      	add	r4, ip
 80010b8:	3802      	subs	r0, #2
 80010ba:	e742      	b.n	8000f42 <__udivmoddi4+0x14e>

080010bc <__aeabi_idiv0>:
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop

080010c0 <TrimRead>:



// Read the Trimming parameters saved in the NVM ROM of the device
void TrimRead(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b08c      	sub	sp, #48	; 0x30
 80010c4:	af04      	add	r7, sp, #16
	uint8_t trimdata[32];
	// Read NVM from 0x88 to 0xA1
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, 0x88, 1, trimdata, 25, HAL_MAX_DELAY);
 80010c6:	f04f 33ff 	mov.w	r3, #4294967295
 80010ca:	9302      	str	r3, [sp, #8]
 80010cc:	2319      	movs	r3, #25
 80010ce:	9301      	str	r3, [sp, #4]
 80010d0:	463b      	mov	r3, r7
 80010d2:	9300      	str	r3, [sp, #0]
 80010d4:	2301      	movs	r3, #1
 80010d6:	2288      	movs	r2, #136	; 0x88
 80010d8:	21ec      	movs	r1, #236	; 0xec
 80010da:	4857      	ldr	r0, [pc, #348]	; (8001238 <TrimRead+0x178>)
 80010dc:	f006 fe66 	bl	8007dac <HAL_I2C_Mem_Read>

	// Read NVM from 0xE1 to 0xE7
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, 0xE1, 1, (uint8_t *)trimdata+25, 7, HAL_MAX_DELAY);
 80010e0:	463b      	mov	r3, r7
 80010e2:	3319      	adds	r3, #25
 80010e4:	f04f 32ff 	mov.w	r2, #4294967295
 80010e8:	9202      	str	r2, [sp, #8]
 80010ea:	2207      	movs	r2, #7
 80010ec:	9201      	str	r2, [sp, #4]
 80010ee:	9300      	str	r3, [sp, #0]
 80010f0:	2301      	movs	r3, #1
 80010f2:	22e1      	movs	r2, #225	; 0xe1
 80010f4:	21ec      	movs	r1, #236	; 0xec
 80010f6:	4850      	ldr	r0, [pc, #320]	; (8001238 <TrimRead+0x178>)
 80010f8:	f006 fe58 	bl	8007dac <HAL_I2C_Mem_Read>

	// Arrange the data as per the datasheet (page no. 24)
	dig_T1 = (trimdata[1]<<8) | trimdata[0];
 80010fc:	787b      	ldrb	r3, [r7, #1]
 80010fe:	021b      	lsls	r3, r3, #8
 8001100:	b21a      	sxth	r2, r3
 8001102:	783b      	ldrb	r3, [r7, #0]
 8001104:	b21b      	sxth	r3, r3
 8001106:	4313      	orrs	r3, r2
 8001108:	b21b      	sxth	r3, r3
 800110a:	b29a      	uxth	r2, r3
 800110c:	4b4b      	ldr	r3, [pc, #300]	; (800123c <TrimRead+0x17c>)
 800110e:	801a      	strh	r2, [r3, #0]
	dig_T2 = (trimdata[3]<<8) | trimdata[2];
 8001110:	78fb      	ldrb	r3, [r7, #3]
 8001112:	021b      	lsls	r3, r3, #8
 8001114:	b21a      	sxth	r2, r3
 8001116:	78bb      	ldrb	r3, [r7, #2]
 8001118:	b21b      	sxth	r3, r3
 800111a:	4313      	orrs	r3, r2
 800111c:	b21a      	sxth	r2, r3
 800111e:	4b48      	ldr	r3, [pc, #288]	; (8001240 <TrimRead+0x180>)
 8001120:	801a      	strh	r2, [r3, #0]
	dig_T3 = (trimdata[5]<<8) | trimdata[4];
 8001122:	797b      	ldrb	r3, [r7, #5]
 8001124:	021b      	lsls	r3, r3, #8
 8001126:	b21a      	sxth	r2, r3
 8001128:	793b      	ldrb	r3, [r7, #4]
 800112a:	b21b      	sxth	r3, r3
 800112c:	4313      	orrs	r3, r2
 800112e:	b21a      	sxth	r2, r3
 8001130:	4b44      	ldr	r3, [pc, #272]	; (8001244 <TrimRead+0x184>)
 8001132:	801a      	strh	r2, [r3, #0]
	dig_P1 = (trimdata[7]<<8) | trimdata[5];
 8001134:	79fb      	ldrb	r3, [r7, #7]
 8001136:	021b      	lsls	r3, r3, #8
 8001138:	b21a      	sxth	r2, r3
 800113a:	797b      	ldrb	r3, [r7, #5]
 800113c:	b21b      	sxth	r3, r3
 800113e:	4313      	orrs	r3, r2
 8001140:	b21b      	sxth	r3, r3
 8001142:	b29a      	uxth	r2, r3
 8001144:	4b40      	ldr	r3, [pc, #256]	; (8001248 <TrimRead+0x188>)
 8001146:	801a      	strh	r2, [r3, #0]
	dig_P2 = (trimdata[9]<<8) | trimdata[6];
 8001148:	7a7b      	ldrb	r3, [r7, #9]
 800114a:	021b      	lsls	r3, r3, #8
 800114c:	b21a      	sxth	r2, r3
 800114e:	79bb      	ldrb	r3, [r7, #6]
 8001150:	b21b      	sxth	r3, r3
 8001152:	4313      	orrs	r3, r2
 8001154:	b21a      	sxth	r2, r3
 8001156:	4b3d      	ldr	r3, [pc, #244]	; (800124c <TrimRead+0x18c>)
 8001158:	801a      	strh	r2, [r3, #0]
	dig_P3 = (trimdata[11]<<8) | trimdata[10];
 800115a:	7afb      	ldrb	r3, [r7, #11]
 800115c:	021b      	lsls	r3, r3, #8
 800115e:	b21a      	sxth	r2, r3
 8001160:	7abb      	ldrb	r3, [r7, #10]
 8001162:	b21b      	sxth	r3, r3
 8001164:	4313      	orrs	r3, r2
 8001166:	b21a      	sxth	r2, r3
 8001168:	4b39      	ldr	r3, [pc, #228]	; (8001250 <TrimRead+0x190>)
 800116a:	801a      	strh	r2, [r3, #0]
	dig_P4 = (trimdata[13]<<8) | trimdata[12];
 800116c:	7b7b      	ldrb	r3, [r7, #13]
 800116e:	021b      	lsls	r3, r3, #8
 8001170:	b21a      	sxth	r2, r3
 8001172:	7b3b      	ldrb	r3, [r7, #12]
 8001174:	b21b      	sxth	r3, r3
 8001176:	4313      	orrs	r3, r2
 8001178:	b21a      	sxth	r2, r3
 800117a:	4b36      	ldr	r3, [pc, #216]	; (8001254 <TrimRead+0x194>)
 800117c:	801a      	strh	r2, [r3, #0]
	dig_P5 = (trimdata[15]<<8) | trimdata[14];
 800117e:	7bfb      	ldrb	r3, [r7, #15]
 8001180:	021b      	lsls	r3, r3, #8
 8001182:	b21a      	sxth	r2, r3
 8001184:	7bbb      	ldrb	r3, [r7, #14]
 8001186:	b21b      	sxth	r3, r3
 8001188:	4313      	orrs	r3, r2
 800118a:	b21a      	sxth	r2, r3
 800118c:	4b32      	ldr	r3, [pc, #200]	; (8001258 <TrimRead+0x198>)
 800118e:	801a      	strh	r2, [r3, #0]
	dig_P6 = (trimdata[17]<<8) | trimdata[16];
 8001190:	7c7b      	ldrb	r3, [r7, #17]
 8001192:	021b      	lsls	r3, r3, #8
 8001194:	b21a      	sxth	r2, r3
 8001196:	7c3b      	ldrb	r3, [r7, #16]
 8001198:	b21b      	sxth	r3, r3
 800119a:	4313      	orrs	r3, r2
 800119c:	b21a      	sxth	r2, r3
 800119e:	4b2f      	ldr	r3, [pc, #188]	; (800125c <TrimRead+0x19c>)
 80011a0:	801a      	strh	r2, [r3, #0]
	dig_P7 = (trimdata[19]<<8) | trimdata[18];
 80011a2:	7cfb      	ldrb	r3, [r7, #19]
 80011a4:	021b      	lsls	r3, r3, #8
 80011a6:	b21a      	sxth	r2, r3
 80011a8:	7cbb      	ldrb	r3, [r7, #18]
 80011aa:	b21b      	sxth	r3, r3
 80011ac:	4313      	orrs	r3, r2
 80011ae:	b21a      	sxth	r2, r3
 80011b0:	4b2b      	ldr	r3, [pc, #172]	; (8001260 <TrimRead+0x1a0>)
 80011b2:	801a      	strh	r2, [r3, #0]
	dig_P8 = (trimdata[21]<<8) | trimdata[20];
 80011b4:	7d7b      	ldrb	r3, [r7, #21]
 80011b6:	021b      	lsls	r3, r3, #8
 80011b8:	b21a      	sxth	r2, r3
 80011ba:	7d3b      	ldrb	r3, [r7, #20]
 80011bc:	b21b      	sxth	r3, r3
 80011be:	4313      	orrs	r3, r2
 80011c0:	b21a      	sxth	r2, r3
 80011c2:	4b28      	ldr	r3, [pc, #160]	; (8001264 <TrimRead+0x1a4>)
 80011c4:	801a      	strh	r2, [r3, #0]
	dig_P9 = (trimdata[23]<<8) | trimdata[22];
 80011c6:	7dfb      	ldrb	r3, [r7, #23]
 80011c8:	021b      	lsls	r3, r3, #8
 80011ca:	b21a      	sxth	r2, r3
 80011cc:	7dbb      	ldrb	r3, [r7, #22]
 80011ce:	b21b      	sxth	r3, r3
 80011d0:	4313      	orrs	r3, r2
 80011d2:	b21a      	sxth	r2, r3
 80011d4:	4b24      	ldr	r3, [pc, #144]	; (8001268 <TrimRead+0x1a8>)
 80011d6:	801a      	strh	r2, [r3, #0]
	dig_H1 = trimdata[24];
 80011d8:	7e3b      	ldrb	r3, [r7, #24]
 80011da:	b29a      	uxth	r2, r3
 80011dc:	4b23      	ldr	r3, [pc, #140]	; (800126c <TrimRead+0x1ac>)
 80011de:	801a      	strh	r2, [r3, #0]
	dig_H2 = (trimdata[26]<<8) | trimdata[25];
 80011e0:	7ebb      	ldrb	r3, [r7, #26]
 80011e2:	021b      	lsls	r3, r3, #8
 80011e4:	b21a      	sxth	r2, r3
 80011e6:	7e7b      	ldrb	r3, [r7, #25]
 80011e8:	b21b      	sxth	r3, r3
 80011ea:	4313      	orrs	r3, r2
 80011ec:	b21a      	sxth	r2, r3
 80011ee:	4b20      	ldr	r3, [pc, #128]	; (8001270 <TrimRead+0x1b0>)
 80011f0:	801a      	strh	r2, [r3, #0]
	dig_H3 = (trimdata[27]);
 80011f2:	7efb      	ldrb	r3, [r7, #27]
 80011f4:	b29a      	uxth	r2, r3
 80011f6:	4b1f      	ldr	r3, [pc, #124]	; (8001274 <TrimRead+0x1b4>)
 80011f8:	801a      	strh	r2, [r3, #0]
	dig_H4 = (trimdata[28]<<4) | (trimdata[29] & 0x0f);
 80011fa:	7f3b      	ldrb	r3, [r7, #28]
 80011fc:	011b      	lsls	r3, r3, #4
 80011fe:	b21a      	sxth	r2, r3
 8001200:	7f7b      	ldrb	r3, [r7, #29]
 8001202:	b21b      	sxth	r3, r3
 8001204:	f003 030f 	and.w	r3, r3, #15
 8001208:	b21b      	sxth	r3, r3
 800120a:	4313      	orrs	r3, r2
 800120c:	b21a      	sxth	r2, r3
 800120e:	4b1a      	ldr	r3, [pc, #104]	; (8001278 <TrimRead+0x1b8>)
 8001210:	801a      	strh	r2, [r3, #0]
	dig_H5 = (trimdata[30]<<4) | (trimdata[29]>>4);
 8001212:	7fbb      	ldrb	r3, [r7, #30]
 8001214:	011b      	lsls	r3, r3, #4
 8001216:	b21a      	sxth	r2, r3
 8001218:	7f7b      	ldrb	r3, [r7, #29]
 800121a:	091b      	lsrs	r3, r3, #4
 800121c:	b2db      	uxtb	r3, r3
 800121e:	b21b      	sxth	r3, r3
 8001220:	4313      	orrs	r3, r2
 8001222:	b21a      	sxth	r2, r3
 8001224:	4b15      	ldr	r3, [pc, #84]	; (800127c <TrimRead+0x1bc>)
 8001226:	801a      	strh	r2, [r3, #0]
	dig_H6 = (trimdata[31]);
 8001228:	7ffb      	ldrb	r3, [r7, #31]
 800122a:	b21a      	sxth	r2, r3
 800122c:	4b14      	ldr	r3, [pc, #80]	; (8001280 <TrimRead+0x1c0>)
 800122e:	801a      	strh	r2, [r3, #0]
}
 8001230:	bf00      	nop
 8001232:	3720      	adds	r7, #32
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	20000268 	.word	0x20000268
 800123c:	2000023c 	.word	0x2000023c
 8001240:	20000244 	.word	0x20000244
 8001244:	20000246 	.word	0x20000246
 8001248:	2000023e 	.word	0x2000023e
 800124c:	20000248 	.word	0x20000248
 8001250:	2000024a 	.word	0x2000024a
 8001254:	2000024c 	.word	0x2000024c
 8001258:	2000024e 	.word	0x2000024e
 800125c:	20000250 	.word	0x20000250
 8001260:	20000252 	.word	0x20000252
 8001264:	20000254 	.word	0x20000254
 8001268:	20000256 	.word	0x20000256
 800126c:	20000240 	.word	0x20000240
 8001270:	20000258 	.word	0x20000258
 8001274:	20000242 	.word	0x20000242
 8001278:	2000025a 	.word	0x2000025a
 800127c:	2000025c 	.word	0x2000025c
 8001280:	2000025e 	.word	0x2000025e

08001284 <BME280_Config>:
 *         IIR is used to avoid the short term fluctuations
 *         Check datasheet page no 18 and page no 30
 */

int BME280_Config (uint8_t osrs_t, uint8_t osrs_p, uint8_t osrs_h, uint8_t mode, uint8_t t_sb, uint8_t filter)
{
 8001284:	b590      	push	{r4, r7, lr}
 8001286:	b089      	sub	sp, #36	; 0x24
 8001288:	af04      	add	r7, sp, #16
 800128a:	4604      	mov	r4, r0
 800128c:	4608      	mov	r0, r1
 800128e:	4611      	mov	r1, r2
 8001290:	461a      	mov	r2, r3
 8001292:	4623      	mov	r3, r4
 8001294:	71fb      	strb	r3, [r7, #7]
 8001296:	4603      	mov	r3, r0
 8001298:	71bb      	strb	r3, [r7, #6]
 800129a:	460b      	mov	r3, r1
 800129c:	717b      	strb	r3, [r7, #5]
 800129e:	4613      	mov	r3, r2
 80012a0:	713b      	strb	r3, [r7, #4]
	// Read the Trimming parameters
	TrimRead();
 80012a2:	f7ff ff0d 	bl	80010c0 <TrimRead>


	uint8_t datatowrite = 0;
 80012a6:	2300      	movs	r3, #0
 80012a8:	73fb      	strb	r3, [r7, #15]
	uint8_t datacheck = 0;
 80012aa:	2300      	movs	r3, #0
 80012ac:	73bb      	strb	r3, [r7, #14]

	// Reset the device
	datatowrite = 0xB6;  // reset sequence
 80012ae:	23b6      	movs	r3, #182	; 0xb6
 80012b0:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, RESET_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 80012b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012b6:	9302      	str	r3, [sp, #8]
 80012b8:	2301      	movs	r3, #1
 80012ba:	9301      	str	r3, [sp, #4]
 80012bc:	f107 030f 	add.w	r3, r7, #15
 80012c0:	9300      	str	r3, [sp, #0]
 80012c2:	2301      	movs	r3, #1
 80012c4:	22e0      	movs	r2, #224	; 0xe0
 80012c6:	21ec      	movs	r1, #236	; 0xec
 80012c8:	4858      	ldr	r0, [pc, #352]	; (800142c <BME280_Config+0x1a8>)
 80012ca:	f006 fc75 	bl	8007bb8 <HAL_I2C_Mem_Write>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d002      	beq.n	80012da <BME280_Config+0x56>
	{
		return -1;
 80012d4:	f04f 33ff 	mov.w	r3, #4294967295
 80012d8:	e0a3      	b.n	8001422 <BME280_Config+0x19e>
	}

	HAL_Delay (100);
 80012da:	2064      	movs	r0, #100	; 0x64
 80012dc:	f002 ffde 	bl	800429c <HAL_Delay>


	// write the humidity oversampling to 0xF2
	datatowrite = osrs_h;
 80012e0:	797b      	ldrb	r3, [r7, #5]
 80012e2:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CTRL_HUM_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 80012e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012e8:	9302      	str	r3, [sp, #8]
 80012ea:	2301      	movs	r3, #1
 80012ec:	9301      	str	r3, [sp, #4]
 80012ee:	f107 030f 	add.w	r3, r7, #15
 80012f2:	9300      	str	r3, [sp, #0]
 80012f4:	2301      	movs	r3, #1
 80012f6:	22f2      	movs	r2, #242	; 0xf2
 80012f8:	21ec      	movs	r1, #236	; 0xec
 80012fa:	484c      	ldr	r0, [pc, #304]	; (800142c <BME280_Config+0x1a8>)
 80012fc:	f006 fc5c 	bl	8007bb8 <HAL_I2C_Mem_Write>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d002      	beq.n	800130c <BME280_Config+0x88>
	{
		return -1;
 8001306:	f04f 33ff 	mov.w	r3, #4294967295
 800130a:	e08a      	b.n	8001422 <BME280_Config+0x19e>
	}
	HAL_Delay (100);
 800130c:	2064      	movs	r0, #100	; 0x64
 800130e:	f002 ffc5 	bl	800429c <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CTRL_HUM_REG, 1, &datacheck, 1, 1000);
 8001312:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001316:	9302      	str	r3, [sp, #8]
 8001318:	2301      	movs	r3, #1
 800131a:	9301      	str	r3, [sp, #4]
 800131c:	f107 030e 	add.w	r3, r7, #14
 8001320:	9300      	str	r3, [sp, #0]
 8001322:	2301      	movs	r3, #1
 8001324:	22f2      	movs	r2, #242	; 0xf2
 8001326:	21ec      	movs	r1, #236	; 0xec
 8001328:	4840      	ldr	r0, [pc, #256]	; (800142c <BME280_Config+0x1a8>)
 800132a:	f006 fd3f 	bl	8007dac <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 800132e:	7bba      	ldrb	r2, [r7, #14]
 8001330:	7bfb      	ldrb	r3, [r7, #15]
 8001332:	429a      	cmp	r2, r3
 8001334:	d002      	beq.n	800133c <BME280_Config+0xb8>
	{
		return -1;
 8001336:	f04f 33ff 	mov.w	r3, #4294967295
 800133a:	e072      	b.n	8001422 <BME280_Config+0x19e>
	}


	// write the standby time and IIR filter coeff to 0xF5
	datatowrite = (t_sb <<5) |(filter << 2);
 800133c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001340:	015b      	lsls	r3, r3, #5
 8001342:	b25a      	sxtb	r2, r3
 8001344:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001348:	009b      	lsls	r3, r3, #2
 800134a:	b25b      	sxtb	r3, r3
 800134c:	4313      	orrs	r3, r2
 800134e:	b25b      	sxtb	r3, r3
 8001350:	b2db      	uxtb	r3, r3
 8001352:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CONFIG_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 8001354:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001358:	9302      	str	r3, [sp, #8]
 800135a:	2301      	movs	r3, #1
 800135c:	9301      	str	r3, [sp, #4]
 800135e:	f107 030f 	add.w	r3, r7, #15
 8001362:	9300      	str	r3, [sp, #0]
 8001364:	2301      	movs	r3, #1
 8001366:	22f5      	movs	r2, #245	; 0xf5
 8001368:	21ec      	movs	r1, #236	; 0xec
 800136a:	4830      	ldr	r0, [pc, #192]	; (800142c <BME280_Config+0x1a8>)
 800136c:	f006 fc24 	bl	8007bb8 <HAL_I2C_Mem_Write>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d002      	beq.n	800137c <BME280_Config+0xf8>
	{
		return -1;
 8001376:	f04f 33ff 	mov.w	r3, #4294967295
 800137a:	e052      	b.n	8001422 <BME280_Config+0x19e>
	}
	HAL_Delay (100);
 800137c:	2064      	movs	r0, #100	; 0x64
 800137e:	f002 ff8d 	bl	800429c <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CONFIG_REG, 1, &datacheck, 1, 1000);
 8001382:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001386:	9302      	str	r3, [sp, #8]
 8001388:	2301      	movs	r3, #1
 800138a:	9301      	str	r3, [sp, #4]
 800138c:	f107 030e 	add.w	r3, r7, #14
 8001390:	9300      	str	r3, [sp, #0]
 8001392:	2301      	movs	r3, #1
 8001394:	22f5      	movs	r2, #245	; 0xf5
 8001396:	21ec      	movs	r1, #236	; 0xec
 8001398:	4824      	ldr	r0, [pc, #144]	; (800142c <BME280_Config+0x1a8>)
 800139a:	f006 fd07 	bl	8007dac <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 800139e:	7bba      	ldrb	r2, [r7, #14]
 80013a0:	7bfb      	ldrb	r3, [r7, #15]
 80013a2:	429a      	cmp	r2, r3
 80013a4:	d002      	beq.n	80013ac <BME280_Config+0x128>
	{
		return -1;
 80013a6:	f04f 33ff 	mov.w	r3, #4294967295
 80013aa:	e03a      	b.n	8001422 <BME280_Config+0x19e>
	}


	// write the pressure and temp oversampling along with mode to 0xF4
	datatowrite = (osrs_t <<5) |(osrs_p << 2) | mode;
 80013ac:	79fb      	ldrb	r3, [r7, #7]
 80013ae:	015b      	lsls	r3, r3, #5
 80013b0:	b25a      	sxtb	r2, r3
 80013b2:	79bb      	ldrb	r3, [r7, #6]
 80013b4:	009b      	lsls	r3, r3, #2
 80013b6:	b25b      	sxtb	r3, r3
 80013b8:	4313      	orrs	r3, r2
 80013ba:	b25a      	sxtb	r2, r3
 80013bc:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80013c0:	4313      	orrs	r3, r2
 80013c2:	b25b      	sxtb	r3, r3
 80013c4:	b2db      	uxtb	r3, r3
 80013c6:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CTRL_MEAS_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 80013c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013cc:	9302      	str	r3, [sp, #8]
 80013ce:	2301      	movs	r3, #1
 80013d0:	9301      	str	r3, [sp, #4]
 80013d2:	f107 030f 	add.w	r3, r7, #15
 80013d6:	9300      	str	r3, [sp, #0]
 80013d8:	2301      	movs	r3, #1
 80013da:	22f4      	movs	r2, #244	; 0xf4
 80013dc:	21ec      	movs	r1, #236	; 0xec
 80013de:	4813      	ldr	r0, [pc, #76]	; (800142c <BME280_Config+0x1a8>)
 80013e0:	f006 fbea 	bl	8007bb8 <HAL_I2C_Mem_Write>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d002      	beq.n	80013f0 <BME280_Config+0x16c>
	{
		return -1;
 80013ea:	f04f 33ff 	mov.w	r3, #4294967295
 80013ee:	e018      	b.n	8001422 <BME280_Config+0x19e>
	}
	HAL_Delay (100);
 80013f0:	2064      	movs	r0, #100	; 0x64
 80013f2:	f002 ff53 	bl	800429c <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CTRL_MEAS_REG, 1, &datacheck, 1, 1000);
 80013f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013fa:	9302      	str	r3, [sp, #8]
 80013fc:	2301      	movs	r3, #1
 80013fe:	9301      	str	r3, [sp, #4]
 8001400:	f107 030e 	add.w	r3, r7, #14
 8001404:	9300      	str	r3, [sp, #0]
 8001406:	2301      	movs	r3, #1
 8001408:	22f4      	movs	r2, #244	; 0xf4
 800140a:	21ec      	movs	r1, #236	; 0xec
 800140c:	4807      	ldr	r0, [pc, #28]	; (800142c <BME280_Config+0x1a8>)
 800140e:	f006 fccd 	bl	8007dac <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 8001412:	7bba      	ldrb	r2, [r7, #14]
 8001414:	7bfb      	ldrb	r3, [r7, #15]
 8001416:	429a      	cmp	r2, r3
 8001418:	d002      	beq.n	8001420 <BME280_Config+0x19c>
	{
		return -1;
 800141a:	f04f 33ff 	mov.w	r3, #4294967295
 800141e:	e000      	b.n	8001422 <BME280_Config+0x19e>
	}

	return 0;
 8001420:	2300      	movs	r3, #0
}
 8001422:	4618      	mov	r0, r3
 8001424:	3714      	adds	r7, #20
 8001426:	46bd      	mov	sp, r7
 8001428:	bd90      	pop	{r4, r7, pc}
 800142a:	bf00      	nop
 800142c:	20000268 	.word	0x20000268

08001430 <BMEReadRaw>:


int BMEReadRaw(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b086      	sub	sp, #24
 8001434:	af04      	add	r7, sp, #16
	uint8_t RawData[8];

	// Check the chip ID before reading
	HAL_I2C_Mem_Read(&hi2c1, BME280_ADDRESS, ID_REG, 1, &chipID, 1, 1000);
 8001436:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800143a:	9302      	str	r3, [sp, #8]
 800143c:	2301      	movs	r3, #1
 800143e:	9301      	str	r3, [sp, #4]
 8001440:	4b1e      	ldr	r3, [pc, #120]	; (80014bc <BMEReadRaw+0x8c>)
 8001442:	9300      	str	r3, [sp, #0]
 8001444:	2301      	movs	r3, #1
 8001446:	22d0      	movs	r2, #208	; 0xd0
 8001448:	21ec      	movs	r1, #236	; 0xec
 800144a:	481d      	ldr	r0, [pc, #116]	; (80014c0 <BMEReadRaw+0x90>)
 800144c:	f006 fcae 	bl	8007dac <HAL_I2C_Mem_Read>

	if (chipID == 0x60)
 8001450:	4b1a      	ldr	r3, [pc, #104]	; (80014bc <BMEReadRaw+0x8c>)
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	2b60      	cmp	r3, #96	; 0x60
 8001456:	d12a      	bne.n	80014ae <BMEReadRaw+0x7e>
	{
		// Read the Registers 0xF7 to 0xFE
		HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, PRESS_MSB_REG, 1, RawData, 8, HAL_MAX_DELAY);
 8001458:	f04f 33ff 	mov.w	r3, #4294967295
 800145c:	9302      	str	r3, [sp, #8]
 800145e:	2308      	movs	r3, #8
 8001460:	9301      	str	r3, [sp, #4]
 8001462:	463b      	mov	r3, r7
 8001464:	9300      	str	r3, [sp, #0]
 8001466:	2301      	movs	r3, #1
 8001468:	22f7      	movs	r2, #247	; 0xf7
 800146a:	21ec      	movs	r1, #236	; 0xec
 800146c:	4814      	ldr	r0, [pc, #80]	; (80014c0 <BMEReadRaw+0x90>)
 800146e:	f006 fc9d 	bl	8007dac <HAL_I2C_Mem_Read>

		/* Calculate the Raw data for the parameters
		 * Here the Pressure and Temperature are in 20 bit format and humidity in 16 bit format
		 */
		pRaw = (RawData[0]<<12)|(RawData[1]<<4)|(RawData[2]>>4);
 8001472:	783b      	ldrb	r3, [r7, #0]
 8001474:	031a      	lsls	r2, r3, #12
 8001476:	787b      	ldrb	r3, [r7, #1]
 8001478:	011b      	lsls	r3, r3, #4
 800147a:	4313      	orrs	r3, r2
 800147c:	78ba      	ldrb	r2, [r7, #2]
 800147e:	0912      	lsrs	r2, r2, #4
 8001480:	b2d2      	uxtb	r2, r2
 8001482:	4313      	orrs	r3, r2
 8001484:	4a0f      	ldr	r2, [pc, #60]	; (80014c4 <BMEReadRaw+0x94>)
 8001486:	6013      	str	r3, [r2, #0]
		tRaw = (RawData[3]<<12)|(RawData[4]<<4)|(RawData[5]>>4);
 8001488:	78fb      	ldrb	r3, [r7, #3]
 800148a:	031a      	lsls	r2, r3, #12
 800148c:	793b      	ldrb	r3, [r7, #4]
 800148e:	011b      	lsls	r3, r3, #4
 8001490:	4313      	orrs	r3, r2
 8001492:	797a      	ldrb	r2, [r7, #5]
 8001494:	0912      	lsrs	r2, r2, #4
 8001496:	b2d2      	uxtb	r2, r2
 8001498:	4313      	orrs	r3, r2
 800149a:	4a0b      	ldr	r2, [pc, #44]	; (80014c8 <BMEReadRaw+0x98>)
 800149c:	6013      	str	r3, [r2, #0]
		hRaw = (RawData[6]<<8)|(RawData[7]);
 800149e:	79bb      	ldrb	r3, [r7, #6]
 80014a0:	021b      	lsls	r3, r3, #8
 80014a2:	79fa      	ldrb	r2, [r7, #7]
 80014a4:	4313      	orrs	r3, r2
 80014a6:	4a09      	ldr	r2, [pc, #36]	; (80014cc <BMEReadRaw+0x9c>)
 80014a8:	6013      	str	r3, [r2, #0]

		return 0;
 80014aa:	2300      	movs	r3, #0
 80014ac:	e001      	b.n	80014b2 <BMEReadRaw+0x82>
	}

	else return -1;
 80014ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	3708      	adds	r7, #8
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	2000022c 	.word	0x2000022c
 80014c0:	20000268 	.word	0x20000268
 80014c4:	20000234 	.word	0x20000234
 80014c8:	20000230 	.word	0x20000230
 80014cc:	20000238 	.word	0x20000238

080014d0 <BME280_compensate_T_int32>:
/* Returns temperature in DegC, resolution is 0.01 DegC. Output value of “5123” equals 51.23 DegC.
   t_fine carries fine temperature as global value
*/
int32_t t_fine;
int32_t BME280_compensate_T_int32(int32_t adc_T)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b087      	sub	sp, #28
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
	int32_t var1, var2, T;
	var1 = ((((adc_T>>3) - ((int32_t)dig_T1<<1))) * ((int32_t)dig_T2)) >> 11;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	10da      	asrs	r2, r3, #3
 80014dc:	4b19      	ldr	r3, [pc, #100]	; (8001544 <BME280_compensate_T_int32+0x74>)
 80014de:	881b      	ldrh	r3, [r3, #0]
 80014e0:	005b      	lsls	r3, r3, #1
 80014e2:	1ad3      	subs	r3, r2, r3
 80014e4:	4a18      	ldr	r2, [pc, #96]	; (8001548 <BME280_compensate_T_int32+0x78>)
 80014e6:	f9b2 2000 	ldrsh.w	r2, [r2]
 80014ea:	fb02 f303 	mul.w	r3, r2, r3
 80014ee:	12db      	asrs	r3, r3, #11
 80014f0:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_T>>4) - ((int32_t)dig_T1)) * ((adc_T>>4) - ((int32_t)dig_T1)))>> 12) *((int32_t)dig_T3)) >> 14;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	111b      	asrs	r3, r3, #4
 80014f6:	4a13      	ldr	r2, [pc, #76]	; (8001544 <BME280_compensate_T_int32+0x74>)
 80014f8:	8812      	ldrh	r2, [r2, #0]
 80014fa:	1a9b      	subs	r3, r3, r2
 80014fc:	687a      	ldr	r2, [r7, #4]
 80014fe:	1112      	asrs	r2, r2, #4
 8001500:	4910      	ldr	r1, [pc, #64]	; (8001544 <BME280_compensate_T_int32+0x74>)
 8001502:	8809      	ldrh	r1, [r1, #0]
 8001504:	1a52      	subs	r2, r2, r1
 8001506:	fb02 f303 	mul.w	r3, r2, r3
 800150a:	131b      	asrs	r3, r3, #12
 800150c:	4a0f      	ldr	r2, [pc, #60]	; (800154c <BME280_compensate_T_int32+0x7c>)
 800150e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001512:	fb02 f303 	mul.w	r3, r2, r3
 8001516:	139b      	asrs	r3, r3, #14
 8001518:	613b      	str	r3, [r7, #16]
	t_fine = var1 + var2;
 800151a:	697a      	ldr	r2, [r7, #20]
 800151c:	693b      	ldr	r3, [r7, #16]
 800151e:	4413      	add	r3, r2
 8001520:	4a0b      	ldr	r2, [pc, #44]	; (8001550 <BME280_compensate_T_int32+0x80>)
 8001522:	6013      	str	r3, [r2, #0]
	T = (t_fine * 5 + 128) >> 8;
 8001524:	4b0a      	ldr	r3, [pc, #40]	; (8001550 <BME280_compensate_T_int32+0x80>)
 8001526:	681a      	ldr	r2, [r3, #0]
 8001528:	4613      	mov	r3, r2
 800152a:	009b      	lsls	r3, r3, #2
 800152c:	4413      	add	r3, r2
 800152e:	3380      	adds	r3, #128	; 0x80
 8001530:	121b      	asrs	r3, r3, #8
 8001532:	60fb      	str	r3, [r7, #12]
	return T;
 8001534:	68fb      	ldr	r3, [r7, #12]
}
 8001536:	4618      	mov	r0, r3
 8001538:	371c      	adds	r7, #28
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr
 8001542:	bf00      	nop
 8001544:	2000023c 	.word	0x2000023c
 8001548:	20000244 	.word	0x20000244
 800154c:	20000246 	.word	0x20000246
 8001550:	20000260 	.word	0x20000260

08001554 <BME280_compensate_P_int64>:
#if SUPPORT_64BIT
/* Returns pressure in Pa as unsigned 32 bit integer in Q24.8 format (24 integer bits and 8 fractional bits).
   Output value of “24674867” represents 24674867/256 = 96386.2 Pa = 963.862 hPa
*/
uint32_t BME280_compensate_P_int64(int32_t adc_P)
{
 8001554:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001558:	b0ca      	sub	sp, #296	; 0x128
 800155a:	af00      	add	r7, sp, #0
 800155c:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
	int64_t var1, var2, p;
	var1 = ((int64_t)t_fine) - 128000;
 8001560:	4baf      	ldr	r3, [pc, #700]	; (8001820 <BME280_compensate_P_int64+0x2cc>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	17da      	asrs	r2, r3, #31
 8001566:	461c      	mov	r4, r3
 8001568:	4615      	mov	r5, r2
 800156a:	f5b4 3afa 	subs.w	sl, r4, #128000	; 0x1f400
 800156e:	f145 3bff 	adc.w	fp, r5, #4294967295
 8001572:	e9c7 ab48 	strd	sl, fp, [r7, #288]	; 0x120
	var2 = var1 * var1 * (int64_t)dig_P6;
 8001576:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800157a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800157e:	fb03 f102 	mul.w	r1, r3, r2
 8001582:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8001586:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800158a:	fb02 f303 	mul.w	r3, r2, r3
 800158e:	18ca      	adds	r2, r1, r3
 8001590:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001594:	fba3 8903 	umull	r8, r9, r3, r3
 8001598:	eb02 0309 	add.w	r3, r2, r9
 800159c:	4699      	mov	r9, r3
 800159e:	4ba1      	ldr	r3, [pc, #644]	; (8001824 <BME280_compensate_P_int64+0x2d0>)
 80015a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015a4:	b21b      	sxth	r3, r3
 80015a6:	17da      	asrs	r2, r3, #31
 80015a8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80015ac:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80015b0:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 80015b4:	4603      	mov	r3, r0
 80015b6:	fb03 f209 	mul.w	r2, r3, r9
 80015ba:	460b      	mov	r3, r1
 80015bc:	fb08 f303 	mul.w	r3, r8, r3
 80015c0:	4413      	add	r3, r2
 80015c2:	4602      	mov	r2, r0
 80015c4:	fba8 1202 	umull	r1, r2, r8, r2
 80015c8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80015cc:	460a      	mov	r2, r1
 80015ce:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 80015d2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80015d6:	4413      	add	r3, r2
 80015d8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80015dc:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 80015e0:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 80015e4:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var2 = var2 + ((var1*(int64_t)dig_P5)<<17);
 80015e8:	4b8f      	ldr	r3, [pc, #572]	; (8001828 <BME280_compensate_P_int64+0x2d4>)
 80015ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015ee:	b21b      	sxth	r3, r3
 80015f0:	17da      	asrs	r2, r3, #31
 80015f2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80015f6:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 80015fa:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80015fe:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 8001602:	462a      	mov	r2, r5
 8001604:	fb02 f203 	mul.w	r2, r2, r3
 8001608:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800160c:	4621      	mov	r1, r4
 800160e:	fb01 f303 	mul.w	r3, r1, r3
 8001612:	441a      	add	r2, r3
 8001614:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001618:	4621      	mov	r1, r4
 800161a:	fba3 1301 	umull	r1, r3, r3, r1
 800161e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001622:	460b      	mov	r3, r1
 8001624:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8001628:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800162c:	18d3      	adds	r3, r2, r3
 800162e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001632:	f04f 0000 	mov.w	r0, #0
 8001636:	f04f 0100 	mov.w	r1, #0
 800163a:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 800163e:	462b      	mov	r3, r5
 8001640:	0459      	lsls	r1, r3, #17
 8001642:	4623      	mov	r3, r4
 8001644:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8001648:	4623      	mov	r3, r4
 800164a:	0458      	lsls	r0, r3, #17
 800164c:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001650:	1814      	adds	r4, r2, r0
 8001652:	643c      	str	r4, [r7, #64]	; 0x40
 8001654:	414b      	adcs	r3, r1
 8001656:	647b      	str	r3, [r7, #68]	; 0x44
 8001658:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 800165c:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var2 = var2 + (((int64_t)dig_P4)<<35);
 8001660:	4b72      	ldr	r3, [pc, #456]	; (800182c <BME280_compensate_P_int64+0x2d8>)
 8001662:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001666:	b21b      	sxth	r3, r3
 8001668:	17da      	asrs	r2, r3, #31
 800166a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800166e:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8001672:	f04f 0000 	mov.w	r0, #0
 8001676:	f04f 0100 	mov.w	r1, #0
 800167a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800167e:	00d9      	lsls	r1, r3, #3
 8001680:	2000      	movs	r0, #0
 8001682:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001686:	1814      	adds	r4, r2, r0
 8001688:	63bc      	str	r4, [r7, #56]	; 0x38
 800168a:	414b      	adcs	r3, r1
 800168c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800168e:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8001692:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var1 = ((var1 * var1 * (int64_t)dig_P3)>>8) + ((var1 * (int64_t)dig_P2)<<12);
 8001696:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800169a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800169e:	fb03 f102 	mul.w	r1, r3, r2
 80016a2:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80016a6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80016aa:	fb02 f303 	mul.w	r3, r2, r3
 80016ae:	18ca      	adds	r2, r1, r3
 80016b0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80016b4:	fba3 1303 	umull	r1, r3, r3, r3
 80016b8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80016bc:	460b      	mov	r3, r1
 80016be:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80016c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80016c6:	18d3      	adds	r3, r2, r3
 80016c8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80016cc:	4b58      	ldr	r3, [pc, #352]	; (8001830 <BME280_compensate_P_int64+0x2dc>)
 80016ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016d2:	b21b      	sxth	r3, r3
 80016d4:	17da      	asrs	r2, r3, #31
 80016d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80016da:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80016de:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	; 0xf8
 80016e2:	462b      	mov	r3, r5
 80016e4:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80016e8:	4642      	mov	r2, r8
 80016ea:	fb02 f203 	mul.w	r2, r2, r3
 80016ee:	464b      	mov	r3, r9
 80016f0:	4621      	mov	r1, r4
 80016f2:	fb01 f303 	mul.w	r3, r1, r3
 80016f6:	4413      	add	r3, r2
 80016f8:	4622      	mov	r2, r4
 80016fa:	4641      	mov	r1, r8
 80016fc:	fba2 1201 	umull	r1, r2, r2, r1
 8001700:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8001704:	460a      	mov	r2, r1
 8001706:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 800170a:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 800170e:	4413      	add	r3, r2
 8001710:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8001714:	f04f 0000 	mov.w	r0, #0
 8001718:	f04f 0100 	mov.w	r1, #0
 800171c:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 8001720:	4623      	mov	r3, r4
 8001722:	0a18      	lsrs	r0, r3, #8
 8001724:	462b      	mov	r3, r5
 8001726:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 800172a:	462b      	mov	r3, r5
 800172c:	1219      	asrs	r1, r3, #8
 800172e:	4b41      	ldr	r3, [pc, #260]	; (8001834 <BME280_compensate_P_int64+0x2e0>)
 8001730:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001734:	b21b      	sxth	r3, r3
 8001736:	17da      	asrs	r2, r3, #31
 8001738:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800173c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001740:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001744:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	; 0x98
 8001748:	464a      	mov	r2, r9
 800174a:	fb02 f203 	mul.w	r2, r2, r3
 800174e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001752:	4644      	mov	r4, r8
 8001754:	fb04 f303 	mul.w	r3, r4, r3
 8001758:	441a      	add	r2, r3
 800175a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800175e:	4644      	mov	r4, r8
 8001760:	fba3 4304 	umull	r4, r3, r3, r4
 8001764:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001768:	4623      	mov	r3, r4
 800176a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800176e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001772:	18d3      	adds	r3, r2, r3
 8001774:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001778:	f04f 0200 	mov.w	r2, #0
 800177c:	f04f 0300 	mov.w	r3, #0
 8001780:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8001784:	464c      	mov	r4, r9
 8001786:	0323      	lsls	r3, r4, #12
 8001788:	4644      	mov	r4, r8
 800178a:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 800178e:	4644      	mov	r4, r8
 8001790:	0322      	lsls	r2, r4, #12
 8001792:	1884      	adds	r4, r0, r2
 8001794:	633c      	str	r4, [r7, #48]	; 0x30
 8001796:	eb41 0303 	adc.w	r3, r1, r3
 800179a:	637b      	str	r3, [r7, #52]	; 0x34
 800179c:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 80017a0:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var1 = (((((int64_t)1)<<47)+var1))*((int64_t)dig_P1)>>33;
 80017a4:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80017a8:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 80017ac:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 80017b0:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 80017b4:	4b20      	ldr	r3, [pc, #128]	; (8001838 <BME280_compensate_P_int64+0x2e4>)
 80017b6:	881b      	ldrh	r3, [r3, #0]
 80017b8:	b29b      	uxth	r3, r3
 80017ba:	2200      	movs	r2, #0
 80017bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80017c0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80017c4:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80017c8:	462b      	mov	r3, r5
 80017ca:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80017ce:	4642      	mov	r2, r8
 80017d0:	fb02 f203 	mul.w	r2, r2, r3
 80017d4:	464b      	mov	r3, r9
 80017d6:	4621      	mov	r1, r4
 80017d8:	fb01 f303 	mul.w	r3, r1, r3
 80017dc:	4413      	add	r3, r2
 80017de:	4622      	mov	r2, r4
 80017e0:	4641      	mov	r1, r8
 80017e2:	fba2 1201 	umull	r1, r2, r2, r1
 80017e6:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 80017ea:	460a      	mov	r2, r1
 80017ec:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 80017f0:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80017f4:	4413      	add	r3, r2
 80017f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80017fa:	f04f 0200 	mov.w	r2, #0
 80017fe:	f04f 0300 	mov.w	r3, #0
 8001802:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 8001806:	4629      	mov	r1, r5
 8001808:	104a      	asrs	r2, r1, #1
 800180a:	4629      	mov	r1, r5
 800180c:	17cb      	asrs	r3, r1, #31
 800180e:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	if (var1 == 0)
 8001812:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001816:	4313      	orrs	r3, r2
 8001818:	d110      	bne.n	800183c <BME280_compensate_P_int64+0x2e8>
	{
		return 0; // avoid exception caused by division by zero
 800181a:	2300      	movs	r3, #0
 800181c:	e154      	b.n	8001ac8 <BME280_compensate_P_int64+0x574>
 800181e:	bf00      	nop
 8001820:	20000260 	.word	0x20000260
 8001824:	20000250 	.word	0x20000250
 8001828:	2000024e 	.word	0x2000024e
 800182c:	2000024c 	.word	0x2000024c
 8001830:	2000024a 	.word	0x2000024a
 8001834:	20000248 	.word	0x20000248
 8001838:	2000023e 	.word	0x2000023e
	}
	p = 1048576-adc_P;
 800183c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001840:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 8001844:	17da      	asrs	r2, r3, #31
 8001846:	62bb      	str	r3, [r7, #40]	; 0x28
 8001848:	62fa      	str	r2, [r7, #44]	; 0x2c
 800184a:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800184e:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	p = (((p<<31)-var2)*3125)/var1;
 8001852:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001856:	105b      	asrs	r3, r3, #1
 8001858:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800185c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001860:	07db      	lsls	r3, r3, #31
 8001862:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001866:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800186a:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 800186e:	4621      	mov	r1, r4
 8001870:	1a89      	subs	r1, r1, r2
 8001872:	67b9      	str	r1, [r7, #120]	; 0x78
 8001874:	4629      	mov	r1, r5
 8001876:	eb61 0303 	sbc.w	r3, r1, r3
 800187a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800187c:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001880:	4622      	mov	r2, r4
 8001882:	462b      	mov	r3, r5
 8001884:	1891      	adds	r1, r2, r2
 8001886:	6239      	str	r1, [r7, #32]
 8001888:	415b      	adcs	r3, r3
 800188a:	627b      	str	r3, [r7, #36]	; 0x24
 800188c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001890:	4621      	mov	r1, r4
 8001892:	1851      	adds	r1, r2, r1
 8001894:	61b9      	str	r1, [r7, #24]
 8001896:	4629      	mov	r1, r5
 8001898:	414b      	adcs	r3, r1
 800189a:	61fb      	str	r3, [r7, #28]
 800189c:	f04f 0200 	mov.w	r2, #0
 80018a0:	f04f 0300 	mov.w	r3, #0
 80018a4:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 80018a8:	4649      	mov	r1, r9
 80018aa:	018b      	lsls	r3, r1, #6
 80018ac:	4641      	mov	r1, r8
 80018ae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80018b2:	4641      	mov	r1, r8
 80018b4:	018a      	lsls	r2, r1, #6
 80018b6:	4641      	mov	r1, r8
 80018b8:	1889      	adds	r1, r1, r2
 80018ba:	6139      	str	r1, [r7, #16]
 80018bc:	4649      	mov	r1, r9
 80018be:	eb43 0101 	adc.w	r1, r3, r1
 80018c2:	6179      	str	r1, [r7, #20]
 80018c4:	f04f 0200 	mov.w	r2, #0
 80018c8:	f04f 0300 	mov.w	r3, #0
 80018cc:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80018d0:	4649      	mov	r1, r9
 80018d2:	008b      	lsls	r3, r1, #2
 80018d4:	4641      	mov	r1, r8
 80018d6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80018da:	4641      	mov	r1, r8
 80018dc:	008a      	lsls	r2, r1, #2
 80018de:	4610      	mov	r0, r2
 80018e0:	4619      	mov	r1, r3
 80018e2:	4603      	mov	r3, r0
 80018e4:	4622      	mov	r2, r4
 80018e6:	189b      	adds	r3, r3, r2
 80018e8:	60bb      	str	r3, [r7, #8]
 80018ea:	460b      	mov	r3, r1
 80018ec:	462a      	mov	r2, r5
 80018ee:	eb42 0303 	adc.w	r3, r2, r3
 80018f2:	60fb      	str	r3, [r7, #12]
 80018f4:	f04f 0200 	mov.w	r2, #0
 80018f8:	f04f 0300 	mov.w	r3, #0
 80018fc:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8001900:	4649      	mov	r1, r9
 8001902:	008b      	lsls	r3, r1, #2
 8001904:	4641      	mov	r1, r8
 8001906:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800190a:	4641      	mov	r1, r8
 800190c:	008a      	lsls	r2, r1, #2
 800190e:	4610      	mov	r0, r2
 8001910:	4619      	mov	r1, r3
 8001912:	4603      	mov	r3, r0
 8001914:	4622      	mov	r2, r4
 8001916:	189b      	adds	r3, r3, r2
 8001918:	673b      	str	r3, [r7, #112]	; 0x70
 800191a:	462b      	mov	r3, r5
 800191c:	460a      	mov	r2, r1
 800191e:	eb42 0303 	adc.w	r3, r2, r3
 8001922:	677b      	str	r3, [r7, #116]	; 0x74
 8001924:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001928:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 800192c:	f7ff f9c4 	bl	8000cb8 <__aeabi_ldivmod>
 8001930:	4602      	mov	r2, r0
 8001932:	460b      	mov	r3, r1
 8001934:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
	var1 = (((int64_t)dig_P9) * (p>>13) * (p>>13)) >> 25;
 8001938:	4b66      	ldr	r3, [pc, #408]	; (8001ad4 <BME280_compensate_P_int64+0x580>)
 800193a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800193e:	b21b      	sxth	r3, r3
 8001940:	17da      	asrs	r2, r3, #31
 8001942:	66bb      	str	r3, [r7, #104]	; 0x68
 8001944:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001946:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800194a:	f04f 0000 	mov.w	r0, #0
 800194e:	f04f 0100 	mov.w	r1, #0
 8001952:	0b50      	lsrs	r0, r2, #13
 8001954:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001958:	1359      	asrs	r1, r3, #13
 800195a:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 800195e:	462b      	mov	r3, r5
 8001960:	fb00 f203 	mul.w	r2, r0, r3
 8001964:	4623      	mov	r3, r4
 8001966:	fb03 f301 	mul.w	r3, r3, r1
 800196a:	4413      	add	r3, r2
 800196c:	4622      	mov	r2, r4
 800196e:	fba2 1200 	umull	r1, r2, r2, r0
 8001972:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8001976:	460a      	mov	r2, r1
 8001978:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 800197c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8001980:	4413      	add	r3, r2
 8001982:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8001986:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800198a:	f04f 0000 	mov.w	r0, #0
 800198e:	f04f 0100 	mov.w	r1, #0
 8001992:	0b50      	lsrs	r0, r2, #13
 8001994:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001998:	1359      	asrs	r1, r3, #13
 800199a:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 800199e:	462b      	mov	r3, r5
 80019a0:	fb00 f203 	mul.w	r2, r0, r3
 80019a4:	4623      	mov	r3, r4
 80019a6:	fb03 f301 	mul.w	r3, r3, r1
 80019aa:	4413      	add	r3, r2
 80019ac:	4622      	mov	r2, r4
 80019ae:	fba2 1200 	umull	r1, r2, r2, r0
 80019b2:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80019b6:	460a      	mov	r2, r1
 80019b8:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 80019bc:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80019c0:	4413      	add	r3, r2
 80019c2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80019c6:	f04f 0200 	mov.w	r2, #0
 80019ca:	f04f 0300 	mov.w	r3, #0
 80019ce:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 80019d2:	4621      	mov	r1, r4
 80019d4:	0e4a      	lsrs	r2, r1, #25
 80019d6:	4629      	mov	r1, r5
 80019d8:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 80019dc:	4629      	mov	r1, r5
 80019de:	164b      	asrs	r3, r1, #25
 80019e0:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	var2 = (((int64_t)dig_P8) * p) >> 19;
 80019e4:	4b3c      	ldr	r3, [pc, #240]	; (8001ad8 <BME280_compensate_P_int64+0x584>)
 80019e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019ea:	b21b      	sxth	r3, r3
 80019ec:	17da      	asrs	r2, r3, #31
 80019ee:	663b      	str	r3, [r7, #96]	; 0x60
 80019f0:	667a      	str	r2, [r7, #100]	; 0x64
 80019f2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80019f6:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80019fa:	462a      	mov	r2, r5
 80019fc:	fb02 f203 	mul.w	r2, r2, r3
 8001a00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001a04:	4621      	mov	r1, r4
 8001a06:	fb01 f303 	mul.w	r3, r1, r3
 8001a0a:	4413      	add	r3, r2
 8001a0c:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8001a10:	4621      	mov	r1, r4
 8001a12:	fba2 1201 	umull	r1, r2, r2, r1
 8001a16:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8001a1a:	460a      	mov	r2, r1
 8001a1c:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 8001a20:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8001a24:	4413      	add	r3, r2
 8001a26:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001a2a:	f04f 0200 	mov.w	r2, #0
 8001a2e:	f04f 0300 	mov.w	r3, #0
 8001a32:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 8001a36:	4621      	mov	r1, r4
 8001a38:	0cca      	lsrs	r2, r1, #19
 8001a3a:	4629      	mov	r1, r5
 8001a3c:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001a40:	4629      	mov	r1, r5
 8001a42:	14cb      	asrs	r3, r1, #19
 8001a44:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
	p = ((p + var1 + var2) >> 8) + (((int64_t)dig_P7)<<4);
 8001a48:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8001a4c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001a50:	1884      	adds	r4, r0, r2
 8001a52:	65bc      	str	r4, [r7, #88]	; 0x58
 8001a54:	eb41 0303 	adc.w	r3, r1, r3
 8001a58:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001a5a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001a5e:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8001a62:	4621      	mov	r1, r4
 8001a64:	1889      	adds	r1, r1, r2
 8001a66:	6539      	str	r1, [r7, #80]	; 0x50
 8001a68:	4629      	mov	r1, r5
 8001a6a:	eb43 0101 	adc.w	r1, r3, r1
 8001a6e:	6579      	str	r1, [r7, #84]	; 0x54
 8001a70:	f04f 0000 	mov.w	r0, #0
 8001a74:	f04f 0100 	mov.w	r1, #0
 8001a78:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8001a7c:	4623      	mov	r3, r4
 8001a7e:	0a18      	lsrs	r0, r3, #8
 8001a80:	462b      	mov	r3, r5
 8001a82:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001a86:	462b      	mov	r3, r5
 8001a88:	1219      	asrs	r1, r3, #8
 8001a8a:	4b14      	ldr	r3, [pc, #80]	; (8001adc <BME280_compensate_P_int64+0x588>)
 8001a8c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a90:	b21b      	sxth	r3, r3
 8001a92:	17da      	asrs	r2, r3, #31
 8001a94:	64bb      	str	r3, [r7, #72]	; 0x48
 8001a96:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001a98:	f04f 0200 	mov.w	r2, #0
 8001a9c:	f04f 0300 	mov.w	r3, #0
 8001aa0:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	; 0x48
 8001aa4:	464c      	mov	r4, r9
 8001aa6:	0123      	lsls	r3, r4, #4
 8001aa8:	4644      	mov	r4, r8
 8001aaa:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001aae:	4644      	mov	r4, r8
 8001ab0:	0122      	lsls	r2, r4, #4
 8001ab2:	1884      	adds	r4, r0, r2
 8001ab4:	603c      	str	r4, [r7, #0]
 8001ab6:	eb41 0303 	adc.w	r3, r1, r3
 8001aba:	607b      	str	r3, [r7, #4]
 8001abc:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001ac0:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	return (uint32_t)p;
 8001ac4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001ad4:	20000256 	.word	0x20000256
 8001ad8:	20000254 	.word	0x20000254
 8001adc:	20000252 	.word	0x20000252

08001ae0 <bme280_compensate_H_int32>:

/* Returns humidity in %RH as unsigned 32 bit integer in Q22.10 format (22 integer and 10 fractional bits).
   Output value of “47445” represents 47445/1024 = 46.333 %RH
*/
uint32_t bme280_compensate_H_int32(int32_t adc_H)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b085      	sub	sp, #20
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
	int32_t v_x1_u32r;
	v_x1_u32r = (t_fine - ((int32_t)76800));
 8001ae8:	4b2c      	ldr	r3, [pc, #176]	; (8001b9c <bme280_compensate_H_int32+0xbc>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 8001af0:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (((((adc_H << 14) - (((int32_t)dig_H4) << 20) - (((int32_t)dig_H5) *\
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	039a      	lsls	r2, r3, #14
 8001af6:	4b2a      	ldr	r3, [pc, #168]	; (8001ba0 <bme280_compensate_H_int32+0xc0>)
 8001af8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001afc:	051b      	lsls	r3, r3, #20
 8001afe:	1ad2      	subs	r2, r2, r3
 8001b00:	4b28      	ldr	r3, [pc, #160]	; (8001ba4 <bme280_compensate_H_int32+0xc4>)
 8001b02:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b06:	4619      	mov	r1, r3
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	fb01 f303 	mul.w	r3, r1, r3
 8001b0e:	1ad3      	subs	r3, r2, r3
			v_x1_u32r)) + ((int32_t)16384)) >> 15) * (((((((v_x1_u32r *\
 8001b10:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001b14:	13db      	asrs	r3, r3, #15
					((int32_t)dig_H6)) >> 10) * (((v_x1_u32r * ((int32_t)dig_H3)) >> 11) +\
 8001b16:	4a24      	ldr	r2, [pc, #144]	; (8001ba8 <bme280_compensate_H_int32+0xc8>)
 8001b18:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001b1c:	4611      	mov	r1, r2
			v_x1_u32r)) + ((int32_t)16384)) >> 15) * (((((((v_x1_u32r *\
 8001b1e:	68fa      	ldr	r2, [r7, #12]
 8001b20:	fb01 f202 	mul.w	r2, r1, r2
					((int32_t)dig_H6)) >> 10) * (((v_x1_u32r * ((int32_t)dig_H3)) >> 11) +\
 8001b24:	1292      	asrs	r2, r2, #10
 8001b26:	4921      	ldr	r1, [pc, #132]	; (8001bac <bme280_compensate_H_int32+0xcc>)
 8001b28:	8809      	ldrh	r1, [r1, #0]
 8001b2a:	4608      	mov	r0, r1
 8001b2c:	68f9      	ldr	r1, [r7, #12]
 8001b2e:	fb00 f101 	mul.w	r1, r0, r1
 8001b32:	12c9      	asrs	r1, r1, #11
 8001b34:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
 8001b38:	fb01 f202 	mul.w	r2, r1, r2
							((int32_t)32768))) >> 10) + ((int32_t)2097152)) * ((int32_t)dig_H2) +\
 8001b3c:	1292      	asrs	r2, r2, #10
 8001b3e:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8001b42:	491b      	ldr	r1, [pc, #108]	; (8001bb0 <bme280_compensate_H_int32+0xd0>)
 8001b44:	f9b1 1000 	ldrsh.w	r1, [r1]
 8001b48:	fb01 f202 	mul.w	r2, r1, r2
 8001b4c:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
					8192) >> 14));
 8001b50:	1392      	asrs	r2, r2, #14
	v_x1_u32r = (((((adc_H << 14) - (((int32_t)dig_H4) << 20) - (((int32_t)dig_H5) *\
 8001b52:	fb02 f303 	mul.w	r3, r2, r3
 8001b56:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	13db      	asrs	r3, r3, #15
 8001b5c:	68fa      	ldr	r2, [r7, #12]
 8001b5e:	13d2      	asrs	r2, r2, #15
 8001b60:	fb02 f303 	mul.w	r3, r2, r3
 8001b64:	11db      	asrs	r3, r3, #7
			((int32_t)dig_H1)) >> 4));
 8001b66:	4a13      	ldr	r2, [pc, #76]	; (8001bb4 <bme280_compensate_H_int32+0xd4>)
 8001b68:	8812      	ldrh	r2, [r2, #0]
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 8001b6a:	fb02 f303 	mul.w	r3, r2, r3
			((int32_t)dig_H1)) >> 4));
 8001b6e:	111b      	asrs	r3, r3, #4
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 8001b70:	68fa      	ldr	r2, [r7, #12]
 8001b72:	1ad3      	subs	r3, r2, r3
 8001b74:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r < 0 ? 0 : v_x1_u32r);
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001b7c:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r);
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 8001b84:	bfa8      	it	ge
 8001b86:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 8001b8a:	60fb      	str	r3, [r7, #12]
	return (uint32_t)(v_x1_u32r>>12);
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	131b      	asrs	r3, r3, #12
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	3714      	adds	r7, #20
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr
 8001b9c:	20000260 	.word	0x20000260
 8001ba0:	2000025a 	.word	0x2000025a
 8001ba4:	2000025c 	.word	0x2000025c
 8001ba8:	2000025e 	.word	0x2000025e
 8001bac:	20000242 	.word	0x20000242
 8001bb0:	20000258 	.word	0x20000258
 8001bb4:	20000240 	.word	0x20000240

08001bb8 <BME280_Measure>:

/* measure the temp, pressure and humidity
 * the values will be stored in the parameters passed to the function
 */
void BME280_Measure (void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	af00      	add	r7, sp, #0
	if (BMEReadRaw() == 0)
 8001bbc:	f7ff fc38 	bl	8001430 <BMEReadRaw>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d163      	bne.n	8001c8e <BME280_Measure+0xd6>
	{
		  if (tRaw == 0x800000) Temperature = 0; // value in case temp measurement was disabled
 8001bc6:	4b39      	ldr	r3, [pc, #228]	; (8001cac <BME280_Measure+0xf4>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001bce:	d104      	bne.n	8001bda <BME280_Measure+0x22>
 8001bd0:	4b37      	ldr	r3, [pc, #220]	; (8001cb0 <BME280_Measure+0xf8>)
 8001bd2:	f04f 0200 	mov.w	r2, #0
 8001bd6:	601a      	str	r2, [r3, #0]
 8001bd8:	e016      	b.n	8001c08 <BME280_Measure+0x50>
		  else
		  {
			  Temperature = (BME280_compensate_T_int32 (tRaw))/100.0;  // as per datasheet, the temp is x100
 8001bda:	4b34      	ldr	r3, [pc, #208]	; (8001cac <BME280_Measure+0xf4>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4618      	mov	r0, r3
 8001be0:	f7ff fc76 	bl	80014d0 <BME280_compensate_T_int32>
 8001be4:	4603      	mov	r3, r0
 8001be6:	4618      	mov	r0, r3
 8001be8:	f7fe fcb4 	bl	8000554 <__aeabi_i2d>
 8001bec:	f04f 0200 	mov.w	r2, #0
 8001bf0:	4b30      	ldr	r3, [pc, #192]	; (8001cb4 <BME280_Measure+0xfc>)
 8001bf2:	f7fe fe43 	bl	800087c <__aeabi_ddiv>
 8001bf6:	4602      	mov	r2, r0
 8001bf8:	460b      	mov	r3, r1
 8001bfa:	4610      	mov	r0, r2
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	f7ff f80b 	bl	8000c18 <__aeabi_d2f>
 8001c02:	4603      	mov	r3, r0
 8001c04:	4a2a      	ldr	r2, [pc, #168]	; (8001cb0 <BME280_Measure+0xf8>)
 8001c06:	6013      	str	r3, [r2, #0]
		  }

		  if (pRaw == 0x800000) Pressure = 0; // value in case temp measurement was disabled
 8001c08:	4b2b      	ldr	r3, [pc, #172]	; (8001cb8 <BME280_Measure+0x100>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001c10:	d104      	bne.n	8001c1c <BME280_Measure+0x64>
 8001c12:	4b2a      	ldr	r3, [pc, #168]	; (8001cbc <BME280_Measure+0x104>)
 8001c14:	f04f 0200 	mov.w	r2, #0
 8001c18:	601a      	str	r2, [r3, #0]
 8001c1a:	e016      	b.n	8001c4a <BME280_Measure+0x92>
		  else
		  {
#if SUPPORT_64BIT
			  Pressure = (BME280_compensate_P_int64 (pRaw))/256.0;  // as per datasheet, the pressure is x256
 8001c1c:	4b26      	ldr	r3, [pc, #152]	; (8001cb8 <BME280_Measure+0x100>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4618      	mov	r0, r3
 8001c22:	f7ff fc97 	bl	8001554 <BME280_compensate_P_int64>
 8001c26:	4603      	mov	r3, r0
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f7fe fc83 	bl	8000534 <__aeabi_ui2d>
 8001c2e:	f04f 0200 	mov.w	r2, #0
 8001c32:	4b23      	ldr	r3, [pc, #140]	; (8001cc0 <BME280_Measure+0x108>)
 8001c34:	f7fe fe22 	bl	800087c <__aeabi_ddiv>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	460b      	mov	r3, r1
 8001c3c:	4610      	mov	r0, r2
 8001c3e:	4619      	mov	r1, r3
 8001c40:	f7fe ffea 	bl	8000c18 <__aeabi_d2f>
 8001c44:	4603      	mov	r3, r0
 8001c46:	4a1d      	ldr	r2, [pc, #116]	; (8001cbc <BME280_Measure+0x104>)
 8001c48:	6013      	str	r3, [r2, #0]
			  Pressure = (BME280_compensate_P_int32 (pRaw));  // as per datasheet, the pressure is Pa

#endif
		  }

		  if (hRaw == 0x8000) Humidity = 0; // value in case temp measurement was disabled
 8001c4a:	4b1e      	ldr	r3, [pc, #120]	; (8001cc4 <BME280_Measure+0x10c>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c52:	d104      	bne.n	8001c5e <BME280_Measure+0xa6>
 8001c54:	4b1c      	ldr	r3, [pc, #112]	; (8001cc8 <BME280_Measure+0x110>)
 8001c56:	f04f 0200 	mov.w	r2, #0
 8001c5a:	601a      	str	r2, [r3, #0]
	// if the device is detached
	else
	{
		Temperature = Pressure = Humidity = 0;
	}
}
 8001c5c:	e023      	b.n	8001ca6 <BME280_Measure+0xee>
			  Humidity = (bme280_compensate_H_int32 (hRaw))/1024.0;  // as per datasheet, the temp is x1024
 8001c5e:	4b19      	ldr	r3, [pc, #100]	; (8001cc4 <BME280_Measure+0x10c>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4618      	mov	r0, r3
 8001c64:	f7ff ff3c 	bl	8001ae0 <bme280_compensate_H_int32>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f7fe fc62 	bl	8000534 <__aeabi_ui2d>
 8001c70:	f04f 0200 	mov.w	r2, #0
 8001c74:	4b15      	ldr	r3, [pc, #84]	; (8001ccc <BME280_Measure+0x114>)
 8001c76:	f7fe fe01 	bl	800087c <__aeabi_ddiv>
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	460b      	mov	r3, r1
 8001c7e:	4610      	mov	r0, r2
 8001c80:	4619      	mov	r1, r3
 8001c82:	f7fe ffc9 	bl	8000c18 <__aeabi_d2f>
 8001c86:	4603      	mov	r3, r0
 8001c88:	4a0f      	ldr	r2, [pc, #60]	; (8001cc8 <BME280_Measure+0x110>)
 8001c8a:	6013      	str	r3, [r2, #0]
}
 8001c8c:	e00b      	b.n	8001ca6 <BME280_Measure+0xee>
		Temperature = Pressure = Humidity = 0;
 8001c8e:	4b0e      	ldr	r3, [pc, #56]	; (8001cc8 <BME280_Measure+0x110>)
 8001c90:	f04f 0200 	mov.w	r2, #0
 8001c94:	601a      	str	r2, [r3, #0]
 8001c96:	4b0c      	ldr	r3, [pc, #48]	; (8001cc8 <BME280_Measure+0x110>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a08      	ldr	r2, [pc, #32]	; (8001cbc <BME280_Measure+0x104>)
 8001c9c:	6013      	str	r3, [r2, #0]
 8001c9e:	4b07      	ldr	r3, [pc, #28]	; (8001cbc <BME280_Measure+0x104>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a03      	ldr	r2, [pc, #12]	; (8001cb0 <BME280_Measure+0xf8>)
 8001ca4:	6013      	str	r3, [r2, #0]
}
 8001ca6:	bf00      	nop
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	20000230 	.word	0x20000230
 8001cb0:	200005e8 	.word	0x200005e8
 8001cb4:	40590000 	.word	0x40590000
 8001cb8:	20000234 	.word	0x20000234
 8001cbc:	200005e4 	.word	0x200005e4
 8001cc0:	40700000 	.word	0x40700000
 8001cc4:	20000238 	.word	0x20000238
 8001cc8:	200005ec 	.word	0x200005ec
 8001ccc:	40900000 	.word	0x40900000

08001cd0 <bno055_setPage>:
uint16_t angularRateScale = 16;
uint16_t eulerScale = 16;
uint16_t magScale = 16;
uint16_t quaScale = (1<<14);    // 2^14

void bno055_setPage(uint8_t page) { bno055_writeData(BNO055_PAGE_ID, page); }
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b082      	sub	sp, #8
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	71fb      	strb	r3, [r7, #7]
 8001cda:	79fb      	ldrb	r3, [r7, #7]
 8001cdc:	4619      	mov	r1, r3
 8001cde:	2007      	movs	r0, #7
 8001ce0:	f000 ff6e 	bl	8002bc0 <bno055_writeData>
 8001ce4:	bf00      	nop
 8001ce6:	3708      	adds	r7, #8
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}

08001cec <bno055_setOperationMode>:
  bno055_opmode_t mode;
  bno055_readData(BNO055_OPR_MODE, &mode, 1);
  return mode;
}

void bno055_setOperationMode(bno055_opmode_t mode) {
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b082      	sub	sp, #8
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	71fb      	strb	r3, [r7, #7]
  bno055_writeData(BNO055_OPR_MODE, mode);
 8001cf6:	79fb      	ldrb	r3, [r7, #7]
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	203d      	movs	r0, #61	; 0x3d
 8001cfc:	f000 ff60 	bl	8002bc0 <bno055_writeData>
  if (mode == BNO055_OPERATION_MODE_CONFIG) {
 8001d00:	79fb      	ldrb	r3, [r7, #7]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d103      	bne.n	8001d0e <bno055_setOperationMode+0x22>
    bno055_delay(19);
 8001d06:	2013      	movs	r0, #19
 8001d08:	f000 ff4e 	bl	8002ba8 <bno055_delay>
  } else {
    bno055_delay(7);
  }
}
 8001d0c:	e002      	b.n	8001d14 <bno055_setOperationMode+0x28>
    bno055_delay(7);
 8001d0e:	2007      	movs	r0, #7
 8001d10:	f000 ff4a 	bl	8002ba8 <bno055_delay>
}
 8001d14:	bf00      	nop
 8001d16:	3708      	adds	r7, #8
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}

08001d1c <bno055_setOperationModeConfig>:

void bno055_setOperationModeConfig() {
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_CONFIG);
 8001d20:	2000      	movs	r0, #0
 8001d22:	f7ff ffe3 	bl	8001cec <bno055_setOperationMode>
}
 8001d26:	bf00      	nop
 8001d28:	bd80      	pop	{r7, pc}

08001d2a <bno055_setOperationModeNDOF>:

void bno055_setOperationModeNDOF() {
 8001d2a:	b580      	push	{r7, lr}
 8001d2c:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF);
 8001d2e:	200c      	movs	r0, #12
 8001d30:	f7ff ffdc 	bl	8001cec <bno055_setOperationMode>
}
 8001d34:	bf00      	nop
 8001d36:	bd80      	pop	{r7, pc}

08001d38 <bno055_reset>:
}

void bno055_enableExternalCrystal() { bno055_setExternalCrystalUse(true); }
void bno055_disableExternalCrystal() { bno055_setExternalCrystalUse(false); }

void bno055_reset() {
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	af00      	add	r7, sp, #0
  bno055_writeData(BNO055_SYS_TRIGGER, 0x20);
 8001d3c:	2120      	movs	r1, #32
 8001d3e:	203f      	movs	r0, #63	; 0x3f
 8001d40:	f000 ff3e 	bl	8002bc0 <bno055_writeData>
  bno055_delay(700);
 8001d44:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8001d48:	f000 ff2e 	bl	8002ba8 <bno055_delay>
}
 8001d4c:	bf00      	nop
 8001d4e:	bd80      	pop	{r7, pc}

08001d50 <bno055_setup>:
  uint8_t t;
  bno055_readData(BNO055_TEMP, &t, 1);
  return t;
}

void bno055_setup() {
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b082      	sub	sp, #8
 8001d54:	af00      	add	r7, sp, #0
  bno055_reset();
 8001d56:	f7ff ffef 	bl	8001d38 <bno055_reset>

  uint8_t id = 0;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	71fb      	strb	r3, [r7, #7]
  bno055_readData(BNO055_CHIP_ID, &id, 1);
 8001d5e:	1dfb      	adds	r3, r7, #7
 8001d60:	2201      	movs	r2, #1
 8001d62:	4619      	mov	r1, r3
 8001d64:	2000      	movs	r0, #0
 8001d66:	f001 f817 	bl	8002d98 <bno055_readData>
  if (id != BNO055_ID) {
 8001d6a:	79fb      	ldrb	r3, [r7, #7]
 8001d6c:	2ba0      	cmp	r3, #160	; 0xa0
 8001d6e:	d004      	beq.n	8001d7a <bno055_setup+0x2a>
    printf("Can't find BNO055, id: 0x%02x. Please check your wiring.\r\n", id);
 8001d70:	79fb      	ldrb	r3, [r7, #7]
 8001d72:	4619      	mov	r1, r3
 8001d74:	4809      	ldr	r0, [pc, #36]	; (8001d9c <bno055_setup+0x4c>)
 8001d76:	f00e fbf1 	bl	801055c <iprintf>
  }
  bno055_setPage(0);
 8001d7a:	2000      	movs	r0, #0
 8001d7c:	f7ff ffa8 	bl	8001cd0 <bno055_setPage>
  bno055_writeData(BNO055_SYS_TRIGGER, 0x0);
 8001d80:	2100      	movs	r1, #0
 8001d82:	203f      	movs	r0, #63	; 0x3f
 8001d84:	f000 ff1c 	bl	8002bc0 <bno055_writeData>

  // Select BNO055 config mode
  bno055_setOperationModeConfig();
 8001d88:	f7ff ffc8 	bl	8001d1c <bno055_setOperationModeConfig>
  bno055_delay(10);
 8001d8c:	200a      	movs	r0, #10
 8001d8e:	f000 ff0b 	bl	8002ba8 <bno055_delay>
}
 8001d92:	bf00      	nop
 8001d94:	3708      	adds	r7, #8
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	080131f0 	.word	0x080131f0

08001da0 <bno055_getVector>:
  }

  bno055_setOperationMode(operationMode);
}

bno055_vector_t bno055_getVector(uint8_t vec) {
 8001da0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001da4:	b09e      	sub	sp, #120	; 0x78
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	4603      	mov	r3, r0
 8001daa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  bno055_setPage(0);
 8001dae:	2000      	movs	r0, #0
 8001db0:	f7ff ff8e 	bl	8001cd0 <bno055_setPage>
  uint8_t buffer[8];    // Quaternion need 8 bytes

  if (vec == BNO055_VECTOR_QUATERNION)
 8001db4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001db8:	2b20      	cmp	r3, #32
 8001dba:	d108      	bne.n	8001dce <bno055_getVector+0x2e>
    bno055_readData(vec, buffer, 8);
 8001dbc:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8001dc0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001dc4:	2208      	movs	r2, #8
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f000 ffe6 	bl	8002d98 <bno055_readData>
 8001dcc:	e007      	b.n	8001dde <bno055_getVector+0x3e>
  else
    bno055_readData(vec, buffer, 6);
 8001dce:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8001dd2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001dd6:	2206      	movs	r2, #6
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f000 ffdd 	bl	8002d98 <bno055_readData>

  double scale = 1;
 8001dde:	f04f 0200 	mov.w	r2, #0
 8001de2:	4b8b      	ldr	r3, [pc, #556]	; (8002010 <bno055_getVector+0x270>)
 8001de4:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70

  if (vec == BNO055_VECTOR_MAGNETOMETER) {
 8001de8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001dec:	2b0e      	cmp	r3, #14
 8001dee:	d109      	bne.n	8001e04 <bno055_getVector+0x64>
    scale = magScale;
 8001df0:	4b88      	ldr	r3, [pc, #544]	; (8002014 <bno055_getVector+0x274>)
 8001df2:	881b      	ldrh	r3, [r3, #0]
 8001df4:	4618      	mov	r0, r3
 8001df6:	f7fe fb9d 	bl	8000534 <__aeabi_ui2d>
 8001dfa:	4602      	mov	r2, r0
 8001dfc:	460b      	mov	r3, r1
 8001dfe:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 8001e02:	e03e      	b.n	8001e82 <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_ACCELEROMETER ||
 8001e04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001e08:	2b08      	cmp	r3, #8
 8001e0a:	d007      	beq.n	8001e1c <bno055_getVector+0x7c>
 8001e0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001e10:	2b28      	cmp	r3, #40	; 0x28
 8001e12:	d003      	beq.n	8001e1c <bno055_getVector+0x7c>
           vec == BNO055_VECTOR_LINEARACCEL || vec == BNO055_VECTOR_GRAVITY) {
 8001e14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001e18:	2b2e      	cmp	r3, #46	; 0x2e
 8001e1a:	d109      	bne.n	8001e30 <bno055_getVector+0x90>
    scale = accelScale;
 8001e1c:	4b7e      	ldr	r3, [pc, #504]	; (8002018 <bno055_getVector+0x278>)
 8001e1e:	881b      	ldrh	r3, [r3, #0]
 8001e20:	4618      	mov	r0, r3
 8001e22:	f7fe fb87 	bl	8000534 <__aeabi_ui2d>
 8001e26:	4602      	mov	r2, r0
 8001e28:	460b      	mov	r3, r1
 8001e2a:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 8001e2e:	e028      	b.n	8001e82 <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_GYROSCOPE) {
 8001e30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001e34:	2b14      	cmp	r3, #20
 8001e36:	d109      	bne.n	8001e4c <bno055_getVector+0xac>
    scale = angularRateScale;
 8001e38:	4b78      	ldr	r3, [pc, #480]	; (800201c <bno055_getVector+0x27c>)
 8001e3a:	881b      	ldrh	r3, [r3, #0]
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f7fe fb79 	bl	8000534 <__aeabi_ui2d>
 8001e42:	4602      	mov	r2, r0
 8001e44:	460b      	mov	r3, r1
 8001e46:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 8001e4a:	e01a      	b.n	8001e82 <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_EULER) {
 8001e4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001e50:	2b1a      	cmp	r3, #26
 8001e52:	d109      	bne.n	8001e68 <bno055_getVector+0xc8>
    scale = eulerScale;
 8001e54:	4b72      	ldr	r3, [pc, #456]	; (8002020 <bno055_getVector+0x280>)
 8001e56:	881b      	ldrh	r3, [r3, #0]
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f7fe fb6b 	bl	8000534 <__aeabi_ui2d>
 8001e5e:	4602      	mov	r2, r0
 8001e60:	460b      	mov	r3, r1
 8001e62:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 8001e66:	e00c      	b.n	8001e82 <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_QUATERNION) {
 8001e68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001e6c:	2b20      	cmp	r3, #32
 8001e6e:	d108      	bne.n	8001e82 <bno055_getVector+0xe2>
    scale = quaScale;
 8001e70:	4b6c      	ldr	r3, [pc, #432]	; (8002024 <bno055_getVector+0x284>)
 8001e72:	881b      	ldrh	r3, [r3, #0]
 8001e74:	4618      	mov	r0, r3
 8001e76:	f7fe fb5d 	bl	8000534 <__aeabi_ui2d>
 8001e7a:	4602      	mov	r2, r0
 8001e7c:	460b      	mov	r3, r1
 8001e7e:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
  }

  bno055_vector_t xyz = {.w = 0, .x = 0, .y = 0, .z = 0};
 8001e82:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e86:	2220      	movs	r2, #32
 8001e88:	2100      	movs	r1, #0
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f00e fcac 	bl	80107e8 <memset>
  if (vec == BNO055_VECTOR_QUATERNION) {
 8001e90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001e94:	2b20      	cmp	r3, #32
 8001e96:	d150      	bne.n	8001f3a <bno055_getVector+0x19a>
    xyz.w = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 8001e98:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8001e9c:	021b      	lsls	r3, r3, #8
 8001e9e:	b21a      	sxth	r2, r3
 8001ea0:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001ea4:	b21b      	sxth	r3, r3
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	b21b      	sxth	r3, r3
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f7fe fb52 	bl	8000554 <__aeabi_i2d>
 8001eb0:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001eb4:	f7fe fce2 	bl	800087c <__aeabi_ddiv>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	460b      	mov	r3, r1
 8001ebc:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    xyz.x = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 8001ec0:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8001ec4:	021b      	lsls	r3, r3, #8
 8001ec6:	b21a      	sxth	r2, r3
 8001ec8:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8001ecc:	b21b      	sxth	r3, r3
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	b21b      	sxth	r3, r3
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f7fe fb3e 	bl	8000554 <__aeabi_i2d>
 8001ed8:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001edc:	f7fe fcce 	bl	800087c <__aeabi_ddiv>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	460b      	mov	r3, r1
 8001ee4:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    xyz.y = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 8001ee8:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001eec:	021b      	lsls	r3, r3, #8
 8001eee:	b21a      	sxth	r2, r3
 8001ef0:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8001ef4:	b21b      	sxth	r3, r3
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	b21b      	sxth	r3, r3
 8001efa:	4618      	mov	r0, r3
 8001efc:	f7fe fb2a 	bl	8000554 <__aeabi_i2d>
 8001f00:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001f04:	f7fe fcba 	bl	800087c <__aeabi_ddiv>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	460b      	mov	r3, r1
 8001f0c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    xyz.z = (int16_t)((buffer[7] << 8) | buffer[6]) / scale;
 8001f10:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001f14:	021b      	lsls	r3, r3, #8
 8001f16:	b21a      	sxth	r2, r3
 8001f18:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8001f1c:	b21b      	sxth	r3, r3
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	b21b      	sxth	r3, r3
 8001f22:	4618      	mov	r0, r3
 8001f24:	f7fe fb16 	bl	8000554 <__aeabi_i2d>
 8001f28:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001f2c:	f7fe fca6 	bl	800087c <__aeabi_ddiv>
 8001f30:	4602      	mov	r2, r0
 8001f32:	460b      	mov	r3, r1
 8001f34:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 8001f38:	e03b      	b.n	8001fb2 <bno055_getVector+0x212>
  } else {
    xyz.x = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 8001f3a:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8001f3e:	021b      	lsls	r3, r3, #8
 8001f40:	b21a      	sxth	r2, r3
 8001f42:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001f46:	b21b      	sxth	r3, r3
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	b21b      	sxth	r3, r3
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f7fe fb01 	bl	8000554 <__aeabi_i2d>
 8001f52:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001f56:	f7fe fc91 	bl	800087c <__aeabi_ddiv>
 8001f5a:	4602      	mov	r2, r0
 8001f5c:	460b      	mov	r3, r1
 8001f5e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    xyz.y = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 8001f62:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8001f66:	021b      	lsls	r3, r3, #8
 8001f68:	b21a      	sxth	r2, r3
 8001f6a:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8001f6e:	b21b      	sxth	r3, r3
 8001f70:	4313      	orrs	r3, r2
 8001f72:	b21b      	sxth	r3, r3
 8001f74:	4618      	mov	r0, r3
 8001f76:	f7fe faed 	bl	8000554 <__aeabi_i2d>
 8001f7a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001f7e:	f7fe fc7d 	bl	800087c <__aeabi_ddiv>
 8001f82:	4602      	mov	r2, r0
 8001f84:	460b      	mov	r3, r1
 8001f86:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    xyz.z = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 8001f8a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001f8e:	021b      	lsls	r3, r3, #8
 8001f90:	b21a      	sxth	r2, r3
 8001f92:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8001f96:	b21b      	sxth	r3, r3
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	b21b      	sxth	r3, r3
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f7fe fad9 	bl	8000554 <__aeabi_i2d>
 8001fa2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001fa6:	f7fe fc69 	bl	800087c <__aeabi_ddiv>
 8001faa:	4602      	mov	r2, r0
 8001fac:	460b      	mov	r3, r1
 8001fae:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  }

  return xyz;
 8001fb2:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8001fb6:	f107 0528 	add.w	r5, r7, #40	; 0x28
 8001fba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001fbc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001fbe:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001fc2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001fc6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8001fca:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8001fce:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001fd2:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8001fd6:	ec49 8b14 	vmov	d4, r8, r9
 8001fda:	ec45 4b15 	vmov	d5, r4, r5
 8001fde:	ec41 0b16 	vmov	d6, r0, r1
 8001fe2:	ec43 2b17 	vmov	d7, r2, r3
}
 8001fe6:	eeb0 0a44 	vmov.f32	s0, s8
 8001fea:	eef0 0a64 	vmov.f32	s1, s9
 8001fee:	eeb0 1a45 	vmov.f32	s2, s10
 8001ff2:	eef0 1a65 	vmov.f32	s3, s11
 8001ff6:	eeb0 2a46 	vmov.f32	s4, s12
 8001ffa:	eef0 2a66 	vmov.f32	s5, s13
 8001ffe:	eeb0 3a47 	vmov.f32	s6, s14
 8002002:	eef0 3a67 	vmov.f32	s7, s15
 8002006:	3778      	adds	r7, #120	; 0x78
 8002008:	46bd      	mov	sp, r7
 800200a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800200e:	bf00      	nop
 8002010:	3ff00000 	.word	0x3ff00000
 8002014:	20000006 	.word	0x20000006
 8002018:	20000000 	.word	0x20000000
 800201c:	20000002 	.word	0x20000002
 8002020:	20000004 	.word	0x20000004
 8002024:	20000008 	.word	0x20000008

08002028 <bno055_getVectorEuler>:
  return bno055_getVector(BNO055_VECTOR_MAGNETOMETER);
}
bno055_vector_t bno055_getVectorGyroscope() {
  return bno055_getVector(BNO055_VECTOR_GYROSCOPE);
}
bno055_vector_t bno055_getVectorEuler() {
 8002028:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800202c:	b090      	sub	sp, #64	; 0x40
 800202e:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_EULER);
 8002030:	201a      	movs	r0, #26
 8002032:	f7ff feb5 	bl	8001da0 <bno055_getVector>
 8002036:	eeb0 4a40 	vmov.f32	s8, s0
 800203a:	eef0 4a60 	vmov.f32	s9, s1
 800203e:	eeb0 5a41 	vmov.f32	s10, s2
 8002042:	eef0 5a61 	vmov.f32	s11, s3
 8002046:	eeb0 6a42 	vmov.f32	s12, s4
 800204a:	eef0 6a62 	vmov.f32	s13, s5
 800204e:	eeb0 7a43 	vmov.f32	s14, s6
 8002052:	eef0 7a63 	vmov.f32	s15, s7
 8002056:	ed87 4b08 	vstr	d4, [r7, #32]
 800205a:	ed87 5b0a 	vstr	d5, [r7, #40]	; 0x28
 800205e:	ed87 6b0c 	vstr	d6, [r7, #48]	; 0x30
 8002062:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
 8002066:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800206a:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 800206e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002072:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002076:	ec49 8b14 	vmov	d4, r8, r9
 800207a:	ec45 4b15 	vmov	d5, r4, r5
 800207e:	ec41 0b16 	vmov	d6, r0, r1
 8002082:	ec43 2b17 	vmov	d7, r2, r3
}
 8002086:	eeb0 0a44 	vmov.f32	s0, s8
 800208a:	eef0 0a64 	vmov.f32	s1, s9
 800208e:	eeb0 1a45 	vmov.f32	s2, s10
 8002092:	eef0 1a65 	vmov.f32	s3, s11
 8002096:	eeb0 2a46 	vmov.f32	s4, s12
 800209a:	eef0 2a66 	vmov.f32	s5, s13
 800209e:	eeb0 3a47 	vmov.f32	s6, s14
 80020a2:	eef0 3a67 	vmov.f32	s7, s15
 80020a6:	3740      	adds	r7, #64	; 0x40
 80020a8:	46bd      	mov	sp, r7
 80020aa:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

080020ae <prv_parse_number>:
 * \param[in]       gh: GPS handle
 * \param[in]       t: Text to parse. Set to `NULL` to parse current GPS term
 * \return          Parsed integer
 */
static int32_t
prv_parse_number(lwgps_t* gh, const char* t) {
 80020ae:	b480      	push	{r7}
 80020b0:	b085      	sub	sp, #20
 80020b2:	af00      	add	r7, sp, #0
 80020b4:	6078      	str	r0, [r7, #4]
 80020b6:	6039      	str	r1, [r7, #0]
    int32_t res = 0;
 80020b8:	2300      	movs	r3, #0
 80020ba:	60fb      	str	r3, [r7, #12]
    uint8_t minus;

    if (t == NULL) {
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d106      	bne.n	80020d0 <prv_parse_number+0x22>
        t = gh->p.term_str;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	3371      	adds	r3, #113	; 0x71
 80020c6:	603b      	str	r3, [r7, #0]
    }
    for (; t != NULL && *t == ' '; ++t) {}      /* Strip leading spaces */
 80020c8:	e002      	b.n	80020d0 <prv_parse_number+0x22>
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	3301      	adds	r3, #1
 80020ce:	603b      	str	r3, [r7, #0]
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d003      	beq.n	80020de <prv_parse_number+0x30>
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	781b      	ldrb	r3, [r3, #0]
 80020da:	2b20      	cmp	r3, #32
 80020dc:	d0f5      	beq.n	80020ca <prv_parse_number+0x1c>

    minus = (*t == '-' ? (++t, 1) : 0);
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	781b      	ldrb	r3, [r3, #0]
 80020e2:	2b2d      	cmp	r3, #45	; 0x2d
 80020e4:	d104      	bne.n	80020f0 <prv_parse_number+0x42>
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	3301      	adds	r3, #1
 80020ea:	603b      	str	r3, [r7, #0]
 80020ec:	2301      	movs	r3, #1
 80020ee:	e000      	b.n	80020f2 <prv_parse_number+0x44>
 80020f0:	2300      	movs	r3, #0
 80020f2:	72fb      	strb	r3, [r7, #11]
    for (; t != NULL && CIN(*t); ++t) {
 80020f4:	e00d      	b.n	8002112 <prv_parse_number+0x64>
        res = 10 * res + CTN(*t);
 80020f6:	68fa      	ldr	r2, [r7, #12]
 80020f8:	4613      	mov	r3, r2
 80020fa:	009b      	lsls	r3, r3, #2
 80020fc:	4413      	add	r3, r2
 80020fe:	005b      	lsls	r3, r3, #1
 8002100:	461a      	mov	r2, r3
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	781b      	ldrb	r3, [r3, #0]
 8002106:	3b30      	subs	r3, #48	; 0x30
 8002108:	4413      	add	r3, r2
 800210a:	60fb      	str	r3, [r7, #12]
    for (; t != NULL && CIN(*t); ++t) {
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	3301      	adds	r3, #1
 8002110:	603b      	str	r3, [r7, #0]
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d007      	beq.n	8002128 <prv_parse_number+0x7a>
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	2b2f      	cmp	r3, #47	; 0x2f
 800211e:	d903      	bls.n	8002128 <prv_parse_number+0x7a>
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	781b      	ldrb	r3, [r3, #0]
 8002124:	2b39      	cmp	r3, #57	; 0x39
 8002126:	d9e6      	bls.n	80020f6 <prv_parse_number+0x48>
    }
    return minus ? -res : res;
 8002128:	7afb      	ldrb	r3, [r7, #11]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d002      	beq.n	8002134 <prv_parse_number+0x86>
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	425b      	negs	r3, r3
 8002132:	e000      	b.n	8002136 <prv_parse_number+0x88>
 8002134:	68fb      	ldr	r3, [r7, #12]
}
 8002136:	4618      	mov	r0, r3
 8002138:	3714      	adds	r7, #20
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr

08002142 <prv_parse_float_number>:
 * \param[in]       gh: GPS handle
 * \param[in]       t: Text to parse. Set to `NULL` to parse current GPS term
 * \return          Parsed double in \ref lwgps_float_t format
 */
static lwgps_float_t
prv_parse_float_number(lwgps_t* gh, const char* t) {
 8002142:	b580      	push	{r7, lr}
 8002144:	b084      	sub	sp, #16
 8002146:	af00      	add	r7, sp, #0
 8002148:	6078      	str	r0, [r7, #4]
 800214a:	6039      	str	r1, [r7, #0]
    lwgps_float_t res;

    if (t == NULL) {
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d106      	bne.n	8002160 <prv_parse_float_number+0x1e>
        t = gh->p.term_str;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	3371      	adds	r3, #113	; 0x71
 8002156:	603b      	str	r3, [r7, #0]
    }
    for (; t != NULL && *t == ' '; ++t) {}      /* Strip leading spaces */
 8002158:	e002      	b.n	8002160 <prv_parse_float_number+0x1e>
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	3301      	adds	r3, #1
 800215e:	603b      	str	r3, [r7, #0]
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d003      	beq.n	800216e <prv_parse_float_number+0x2c>
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	781b      	ldrb	r3, [r3, #0]
 800216a:	2b20      	cmp	r3, #32
 800216c:	d0f5      	beq.n	800215a <prv_parse_float_number+0x18>

#if LWGPS_CFG_DOUBLE
    res = strtod(t, NULL);                      /* Parse string to double */
 800216e:	2100      	movs	r1, #0
 8002170:	6838      	ldr	r0, [r7, #0]
 8002172:	f00e f925 	bl	80103c0 <strtod>
 8002176:	ed87 0b02 	vstr	d0, [r7, #8]
#else /* LWGPS_CFG_DOUBLE */
    res = strtof(t, NULL);                      /* Parse string to float */
#endif /* !LWGPS_CFG_DOUBLE */

    return FLT(res);                            /* Return casted value, based on float size */
 800217a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800217e:	ec43 2b17 	vmov	d7, r2, r3
}
 8002182:	eeb0 0a47 	vmov.f32	s0, s14
 8002186:	eef0 0a67 	vmov.f32	s1, s15
 800218a:	3710      	adds	r7, #16
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}

08002190 <prv_parse_lat_long>:
 *                  NMEA output for latitude is ddmm.sss and longitude is dddmm.sss
 * \param[in]       gh: GPS handle
 * \return          Latitude/Longitude value in degrees
 */
static lwgps_float_t
prv_parse_lat_long(lwgps_t* gh) {
 8002190:	b580      	push	{r7, lr}
 8002192:	b088      	sub	sp, #32
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
    lwgps_float_t ll, deg, min;

    ll = prv_parse_float_number(gh, NULL);      /* Parse value as double */
 8002198:	2100      	movs	r1, #0
 800219a:	6878      	ldr	r0, [r7, #4]
 800219c:	f7ff ffd1 	bl	8002142 <prv_parse_float_number>
 80021a0:	ed87 0b06 	vstr	d0, [r7, #24]
    deg = FLT((int)((int)ll / 100));            /* Get absolute degrees value, interested in integer part only */
 80021a4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80021a8:	f7fe fcee 	bl	8000b88 <__aeabi_d2iz>
 80021ac:	4603      	mov	r3, r0
 80021ae:	4a1d      	ldr	r2, [pc, #116]	; (8002224 <prv_parse_lat_long+0x94>)
 80021b0:	fb82 1203 	smull	r1, r2, r2, r3
 80021b4:	1152      	asrs	r2, r2, #5
 80021b6:	17db      	asrs	r3, r3, #31
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	4618      	mov	r0, r3
 80021bc:	f7fe f9ca 	bl	8000554 <__aeabi_i2d>
 80021c0:	4602      	mov	r2, r0
 80021c2:	460b      	mov	r3, r1
 80021c4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    min = ll - (deg * FLT(100));                /* Get remaining part from full number, minutes */
 80021c8:	f04f 0200 	mov.w	r2, #0
 80021cc:	4b16      	ldr	r3, [pc, #88]	; (8002228 <prv_parse_lat_long+0x98>)
 80021ce:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80021d2:	f7fe fa29 	bl	8000628 <__aeabi_dmul>
 80021d6:	4602      	mov	r2, r0
 80021d8:	460b      	mov	r3, r1
 80021da:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80021de:	f7fe f86b 	bl	80002b8 <__aeabi_dsub>
 80021e2:	4602      	mov	r2, r0
 80021e4:	460b      	mov	r3, r1
 80021e6:	e9c7 2302 	strd	r2, r3, [r7, #8]
    ll = deg + (min / FLT(60.0));               /* Calculate latitude/longitude */
 80021ea:	f04f 0200 	mov.w	r2, #0
 80021ee:	4b0f      	ldr	r3, [pc, #60]	; (800222c <prv_parse_lat_long+0x9c>)
 80021f0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80021f4:	f7fe fb42 	bl	800087c <__aeabi_ddiv>
 80021f8:	4602      	mov	r2, r0
 80021fa:	460b      	mov	r3, r1
 80021fc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002200:	f7fe f85c 	bl	80002bc <__adddf3>
 8002204:	4602      	mov	r2, r0
 8002206:	460b      	mov	r3, r1
 8002208:	e9c7 2306 	strd	r2, r3, [r7, #24]

    return ll;
 800220c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002210:	ec43 2b17 	vmov	d7, r2, r3
}
 8002214:	eeb0 0a47 	vmov.f32	s0, s14
 8002218:	eef0 0a67 	vmov.f32	s1, s15
 800221c:	3720      	adds	r7, #32
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	51eb851f 	.word	0x51eb851f
 8002228:	40590000 	.word	0x40590000
 800222c:	404e0000 	.word	0x404e0000

08002230 <prv_parse_term>:
 * \brief           Parse received term
 * \param[in]       gh: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_parse_term(lwgps_t* gh) {
 8002230:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002234:	b082      	sub	sp, #8
 8002236:	af00      	add	r7, sp, #0
 8002238:	6078      	str	r0, [r7, #4]
    if (gh->p.term_num == 0) {                  /* Check string type */
 800223a:	6879      	ldr	r1, [r7, #4]
 800223c:	f891 107f 	ldrb.w	r1, [r1, #127]	; 0x7f
 8002240:	2900      	cmp	r1, #0
 8002242:	d169      	bne.n	8002318 <prv_parse_term+0xe8>
        if (0) {
#if LWGPS_CFG_STATEMENT_GPGGA
        } else if (!strncmp(gh->p.term_str, "$GPGGA", 6) || !strncmp(gh->p.term_str, "$GNGGA", 6)) {
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	3371      	adds	r3, #113	; 0x71
 8002248:	2206      	movs	r2, #6
 800224a:	49ba      	ldr	r1, [pc, #744]	; (8002534 <prv_parse_term+0x304>)
 800224c:	4618      	mov	r0, r3
 800224e:	f00e fad3 	bl	80107f8 <strncmp>
 8002252:	4603      	mov	r3, r0
 8002254:	2b00      	cmp	r3, #0
 8002256:	d009      	beq.n	800226c <prv_parse_term+0x3c>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	3371      	adds	r3, #113	; 0x71
 800225c:	2206      	movs	r2, #6
 800225e:	49b6      	ldr	r1, [pc, #728]	; (8002538 <prv_parse_term+0x308>)
 8002260:	4618      	mov	r0, r3
 8002262:	f00e fac9 	bl	80107f8 <strncmp>
 8002266:	4603      	mov	r3, r0
 8002268:	2b00      	cmp	r3, #0
 800226a:	d104      	bne.n	8002276 <prv_parse_term+0x46>
            gh->p.stat = STAT_GGA;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2201      	movs	r2, #1
 8002270:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 8002274:	e04e      	b.n	8002314 <prv_parse_term+0xe4>
#endif /* LWGPS_CFG_STATEMENT_GPGGA */
#if LWGPS_CFG_STATEMENT_GPGSA
        } else if (!strncmp(gh->p.term_str, "$GPGSA", 6) || !strncmp(gh->p.term_str, "$GNGSA", 6)) {
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	3371      	adds	r3, #113	; 0x71
 800227a:	2206      	movs	r2, #6
 800227c:	49af      	ldr	r1, [pc, #700]	; (800253c <prv_parse_term+0x30c>)
 800227e:	4618      	mov	r0, r3
 8002280:	f00e faba 	bl	80107f8 <strncmp>
 8002284:	4603      	mov	r3, r0
 8002286:	2b00      	cmp	r3, #0
 8002288:	d009      	beq.n	800229e <prv_parse_term+0x6e>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	3371      	adds	r3, #113	; 0x71
 800228e:	2206      	movs	r2, #6
 8002290:	49ab      	ldr	r1, [pc, #684]	; (8002540 <prv_parse_term+0x310>)
 8002292:	4618      	mov	r0, r3
 8002294:	f00e fab0 	bl	80107f8 <strncmp>
 8002298:	4603      	mov	r3, r0
 800229a:	2b00      	cmp	r3, #0
 800229c:	d104      	bne.n	80022a8 <prv_parse_term+0x78>
            gh->p.stat = STAT_GSA;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2202      	movs	r2, #2
 80022a2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 80022a6:	e035      	b.n	8002314 <prv_parse_term+0xe4>
#endif /* LWGPS_CFG_STATEMENT_GPGSA */
#if LWGPS_CFG_STATEMENT_GPGSV
        } else if (!strncmp(gh->p.term_str, "$GPGSV", 6) || !strncmp(gh->p.term_str, "$GNGSV", 6)) {
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	3371      	adds	r3, #113	; 0x71
 80022ac:	2206      	movs	r2, #6
 80022ae:	49a5      	ldr	r1, [pc, #660]	; (8002544 <prv_parse_term+0x314>)
 80022b0:	4618      	mov	r0, r3
 80022b2:	f00e faa1 	bl	80107f8 <strncmp>
 80022b6:	4603      	mov	r3, r0
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d009      	beq.n	80022d0 <prv_parse_term+0xa0>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	3371      	adds	r3, #113	; 0x71
 80022c0:	2206      	movs	r2, #6
 80022c2:	49a1      	ldr	r1, [pc, #644]	; (8002548 <prv_parse_term+0x318>)
 80022c4:	4618      	mov	r0, r3
 80022c6:	f00e fa97 	bl	80107f8 <strncmp>
 80022ca:	4603      	mov	r3, r0
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d104      	bne.n	80022da <prv_parse_term+0xaa>
            gh->p.stat = STAT_GSV;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2203      	movs	r2, #3
 80022d4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 80022d8:	e01c      	b.n	8002314 <prv_parse_term+0xe4>
#endif /* LWGPS_CFG_STATEMENT_GPGSV */
#if LWGPS_CFG_STATEMENT_GPRMC
        } else if (!strncmp(gh->p.term_str, "$GPRMC", 6) || !strncmp(gh->p.term_str, "$GNRMC", 6)) {
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	3371      	adds	r3, #113	; 0x71
 80022de:	2206      	movs	r2, #6
 80022e0:	499a      	ldr	r1, [pc, #616]	; (800254c <prv_parse_term+0x31c>)
 80022e2:	4618      	mov	r0, r3
 80022e4:	f00e fa88 	bl	80107f8 <strncmp>
 80022e8:	4603      	mov	r3, r0
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d009      	beq.n	8002302 <prv_parse_term+0xd2>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	3371      	adds	r3, #113	; 0x71
 80022f2:	2206      	movs	r2, #6
 80022f4:	4996      	ldr	r1, [pc, #600]	; (8002550 <prv_parse_term+0x320>)
 80022f6:	4618      	mov	r0, r3
 80022f8:	f00e fa7e 	bl	80107f8 <strncmp>
 80022fc:	4603      	mov	r3, r0
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d104      	bne.n	800230c <prv_parse_term+0xdc>
            gh->p.stat = STAT_RMC;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2204      	movs	r2, #4
 8002306:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 800230a:	e003      	b.n	8002314 <prv_parse_term+0xe4>
#if LWGPS_CFG_STATEMENT_PUBX
        } else if (!strncmp(gh->p.term_str, "$PUBX", 5)) {
            gh->p.stat = STAT_UBX;
#endif /* LWGPS_CFG_STATEMENT_PUBX */
        } else {
            gh->p.stat = STAT_UNKNOWN;          /* Invalid statement for library */
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2200      	movs	r2, #0
 8002310:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
        }
        return 1;
 8002314:	2301      	movs	r3, #1
 8002316:	e231      	b.n	800277c <prv_parse_term+0x54c>
    }

    /* Start parsing terms */
    if (gh->p.stat == STAT_UNKNOWN) {
 8002318:	6879      	ldr	r1, [r7, #4]
 800231a:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
 800231e:	2900      	cmp	r1, #0
 8002320:	f000 822b 	beq.w	800277a <prv_parse_term+0x54a>
#if LWGPS_CFG_STATEMENT_GPGGA
    } else if (gh->p.stat == STAT_GGA) {        /* Process GPGGA statement */
 8002324:	6879      	ldr	r1, [r7, #4]
 8002326:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
 800232a:	2901      	cmp	r1, #1
 800232c:	f040 80c9 	bne.w	80024c2 <prv_parse_term+0x292>
        switch (gh->p.term_num) {
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8002336:	3b01      	subs	r3, #1
 8002338:	2b0a      	cmp	r3, #10
 800233a:	f200 8213 	bhi.w	8002764 <prv_parse_term+0x534>
 800233e:	a201      	add	r2, pc, #4	; (adr r2, 8002344 <prv_parse_term+0x114>)
 8002340:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002344:	08002371 	.word	0x08002371
 8002348:	080023eb 	.word	0x080023eb
 800234c:	08002401 	.word	0x08002401
 8002350:	0800242b 	.word	0x0800242b
 8002354:	08002441 	.word	0x08002441
 8002358:	0800246b 	.word	0x0800246b
 800235c:	0800247f 	.word	0x0800247f
 8002360:	08002765 	.word	0x08002765
 8002364:	08002493 	.word	0x08002493
 8002368:	08002765 	.word	0x08002765
 800236c:	080024ab 	.word	0x080024ab
            case 1:                             /* Process UTC time */
                gh->p.data.gga.hours = 10 * CTN(gh->p.term_str[0]) + CTN(gh->p.term_str[1]);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8002376:	3b30      	subs	r3, #48	; 0x30
 8002378:	b2db      	uxtb	r3, r3
 800237a:	461a      	mov	r2, r3
 800237c:	0092      	lsls	r2, r2, #2
 800237e:	4413      	add	r3, r2
 8002380:	005b      	lsls	r3, r3, #1
 8002382:	b2da      	uxtb	r2, r3
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 800238a:	4413      	add	r3, r2
 800238c:	b2db      	uxtb	r3, r3
 800238e:	3b30      	subs	r3, #48	; 0x30
 8002390:	b2da      	uxtb	r2, r3
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
                gh->p.data.gga.minutes = 10 * CTN(gh->p.term_str[2]) + CTN(gh->p.term_str[3]);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
 800239e:	3b30      	subs	r3, #48	; 0x30
 80023a0:	b2db      	uxtb	r3, r3
 80023a2:	461a      	mov	r2, r3
 80023a4:	0092      	lsls	r2, r2, #2
 80023a6:	4413      	add	r3, r2
 80023a8:	005b      	lsls	r3, r3, #1
 80023aa:	b2da      	uxtb	r2, r3
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80023b2:	4413      	add	r3, r2
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	3b30      	subs	r3, #48	; 0x30
 80023b8:	b2da      	uxtb	r2, r3
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	f883 20ab 	strb.w	r2, [r3, #171]	; 0xab
                gh->p.data.gga.seconds = 10 * CTN(gh->p.term_str[4]) + CTN(gh->p.term_str[5]);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 80023c6:	3b30      	subs	r3, #48	; 0x30
 80023c8:	b2db      	uxtb	r3, r3
 80023ca:	461a      	mov	r2, r3
 80023cc:	0092      	lsls	r2, r2, #2
 80023ce:	4413      	add	r3, r2
 80023d0:	005b      	lsls	r3, r3, #1
 80023d2:	b2da      	uxtb	r2, r3
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 80023da:	4413      	add	r3, r2
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	3b30      	subs	r3, #48	; 0x30
 80023e0:	b2da      	uxtb	r2, r3
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
                break;
 80023e8:	e1c7      	b.n	800277a <prv_parse_term+0x54a>
            case 2:                             /* Latitude */
                gh->p.data.gga.latitude = prv_parse_lat_long(gh);   /* Parse latitude */
 80023ea:	6878      	ldr	r0, [r7, #4]
 80023ec:	f7ff fed0 	bl	8002190 <prv_parse_lat_long>
 80023f0:	eeb0 7a40 	vmov.f32	s14, s0
 80023f4:	eef0 7a60 	vmov.f32	s15, s1
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	ed83 7b22 	vstr	d7, [r3, #136]	; 0x88
                break;
 80023fe:	e1bc      	b.n	800277a <prv_parse_term+0x54a>
            case 3:                             /* Latitude north/south information */
                if (gh->p.term_str[0] == 'S' || gh->p.term_str[0] == 's') {
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8002406:	2b53      	cmp	r3, #83	; 0x53
 8002408:	d005      	beq.n	8002416 <prv_parse_term+0x1e6>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8002410:	2b73      	cmp	r3, #115	; 0x73
 8002412:	f040 81a9 	bne.w	8002768 <prv_parse_term+0x538>
                    gh->p.data.gga.latitude = -gh->p.data.gga.latitude;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 800241c:	4690      	mov	r8, r2
 800241e:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	e9c3 8922 	strd	r8, r9, [r3, #136]	; 0x88
                }
                break;
 8002428:	e19e      	b.n	8002768 <prv_parse_term+0x538>
            case 4:                             /* Longitude */
                gh->p.data.gga.longitude = prv_parse_lat_long(gh);  /* Parse longitude */
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	f7ff feb0 	bl	8002190 <prv_parse_lat_long>
 8002430:	eeb0 7a40 	vmov.f32	s14, s0
 8002434:	eef0 7a60 	vmov.f32	s15, s1
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	ed83 7b24 	vstr	d7, [r3, #144]	; 0x90
                break;
 800243e:	e19c      	b.n	800277a <prv_parse_term+0x54a>
            case 5:                             /* Longitude east/west information */
                if (gh->p.term_str[0] == 'W' || gh->p.term_str[0] == 'w') {
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8002446:	2b57      	cmp	r3, #87	; 0x57
 8002448:	d005      	beq.n	8002456 <prv_parse_term+0x226>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8002450:	2b77      	cmp	r3, #119	; 0x77
 8002452:	f040 818b 	bne.w	800276c <prv_parse_term+0x53c>
                    gh->p.data.gga.longitude = -gh->p.data.gga.longitude;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 800245c:	4614      	mov	r4, r2
 800245e:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	e9c3 4524 	strd	r4, r5, [r3, #144]	; 0x90
                }
                break;
 8002468:	e180      	b.n	800276c <prv_parse_term+0x53c>
            case 6:                             /* Fix status */
                gh->p.data.gga.fix = (uint8_t)prv_parse_number(gh, NULL);
 800246a:	2100      	movs	r1, #0
 800246c:	6878      	ldr	r0, [r7, #4]
 800246e:	f7ff fe1e 	bl	80020ae <prv_parse_number>
 8002472:	4603      	mov	r3, r0
 8002474:	b2da      	uxtb	r2, r3
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
                break;
 800247c:	e17d      	b.n	800277a <prv_parse_term+0x54a>
            case 7:                             /* Satellites in use */
                gh->p.data.gga.sats_in_use = (uint8_t)prv_parse_number(gh, NULL);
 800247e:	2100      	movs	r1, #0
 8002480:	6878      	ldr	r0, [r7, #4]
 8002482:	f7ff fe14 	bl	80020ae <prv_parse_number>
 8002486:	4603      	mov	r3, r0
 8002488:	b2da      	uxtb	r2, r3
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
                break;
 8002490:	e173      	b.n	800277a <prv_parse_term+0x54a>
            case 9:                             /* Altitude */
                gh->p.data.gga.altitude = prv_parse_float_number(gh, NULL);
 8002492:	2100      	movs	r1, #0
 8002494:	6878      	ldr	r0, [r7, #4]
 8002496:	f7ff fe54 	bl	8002142 <prv_parse_float_number>
 800249a:	eeb0 7a40 	vmov.f32	s14, s0
 800249e:	eef0 7a60 	vmov.f32	s15, s1
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	ed83 7b26 	vstr	d7, [r3, #152]	; 0x98
                break;
 80024a8:	e167      	b.n	800277a <prv_parse_term+0x54a>
            case 11:                            /* Altitude above ellipsoid */
                gh->p.data.gga.geo_sep = prv_parse_float_number(gh, NULL);
 80024aa:	2100      	movs	r1, #0
 80024ac:	6878      	ldr	r0, [r7, #4]
 80024ae:	f7ff fe48 	bl	8002142 <prv_parse_float_number>
 80024b2:	eeb0 7a40 	vmov.f32	s14, s0
 80024b6:	eef0 7a60 	vmov.f32	s15, s1
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	ed83 7b28 	vstr	d7, [r3, #160]	; 0xa0
                break;
 80024c0:	e15b      	b.n	800277a <prv_parse_term+0x54a>
            default:
                break;
        }
#endif /* LWGPS_CFG_STATEMENT_GPGGA */
#if LWGPS_CFG_STATEMENT_GPGSA
    } else if (gh->p.stat == STAT_GSA) {        /* Process GPGSA statement */
 80024c2:	6879      	ldr	r1, [r7, #4]
 80024c4:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
 80024c8:	2902      	cmp	r1, #2
 80024ca:	f040 8083 	bne.w	80025d4 <prv_parse_term+0x3a4>
        switch (gh->p.term_num) {
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 80024d4:	3b02      	subs	r3, #2
 80024d6:	2b0f      	cmp	r3, #15
 80024d8:	d860      	bhi.n	800259c <prv_parse_term+0x36c>
 80024da:	a201      	add	r2, pc, #4	; (adr r2, 80024e0 <prv_parse_term+0x2b0>)
 80024dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024e0:	08002521 	.word	0x08002521
 80024e4:	0800259d 	.word	0x0800259d
 80024e8:	0800259d 	.word	0x0800259d
 80024ec:	0800259d 	.word	0x0800259d
 80024f0:	0800259d 	.word	0x0800259d
 80024f4:	0800259d 	.word	0x0800259d
 80024f8:	0800259d 	.word	0x0800259d
 80024fc:	0800259d 	.word	0x0800259d
 8002500:	0800259d 	.word	0x0800259d
 8002504:	0800259d 	.word	0x0800259d
 8002508:	0800259d 	.word	0x0800259d
 800250c:	0800259d 	.word	0x0800259d
 8002510:	0800259d 	.word	0x0800259d
 8002514:	08002555 	.word	0x08002555
 8002518:	0800256d 	.word	0x0800256d
 800251c:	08002585 	.word	0x08002585
            case 2:                             /* Process fix mode */
                gh->p.data.gsa.fix_mode = (uint8_t)prv_parse_number(gh, NULL);
 8002520:	2100      	movs	r1, #0
 8002522:	6878      	ldr	r0, [r7, #4]
 8002524:	f7ff fdc3 	bl	80020ae <prv_parse_number>
 8002528:	4603      	mov	r3, r0
 800252a:	b2da      	uxtb	r2, r3
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
                break;
 8002532:	e122      	b.n	800277a <prv_parse_term+0x54a>
 8002534:	0801322c 	.word	0x0801322c
 8002538:	08013234 	.word	0x08013234
 800253c:	0801323c 	.word	0x0801323c
 8002540:	08013244 	.word	0x08013244
 8002544:	0801324c 	.word	0x0801324c
 8002548:	08013254 	.word	0x08013254
 800254c:	0801325c 	.word	0x0801325c
 8002550:	08013264 	.word	0x08013264
            case 15:                            /* Process PDOP */
                gh->p.data.gsa.dop_p = prv_parse_float_number(gh, NULL);
 8002554:	2100      	movs	r1, #0
 8002556:	6878      	ldr	r0, [r7, #4]
 8002558:	f7ff fdf3 	bl	8002142 <prv_parse_float_number>
 800255c:	eeb0 7a40 	vmov.f32	s14, s0
 8002560:	eef0 7a60 	vmov.f32	s15, s1
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	ed83 7b26 	vstr	d7, [r3, #152]	; 0x98
                break;
 800256a:	e106      	b.n	800277a <prv_parse_term+0x54a>
            case 16:                            /* Process HDOP */
                gh->p.data.gsa.dop_h = prv_parse_float_number(gh, NULL);
 800256c:	2100      	movs	r1, #0
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	f7ff fde7 	bl	8002142 <prv_parse_float_number>
 8002574:	eeb0 7a40 	vmov.f32	s14, s0
 8002578:	eef0 7a60 	vmov.f32	s15, s1
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	ed83 7b22 	vstr	d7, [r3, #136]	; 0x88
                break;
 8002582:	e0fa      	b.n	800277a <prv_parse_term+0x54a>
            case 17:                            /* Process VDOP */
                gh->p.data.gsa.dop_v = prv_parse_float_number(gh, NULL);
 8002584:	2100      	movs	r1, #0
 8002586:	6878      	ldr	r0, [r7, #4]
 8002588:	f7ff fddb 	bl	8002142 <prv_parse_float_number>
 800258c:	eeb0 7a40 	vmov.f32	s14, s0
 8002590:	eef0 7a60 	vmov.f32	s15, s1
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	ed83 7b24 	vstr	d7, [r3, #144]	; 0x90
                break;
 800259a:	e0ee      	b.n	800277a <prv_parse_term+0x54a>
            default:
                /* Parse satellite IDs */
                if (gh->p.term_num >= 3 && gh->p.term_num <= 14) {
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 80025a2:	2b02      	cmp	r3, #2
 80025a4:	f240 80e4 	bls.w	8002770 <prv_parse_term+0x540>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 80025ae:	2b0e      	cmp	r3, #14
 80025b0:	f200 80de 	bhi.w	8002770 <prv_parse_term+0x540>
                    gh->p.data.gsa.satellites_ids[gh->p.term_num - 3] = (uint8_t)prv_parse_number(gh, NULL);
 80025b4:	2100      	movs	r1, #0
 80025b6:	6878      	ldr	r0, [r7, #4]
 80025b8:	f7ff fd79 	bl	80020ae <prv_parse_number>
 80025bc:	4602      	mov	r2, r0
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 80025c4:	3b03      	subs	r3, #3
 80025c6:	b2d1      	uxtb	r1, r2
 80025c8:	687a      	ldr	r2, [r7, #4]
 80025ca:	4413      	add	r3, r2
 80025cc:	460a      	mov	r2, r1
 80025ce:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
                }
                break;
 80025d2:	e0cd      	b.n	8002770 <prv_parse_term+0x540>
        }
#endif /* LWGPS_CFG_STATEMENT_GPGSA */
#if LWGPS_CFG_STATEMENT_GPGSV
    } else if (gh->p.stat == STAT_GSV) {        /* Process GPGSV statement */
 80025d4:	6879      	ldr	r1, [r7, #4]
 80025d6:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
 80025da:	2903      	cmp	r1, #3
 80025dc:	d11b      	bne.n	8002616 <prv_parse_term+0x3e6>
        switch (gh->p.term_num) {
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 80025e4:	2b02      	cmp	r3, #2
 80025e6:	d002      	beq.n	80025ee <prv_parse_term+0x3be>
 80025e8:	2b03      	cmp	r3, #3
 80025ea:	d00a      	beq.n	8002602 <prv_parse_term+0x3d2>
                                break;
                        }
                    }
                }
#endif /* LWGPS_CFG_STATEMENT_GPGSV_SAT_DET */
                break;
 80025ec:	e0c5      	b.n	800277a <prv_parse_term+0x54a>
                gh->p.data.gsv.stat_num = (uint8_t)prv_parse_number(gh, NULL);
 80025ee:	2100      	movs	r1, #0
 80025f0:	6878      	ldr	r0, [r7, #4]
 80025f2:	f7ff fd5c 	bl	80020ae <prv_parse_number>
 80025f6:	4603      	mov	r3, r0
 80025f8:	b2da      	uxtb	r2, r3
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
                break;
 8002600:	e0bb      	b.n	800277a <prv_parse_term+0x54a>
                gh->p.data.gsv.sats_in_view = (uint8_t)prv_parse_number(gh, NULL);
 8002602:	2100      	movs	r1, #0
 8002604:	6878      	ldr	r0, [r7, #4]
 8002606:	f7ff fd52 	bl	80020ae <prv_parse_number>
 800260a:	4603      	mov	r3, r0
 800260c:	b2da      	uxtb	r2, r3
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
                break;
 8002614:	e0b1      	b.n	800277a <prv_parse_term+0x54a>
        }
#endif /* LWGPS_CFG_STATEMENT_GPGSV */
#if LWGPS_CFG_STATEMENT_GPRMC
    } else if (gh->p.stat == STAT_RMC) {        /* Process GPRMC statement */
 8002616:	6879      	ldr	r1, [r7, #4]
 8002618:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
 800261c:	2904      	cmp	r1, #4
 800261e:	f040 80ac 	bne.w	800277a <prv_parse_term+0x54a>
        switch (gh->p.term_num) {
 8002622:	6879      	ldr	r1, [r7, #4]
 8002624:	f891 107f 	ldrb.w	r1, [r1, #127]	; 0x7f
 8002628:	3902      	subs	r1, #2
 800262a:	2909      	cmp	r1, #9
 800262c:	f200 80a2 	bhi.w	8002774 <prv_parse_term+0x544>
 8002630:	a001      	add	r0, pc, #4	; (adr r0, 8002638 <prv_parse_term+0x408>)
 8002632:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8002636:	bf00      	nop
 8002638:	08002661 	.word	0x08002661
 800263c:	08002775 	.word	0x08002775
 8002640:	08002775 	.word	0x08002775
 8002644:	08002775 	.word	0x08002775
 8002648:	08002775 	.word	0x08002775
 800264c:	0800267b 	.word	0x0800267b
 8002650:	08002693 	.word	0x08002693
 8002654:	080026ab 	.word	0x080026ab
 8002658:	08002725 	.word	0x08002725
 800265c:	0800273d 	.word	0x0800273d
            case 2:                             /* Process valid status */
                gh->p.data.rmc.is_valid = (gh->p.term_str[0] == 'A');
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8002666:	2b41      	cmp	r3, #65	; 0x41
 8002668:	bf0c      	ite	eq
 800266a:	2301      	moveq	r3, #1
 800266c:	2300      	movne	r3, #0
 800266e:	b2db      	uxtb	r3, r3
 8002670:	461a      	mov	r2, r3
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
                break;
 8002678:	e07f      	b.n	800277a <prv_parse_term+0x54a>
            case 7:                             /* Process ground speed in knots */
                gh->p.data.rmc.speed = prv_parse_float_number(gh, NULL);
 800267a:	2100      	movs	r1, #0
 800267c:	6878      	ldr	r0, [r7, #4]
 800267e:	f7ff fd60 	bl	8002142 <prv_parse_float_number>
 8002682:	eeb0 7a40 	vmov.f32	s14, s0
 8002686:	eef0 7a60 	vmov.f32	s15, s1
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	ed83 7b24 	vstr	d7, [r3, #144]	; 0x90
                break;
 8002690:	e073      	b.n	800277a <prv_parse_term+0x54a>
            case 8:                             /* Process true ground coarse */
                gh->p.data.rmc.course = prv_parse_float_number(gh, NULL);
 8002692:	2100      	movs	r1, #0
 8002694:	6878      	ldr	r0, [r7, #4]
 8002696:	f7ff fd54 	bl	8002142 <prv_parse_float_number>
 800269a:	eeb0 7a40 	vmov.f32	s14, s0
 800269e:	eef0 7a60 	vmov.f32	s15, s1
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	ed83 7b26 	vstr	d7, [r3, #152]	; 0x98
                break;
 80026a8:	e067      	b.n	800277a <prv_parse_term+0x54a>
            case 9:                             /* Process date */
                gh->p.data.rmc.date = (uint8_t)(10 * CTN(gh->p.term_str[0]) + CTN(gh->p.term_str[1]));
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80026b0:	3b30      	subs	r3, #48	; 0x30
 80026b2:	b2db      	uxtb	r3, r3
 80026b4:	461a      	mov	r2, r3
 80026b6:	0092      	lsls	r2, r2, #2
 80026b8:	4413      	add	r3, r2
 80026ba:	005b      	lsls	r3, r3, #1
 80026bc:	b2da      	uxtb	r2, r3
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 80026c4:	4413      	add	r3, r2
 80026c6:	b2db      	uxtb	r3, r3
 80026c8:	3b30      	subs	r3, #48	; 0x30
 80026ca:	b2da      	uxtb	r2, r3
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
                gh->p.data.rmc.month = (uint8_t)(10 * CTN(gh->p.term_str[2]) + CTN(gh->p.term_str[3]));
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
 80026d8:	3b30      	subs	r3, #48	; 0x30
 80026da:	b2db      	uxtb	r3, r3
 80026dc:	461a      	mov	r2, r3
 80026de:	0092      	lsls	r2, r2, #2
 80026e0:	4413      	add	r3, r2
 80026e2:	005b      	lsls	r3, r3, #1
 80026e4:	b2da      	uxtb	r2, r3
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80026ec:	4413      	add	r3, r2
 80026ee:	b2db      	uxtb	r3, r3
 80026f0:	3b30      	subs	r3, #48	; 0x30
 80026f2:	b2da      	uxtb	r2, r3
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
                gh->p.data.rmc.year = (uint8_t)(10 * CTN(gh->p.term_str[4]) + CTN(gh->p.term_str[5]));
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8002700:	3b30      	subs	r3, #48	; 0x30
 8002702:	b2db      	uxtb	r3, r3
 8002704:	461a      	mov	r2, r3
 8002706:	0092      	lsls	r2, r2, #2
 8002708:	4413      	add	r3, r2
 800270a:	005b      	lsls	r3, r3, #1
 800270c:	b2da      	uxtb	r2, r3
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 8002714:	4413      	add	r3, r2
 8002716:	b2db      	uxtb	r3, r3
 8002718:	3b30      	subs	r3, #48	; 0x30
 800271a:	b2da      	uxtb	r2, r3
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
                break;
 8002722:	e02a      	b.n	800277a <prv_parse_term+0x54a>
            case 10:                            /* Process magnetic variation */
                gh->p.data.rmc.variation = prv_parse_float_number(gh, NULL);
 8002724:	2100      	movs	r1, #0
 8002726:	6878      	ldr	r0, [r7, #4]
 8002728:	f7ff fd0b 	bl	8002142 <prv_parse_float_number>
 800272c:	eeb0 7a40 	vmov.f32	s14, s0
 8002730:	eef0 7a60 	vmov.f32	s15, s1
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	ed83 7b28 	vstr	d7, [r3, #160]	; 0xa0
                break;
 800273a:	e01e      	b.n	800277a <prv_parse_term+0x54a>
            case 11:                            /* Process magnetic variation east/west */
                if (gh->p.term_str[0] == 'W' || gh->p.term_str[0] == 'w') {
 800273c:	6879      	ldr	r1, [r7, #4]
 800273e:	f891 1071 	ldrb.w	r1, [r1, #113]	; 0x71
 8002742:	2957      	cmp	r1, #87	; 0x57
 8002744:	d004      	beq.n	8002750 <prv_parse_term+0x520>
 8002746:	6879      	ldr	r1, [r7, #4]
 8002748:	f891 1071 	ldrb.w	r1, [r1, #113]	; 0x71
 800274c:	2977      	cmp	r1, #119	; 0x77
 800274e:	d113      	bne.n	8002778 <prv_parse_term+0x548>
                    gh->p.data.rmc.variation = -gh->p.data.rmc.variation;
 8002750:	6879      	ldr	r1, [r7, #4]
 8002752:	e9d1 0128 	ldrd	r0, r1, [r1, #160]	; 0xa0
 8002756:	4602      	mov	r2, r0
 8002758:	f081 4300 	eor.w	r3, r1, #2147483648	; 0x80000000
 800275c:	6879      	ldr	r1, [r7, #4]
 800275e:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0
                }
                break;
 8002762:	e009      	b.n	8002778 <prv_parse_term+0x548>
                break;
 8002764:	bf00      	nop
 8002766:	e008      	b.n	800277a <prv_parse_term+0x54a>
                break;
 8002768:	bf00      	nop
 800276a:	e006      	b.n	800277a <prv_parse_term+0x54a>
                break;
 800276c:	bf00      	nop
 800276e:	e004      	b.n	800277a <prv_parse_term+0x54a>
                break;
 8002770:	bf00      	nop
 8002772:	e002      	b.n	800277a <prv_parse_term+0x54a>
            default:
                break;
 8002774:	bf00      	nop
 8002776:	e000      	b.n	800277a <prv_parse_term+0x54a>
                break;
 8002778:	bf00      	nop
                break;
        }
#endif /* LWGPS_CFG_STATEMENT_PUBX_TIME */
#endif /* LWGPS_CFG_STATEMENT_PUBX */
    }
    return 1;
 800277a:	2301      	movs	r3, #1
}
 800277c:	4618      	mov	r0, r3
 800277e:	3708      	adds	r7, #8
 8002780:	46bd      	mov	sp, r7
 8002782:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002786:	bf00      	nop

08002788 <prv_check_crc>:
 * \brief           Compare calculated CRC with received CRC
 * \param[in]       gh: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_check_crc(lwgps_t* gh) {
 8002788:	b480      	push	{r7}
 800278a:	b085      	sub	sp, #20
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
    uint8_t crc;
    crc = (uint8_t)((CHTN(gh->p.term_str[0]) & 0x0F) << 0x04) | (CHTN(gh->p.term_str[1]) & 0x0F);   /* Convert received CRC from string (hex) to number */
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8002796:	2b2f      	cmp	r3, #47	; 0x2f
 8002798:	d90d      	bls.n	80027b6 <prv_check_crc+0x2e>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80027a0:	2b39      	cmp	r3, #57	; 0x39
 80027a2:	d808      	bhi.n	80027b6 <prv_check_crc+0x2e>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80027aa:	3b30      	subs	r3, #48	; 0x30
 80027ac:	b2db      	uxtb	r3, r3
 80027ae:	011b      	lsls	r3, r3, #4
 80027b0:	b2db      	uxtb	r3, r3
 80027b2:	b25a      	sxtb	r2, r3
 80027b4:	e026      	b.n	8002804 <prv_check_crc+0x7c>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80027bc:	2b60      	cmp	r3, #96	; 0x60
 80027be:	d90d      	bls.n	80027dc <prv_check_crc+0x54>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80027c6:	2b7a      	cmp	r3, #122	; 0x7a
 80027c8:	d808      	bhi.n	80027dc <prv_check_crc+0x54>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80027d0:	3b57      	subs	r3, #87	; 0x57
 80027d2:	b2db      	uxtb	r3, r3
 80027d4:	011b      	lsls	r3, r3, #4
 80027d6:	b2db      	uxtb	r3, r3
 80027d8:	b25a      	sxtb	r2, r3
 80027da:	e013      	b.n	8002804 <prv_check_crc+0x7c>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80027e2:	2b40      	cmp	r3, #64	; 0x40
 80027e4:	d90d      	bls.n	8002802 <prv_check_crc+0x7a>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80027ec:	2b5a      	cmp	r3, #90	; 0x5a
 80027ee:	d808      	bhi.n	8002802 <prv_check_crc+0x7a>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80027f6:	3b37      	subs	r3, #55	; 0x37
 80027f8:	b2db      	uxtb	r3, r3
 80027fa:	011b      	lsls	r3, r3, #4
 80027fc:	b2db      	uxtb	r3, r3
 80027fe:	b25a      	sxtb	r2, r3
 8002800:	e000      	b.n	8002804 <prv_check_crc+0x7c>
 8002802:	2200      	movs	r2, #0
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 800280a:	2b2f      	cmp	r3, #47	; 0x2f
 800280c:	d90c      	bls.n	8002828 <prv_check_crc+0xa0>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8002814:	2b39      	cmp	r3, #57	; 0x39
 8002816:	d807      	bhi.n	8002828 <prv_check_crc+0xa0>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 800281e:	b25b      	sxtb	r3, r3
 8002820:	f003 030f 	and.w	r3, r3, #15
 8002824:	b25b      	sxtb	r3, r3
 8002826:	e028      	b.n	800287a <prv_check_crc+0xf2>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 800282e:	2b60      	cmp	r3, #96	; 0x60
 8002830:	d90e      	bls.n	8002850 <prv_check_crc+0xc8>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8002838:	2b7a      	cmp	r3, #122	; 0x7a
 800283a:	d809      	bhi.n	8002850 <prv_check_crc+0xc8>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8002842:	3b57      	subs	r3, #87	; 0x57
 8002844:	b2db      	uxtb	r3, r3
 8002846:	b25b      	sxtb	r3, r3
 8002848:	f003 030f 	and.w	r3, r3, #15
 800284c:	b25b      	sxtb	r3, r3
 800284e:	e014      	b.n	800287a <prv_check_crc+0xf2>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8002856:	2b40      	cmp	r3, #64	; 0x40
 8002858:	d90e      	bls.n	8002878 <prv_check_crc+0xf0>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8002860:	2b5a      	cmp	r3, #90	; 0x5a
 8002862:	d809      	bhi.n	8002878 <prv_check_crc+0xf0>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 800286a:	3b37      	subs	r3, #55	; 0x37
 800286c:	b2db      	uxtb	r3, r3
 800286e:	b25b      	sxtb	r3, r3
 8002870:	f003 030f 	and.w	r3, r3, #15
 8002874:	b25b      	sxtb	r3, r3
 8002876:	e000      	b.n	800287a <prv_check_crc+0xf2>
 8002878:	2300      	movs	r3, #0
 800287a:	4313      	orrs	r3, r2
 800287c:	b25b      	sxtb	r3, r3
 800287e:	73fb      	strb	r3, [r7, #15]
    return gh->p.crc_calc == crc;               /* They must match! */
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8002886:	7bfa      	ldrb	r2, [r7, #15]
 8002888:	429a      	cmp	r2, r3
 800288a:	bf0c      	ite	eq
 800288c:	2301      	moveq	r3, #1
 800288e:	2300      	movne	r3, #0
 8002890:	b2db      	uxtb	r3, r3
}
 8002892:	4618      	mov	r0, r3
 8002894:	3714      	adds	r7, #20
 8002896:	46bd      	mov	sp, r7
 8002898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289c:	4770      	bx	lr

0800289e <prv_copy_from_tmp_memory>:
 * \brief           Copy temporary memory to user memory
 * \param[in]       gh: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_copy_from_tmp_memory(lwgps_t* gh) {
 800289e:	b580      	push	{r7, lr}
 80028a0:	b082      	sub	sp, #8
 80028a2:	af00      	add	r7, sp, #0
 80028a4:	6078      	str	r0, [r7, #4]
    if (0) {
#if LWGPS_CFG_STATEMENT_GPGGA
    } else if (gh->p.stat == STAT_GGA) {
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	d136      	bne.n	800291e <prv_copy_from_tmp_memory+0x80>
        gh->latitude = gh->p.data.gga.latitude;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 80028b6:	6879      	ldr	r1, [r7, #4]
 80028b8:	e9c1 2300 	strd	r2, r3, [r1]
        gh->longitude = gh->p.data.gga.longitude;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 80028c2:	6879      	ldr	r1, [r7, #4]
 80028c4:	e9c1 2302 	strd	r2, r3, [r1, #8]
        gh->altitude = gh->p.data.gga.altitude;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	; 0x98
 80028ce:	6879      	ldr	r1, [r7, #4]
 80028d0:	e9c1 2304 	strd	r2, r3, [r1, #16]
        gh->geo_sep = gh->p.data.gga.geo_sep;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	; 0xa0
 80028da:	6879      	ldr	r1, [r7, #4]
 80028dc:	e9c1 2306 	strd	r2, r3, [r1, #24]
        gh->sats_in_use = gh->p.data.gga.sats_in_use;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	f893 20a8 	ldrb.w	r2, [r3, #168]	; 0xa8
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	f883 2020 	strb.w	r2, [r3, #32]
        gh->fix = gh->p.data.gga.fix;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	f893 20a9 	ldrb.w	r2, [r3, #169]	; 0xa9
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        gh->hours = gh->p.data.gga.hours;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	f893 20aa 	ldrb.w	r2, [r3, #170]	; 0xaa
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
        gh->minutes = gh->p.data.gga.minutes;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	f893 20ab 	ldrb.w	r2, [r3, #171]	; 0xab
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
        gh->seconds = gh->p.data.gga.seconds;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	f893 20ac 	ldrb.w	r2, [r3, #172]	; 0xac
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800291c:	e061      	b.n	80029e2 <prv_copy_from_tmp_memory+0x144>
#endif /* LWGPS_CFG_STATEMENT_GPGGA */
#if LWGPS_CFG_STATEMENT_GPGSA
    } else if (gh->p.stat == STAT_GSA) {
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002924:	2b02      	cmp	r3, #2
 8002926:	d121      	bne.n	800296c <prv_copy_from_tmp_memory+0xce>
        gh->dop_h = gh->p.data.gsa.dop_h;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 800292e:	6879      	ldr	r1, [r7, #4]
 8002930:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
        gh->dop_p = gh->p.data.gsa.dop_p;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	; 0x98
 800293a:	6879      	ldr	r1, [r7, #4]
 800293c:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
        gh->dop_v = gh->p.data.gsa.dop_v;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 8002946:	6879      	ldr	r1, [r7, #4]
 8002948:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
        gh->fix_mode = gh->p.data.gsa.fix_mode;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	f893 20a0 	ldrb.w	r2, [r3, #160]	; 0xa0
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        memcpy(gh->satellites_ids, gh->p.data.gsa.satellites_ids, sizeof(gh->satellites_ids));
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	f103 0041 	add.w	r0, r3, #65	; 0x41
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	33a1      	adds	r3, #161	; 0xa1
 8002962:	220c      	movs	r2, #12
 8002964:	4619      	mov	r1, r3
 8002966:	f00d ffdc 	bl	8010922 <memcpy>
 800296a:	e03a      	b.n	80029e2 <prv_copy_from_tmp_memory+0x144>
#endif /* LWGPS_CFG_STATEMENT_GPGSA */
#if LWGPS_CFG_STATEMENT_GPGSV
    } else if (gh->p.stat == STAT_GSV) {
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002972:	2b03      	cmp	r3, #3
 8002974:	d106      	bne.n	8002984 <prv_copy_from_tmp_memory+0xe6>
        gh->sats_in_view = gh->p.data.gsv.sats_in_view;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 8002982:	e02e      	b.n	80029e2 <prv_copy_from_tmp_memory+0x144>
#endif /* LWGPS_CFG_STATEMENT_GPGSV */
#if LWGPS_CFG_STATEMENT_GPRMC
    } else if (gh->p.stat == STAT_RMC) {
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800298a:	2b04      	cmp	r3, #4
 800298c:	d129      	bne.n	80029e2 <prv_copy_from_tmp_memory+0x144>
        gh->course = gh->p.data.rmc.course;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	; 0x98
 8002994:	6879      	ldr	r1, [r7, #4]
 8002996:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
        gh->is_valid = gh->p.data.rmc.is_valid;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
        gh->speed = gh->p.data.rmc.speed;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 80029ac:	6879      	ldr	r1, [r7, #4]
 80029ae:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
        gh->variation = gh->p.data.rmc.variation;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	; 0xa0
 80029b8:	6879      	ldr	r1, [r7, #4]
 80029ba:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
        gh->date = gh->p.data.rmc.date;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	f893 2089 	ldrb.w	r2, [r3, #137]	; 0x89
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        gh->month = gh->p.data.rmc.month;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	f893 208a 	ldrb.w	r2, [r3, #138]	; 0x8a
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
        gh->year = gh->p.data.rmc.year;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	f893 208b 	ldrb.w	r2, [r3, #139]	; 0x8b
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
        gh->clk_bias = gh->p.data.time.clk_bias;
        gh->clk_drift = gh->p.data.time.clk_drift;
        gh->tp_gran = gh->p.data.time.tp_gran;
#endif /* LWGPS_CFG_STATEMENT_PUBX_TIME */
    }
    return 1;
 80029e2:	2301      	movs	r3, #1
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	3708      	adds	r7, #8
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}

080029ec <lwgps_init>:
 * \brief           Init GPS handle
 * \param[in]       gh: GPS handle structure
 * \return          `1` on success, `0` otherwise
 */
uint8_t
lwgps_init(lwgps_t* gh) {
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b082      	sub	sp, #8
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
    memset(gh, 0x00, sizeof(*gh));              /* Reset structure */
 80029f4:	22b0      	movs	r2, #176	; 0xb0
 80029f6:	2100      	movs	r1, #0
 80029f8:	6878      	ldr	r0, [r7, #4]
 80029fa:	f00d fef5 	bl	80107e8 <memset>
    return 1;
 80029fe:	2301      	movs	r3, #1
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	3708      	adds	r7, #8
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}

08002a08 <lwgps_process>:
 */
uint8_t
#if LWGPS_CFG_STATUS || __DOXYGEN__
lwgps_process(lwgps_t* gh, const void* data, size_t len, lwgps_process_fn evt_fn) {
#else /* LWGPS_CFG_STATUS */
lwgps_process(lwgps_t* gh, const void* data, size_t len) {
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b086      	sub	sp, #24
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	60f8      	str	r0, [r7, #12]
 8002a10:	60b9      	str	r1, [r7, #8]
 8002a12:	607a      	str	r2, [r7, #4]
#endif /* !LWGPS_CFG_STATUS */
    const uint8_t* d = data;
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	617b      	str	r3, [r7, #20]

    for (; len > 0; ++d, --len) {               /* Process all bytes */
 8002a18:	e0ad      	b.n	8002b76 <lwgps_process+0x16e>
        if (*d == '$') {                        /* Check for beginning of NMEA line */
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	781b      	ldrb	r3, [r3, #0]
 8002a1e:	2b24      	cmp	r3, #36	; 0x24
 8002a20:	d128      	bne.n	8002a74 <lwgps_process+0x6c>
            memset(&gh->p, 0x00, sizeof(gh->p));/* Reset private memory */
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	3370      	adds	r3, #112	; 0x70
 8002a26:	2240      	movs	r2, #64	; 0x40
 8002a28:	2100      	movs	r1, #0
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f00d fedc 	bl	80107e8 <memset>
            TERM_ADD(gh, *d);                   /* Add character to term */
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8002a36:	2b0b      	cmp	r3, #11
 8002a38:	f200 8097 	bhi.w	8002b6a <lwgps_process+0x162>
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8002a42:	4619      	mov	r1, r3
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	781a      	ldrb	r2, [r3, #0]
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	440b      	add	r3, r1
 8002a4c:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8002a56:	3301      	adds	r3, #1
 8002a58:	b2da      	uxtb	r2, r3
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8002a66:	461a      	mov	r2, r3
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	4413      	add	r3, r2
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 8002a72:	e07a      	b.n	8002b6a <lwgps_process+0x162>
        } else if (*d == ',') {                 /* Term separator character */
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	781b      	ldrb	r3, [r3, #0]
 8002a78:	2b2c      	cmp	r3, #44	; 0x2c
 8002a7a:	d11d      	bne.n	8002ab8 <lwgps_process+0xb0>
            prv_parse_term(gh);                 /* Parse term we have currently in memory */
 8002a7c:	68f8      	ldr	r0, [r7, #12]
 8002a7e:	f7ff fbd7 	bl	8002230 <prv_parse_term>
            CRC_ADD(gh, *d);                    /* Add character to CRC computation */
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	f893 2081 	ldrb.w	r2, [r3, #129]	; 0x81
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	781b      	ldrb	r3, [r3, #0]
 8002a8c:	4053      	eors	r3, r2
 8002a8e:	b2da      	uxtb	r2, r3
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
            TERM_NEXT(gh);                      /* Start with next term */
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8002aac:	3301      	adds	r3, #1
 8002aae:	b2da      	uxtb	r2, r3
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
 8002ab6:	e058      	b.n	8002b6a <lwgps_process+0x162>
        } else if (*d == '*') {                 /* Start indicates end of data for CRC computation */
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	781b      	ldrb	r3, [r3, #0]
 8002abc:	2b2a      	cmp	r3, #42	; 0x2a
 8002abe:	d117      	bne.n	8002af0 <lwgps_process+0xe8>
            prv_parse_term(gh);                 /* Parse term we have currently in memory */
 8002ac0:	68f8      	ldr	r0, [r7, #12]
 8002ac2:	f7ff fbb5 	bl	8002230 <prv_parse_term>
            gh->p.star = 1;                     /* STAR detected */
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	2201      	movs	r2, #1
 8002aca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
            TERM_NEXT(gh);                      /* Start with next term */
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8002ae4:	3301      	adds	r3, #1
 8002ae6:	b2da      	uxtb	r2, r3
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
 8002aee:	e03c      	b.n	8002b6a <lwgps_process+0x162>
        } else if (*d == '\r') {
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	781b      	ldrb	r3, [r3, #0]
 8002af4:	2b0d      	cmp	r3, #13
 8002af6:	d109      	bne.n	8002b0c <lwgps_process+0x104>
            if (prv_check_crc(gh)) {            /* Check for CRC result */
 8002af8:	68f8      	ldr	r0, [r7, #12]
 8002afa:	f7ff fe45 	bl	8002788 <prv_check_crc>
 8002afe:	4603      	mov	r3, r0
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d032      	beq.n	8002b6a <lwgps_process+0x162>
                /* CRC is OK, in theory we can copy data from statements to user data */
                prv_copy_from_tmp_memory(gh);   /* Copy memory from temporary to user memory */
 8002b04:	68f8      	ldr	r0, [r7, #12]
 8002b06:	f7ff feca 	bl	800289e <prv_copy_from_tmp_memory>
 8002b0a:	e02e      	b.n	8002b6a <lwgps_process+0x162>
            } else if (evt_fn != NULL) {
                evt_fn(STAT_CHECKSUM_FAIL);
#endif /* LWGPS_CFG_STATUS */
            }
        } else {
            if (!gh->p.star) {                  /* Add to CRC only if star not yet detected */
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d109      	bne.n	8002b2a <lwgps_process+0x122>
                CRC_ADD(gh, *d);                /* Add to CRC */
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	f893 2081 	ldrb.w	r2, [r3, #129]	; 0x81
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	781b      	ldrb	r3, [r3, #0]
 8002b20:	4053      	eors	r3, r2
 8002b22:	b2da      	uxtb	r2, r3
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
            }
            TERM_ADD(gh, *d);                   /* Add character to term */
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8002b30:	2b0b      	cmp	r3, #11
 8002b32:	d81a      	bhi.n	8002b6a <lwgps_process+0x162>
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8002b3a:	4619      	mov	r1, r3
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	781a      	ldrb	r2, [r3, #0]
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	440b      	add	r3, r1
 8002b44:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8002b4e:	3301      	adds	r3, #1
 8002b50:	b2da      	uxtb	r2, r3
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8002b5e:	461a      	mov	r2, r3
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	4413      	add	r3, r2
 8002b64:	2200      	movs	r2, #0
 8002b66:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
    for (; len > 0; ++d, --len) {               /* Process all bytes */
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	3301      	adds	r3, #1
 8002b6e:	617b      	str	r3, [r7, #20]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	3b01      	subs	r3, #1
 8002b74:	607b      	str	r3, [r7, #4]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	f47f af4e 	bne.w	8002a1a <lwgps_process+0x12>
        }
    }
    return 1;
 8002b7e:	2301      	movs	r3, #1
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	3718      	adds	r7, #24
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}

08002b88 <bno055_assignI2C>:

#include "bno055.h"

I2C_HandleTypeDef *_bno055_i2c_port;

void bno055_assignI2C(I2C_HandleTypeDef *hi2c_device) {
 8002b88:	b480      	push	{r7}
 8002b8a:	b083      	sub	sp, #12
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  _bno055_i2c_port = hi2c_device;
 8002b90:	4a04      	ldr	r2, [pc, #16]	; (8002ba4 <bno055_assignI2C+0x1c>)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6013      	str	r3, [r2, #0]
}
 8002b96:	bf00      	nop
 8002b98:	370c      	adds	r7, #12
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr
 8002ba2:	bf00      	nop
 8002ba4:	20000264 	.word	0x20000264

08002ba8 <bno055_delay>:

void bno055_delay(int time) {
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b082      	sub	sp, #8
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
#ifdef FREERTOS_ENABLED
  osDelay(time);
#else
  HAL_Delay(time);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f001 fb72 	bl	800429c <HAL_Delay>
#endif
}
 8002bb8:	bf00      	nop
 8002bba:	3708      	adds	r7, #8
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}

08002bc0 <bno055_writeData>:

void bno055_writeData(uint8_t reg, uint8_t data) {
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b088      	sub	sp, #32
 8002bc4:	af02      	add	r7, sp, #8
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	460a      	mov	r2, r1
 8002bca:	71fb      	strb	r3, [r7, #7]
 8002bcc:	4613      	mov	r3, r2
 8002bce:	71bb      	strb	r3, [r7, #6]
  uint8_t txdata[2] = {reg, data};
 8002bd0:	79fb      	ldrb	r3, [r7, #7]
 8002bd2:	733b      	strb	r3, [r7, #12]
 8002bd4:	79bb      	ldrb	r3, [r7, #6]
 8002bd6:	737b      	strb	r3, [r7, #13]
  uint8_t status;
  status = HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1,
 8002bd8:	4b5a      	ldr	r3, [pc, #360]	; (8002d44 <bno055_writeData+0x184>)
 8002bda:	6818      	ldr	r0, [r3, #0]
 8002bdc:	f107 020c 	add.w	r2, r7, #12
 8002be0:	230a      	movs	r3, #10
 8002be2:	9300      	str	r3, [sp, #0]
 8002be4:	2302      	movs	r3, #2
 8002be6:	2150      	movs	r1, #80	; 0x50
 8002be8:	f004 fcb6 	bl	8007558 <HAL_I2C_Master_Transmit>
 8002bec:	4603      	mov	r3, r0
 8002bee:	75fb      	strb	r3, [r7, #23]
                                   txdata, sizeof(txdata), 10);
  if (status == HAL_OK) {
 8002bf0:	7dfb      	ldrb	r3, [r7, #23]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	f000 80a0 	beq.w	8002d38 <bno055_writeData+0x178>
    return;
  }

  if (status == HAL_ERROR) {
 8002bf8:	7dfb      	ldrb	r3, [r7, #23]
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	d103      	bne.n	8002c06 <bno055_writeData+0x46>
    printf("HAL_I2C_Master_Transmit HAL_ERROR\r\n");
 8002bfe:	4852      	ldr	r0, [pc, #328]	; (8002d48 <bno055_writeData+0x188>)
 8002c00:	f00d fd12 	bl	8010628 <puts>
 8002c04:	e012      	b.n	8002c2c <bno055_writeData+0x6c>
  } else if (status == HAL_TIMEOUT) {
 8002c06:	7dfb      	ldrb	r3, [r7, #23]
 8002c08:	2b03      	cmp	r3, #3
 8002c0a:	d103      	bne.n	8002c14 <bno055_writeData+0x54>
    printf("HAL_I2C_Master_Transmit HAL_TIMEOUT\r\n");
 8002c0c:	484f      	ldr	r0, [pc, #316]	; (8002d4c <bno055_writeData+0x18c>)
 8002c0e:	f00d fd0b 	bl	8010628 <puts>
 8002c12:	e00b      	b.n	8002c2c <bno055_writeData+0x6c>
  } else if (status == HAL_BUSY) {
 8002c14:	7dfb      	ldrb	r3, [r7, #23]
 8002c16:	2b02      	cmp	r3, #2
 8002c18:	d103      	bne.n	8002c22 <bno055_writeData+0x62>
    printf("HAL_I2C_Master_Transmit HAL_BUSY\r\n");
 8002c1a:	484d      	ldr	r0, [pc, #308]	; (8002d50 <bno055_writeData+0x190>)
 8002c1c:	f00d fd04 	bl	8010628 <puts>
 8002c20:	e004      	b.n	8002c2c <bno055_writeData+0x6c>
  } else {
    printf("Unknown status data %d", status);
 8002c22:	7dfb      	ldrb	r3, [r7, #23]
 8002c24:	4619      	mov	r1, r3
 8002c26:	484b      	ldr	r0, [pc, #300]	; (8002d54 <bno055_writeData+0x194>)
 8002c28:	f00d fc98 	bl	801055c <iprintf>
  }

  uint32_t error = HAL_I2C_GetError(_bno055_i2c_port);
 8002c2c:	4b45      	ldr	r3, [pc, #276]	; (8002d44 <bno055_writeData+0x184>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4618      	mov	r0, r3
 8002c32:	f005 fafb 	bl	800822c <HAL_I2C_GetError>
 8002c36:	6138      	str	r0, [r7, #16]
  if (error == HAL_I2C_ERROR_NONE) {
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d07e      	beq.n	8002d3c <bno055_writeData+0x17c>
    return;
  } else if (error == HAL_I2C_ERROR_BERR) {
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	2b01      	cmp	r3, #1
 8002c42:	d103      	bne.n	8002c4c <bno055_writeData+0x8c>
    printf("HAL_I2C_ERROR_BERR\r\n");
 8002c44:	4844      	ldr	r0, [pc, #272]	; (8002d58 <bno055_writeData+0x198>)
 8002c46:	f00d fcef 	bl	8010628 <puts>
 8002c4a:	e021      	b.n	8002c90 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_ARLO) {
 8002c4c:	693b      	ldr	r3, [r7, #16]
 8002c4e:	2b02      	cmp	r3, #2
 8002c50:	d103      	bne.n	8002c5a <bno055_writeData+0x9a>
    printf("HAL_I2C_ERROR_ARLO\r\n");
 8002c52:	4842      	ldr	r0, [pc, #264]	; (8002d5c <bno055_writeData+0x19c>)
 8002c54:	f00d fce8 	bl	8010628 <puts>
 8002c58:	e01a      	b.n	8002c90 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_AF) {
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	2b04      	cmp	r3, #4
 8002c5e:	d103      	bne.n	8002c68 <bno055_writeData+0xa8>
    printf("HAL_I2C_ERROR_AF\r\n");
 8002c60:	483f      	ldr	r0, [pc, #252]	; (8002d60 <bno055_writeData+0x1a0>)
 8002c62:	f00d fce1 	bl	8010628 <puts>
 8002c66:	e013      	b.n	8002c90 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_OVR) {
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	2b08      	cmp	r3, #8
 8002c6c:	d103      	bne.n	8002c76 <bno055_writeData+0xb6>
    printf("HAL_I2C_ERROR_OVR\r\n");
 8002c6e:	483d      	ldr	r0, [pc, #244]	; (8002d64 <bno055_writeData+0x1a4>)
 8002c70:	f00d fcda 	bl	8010628 <puts>
 8002c74:	e00c      	b.n	8002c90 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_DMA) {
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	2b10      	cmp	r3, #16
 8002c7a:	d103      	bne.n	8002c84 <bno055_writeData+0xc4>
    printf("HAL_I2C_ERROR_DMA\r\n");
 8002c7c:	483a      	ldr	r0, [pc, #232]	; (8002d68 <bno055_writeData+0x1a8>)
 8002c7e:	f00d fcd3 	bl	8010628 <puts>
 8002c82:	e005      	b.n	8002c90 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_TIMEOUT) {
 8002c84:	693b      	ldr	r3, [r7, #16]
 8002c86:	2b20      	cmp	r3, #32
 8002c88:	d102      	bne.n	8002c90 <bno055_writeData+0xd0>
    printf("HAL_I2C_ERROR_TIMEOUT\r\n");
 8002c8a:	4838      	ldr	r0, [pc, #224]	; (8002d6c <bno055_writeData+0x1ac>)
 8002c8c:	f00d fccc 	bl	8010628 <puts>
  }

  HAL_I2C_StateTypeDef state = HAL_I2C_GetState(_bno055_i2c_port);
 8002c90:	4b2c      	ldr	r3, [pc, #176]	; (8002d44 <bno055_writeData+0x184>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4618      	mov	r0, r3
 8002c96:	f005 fabb 	bl	8008210 <HAL_I2C_GetState>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	73fb      	strb	r3, [r7, #15]
  if (state == HAL_I2C_STATE_RESET) {
 8002c9e:	7bfb      	ldrb	r3, [r7, #15]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d103      	bne.n	8002cac <bno055_writeData+0xec>
    printf("HAL_I2C_STATE_RESET\r\n");
 8002ca4:	4832      	ldr	r0, [pc, #200]	; (8002d70 <bno055_writeData+0x1b0>)
 8002ca6:	f00d fcbf 	bl	8010628 <puts>
 8002caa:	e048      	b.n	8002d3e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_READY) {
 8002cac:	7bfb      	ldrb	r3, [r7, #15]
 8002cae:	2b20      	cmp	r3, #32
 8002cb0:	d103      	bne.n	8002cba <bno055_writeData+0xfa>
    printf("HAL_I2C_STATE_RESET\r\n");
 8002cb2:	482f      	ldr	r0, [pc, #188]	; (8002d70 <bno055_writeData+0x1b0>)
 8002cb4:	f00d fcb8 	bl	8010628 <puts>
 8002cb8:	e041      	b.n	8002d3e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY) {
 8002cba:	7bfb      	ldrb	r3, [r7, #15]
 8002cbc:	2b24      	cmp	r3, #36	; 0x24
 8002cbe:	d103      	bne.n	8002cc8 <bno055_writeData+0x108>
    printf("HAL_I2C_STATE_BUSY\r\n");
 8002cc0:	482c      	ldr	r0, [pc, #176]	; (8002d74 <bno055_writeData+0x1b4>)
 8002cc2:	f00d fcb1 	bl	8010628 <puts>
 8002cc6:	e03a      	b.n	8002d3e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX) {
 8002cc8:	7bfb      	ldrb	r3, [r7, #15]
 8002cca:	2b21      	cmp	r3, #33	; 0x21
 8002ccc:	d103      	bne.n	8002cd6 <bno055_writeData+0x116>
    printf("HAL_I2C_STATE_BUSY_TX\r\n");
 8002cce:	482a      	ldr	r0, [pc, #168]	; (8002d78 <bno055_writeData+0x1b8>)
 8002cd0:	f00d fcaa 	bl	8010628 <puts>
 8002cd4:	e033      	b.n	8002d3e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX) {
 8002cd6:	7bfb      	ldrb	r3, [r7, #15]
 8002cd8:	2b22      	cmp	r3, #34	; 0x22
 8002cda:	d103      	bne.n	8002ce4 <bno055_writeData+0x124>
    printf("HAL_I2C_STATE_BUSY_RX\r\n");
 8002cdc:	4827      	ldr	r0, [pc, #156]	; (8002d7c <bno055_writeData+0x1bc>)
 8002cde:	f00d fca3 	bl	8010628 <puts>
 8002ce2:	e02c      	b.n	8002d3e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_LISTEN) {
 8002ce4:	7bfb      	ldrb	r3, [r7, #15]
 8002ce6:	2b28      	cmp	r3, #40	; 0x28
 8002ce8:	d103      	bne.n	8002cf2 <bno055_writeData+0x132>
    printf("HAL_I2C_STATE_LISTEN\r\n");
 8002cea:	4825      	ldr	r0, [pc, #148]	; (8002d80 <bno055_writeData+0x1c0>)
 8002cec:	f00d fc9c 	bl	8010628 <puts>
 8002cf0:	e025      	b.n	8002d3e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX_LISTEN) {
 8002cf2:	7bfb      	ldrb	r3, [r7, #15]
 8002cf4:	2b29      	cmp	r3, #41	; 0x29
 8002cf6:	d103      	bne.n	8002d00 <bno055_writeData+0x140>
    printf("HAL_I2C_STATE_BUSY_TX_LISTEN\r\n");
 8002cf8:	4822      	ldr	r0, [pc, #136]	; (8002d84 <bno055_writeData+0x1c4>)
 8002cfa:	f00d fc95 	bl	8010628 <puts>
 8002cfe:	e01e      	b.n	8002d3e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX_LISTEN) {
 8002d00:	7bfb      	ldrb	r3, [r7, #15]
 8002d02:	2b2a      	cmp	r3, #42	; 0x2a
 8002d04:	d103      	bne.n	8002d0e <bno055_writeData+0x14e>
    printf("HAL_I2C_STATE_BUSY_RX_LISTEN\r\n");
 8002d06:	4820      	ldr	r0, [pc, #128]	; (8002d88 <bno055_writeData+0x1c8>)
 8002d08:	f00d fc8e 	bl	8010628 <puts>
 8002d0c:	e017      	b.n	8002d3e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ABORT) {
 8002d0e:	7bfb      	ldrb	r3, [r7, #15]
 8002d10:	2b60      	cmp	r3, #96	; 0x60
 8002d12:	d103      	bne.n	8002d1c <bno055_writeData+0x15c>
    printf("HAL_I2C_STATE_ABORT\r\n");
 8002d14:	481d      	ldr	r0, [pc, #116]	; (8002d8c <bno055_writeData+0x1cc>)
 8002d16:	f00d fc87 	bl	8010628 <puts>
 8002d1a:	e010      	b.n	8002d3e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_TIMEOUT) {
 8002d1c:	7bfb      	ldrb	r3, [r7, #15]
 8002d1e:	2ba0      	cmp	r3, #160	; 0xa0
 8002d20:	d103      	bne.n	8002d2a <bno055_writeData+0x16a>
    printf("HAL_I2C_STATE_TIMEOUT\r\n");
 8002d22:	481b      	ldr	r0, [pc, #108]	; (8002d90 <bno055_writeData+0x1d0>)
 8002d24:	f00d fc80 	bl	8010628 <puts>
 8002d28:	e009      	b.n	8002d3e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ERROR) {
 8002d2a:	7bfb      	ldrb	r3, [r7, #15]
 8002d2c:	2be0      	cmp	r3, #224	; 0xe0
 8002d2e:	d106      	bne.n	8002d3e <bno055_writeData+0x17e>
    printf("HAL_I2C_STATE_ERROR\r\n");
 8002d30:	4818      	ldr	r0, [pc, #96]	; (8002d94 <bno055_writeData+0x1d4>)
 8002d32:	f00d fc79 	bl	8010628 <puts>
 8002d36:	e002      	b.n	8002d3e <bno055_writeData+0x17e>
    return;
 8002d38:	bf00      	nop
 8002d3a:	e000      	b.n	8002d3e <bno055_writeData+0x17e>
    return;
 8002d3c:	bf00      	nop
  }
  // while (HAL_I2C_GetState(_bno055_i2c_port) != HAL_I2C_STATE_READY) {}
  // return;
}
 8002d3e:	3718      	adds	r7, #24
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}
 8002d44:	20000264 	.word	0x20000264
 8002d48:	0801326c 	.word	0x0801326c
 8002d4c:	08013290 	.word	0x08013290
 8002d50:	080132b8 	.word	0x080132b8
 8002d54:	080132dc 	.word	0x080132dc
 8002d58:	080132f4 	.word	0x080132f4
 8002d5c:	08013308 	.word	0x08013308
 8002d60:	0801331c 	.word	0x0801331c
 8002d64:	08013330 	.word	0x08013330
 8002d68:	08013344 	.word	0x08013344
 8002d6c:	08013358 	.word	0x08013358
 8002d70:	08013370 	.word	0x08013370
 8002d74:	08013388 	.word	0x08013388
 8002d78:	0801339c 	.word	0x0801339c
 8002d7c:	080133b4 	.word	0x080133b4
 8002d80:	080133cc 	.word	0x080133cc
 8002d84:	080133e4 	.word	0x080133e4
 8002d88:	08013404 	.word	0x08013404
 8002d8c:	08013424 	.word	0x08013424
 8002d90:	0801343c 	.word	0x0801343c
 8002d94:	08013454 	.word	0x08013454

08002d98 <bno055_readData>:

void bno055_readData(uint8_t reg, uint8_t *data, uint8_t len) {
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b084      	sub	sp, #16
 8002d9c:	af02      	add	r7, sp, #8
 8002d9e:	4603      	mov	r3, r0
 8002da0:	6039      	str	r1, [r7, #0]
 8002da2:	71fb      	strb	r3, [r7, #7]
 8002da4:	4613      	mov	r3, r2
 8002da6:	71bb      	strb	r3, [r7, #6]
  HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1, &reg, 1,
 8002da8:	4b0b      	ldr	r3, [pc, #44]	; (8002dd8 <bno055_readData+0x40>)
 8002daa:	6818      	ldr	r0, [r3, #0]
 8002dac:	1dfa      	adds	r2, r7, #7
 8002dae:	2364      	movs	r3, #100	; 0x64
 8002db0:	9300      	str	r3, [sp, #0]
 8002db2:	2301      	movs	r3, #1
 8002db4:	2150      	movs	r1, #80	; 0x50
 8002db6:	f004 fbcf 	bl	8007558 <HAL_I2C_Master_Transmit>
                          100);
  HAL_I2C_Master_Receive(_bno055_i2c_port, BNO055_I2C_ADDR << 1, data, len,
 8002dba:	4b07      	ldr	r3, [pc, #28]	; (8002dd8 <bno055_readData+0x40>)
 8002dbc:	6818      	ldr	r0, [r3, #0]
 8002dbe:	79bb      	ldrb	r3, [r7, #6]
 8002dc0:	b29b      	uxth	r3, r3
 8002dc2:	2264      	movs	r2, #100	; 0x64
 8002dc4:	9200      	str	r2, [sp, #0]
 8002dc6:	683a      	ldr	r2, [r7, #0]
 8002dc8:	2150      	movs	r1, #80	; 0x50
 8002dca:	f004 fcc3 	bl	8007754 <HAL_I2C_Master_Receive>
                         100);
  // HAL_I2C_Mem_Read(_bno055_i2c_port, BNO055_I2C_ADDR_LO<<1, reg,
  // I2C_MEMADD_SIZE_8BIT, data, len, 100);
}
 8002dce:	bf00      	nop
 8002dd0:	3708      	adds	r7, #8
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}
 8002dd6:	bf00      	nop
 8002dd8:	20000264 	.word	0x20000264

08002ddc <gps_buffer_kontrol>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// Buffer'daki tüm değerlerin sıfırdan farklı olup olmadığını kontrol eden fonksiyon
bool gps_buffer_kontrol(uint8_t *buffer, size_t length) {
 8002ddc:	b480      	push	{r7}
 8002dde:	b085      	sub	sp, #20
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
 8002de4:	6039      	str	r1, [r7, #0]
    for (size_t i = 0; i < length; i++) {
 8002de6:	2300      	movs	r3, #0
 8002de8:	60fb      	str	r3, [r7, #12]
 8002dea:	e00a      	b.n	8002e02 <gps_buffer_kontrol+0x26>
        if (buffer[i] == 0) {
 8002dec:	687a      	ldr	r2, [r7, #4]
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	4413      	add	r3, r2
 8002df2:	781b      	ldrb	r3, [r3, #0]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d101      	bne.n	8002dfc <gps_buffer_kontrol+0x20>
            return false;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	e007      	b.n	8002e0c <gps_buffer_kontrol+0x30>
    for (size_t i = 0; i < length; i++) {
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	3301      	adds	r3, #1
 8002e00:	60fb      	str	r3, [r7, #12]
 8002e02:	68fa      	ldr	r2, [r7, #12]
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	429a      	cmp	r2, r3
 8002e08:	d3f0      	bcc.n	8002dec <gps_buffer_kontrol+0x10>
        }
    }
    return true;
 8002e0a:	2301      	movs	r3, #1
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	3714      	adds	r7, #20
 8002e10:	46bd      	mov	sp, r7
 8002e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e16:	4770      	bx	lr

08002e18 <USBH_UserProcess>:

// Kullanıcı callback fonksiyonu
void USBH_UserProcess(USBH_HandleTypeDef *phost, uint8_t id) {
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b082      	sub	sp, #8
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
 8002e20:	460b      	mov	r3, r1
 8002e22:	70fb      	strb	r3, [r7, #3]
    switch (id) {
 8002e24:	78fb      	ldrb	r3, [r7, #3]
 8002e26:	3b01      	subs	r3, #1
 8002e28:	2b04      	cmp	r3, #4
 8002e2a:	d80d      	bhi.n	8002e48 <USBH_UserProcess+0x30>
 8002e2c:	a201      	add	r2, pc, #4	; (adr r2, 8002e34 <USBH_UserProcess+0x1c>)
 8002e2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e32:	bf00      	nop
 8002e34:	08002e55 	.word	0x08002e55
 8002e38:	08002e55 	.word	0x08002e55
 8002e3c:	08002e49 	.word	0x08002e49
 8002e40:	08002e55 	.word	0x08002e55
 8002e44:	08002e55 	.word	0x08002e55
        case HOST_USER_CLASS_ACTIVE:
            break;
        case HOST_USER_CONNECTION:
            break;
        default:
            printf("Unhandled user process: %d\n", id);
 8002e48:	78fb      	ldrb	r3, [r7, #3]
 8002e4a:	4619      	mov	r1, r3
 8002e4c:	4804      	ldr	r0, [pc, #16]	; (8002e60 <USBH_UserProcess+0x48>)
 8002e4e:	f00d fb85 	bl	801055c <iprintf>
            break;
 8002e52:	e000      	b.n	8002e56 <USBH_UserProcess+0x3e>
            break;
 8002e54:	bf00      	nop
    }
}
 8002e56:	bf00      	nop
 8002e58:	3708      	adds	r7, #8
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}
 8002e5e:	bf00      	nop
 8002e60:	0801346c 	.word	0x0801346c
 8002e64:	00000000 	.word	0x00000000

08002e68 <basinc_irtifa_cevir>:

//Basınc irtifa func
float basinc_irtifa_cevir()
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	af00      	add	r7, sp, #0
	BME280_Measure();
 8002e6c:	f7fe fea4 	bl	8001bb8 <BME280_Measure>
	return 44330 * (1.0 - pow((Pressure/100) / Pressure, 0.1903));
 8002e70:	4b1d      	ldr	r3, [pc, #116]	; (8002ee8 <basinc_irtifa_cevir+0x80>)
 8002e72:	edd3 7a00 	vldr	s15, [r3]
 8002e76:	eddf 6a1d 	vldr	s13, [pc, #116]	; 8002eec <basinc_irtifa_cevir+0x84>
 8002e7a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002e7e:	4b1a      	ldr	r3, [pc, #104]	; (8002ee8 <basinc_irtifa_cevir+0x80>)
 8002e80:	edd3 7a00 	vldr	s15, [r3]
 8002e84:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002e88:	ee16 0a90 	vmov	r0, s13
 8002e8c:	f7fd fb74 	bl	8000578 <__aeabi_f2d>
 8002e90:	4602      	mov	r2, r0
 8002e92:	460b      	mov	r3, r1
 8002e94:	ed9f 1b10 	vldr	d1, [pc, #64]	; 8002ed8 <basinc_irtifa_cevir+0x70>
 8002e98:	ec43 2b10 	vmov	d0, r2, r3
 8002e9c:	f00f fa60 	bl	8012360 <pow>
 8002ea0:	ec53 2b10 	vmov	r2, r3, d0
 8002ea4:	f04f 0000 	mov.w	r0, #0
 8002ea8:	4911      	ldr	r1, [pc, #68]	; (8002ef0 <basinc_irtifa_cevir+0x88>)
 8002eaa:	f7fd fa05 	bl	80002b8 <__aeabi_dsub>
 8002eae:	4602      	mov	r2, r0
 8002eb0:	460b      	mov	r3, r1
 8002eb2:	4610      	mov	r0, r2
 8002eb4:	4619      	mov	r1, r3
 8002eb6:	a30a      	add	r3, pc, #40	; (adr r3, 8002ee0 <basinc_irtifa_cevir+0x78>)
 8002eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ebc:	f7fd fbb4 	bl	8000628 <__aeabi_dmul>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	460b      	mov	r3, r1
 8002ec4:	4610      	mov	r0, r2
 8002ec6:	4619      	mov	r1, r3
 8002ec8:	f7fd fea6 	bl	8000c18 <__aeabi_d2f>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	ee07 3a90 	vmov	s15, r3
}
 8002ed2:	eeb0 0a67 	vmov.f32	s0, s15
 8002ed6:	bd80      	pop	{r7, pc}
 8002ed8:	1a36e2eb 	.word	0x1a36e2eb
 8002edc:	3fc85bc0 	.word	0x3fc85bc0
 8002ee0:	00000000 	.word	0x00000000
 8002ee4:	40e5a540 	.word	0x40e5a540
 8002ee8:	200005e4 	.word	0x200005e4
 8002eec:	42c80000 	.word	0x42c80000
 8002ef0:	3ff00000 	.word	0x3ff00000

08002ef4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b082      	sub	sp, #8
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
	if(huart == &huart1) {
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	4a14      	ldr	r2, [pc, #80]	; (8002f50 <HAL_UART_RxCpltCallback+0x5c>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d120      	bne.n	8002f46 <HAL_UART_RxCpltCallback+0x52>
		lwgps_process(&gps, rx_buffer, 128);
 8002f04:	2280      	movs	r2, #128	; 0x80
 8002f06:	4913      	ldr	r1, [pc, #76]	; (8002f54 <HAL_UART_RxCpltCallback+0x60>)
 8002f08:	4813      	ldr	r0, [pc, #76]	; (8002f58 <HAL_UART_RxCpltCallback+0x64>)
 8002f0a:	f7ff fd7d 	bl	8002a08 <lwgps_process>
		enlem = gps.latitude;
 8002f0e:	4b12      	ldr	r3, [pc, #72]	; (8002f58 <HAL_UART_RxCpltCallback+0x64>)
 8002f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f14:	4610      	mov	r0, r2
 8002f16:	4619      	mov	r1, r3
 8002f18:	f7fd fe7e 	bl	8000c18 <__aeabi_d2f>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	4a0f      	ldr	r2, [pc, #60]	; (8002f5c <HAL_UART_RxCpltCallback+0x68>)
 8002f20:	6013      	str	r3, [r2, #0]
		boylam = gps.longitude;
 8002f22:	4b0d      	ldr	r3, [pc, #52]	; (8002f58 <HAL_UART_RxCpltCallback+0x64>)
 8002f24:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002f28:	4610      	mov	r0, r2
 8002f2a:	4619      	mov	r1, r3
 8002f2c:	f7fd fe74 	bl	8000c18 <__aeabi_d2f>
 8002f30:	4603      	mov	r3, r0
 8002f32:	4a0b      	ldr	r2, [pc, #44]	; (8002f60 <HAL_UART_RxCpltCallback+0x6c>)
 8002f34:	6013      	str	r3, [r2, #0]

		gps_conn = gps_buffer_kontrol(rx_buffer, sizeof(rx_buffer));
 8002f36:	2180      	movs	r1, #128	; 0x80
 8002f38:	4806      	ldr	r0, [pc, #24]	; (8002f54 <HAL_UART_RxCpltCallback+0x60>)
 8002f3a:	f7ff ff4f 	bl	8002ddc <gps_buffer_kontrol>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	461a      	mov	r2, r3
 8002f42:	4b08      	ldr	r3, [pc, #32]	; (8002f64 <HAL_UART_RxCpltCallback+0x70>)
 8002f44:	701a      	strb	r2, [r3, #0]

	}
}
 8002f46:	bf00      	nop
 8002f48:	3708      	adds	r7, #8
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}
 8002f4e:	bf00      	nop
 8002f50:	200004c0 	.word	0x200004c0
 8002f54:	200006a8 	.word	0x200006a8
 8002f58:	200005f8 	.word	0x200005f8
 8002f5c:	200005dc 	.word	0x200005dc
 8002f60:	200005e0 	.word	0x200005e0
 8002f64:	20000728 	.word	0x20000728

08002f68 <floatToBytes>:

//Float değeri uint8_t dönüştürür
void floatToBytes(float floatValue, uint8_t byteArray[]) {
 8002f68:	b480      	push	{r7}
 8002f6a:	b085      	sub	sp, #20
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	ed87 0a01 	vstr	s0, [r7, #4]
 8002f72:	6038      	str	r0, [r7, #0]
    // Float değerini unsigned char dizisine dönüştür
    uint8_t *ptr = (uint8_t*)&floatValue;
 8002f74:	1d3b      	adds	r3, r7, #4
 8002f76:	60fb      	str	r3, [r7, #12]

    // Her bir byte'ı unsigned char dizisine kopyala
    for (int i = 0; i < sizeof(float); i++) {
 8002f78:	2300      	movs	r3, #0
 8002f7a:	60bb      	str	r3, [r7, #8]
 8002f7c:	e00a      	b.n	8002f94 <floatToBytes+0x2c>
        byteArray[i] = *ptr++;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	1c5a      	adds	r2, r3, #1
 8002f82:	60fa      	str	r2, [r7, #12]
 8002f84:	68ba      	ldr	r2, [r7, #8]
 8002f86:	6839      	ldr	r1, [r7, #0]
 8002f88:	440a      	add	r2, r1
 8002f8a:	781b      	ldrb	r3, [r3, #0]
 8002f8c:	7013      	strb	r3, [r2, #0]
    for (int i = 0; i < sizeof(float); i++) {
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	3301      	adds	r3, #1
 8002f92:	60bb      	str	r3, [r7, #8]
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	2b03      	cmp	r3, #3
 8002f98:	d9f1      	bls.n	8002f7e <floatToBytes+0x16>
    }
}
 8002f9a:	bf00      	nop
 8002f9c:	bf00      	nop
 8002f9e:	3714      	adds	r7, #20
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa6:	4770      	bx	lr

08002fa8 <HAL_TIM_PeriodElapsedCallback>:

//TIMER FUNC
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b084      	sub	sp, #16
 8002fac:	af02      	add	r7, sp, #8
 8002fae:	6078      	str	r0, [r7, #4]
	//BNO055 OKU
	if (htim->Instance == TIM2)//200Hz
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fb8:	d138      	bne.n	800302c <HAL_TIM_PeriodElapsedCallback+0x84>
	{
		  bno = bno055_getVectorEuler(); //FÜZYONLU VERİLER
 8002fba:	f7ff f835 	bl	8002028 <bno055_getVectorEuler>
 8002fbe:	eeb0 4a40 	vmov.f32	s8, s0
 8002fc2:	eef0 4a60 	vmov.f32	s9, s1
 8002fc6:	eeb0 5a41 	vmov.f32	s10, s2
 8002fca:	eef0 5a61 	vmov.f32	s11, s3
 8002fce:	eeb0 6a42 	vmov.f32	s12, s4
 8002fd2:	eef0 6a62 	vmov.f32	s13, s5
 8002fd6:	eeb0 7a43 	vmov.f32	s14, s6
 8002fda:	eef0 7a63 	vmov.f32	s15, s7
 8002fde:	4b3a      	ldr	r3, [pc, #232]	; (80030c8 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8002fe0:	ed83 4b00 	vstr	d4, [r3]
 8002fe4:	ed83 5b02 	vstr	d5, [r3, #8]
 8002fe8:	ed83 6b04 	vstr	d6, [r3, #16]
 8002fec:	ed83 7b06 	vstr	d7, [r3, #24]

		  Heading = bno.x;
 8002ff0:	4b35      	ldr	r3, [pc, #212]	; (80030c8 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8002ff2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002ff6:	4610      	mov	r0, r2
 8002ff8:	4619      	mov	r1, r3
 8002ffa:	f7fd fe0d 	bl	8000c18 <__aeabi_d2f>
 8002ffe:	4603      	mov	r3, r0
 8003000:	4a32      	ldr	r2, [pc, #200]	; (80030cc <HAL_TIM_PeriodElapsedCallback+0x124>)
 8003002:	6013      	str	r3, [r2, #0]
		  Roll = bno.y;
 8003004:	4b30      	ldr	r3, [pc, #192]	; (80030c8 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8003006:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800300a:	4610      	mov	r0, r2
 800300c:	4619      	mov	r1, r3
 800300e:	f7fd fe03 	bl	8000c18 <__aeabi_d2f>
 8003012:	4603      	mov	r3, r0
 8003014:	4a2e      	ldr	r2, [pc, #184]	; (80030d0 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8003016:	6013      	str	r3, [r2, #0]
		  Pitch = bno.z;
 8003018:	4b2b      	ldr	r3, [pc, #172]	; (80030c8 <HAL_TIM_PeriodElapsedCallback+0x120>)
 800301a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800301e:	4610      	mov	r0, r2
 8003020:	4619      	mov	r1, r3
 8003022:	f7fd fdf9 	bl	8000c18 <__aeabi_d2f>
 8003026:	4603      	mov	r3, r0
 8003028:	4a2a      	ldr	r2, [pc, #168]	; (80030d4 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 800302a:	6013      	str	r3, [r2, #0]

	}

	//BME280 READ
	if (htim->Instance == TIM4)//100Hz
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a29      	ldr	r2, [pc, #164]	; (80030d8 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d10e      	bne.n	8003054 <HAL_TIM_PeriodElapsedCallback+0xac>
	{
		irtifa = basinc_irtifa_cevir();
 8003036:	f7ff ff17 	bl	8002e68 <basinc_irtifa_cevir>
 800303a:	eef0 7a40 	vmov.f32	s15, s0
 800303e:	4b27      	ldr	r3, [pc, #156]	; (80030dc <HAL_TIM_PeriodElapsedCallback+0x134>)
 8003040:	edc3 7a00 	vstr	s15, [r3]
		//uint8_t tipinde değikenlere atama yapılacak
		//uint16_t low vr high bitlere bölünerek gönderilecek
		//float ise virgülden sonraki hanelere göre bitlere bölünerek atanacaltır.
		floatToBytes(irtifa, i2c_buffer);
 8003044:	4b25      	ldr	r3, [pc, #148]	; (80030dc <HAL_TIM_PeriodElapsedCallback+0x134>)
 8003046:	edd3 7a00 	vldr	s15, [r3]
 800304a:	4825      	ldr	r0, [pc, #148]	; (80030e0 <HAL_TIM_PeriodElapsedCallback+0x138>)
 800304c:	eeb0 0a67 	vmov.f32	s0, s15
 8003050:	f7ff ff8a 	bl	8002f68 <floatToBytes>
	}

	//I2C VERI GONDER
	if (htim->Instance == TIM6)//50Hz
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a22      	ldr	r2, [pc, #136]	; (80030e4 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d10d      	bne.n	800307a <HAL_TIM_PeriodElapsedCallback+0xd2>
		//		8. byte -> frekans 1. bytesi
		//		9. byte -> rssı değeri (sinyal güç ölçüsü)
		//********************I2C Veri Paketi**********************//

		//I2C ile ESP gönderme işlemi
		if (HAL_I2C_Master_Transmit(&hi2c2, I2C_SLAVE_ADDRESS << 1, i2c_buffer, sizeof(i2c_buffer), HAL_MAX_DELAY) != HAL_OK) {
 800305e:	f04f 33ff 	mov.w	r3, #4294967295
 8003062:	9300      	str	r3, [sp, #0]
 8003064:	2314      	movs	r3, #20
 8003066:	4a1e      	ldr	r2, [pc, #120]	; (80030e0 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8003068:	2160      	movs	r1, #96	; 0x60
 800306a:	481f      	ldr	r0, [pc, #124]	; (80030e8 <HAL_TIM_PeriodElapsedCallback+0x140>)
 800306c:	f004 fa74 	bl	8007558 <HAL_I2C_Master_Transmit>
 8003070:	4603      	mov	r3, r0
 8003072:	2b00      	cmp	r3, #0
 8003074:	d001      	beq.n	800307a <HAL_TIM_PeriodElapsedCallback+0xd2>
		    Error_Handler();
 8003076:	f000 fcc5 	bl	8003a04 <Error_Handler>
		}
	}

	if (htim->Instance == TIM7)//50Hz
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a1b      	ldr	r2, [pc, #108]	; (80030ec <HAL_TIM_PeriodElapsedCallback+0x144>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d113      	bne.n	80030ac <HAL_TIM_PeriodElapsedCallback+0x104>
	{
		//GPS LED
		if(gps_conn == true)
 8003084:	4b1a      	ldr	r3, [pc, #104]	; (80030f0 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8003086:	781b      	ldrb	r3, [r3, #0]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d004      	beq.n	8003096 <HAL_TIM_PeriodElapsedCallback+0xee>
		{
			HAL_GPIO_WritePin(LED2_GPIO_Port, LED1_Pin, 0);
 800308c:	2200      	movs	r2, #0
 800308e:	2101      	movs	r1, #1
 8003090:	4818      	ldr	r0, [pc, #96]	; (80030f4 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8003092:	f001 ffcf 	bl	8005034 <HAL_GPIO_WritePin>
		}
		if(gps_conn == false)
 8003096:	4b16      	ldr	r3, [pc, #88]	; (80030f0 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8003098:	781b      	ldrb	r3, [r3, #0]
 800309a:	f083 0301 	eor.w	r3, r3, #1
 800309e:	b2db      	uxtb	r3, r3
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d003      	beq.n	80030ac <HAL_TIM_PeriodElapsedCallback+0x104>
		{
			HAL_GPIO_TogglePin(LED2_GPIO_Port, LED1_Pin);
 80030a4:	2101      	movs	r1, #1
 80030a6:	4813      	ldr	r0, [pc, #76]	; (80030f4 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 80030a8:	f001 ffdd 	bl	8005066 <HAL_GPIO_TogglePin>


	}

	//Algoritma İkaz
	if (htim->Instance == TIM8)//50Hz
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a11      	ldr	r2, [pc, #68]	; (80030f8 <HAL_TIM_PeriodElapsedCallback+0x150>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d104      	bne.n	80030c0 <HAL_TIM_PeriodElapsedCallback+0x118>
	{
		checkRSSI(i2c_buffer, &onceki_rssi, &rssi_sayac);
 80030b6:	4a11      	ldr	r2, [pc, #68]	; (80030fc <HAL_TIM_PeriodElapsedCallback+0x154>)
 80030b8:	4911      	ldr	r1, [pc, #68]	; (8003100 <HAL_TIM_PeriodElapsedCallback+0x158>)
 80030ba:	4809      	ldr	r0, [pc, #36]	; (80030e0 <HAL_TIM_PeriodElapsedCallback+0x138>)
 80030bc:	f000 f822 	bl	8003104 <checkRSSI>
	}
}
 80030c0:	bf00      	nop
 80030c2:	3708      	adds	r7, #8
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd80      	pop	{r7, pc}
 80030c8:	200005b0 	.word	0x200005b0
 80030cc:	200005d0 	.word	0x200005d0
 80030d0:	200005d4 	.word	0x200005d4
 80030d4:	200005d8 	.word	0x200005d8
 80030d8:	40000800 	.word	0x40000800
 80030dc:	200005f0 	.word	0x200005f0
 80030e0:	2000072c 	.word	0x2000072c
 80030e4:	40001000 	.word	0x40001000
 80030e8:	200002bc 	.word	0x200002bc
 80030ec:	40001400 	.word	0x40001400
 80030f0:	20000728 	.word	0x20000728
 80030f4:	40020000 	.word	0x40020000
 80030f8:	40010400 	.word	0x40010400
 80030fc:	20000d1e 	.word	0x20000d1e
 8003100:	20000d1d 	.word	0x20000d1d

08003104 <checkRSSI>:


void checkRSSI(uint8_t *i2c_buffer, uint8_t *onceki_rssi, uint8_t *rssi_sayac) {
 8003104:	b480      	push	{r7}
 8003106:	b085      	sub	sp, #20
 8003108:	af00      	add	r7, sp, #0
 800310a:	60f8      	str	r0, [r7, #12]
 800310c:	60b9      	str	r1, [r7, #8]
 800310e:	607a      	str	r2, [r7, #4]
    if (i2c_buffer[9] > *onceki_rssi) {
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	3309      	adds	r3, #9
 8003114:	781a      	ldrb	r2, [r3, #0]
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	781b      	ldrb	r3, [r3, #0]
 800311a:	429a      	cmp	r2, r3
 800311c:	d90e      	bls.n	800313c <checkRSSI+0x38>
        (*rssi_sayac)++;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	781b      	ldrb	r3, [r3, #0]
 8003122:	3301      	adds	r3, #1
 8003124:	b2da      	uxtb	r2, r3
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	701a      	strb	r2, [r3, #0]
        if (*rssi_sayac >= 10) {
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	781b      	ldrb	r3, [r3, #0]
 800312e:	2b09      	cmp	r3, #9
 8003130:	d907      	bls.n	8003142 <checkRSSI+0x3e>
            i2c_buffer[10] = 1;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	330a      	adds	r3, #10
 8003136:	2201      	movs	r2, #1
 8003138:	701a      	strb	r2, [r3, #0]
 800313a:	e002      	b.n	8003142 <checkRSSI+0x3e>
        }
    } else {
        *rssi_sayac = 0;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2200      	movs	r2, #0
 8003140:	701a      	strb	r2, [r3, #0]
    }

    *onceki_rssi = i2c_buffer[9];
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	7a5a      	ldrb	r2, [r3, #9]
 8003146:	68bb      	ldr	r3, [r7, #8]
 8003148:	701a      	strb	r2, [r3, #0]
}
 800314a:	bf00      	nop
 800314c:	3714      	adds	r7, #20
 800314e:	46bd      	mov	sp, r7
 8003150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003154:	4770      	bx	lr
	...

08003158 <USBH_CDC_ReceiveCallback>:


void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b086      	sub	sp, #24
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
    USBH_Process(&hUSBHost);
 8003160:	4827      	ldr	r0, [pc, #156]	; (8003200 <USBH_CDC_ReceiveCallback+0xa8>)
 8003162:	f00a fbcb 	bl	800d8fc <USBH_Process>

    size_t i = 0;
 8003166:	2300      	movs	r3, #0
 8003168:	617b      	str	r3, [r7, #20]
    while (i < length) {
 800316a:	e03e      	b.n	80031ea <USBH_CDC_ReceiveCallback+0x92>
        uint8_t command = usb_buffer[i];
 800316c:	4a25      	ldr	r2, [pc, #148]	; (8003204 <USBH_CDC_ReceiveCallback+0xac>)
 800316e:	697b      	ldr	r3, [r7, #20]
 8003170:	4413      	add	r3, r2
 8003172:	781b      	ldrb	r3, [r3, #0]
 8003174:	73fb      	strb	r3, [r7, #15]

        switch (command) {
 8003176:	7bfb      	ldrb	r3, [r7, #15]
 8003178:	2b01      	cmp	r3, #1
 800317a:	d002      	beq.n	8003182 <USBH_CDC_ReceiveCallback+0x2a>
 800317c:	2b02      	cmp	r3, #2
 800317e:	d01e      	beq.n	80031be <USBH_CDC_ReceiveCallback+0x66>
                } else {
                    // Yetersiz veri, diziye atanmaz
                }
                break;
            default:
                break;
 8003180:	e030      	b.n	80031e4 <USBH_CDC_ReceiveCallback+0x8c>
                if (i + 8 < length) {
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	f103 0208 	add.w	r2, r3, #8
 8003188:	4b1f      	ldr	r3, [pc, #124]	; (8003208 <USBH_CDC_ReceiveCallback+0xb0>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	429a      	cmp	r2, r3
 800318e:	d226      	bcs.n	80031de <USBH_CDC_ReceiveCallback+0x86>
                    for (int j = 0; j < 6; j++) {
 8003190:	2300      	movs	r3, #0
 8003192:	613b      	str	r3, [r7, #16]
 8003194:	e00c      	b.n	80031b0 <USBH_CDC_ReceiveCallback+0x58>
                        i2c_buffer[j + 2] = usb_buffer[i + j + 1];
 8003196:	693a      	ldr	r2, [r7, #16]
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	4413      	add	r3, r2
 800319c:	1c5a      	adds	r2, r3, #1
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	3302      	adds	r3, #2
 80031a2:	4918      	ldr	r1, [pc, #96]	; (8003204 <USBH_CDC_ReceiveCallback+0xac>)
 80031a4:	5c89      	ldrb	r1, [r1, r2]
 80031a6:	4a19      	ldr	r2, [pc, #100]	; (800320c <USBH_CDC_ReceiveCallback+0xb4>)
 80031a8:	54d1      	strb	r1, [r2, r3]
                    for (int j = 0; j < 6; j++) {
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	3301      	adds	r3, #1
 80031ae:	613b      	str	r3, [r7, #16]
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	2b05      	cmp	r3, #5
 80031b4:	ddef      	ble.n	8003196 <USBH_CDC_ReceiveCallback+0x3e>
                    i += 8;
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	3308      	adds	r3, #8
 80031ba:	617b      	str	r3, [r7, #20]
                break;
 80031bc:	e00f      	b.n	80031de <USBH_CDC_ReceiveCallback+0x86>
                if (i + 1 < length) {
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	1c5a      	adds	r2, r3, #1
 80031c2:	4b11      	ldr	r3, [pc, #68]	; (8003208 <USBH_CDC_ReceiveCallback+0xb0>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	429a      	cmp	r2, r3
 80031c8:	d20b      	bcs.n	80031e2 <USBH_CDC_ReceiveCallback+0x8a>
                    i2c_buffer[9] = usb_buffer[i + 1];
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	3301      	adds	r3, #1
 80031ce:	4a0d      	ldr	r2, [pc, #52]	; (8003204 <USBH_CDC_ReceiveCallback+0xac>)
 80031d0:	5cd2      	ldrb	r2, [r2, r3]
 80031d2:	4b0e      	ldr	r3, [pc, #56]	; (800320c <USBH_CDC_ReceiveCallback+0xb4>)
 80031d4:	725a      	strb	r2, [r3, #9]
                    i += 1;
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	3301      	adds	r3, #1
 80031da:	617b      	str	r3, [r7, #20]
                break;
 80031dc:	e001      	b.n	80031e2 <USBH_CDC_ReceiveCallback+0x8a>
                break;
 80031de:	bf00      	nop
 80031e0:	e000      	b.n	80031e4 <USBH_CDC_ReceiveCallback+0x8c>
                break;
 80031e2:	bf00      	nop
        }
        i++;
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	3301      	adds	r3, #1
 80031e8:	617b      	str	r3, [r7, #20]
    while (i < length) {
 80031ea:	4b07      	ldr	r3, [pc, #28]	; (8003208 <USBH_CDC_ReceiveCallback+0xb0>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	697a      	ldr	r2, [r7, #20]
 80031f0:	429a      	cmp	r2, r3
 80031f2:	d3bb      	bcc.n	800316c <USBH_CDC_ReceiveCallback+0x14>
    }
}
 80031f4:	bf00      	nop
 80031f6:	bf00      	nop
 80031f8:	3718      	adds	r7, #24
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}
 80031fe:	bf00      	nop
 8003200:	20000740 	.word	0x20000740
 8003204:	20000b18 	.word	0x20000b18
 8003208:	20000d18 	.word	0x20000d18
 800320c:	2000072c 	.word	0x2000072c

08003210 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b082      	sub	sp, #8
 8003214:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003216:	f000 ffcf 	bl	80041b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800321a:	f000 f87f 	bl	800331c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800321e:	f000 fb69 	bl	80038f4 <MX_GPIO_Init>
  MX_DMA_Init();
 8003222:	f000 fb47 	bl	80038b4 <MX_DMA_Init>
  MX_I2C1_Init();
 8003226:	f000 f8e7 	bl	80033f8 <MX_I2C1_Init>
  MX_I2C2_Init();
 800322a:	f000 f913 	bl	8003454 <MX_I2C2_Init>
  MX_TIM1_Init();
 800322e:	f000 f93f 	bl	80034b0 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8003232:	f000 faeb 	bl	800380c <MX_USART1_UART_Init>
  MX_USB_HOST_Init();
 8003236:	f00b ff0b 	bl	800f050 <MX_USB_HOST_Init>
  MX_TIM2_Init();
 800323a:	f000 f98f 	bl	800355c <MX_TIM2_Init>
  MX_TIM4_Init();
 800323e:	f000 f9db 	bl	80035f8 <MX_TIM4_Init>
  MX_TIM6_Init();
 8003242:	f000 fa27 	bl	8003694 <MX_TIM6_Init>
  MX_USART3_UART_Init();
 8003246:	f000 fb0b 	bl	8003860 <MX_USART3_UART_Init>
  MX_TIM7_Init();
 800324a:	f000 fa59 	bl	8003700 <MX_TIM7_Init>
  MX_TIM8_Init();
 800324e:	f000 fa8d 	bl	800376c <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */

  //TIMER
  HAL_TIM_Base_Start_IT(&htim2);
 8003252:	4824      	ldr	r0, [pc, #144]	; (80032e4 <main+0xd4>)
 8003254:	f006 fdd6 	bl	8009e04 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 8003258:	4823      	ldr	r0, [pc, #140]	; (80032e8 <main+0xd8>)
 800325a:	f006 fdd3 	bl	8009e04 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim6);
 800325e:	4823      	ldr	r0, [pc, #140]	; (80032ec <main+0xdc>)
 8003260:	f006 fdd0 	bl	8009e04 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7);
 8003264:	4822      	ldr	r0, [pc, #136]	; (80032f0 <main+0xe0>)
 8003266:	f006 fdcd 	bl	8009e04 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim8);
 800326a:	4822      	ldr	r0, [pc, #136]	; (80032f4 <main+0xe4>)
 800326c:	f006 fdca 	bl	8009e04 <HAL_TIM_Base_Start_IT>

  //USB
  MX_USB_HOST_Init();
 8003270:	f00b feee 	bl	800f050 <MX_USB_HOST_Init>
  status = USBH_Init(&hUSBHost, USBH_UserProcess, 0);
 8003274:	2200      	movs	r2, #0
 8003276:	4920      	ldr	r1, [pc, #128]	; (80032f8 <main+0xe8>)
 8003278:	4820      	ldr	r0, [pc, #128]	; (80032fc <main+0xec>)
 800327a:	f00a f9f5 	bl	800d668 <USBH_Init>
 800327e:	4603      	mov	r3, r0
 8003280:	461a      	mov	r2, r3
 8003282:	4b1f      	ldr	r3, [pc, #124]	; (8003300 <main+0xf0>)
 8003284:	701a      	strb	r2, [r3, #0]
  USBH_CDC_ReceiveCallback(&hUSBHost);
 8003286:	481d      	ldr	r0, [pc, #116]	; (80032fc <main+0xec>)
 8003288:	f7ff ff66 	bl	8003158 <USBH_CDC_ReceiveCallback>

  //BME280
  BME280_Config(OSRS_2, OSRS_16, OSRS_1, MODE_NORMAL, T_SB_0p5, IIR_16);
 800328c:	2304      	movs	r3, #4
 800328e:	9301      	str	r3, [sp, #4]
 8003290:	2300      	movs	r3, #0
 8003292:	9300      	str	r3, [sp, #0]
 8003294:	2303      	movs	r3, #3
 8003296:	2201      	movs	r2, #1
 8003298:	2105      	movs	r1, #5
 800329a:	2002      	movs	r0, #2
 800329c:	f7fd fff2 	bl	8001284 <BME280_Config>

  BME280_Measure();
 80032a0:	f7fe fc8a 	bl	8001bb8 <BME280_Measure>
  HAL_Delay(50);
 80032a4:	2032      	movs	r0, #50	; 0x32
 80032a6:	f000 fff9 	bl	800429c <HAL_Delay>
  Pressure=Pressure/100;
 80032aa:	4b16      	ldr	r3, [pc, #88]	; (8003304 <main+0xf4>)
 80032ac:	ed93 7a00 	vldr	s14, [r3]
 80032b0:	eddf 6a15 	vldr	s13, [pc, #84]	; 8003308 <main+0xf8>
 80032b4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80032b8:	4b12      	ldr	r3, [pc, #72]	; (8003304 <main+0xf4>)
 80032ba:	edc3 7a00 	vstr	s15, [r3]

  //BNO055
  bno055_assignI2C(&hi2c1);
 80032be:	4813      	ldr	r0, [pc, #76]	; (800330c <main+0xfc>)
 80032c0:	f7ff fc62 	bl	8002b88 <bno055_assignI2C>
  bno055_setup();
 80032c4:	f7fe fd44 	bl	8001d50 <bno055_setup>
  bno055_setOperationModeNDOF();
 80032c8:	f7fe fd2f 	bl	8001d2a <bno055_setOperationModeNDOF>

  //GPS
  lwgps_init(&gps);
 80032cc:	4810      	ldr	r0, [pc, #64]	; (8003310 <main+0x100>)
 80032ce:	f7ff fb8d 	bl	80029ec <lwgps_init>
  HAL_UART_Receive_DMA(&huart1, (uint8_t *) rx_buffer, 128);
 80032d2:	2280      	movs	r2, #128	; 0x80
 80032d4:	490f      	ldr	r1, [pc, #60]	; (8003314 <main+0x104>)
 80032d6:	4810      	ldr	r0, [pc, #64]	; (8003318 <main+0x108>)
 80032d8:	f007 fc1e 	bl	800ab18 <HAL_UART_Receive_DMA>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80032dc:	f00b fede 	bl	800f09c <MX_USB_HOST_Process>
 80032e0:	e7fc      	b.n	80032dc <main+0xcc>
 80032e2:	bf00      	nop
 80032e4:	20000358 	.word	0x20000358
 80032e8:	200003a0 	.word	0x200003a0
 80032ec:	200003e8 	.word	0x200003e8
 80032f0:	20000430 	.word	0x20000430
 80032f4:	20000478 	.word	0x20000478
 80032f8:	08002e19 	.word	0x08002e19
 80032fc:	20000740 	.word	0x20000740
 8003300:	20000d1c 	.word	0x20000d1c
 8003304:	200005e4 	.word	0x200005e4
 8003308:	42c80000 	.word	0x42c80000
 800330c:	20000268 	.word	0x20000268
 8003310:	200005f8 	.word	0x200005f8
 8003314:	200006a8 	.word	0x200006a8
 8003318:	200004c0 	.word	0x200004c0

0800331c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b094      	sub	sp, #80	; 0x50
 8003320:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003322:	f107 031c 	add.w	r3, r7, #28
 8003326:	2234      	movs	r2, #52	; 0x34
 8003328:	2100      	movs	r1, #0
 800332a:	4618      	mov	r0, r3
 800332c:	f00d fa5c 	bl	80107e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003330:	f107 0308 	add.w	r3, r7, #8
 8003334:	2200      	movs	r2, #0
 8003336:	601a      	str	r2, [r3, #0]
 8003338:	605a      	str	r2, [r3, #4]
 800333a:	609a      	str	r2, [r3, #8]
 800333c:	60da      	str	r2, [r3, #12]
 800333e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003340:	2300      	movs	r3, #0
 8003342:	607b      	str	r3, [r7, #4]
 8003344:	4b2a      	ldr	r3, [pc, #168]	; (80033f0 <SystemClock_Config+0xd4>)
 8003346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003348:	4a29      	ldr	r2, [pc, #164]	; (80033f0 <SystemClock_Config+0xd4>)
 800334a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800334e:	6413      	str	r3, [r2, #64]	; 0x40
 8003350:	4b27      	ldr	r3, [pc, #156]	; (80033f0 <SystemClock_Config+0xd4>)
 8003352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003354:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003358:	607b      	str	r3, [r7, #4]
 800335a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800335c:	2300      	movs	r3, #0
 800335e:	603b      	str	r3, [r7, #0]
 8003360:	4b24      	ldr	r3, [pc, #144]	; (80033f4 <SystemClock_Config+0xd8>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003368:	4a22      	ldr	r2, [pc, #136]	; (80033f4 <SystemClock_Config+0xd8>)
 800336a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800336e:	6013      	str	r3, [r2, #0]
 8003370:	4b20      	ldr	r3, [pc, #128]	; (80033f4 <SystemClock_Config+0xd8>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003378:	603b      	str	r3, [r7, #0]
 800337a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800337c:	2301      	movs	r3, #1
 800337e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003380:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003384:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003386:	2302      	movs	r3, #2
 8003388:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800338a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800338e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 15;
 8003390:	230f      	movs	r3, #15
 8003392:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 144;
 8003394:	2390      	movs	r3, #144	; 0x90
 8003396:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003398:	2302      	movs	r3, #2
 800339a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 5;
 800339c:	2305      	movs	r3, #5
 800339e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80033a0:	2302      	movs	r3, #2
 80033a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80033a4:	f107 031c 	add.w	r3, r7, #28
 80033a8:	4618      	mov	r0, r3
 80033aa:	f006 fa3d 	bl	8009828 <HAL_RCC_OscConfig>
 80033ae:	4603      	mov	r3, r0
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d001      	beq.n	80033b8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80033b4:	f000 fb26 	bl	8003a04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80033b8:	230f      	movs	r3, #15
 80033ba:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80033bc:	2302      	movs	r3, #2
 80033be:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80033c0:	2300      	movs	r3, #0
 80033c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80033c4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80033c8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80033ca:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80033ce:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80033d0:	f107 0308 	add.w	r3, r7, #8
 80033d4:	2103      	movs	r1, #3
 80033d6:	4618      	mov	r0, r3
 80033d8:	f005 fc38 	bl	8008c4c <HAL_RCC_ClockConfig>
 80033dc:	4603      	mov	r3, r0
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d001      	beq.n	80033e6 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80033e2:	f000 fb0f 	bl	8003a04 <Error_Handler>
  }
}
 80033e6:	bf00      	nop
 80033e8:	3750      	adds	r7, #80	; 0x50
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}
 80033ee:	bf00      	nop
 80033f0:	40023800 	.word	0x40023800
 80033f4:	40007000 	.word	0x40007000

080033f8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80033fc:	4b12      	ldr	r3, [pc, #72]	; (8003448 <MX_I2C1_Init+0x50>)
 80033fe:	4a13      	ldr	r2, [pc, #76]	; (800344c <MX_I2C1_Init+0x54>)
 8003400:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8003402:	4b11      	ldr	r3, [pc, #68]	; (8003448 <MX_I2C1_Init+0x50>)
 8003404:	4a12      	ldr	r2, [pc, #72]	; (8003450 <MX_I2C1_Init+0x58>)
 8003406:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003408:	4b0f      	ldr	r3, [pc, #60]	; (8003448 <MX_I2C1_Init+0x50>)
 800340a:	2200      	movs	r2, #0
 800340c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800340e:	4b0e      	ldr	r3, [pc, #56]	; (8003448 <MX_I2C1_Init+0x50>)
 8003410:	2200      	movs	r2, #0
 8003412:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003414:	4b0c      	ldr	r3, [pc, #48]	; (8003448 <MX_I2C1_Init+0x50>)
 8003416:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800341a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800341c:	4b0a      	ldr	r3, [pc, #40]	; (8003448 <MX_I2C1_Init+0x50>)
 800341e:	2200      	movs	r2, #0
 8003420:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003422:	4b09      	ldr	r3, [pc, #36]	; (8003448 <MX_I2C1_Init+0x50>)
 8003424:	2200      	movs	r2, #0
 8003426:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003428:	4b07      	ldr	r3, [pc, #28]	; (8003448 <MX_I2C1_Init+0x50>)
 800342a:	2200      	movs	r2, #0
 800342c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800342e:	4b06      	ldr	r3, [pc, #24]	; (8003448 <MX_I2C1_Init+0x50>)
 8003430:	2200      	movs	r2, #0
 8003432:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003434:	4804      	ldr	r0, [pc, #16]	; (8003448 <MX_I2C1_Init+0x50>)
 8003436:	f003 ff4b 	bl	80072d0 <HAL_I2C_Init>
 800343a:	4603      	mov	r3, r0
 800343c:	2b00      	cmp	r3, #0
 800343e:	d001      	beq.n	8003444 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003440:	f000 fae0 	bl	8003a04 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003444:	bf00      	nop
 8003446:	bd80      	pop	{r7, pc}
 8003448:	20000268 	.word	0x20000268
 800344c:	40005400 	.word	0x40005400
 8003450:	000186a0 	.word	0x000186a0

08003454 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8003458:	4b12      	ldr	r3, [pc, #72]	; (80034a4 <MX_I2C2_Init+0x50>)
 800345a:	4a13      	ldr	r2, [pc, #76]	; (80034a8 <MX_I2C2_Init+0x54>)
 800345c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800345e:	4b11      	ldr	r3, [pc, #68]	; (80034a4 <MX_I2C2_Init+0x50>)
 8003460:	4a12      	ldr	r2, [pc, #72]	; (80034ac <MX_I2C2_Init+0x58>)
 8003462:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003464:	4b0f      	ldr	r3, [pc, #60]	; (80034a4 <MX_I2C2_Init+0x50>)
 8003466:	2200      	movs	r2, #0
 8003468:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800346a:	4b0e      	ldr	r3, [pc, #56]	; (80034a4 <MX_I2C2_Init+0x50>)
 800346c:	2200      	movs	r2, #0
 800346e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003470:	4b0c      	ldr	r3, [pc, #48]	; (80034a4 <MX_I2C2_Init+0x50>)
 8003472:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003476:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003478:	4b0a      	ldr	r3, [pc, #40]	; (80034a4 <MX_I2C2_Init+0x50>)
 800347a:	2200      	movs	r2, #0
 800347c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800347e:	4b09      	ldr	r3, [pc, #36]	; (80034a4 <MX_I2C2_Init+0x50>)
 8003480:	2200      	movs	r2, #0
 8003482:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003484:	4b07      	ldr	r3, [pc, #28]	; (80034a4 <MX_I2C2_Init+0x50>)
 8003486:	2200      	movs	r2, #0
 8003488:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800348a:	4b06      	ldr	r3, [pc, #24]	; (80034a4 <MX_I2C2_Init+0x50>)
 800348c:	2200      	movs	r2, #0
 800348e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8003490:	4804      	ldr	r0, [pc, #16]	; (80034a4 <MX_I2C2_Init+0x50>)
 8003492:	f003 ff1d 	bl	80072d0 <HAL_I2C_Init>
 8003496:	4603      	mov	r3, r0
 8003498:	2b00      	cmp	r3, #0
 800349a:	d001      	beq.n	80034a0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800349c:	f000 fab2 	bl	8003a04 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80034a0:	bf00      	nop
 80034a2:	bd80      	pop	{r7, pc}
 80034a4:	200002bc 	.word	0x200002bc
 80034a8:	40005800 	.word	0x40005800
 80034ac:	000186a0 	.word	0x000186a0

080034b0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b086      	sub	sp, #24
 80034b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80034b6:	f107 0310 	add.w	r3, r7, #16
 80034ba:	2200      	movs	r2, #0
 80034bc:	601a      	str	r2, [r3, #0]
 80034be:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80034c0:	463b      	mov	r3, r7
 80034c2:	2200      	movs	r2, #0
 80034c4:	601a      	str	r2, [r3, #0]
 80034c6:	605a      	str	r2, [r3, #4]
 80034c8:	609a      	str	r2, [r3, #8]
 80034ca:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80034cc:	4b21      	ldr	r3, [pc, #132]	; (8003554 <MX_TIM1_Init+0xa4>)
 80034ce:	4a22      	ldr	r2, [pc, #136]	; (8003558 <MX_TIM1_Init+0xa8>)
 80034d0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80034d2:	4b20      	ldr	r3, [pc, #128]	; (8003554 <MX_TIM1_Init+0xa4>)
 80034d4:	2200      	movs	r2, #0
 80034d6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80034d8:	4b1e      	ldr	r3, [pc, #120]	; (8003554 <MX_TIM1_Init+0xa4>)
 80034da:	2200      	movs	r2, #0
 80034dc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80034de:	4b1d      	ldr	r3, [pc, #116]	; (8003554 <MX_TIM1_Init+0xa4>)
 80034e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80034e4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80034e6:	4b1b      	ldr	r3, [pc, #108]	; (8003554 <MX_TIM1_Init+0xa4>)
 80034e8:	2200      	movs	r2, #0
 80034ea:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80034ec:	4b19      	ldr	r3, [pc, #100]	; (8003554 <MX_TIM1_Init+0xa4>)
 80034ee:	2200      	movs	r2, #0
 80034f0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80034f2:	4b18      	ldr	r3, [pc, #96]	; (8003554 <MX_TIM1_Init+0xa4>)
 80034f4:	2200      	movs	r2, #0
 80034f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 80034f8:	4816      	ldr	r0, [pc, #88]	; (8003554 <MX_TIM1_Init+0xa4>)
 80034fa:	f006 fcf3 	bl	8009ee4 <HAL_TIM_IC_Init>
 80034fe:	4603      	mov	r3, r0
 8003500:	2b00      	cmp	r3, #0
 8003502:	d001      	beq.n	8003508 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8003504:	f000 fa7e 	bl	8003a04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003508:	2300      	movs	r3, #0
 800350a:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800350c:	2300      	movs	r3, #0
 800350e:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003510:	f107 0310 	add.w	r3, r7, #16
 8003514:	4619      	mov	r1, r3
 8003516:	480f      	ldr	r0, [pc, #60]	; (8003554 <MX_TIM1_Init+0xa4>)
 8003518:	f007 fa1e 	bl	800a958 <HAL_TIMEx_MasterConfigSynchronization>
 800351c:	4603      	mov	r3, r0
 800351e:	2b00      	cmp	r3, #0
 8003520:	d001      	beq.n	8003526 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8003522:	f000 fa6f 	bl	8003a04 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003526:	2300      	movs	r3, #0
 8003528:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800352a:	2301      	movs	r3, #1
 800352c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800352e:	2300      	movs	r3, #0
 8003530:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8003532:	2300      	movs	r3, #0
 8003534:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8003536:	463b      	mov	r3, r7
 8003538:	2200      	movs	r2, #0
 800353a:	4619      	mov	r1, r3
 800353c:	4805      	ldr	r0, [pc, #20]	; (8003554 <MX_TIM1_Init+0xa4>)
 800353e:	f006 fe10 	bl	800a162 <HAL_TIM_IC_ConfigChannel>
 8003542:	4603      	mov	r3, r0
 8003544:	2b00      	cmp	r3, #0
 8003546:	d001      	beq.n	800354c <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8003548:	f000 fa5c 	bl	8003a04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800354c:	bf00      	nop
 800354e:	3718      	adds	r7, #24
 8003550:	46bd      	mov	sp, r7
 8003552:	bd80      	pop	{r7, pc}
 8003554:	20000310 	.word	0x20000310
 8003558:	40010000 	.word	0x40010000

0800355c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b086      	sub	sp, #24
 8003560:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003562:	f107 0308 	add.w	r3, r7, #8
 8003566:	2200      	movs	r2, #0
 8003568:	601a      	str	r2, [r3, #0]
 800356a:	605a      	str	r2, [r3, #4]
 800356c:	609a      	str	r2, [r3, #8]
 800356e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003570:	463b      	mov	r3, r7
 8003572:	2200      	movs	r2, #0
 8003574:	601a      	str	r2, [r3, #0]
 8003576:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003578:	4b1e      	ldr	r3, [pc, #120]	; (80035f4 <MX_TIM2_Init+0x98>)
 800357a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800357e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 600-1;
 8003580:	4b1c      	ldr	r3, [pc, #112]	; (80035f4 <MX_TIM2_Init+0x98>)
 8003582:	f240 2257 	movw	r2, #599	; 0x257
 8003586:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003588:	4b1a      	ldr	r3, [pc, #104]	; (80035f4 <MX_TIM2_Init+0x98>)
 800358a:	2200      	movs	r2, #0
 800358c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 500-1;
 800358e:	4b19      	ldr	r3, [pc, #100]	; (80035f4 <MX_TIM2_Init+0x98>)
 8003590:	f240 12f3 	movw	r2, #499	; 0x1f3
 8003594:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003596:	4b17      	ldr	r3, [pc, #92]	; (80035f4 <MX_TIM2_Init+0x98>)
 8003598:	2200      	movs	r2, #0
 800359a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800359c:	4b15      	ldr	r3, [pc, #84]	; (80035f4 <MX_TIM2_Init+0x98>)
 800359e:	2200      	movs	r2, #0
 80035a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80035a2:	4814      	ldr	r0, [pc, #80]	; (80035f4 <MX_TIM2_Init+0x98>)
 80035a4:	f006 fbde 	bl	8009d64 <HAL_TIM_Base_Init>
 80035a8:	4603      	mov	r3, r0
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d001      	beq.n	80035b2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80035ae:	f000 fa29 	bl	8003a04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80035b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80035b6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80035b8:	f107 0308 	add.w	r3, r7, #8
 80035bc:	4619      	mov	r1, r3
 80035be:	480d      	ldr	r0, [pc, #52]	; (80035f4 <MX_TIM2_Init+0x98>)
 80035c0:	f006 fe6b 	bl	800a29a <HAL_TIM_ConfigClockSource>
 80035c4:	4603      	mov	r3, r0
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d001      	beq.n	80035ce <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80035ca:	f000 fa1b 	bl	8003a04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80035ce:	2300      	movs	r3, #0
 80035d0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80035d2:	2300      	movs	r3, #0
 80035d4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80035d6:	463b      	mov	r3, r7
 80035d8:	4619      	mov	r1, r3
 80035da:	4806      	ldr	r0, [pc, #24]	; (80035f4 <MX_TIM2_Init+0x98>)
 80035dc:	f007 f9bc 	bl	800a958 <HAL_TIMEx_MasterConfigSynchronization>
 80035e0:	4603      	mov	r3, r0
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d001      	beq.n	80035ea <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80035e6:	f000 fa0d 	bl	8003a04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80035ea:	bf00      	nop
 80035ec:	3718      	adds	r7, #24
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}
 80035f2:	bf00      	nop
 80035f4:	20000358 	.word	0x20000358

080035f8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b086      	sub	sp, #24
 80035fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80035fe:	f107 0308 	add.w	r3, r7, #8
 8003602:	2200      	movs	r2, #0
 8003604:	601a      	str	r2, [r3, #0]
 8003606:	605a      	str	r2, [r3, #4]
 8003608:	609a      	str	r2, [r3, #8]
 800360a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800360c:	463b      	mov	r3, r7
 800360e:	2200      	movs	r2, #0
 8003610:	601a      	str	r2, [r3, #0]
 8003612:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003614:	4b1d      	ldr	r3, [pc, #116]	; (800368c <MX_TIM4_Init+0x94>)
 8003616:	4a1e      	ldr	r2, [pc, #120]	; (8003690 <MX_TIM4_Init+0x98>)
 8003618:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 600-1;
 800361a:	4b1c      	ldr	r3, [pc, #112]	; (800368c <MX_TIM4_Init+0x94>)
 800361c:	f240 2257 	movw	r2, #599	; 0x257
 8003620:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003622:	4b1a      	ldr	r3, [pc, #104]	; (800368c <MX_TIM4_Init+0x94>)
 8003624:	2200      	movs	r2, #0
 8003626:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 8003628:	4b18      	ldr	r3, [pc, #96]	; (800368c <MX_TIM4_Init+0x94>)
 800362a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800362e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003630:	4b16      	ldr	r3, [pc, #88]	; (800368c <MX_TIM4_Init+0x94>)
 8003632:	2200      	movs	r2, #0
 8003634:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003636:	4b15      	ldr	r3, [pc, #84]	; (800368c <MX_TIM4_Init+0x94>)
 8003638:	2200      	movs	r2, #0
 800363a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800363c:	4813      	ldr	r0, [pc, #76]	; (800368c <MX_TIM4_Init+0x94>)
 800363e:	f006 fb91 	bl	8009d64 <HAL_TIM_Base_Init>
 8003642:	4603      	mov	r3, r0
 8003644:	2b00      	cmp	r3, #0
 8003646:	d001      	beq.n	800364c <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8003648:	f000 f9dc 	bl	8003a04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800364c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003650:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003652:	f107 0308 	add.w	r3, r7, #8
 8003656:	4619      	mov	r1, r3
 8003658:	480c      	ldr	r0, [pc, #48]	; (800368c <MX_TIM4_Init+0x94>)
 800365a:	f006 fe1e 	bl	800a29a <HAL_TIM_ConfigClockSource>
 800365e:	4603      	mov	r3, r0
 8003660:	2b00      	cmp	r3, #0
 8003662:	d001      	beq.n	8003668 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8003664:	f000 f9ce 	bl	8003a04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003668:	2300      	movs	r3, #0
 800366a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800366c:	2300      	movs	r3, #0
 800366e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003670:	463b      	mov	r3, r7
 8003672:	4619      	mov	r1, r3
 8003674:	4805      	ldr	r0, [pc, #20]	; (800368c <MX_TIM4_Init+0x94>)
 8003676:	f007 f96f 	bl	800a958 <HAL_TIMEx_MasterConfigSynchronization>
 800367a:	4603      	mov	r3, r0
 800367c:	2b00      	cmp	r3, #0
 800367e:	d001      	beq.n	8003684 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8003680:	f000 f9c0 	bl	8003a04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003684:	bf00      	nop
 8003686:	3718      	adds	r7, #24
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}
 800368c:	200003a0 	.word	0x200003a0
 8003690:	40000800 	.word	0x40000800

08003694 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b082      	sub	sp, #8
 8003698:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800369a:	463b      	mov	r3, r7
 800369c:	2200      	movs	r2, #0
 800369e:	601a      	str	r2, [r3, #0]
 80036a0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80036a2:	4b15      	ldr	r3, [pc, #84]	; (80036f8 <MX_TIM6_Init+0x64>)
 80036a4:	4a15      	ldr	r2, [pc, #84]	; (80036fc <MX_TIM6_Init+0x68>)
 80036a6:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 600-1;
 80036a8:	4b13      	ldr	r3, [pc, #76]	; (80036f8 <MX_TIM6_Init+0x64>)
 80036aa:	f240 2257 	movw	r2, #599	; 0x257
 80036ae:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80036b0:	4b11      	ldr	r3, [pc, #68]	; (80036f8 <MX_TIM6_Init+0x64>)
 80036b2:	2200      	movs	r2, #0
 80036b4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 2000-1;
 80036b6:	4b10      	ldr	r3, [pc, #64]	; (80036f8 <MX_TIM6_Init+0x64>)
 80036b8:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80036bc:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80036be:	4b0e      	ldr	r3, [pc, #56]	; (80036f8 <MX_TIM6_Init+0x64>)
 80036c0:	2200      	movs	r2, #0
 80036c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80036c4:	480c      	ldr	r0, [pc, #48]	; (80036f8 <MX_TIM6_Init+0x64>)
 80036c6:	f006 fb4d 	bl	8009d64 <HAL_TIM_Base_Init>
 80036ca:	4603      	mov	r3, r0
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d001      	beq.n	80036d4 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80036d0:	f000 f998 	bl	8003a04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80036d4:	2300      	movs	r3, #0
 80036d6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80036d8:	2300      	movs	r3, #0
 80036da:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80036dc:	463b      	mov	r3, r7
 80036de:	4619      	mov	r1, r3
 80036e0:	4805      	ldr	r0, [pc, #20]	; (80036f8 <MX_TIM6_Init+0x64>)
 80036e2:	f007 f939 	bl	800a958 <HAL_TIMEx_MasterConfigSynchronization>
 80036e6:	4603      	mov	r3, r0
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d001      	beq.n	80036f0 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80036ec:	f000 f98a 	bl	8003a04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80036f0:	bf00      	nop
 80036f2:	3708      	adds	r7, #8
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}
 80036f8:	200003e8 	.word	0x200003e8
 80036fc:	40001000 	.word	0x40001000

08003700 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b082      	sub	sp, #8
 8003704:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003706:	463b      	mov	r3, r7
 8003708:	2200      	movs	r2, #0
 800370a:	601a      	str	r2, [r3, #0]
 800370c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800370e:	4b15      	ldr	r3, [pc, #84]	; (8003764 <MX_TIM7_Init+0x64>)
 8003710:	4a15      	ldr	r2, [pc, #84]	; (8003768 <MX_TIM7_Init+0x68>)
 8003712:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 600-1;
 8003714:	4b13      	ldr	r3, [pc, #76]	; (8003764 <MX_TIM7_Init+0x64>)
 8003716:	f240 2257 	movw	r2, #599	; 0x257
 800371a:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800371c:	4b11      	ldr	r3, [pc, #68]	; (8003764 <MX_TIM7_Init+0x64>)
 800371e:	2200      	movs	r2, #0
 8003720:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1000-1;
 8003722:	4b10      	ldr	r3, [pc, #64]	; (8003764 <MX_TIM7_Init+0x64>)
 8003724:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003728:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800372a:	4b0e      	ldr	r3, [pc, #56]	; (8003764 <MX_TIM7_Init+0x64>)
 800372c:	2200      	movs	r2, #0
 800372e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8003730:	480c      	ldr	r0, [pc, #48]	; (8003764 <MX_TIM7_Init+0x64>)
 8003732:	f006 fb17 	bl	8009d64 <HAL_TIM_Base_Init>
 8003736:	4603      	mov	r3, r0
 8003738:	2b00      	cmp	r3, #0
 800373a:	d001      	beq.n	8003740 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 800373c:	f000 f962 	bl	8003a04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003740:	2300      	movs	r3, #0
 8003742:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003744:	2300      	movs	r3, #0
 8003746:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8003748:	463b      	mov	r3, r7
 800374a:	4619      	mov	r1, r3
 800374c:	4805      	ldr	r0, [pc, #20]	; (8003764 <MX_TIM7_Init+0x64>)
 800374e:	f007 f903 	bl	800a958 <HAL_TIMEx_MasterConfigSynchronization>
 8003752:	4603      	mov	r3, r0
 8003754:	2b00      	cmp	r3, #0
 8003756:	d001      	beq.n	800375c <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8003758:	f000 f954 	bl	8003a04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800375c:	bf00      	nop
 800375e:	3708      	adds	r7, #8
 8003760:	46bd      	mov	sp, r7
 8003762:	bd80      	pop	{r7, pc}
 8003764:	20000430 	.word	0x20000430
 8003768:	40001400 	.word	0x40001400

0800376c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b086      	sub	sp, #24
 8003770:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003772:	f107 0308 	add.w	r3, r7, #8
 8003776:	2200      	movs	r2, #0
 8003778:	601a      	str	r2, [r3, #0]
 800377a:	605a      	str	r2, [r3, #4]
 800377c:	609a      	str	r2, [r3, #8]
 800377e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003780:	463b      	mov	r3, r7
 8003782:	2200      	movs	r2, #0
 8003784:	601a      	str	r2, [r3, #0]
 8003786:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8003788:	4b1e      	ldr	r3, [pc, #120]	; (8003804 <MX_TIM8_Init+0x98>)
 800378a:	4a1f      	ldr	r2, [pc, #124]	; (8003808 <MX_TIM8_Init+0x9c>)
 800378c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 600-1;
 800378e:	4b1d      	ldr	r3, [pc, #116]	; (8003804 <MX_TIM8_Init+0x98>)
 8003790:	f240 2257 	movw	r2, #599	; 0x257
 8003794:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003796:	4b1b      	ldr	r3, [pc, #108]	; (8003804 <MX_TIM8_Init+0x98>)
 8003798:	2200      	movs	r2, #0
 800379a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 100-1;
 800379c:	4b19      	ldr	r3, [pc, #100]	; (8003804 <MX_TIM8_Init+0x98>)
 800379e:	2263      	movs	r2, #99	; 0x63
 80037a0:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80037a2:	4b18      	ldr	r3, [pc, #96]	; (8003804 <MX_TIM8_Init+0x98>)
 80037a4:	2200      	movs	r2, #0
 80037a6:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80037a8:	4b16      	ldr	r3, [pc, #88]	; (8003804 <MX_TIM8_Init+0x98>)
 80037aa:	2200      	movs	r2, #0
 80037ac:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80037ae:	4b15      	ldr	r3, [pc, #84]	; (8003804 <MX_TIM8_Init+0x98>)
 80037b0:	2200      	movs	r2, #0
 80037b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80037b4:	4813      	ldr	r0, [pc, #76]	; (8003804 <MX_TIM8_Init+0x98>)
 80037b6:	f006 fad5 	bl	8009d64 <HAL_TIM_Base_Init>
 80037ba:	4603      	mov	r3, r0
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d001      	beq.n	80037c4 <MX_TIM8_Init+0x58>
  {
    Error_Handler();
 80037c0:	f000 f920 	bl	8003a04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80037c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80037c8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80037ca:	f107 0308 	add.w	r3, r7, #8
 80037ce:	4619      	mov	r1, r3
 80037d0:	480c      	ldr	r0, [pc, #48]	; (8003804 <MX_TIM8_Init+0x98>)
 80037d2:	f006 fd62 	bl	800a29a <HAL_TIM_ConfigClockSource>
 80037d6:	4603      	mov	r3, r0
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d001      	beq.n	80037e0 <MX_TIM8_Init+0x74>
  {
    Error_Handler();
 80037dc:	f000 f912 	bl	8003a04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80037e0:	2300      	movs	r3, #0
 80037e2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80037e4:	2300      	movs	r3, #0
 80037e6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80037e8:	463b      	mov	r3, r7
 80037ea:	4619      	mov	r1, r3
 80037ec:	4805      	ldr	r0, [pc, #20]	; (8003804 <MX_TIM8_Init+0x98>)
 80037ee:	f007 f8b3 	bl	800a958 <HAL_TIMEx_MasterConfigSynchronization>
 80037f2:	4603      	mov	r3, r0
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d001      	beq.n	80037fc <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 80037f8:	f000 f904 	bl	8003a04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80037fc:	bf00      	nop
 80037fe:	3718      	adds	r7, #24
 8003800:	46bd      	mov	sp, r7
 8003802:	bd80      	pop	{r7, pc}
 8003804:	20000478 	.word	0x20000478
 8003808:	40010400 	.word	0x40010400

0800380c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003810:	4b11      	ldr	r3, [pc, #68]	; (8003858 <MX_USART1_UART_Init+0x4c>)
 8003812:	4a12      	ldr	r2, [pc, #72]	; (800385c <MX_USART1_UART_Init+0x50>)
 8003814:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8003816:	4b10      	ldr	r3, [pc, #64]	; (8003858 <MX_USART1_UART_Init+0x4c>)
 8003818:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800381c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800381e:	4b0e      	ldr	r3, [pc, #56]	; (8003858 <MX_USART1_UART_Init+0x4c>)
 8003820:	2200      	movs	r2, #0
 8003822:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003824:	4b0c      	ldr	r3, [pc, #48]	; (8003858 <MX_USART1_UART_Init+0x4c>)
 8003826:	2200      	movs	r2, #0
 8003828:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800382a:	4b0b      	ldr	r3, [pc, #44]	; (8003858 <MX_USART1_UART_Init+0x4c>)
 800382c:	2200      	movs	r2, #0
 800382e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003830:	4b09      	ldr	r3, [pc, #36]	; (8003858 <MX_USART1_UART_Init+0x4c>)
 8003832:	220c      	movs	r2, #12
 8003834:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003836:	4b08      	ldr	r3, [pc, #32]	; (8003858 <MX_USART1_UART_Init+0x4c>)
 8003838:	2200      	movs	r2, #0
 800383a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800383c:	4b06      	ldr	r3, [pc, #24]	; (8003858 <MX_USART1_UART_Init+0x4c>)
 800383e:	2200      	movs	r2, #0
 8003840:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003842:	4805      	ldr	r0, [pc, #20]	; (8003858 <MX_USART1_UART_Init+0x4c>)
 8003844:	f007 f918 	bl	800aa78 <HAL_UART_Init>
 8003848:	4603      	mov	r3, r0
 800384a:	2b00      	cmp	r3, #0
 800384c:	d001      	beq.n	8003852 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800384e:	f000 f8d9 	bl	8003a04 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003852:	bf00      	nop
 8003854:	bd80      	pop	{r7, pc}
 8003856:	bf00      	nop
 8003858:	200004c0 	.word	0x200004c0
 800385c:	40011000 	.word	0x40011000

08003860 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003864:	4b11      	ldr	r3, [pc, #68]	; (80038ac <MX_USART3_UART_Init+0x4c>)
 8003866:	4a12      	ldr	r2, [pc, #72]	; (80038b0 <MX_USART3_UART_Init+0x50>)
 8003868:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800386a:	4b10      	ldr	r3, [pc, #64]	; (80038ac <MX_USART3_UART_Init+0x4c>)
 800386c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003870:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003872:	4b0e      	ldr	r3, [pc, #56]	; (80038ac <MX_USART3_UART_Init+0x4c>)
 8003874:	2200      	movs	r2, #0
 8003876:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003878:	4b0c      	ldr	r3, [pc, #48]	; (80038ac <MX_USART3_UART_Init+0x4c>)
 800387a:	2200      	movs	r2, #0
 800387c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800387e:	4b0b      	ldr	r3, [pc, #44]	; (80038ac <MX_USART3_UART_Init+0x4c>)
 8003880:	2200      	movs	r2, #0
 8003882:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003884:	4b09      	ldr	r3, [pc, #36]	; (80038ac <MX_USART3_UART_Init+0x4c>)
 8003886:	220c      	movs	r2, #12
 8003888:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800388a:	4b08      	ldr	r3, [pc, #32]	; (80038ac <MX_USART3_UART_Init+0x4c>)
 800388c:	2200      	movs	r2, #0
 800388e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003890:	4b06      	ldr	r3, [pc, #24]	; (80038ac <MX_USART3_UART_Init+0x4c>)
 8003892:	2200      	movs	r2, #0
 8003894:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003896:	4805      	ldr	r0, [pc, #20]	; (80038ac <MX_USART3_UART_Init+0x4c>)
 8003898:	f007 f8ee 	bl	800aa78 <HAL_UART_Init>
 800389c:	4603      	mov	r3, r0
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d001      	beq.n	80038a6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80038a2:	f000 f8af 	bl	8003a04 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80038a6:	bf00      	nop
 80038a8:	bd80      	pop	{r7, pc}
 80038aa:	bf00      	nop
 80038ac:	20000508 	.word	0x20000508
 80038b0:	40004800 	.word	0x40004800

080038b4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b082      	sub	sp, #8
 80038b8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80038ba:	2300      	movs	r3, #0
 80038bc:	607b      	str	r3, [r7, #4]
 80038be:	4b0c      	ldr	r3, [pc, #48]	; (80038f0 <MX_DMA_Init+0x3c>)
 80038c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038c2:	4a0b      	ldr	r2, [pc, #44]	; (80038f0 <MX_DMA_Init+0x3c>)
 80038c4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80038c8:	6313      	str	r3, [r2, #48]	; 0x30
 80038ca:	4b09      	ldr	r3, [pc, #36]	; (80038f0 <MX_DMA_Init+0x3c>)
 80038cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038d2:	607b      	str	r3, [r7, #4]
 80038d4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80038d6:	2200      	movs	r2, #0
 80038d8:	2100      	movs	r1, #0
 80038da:	203a      	movs	r0, #58	; 0x3a
 80038dc:	f000 fddd 	bl	800449a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80038e0:	203a      	movs	r0, #58	; 0x3a
 80038e2:	f000 fdf6 	bl	80044d2 <HAL_NVIC_EnableIRQ>

}
 80038e6:	bf00      	nop
 80038e8:	3708      	adds	r7, #8
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}
 80038ee:	bf00      	nop
 80038f0:	40023800 	.word	0x40023800

080038f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b08a      	sub	sp, #40	; 0x28
 80038f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038fa:	f107 0314 	add.w	r3, r7, #20
 80038fe:	2200      	movs	r2, #0
 8003900:	601a      	str	r2, [r3, #0]
 8003902:	605a      	str	r2, [r3, #4]
 8003904:	609a      	str	r2, [r3, #8]
 8003906:	60da      	str	r2, [r3, #12]
 8003908:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800390a:	2300      	movs	r3, #0
 800390c:	613b      	str	r3, [r7, #16]
 800390e:	4b39      	ldr	r3, [pc, #228]	; (80039f4 <MX_GPIO_Init+0x100>)
 8003910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003912:	4a38      	ldr	r2, [pc, #224]	; (80039f4 <MX_GPIO_Init+0x100>)
 8003914:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003918:	6313      	str	r3, [r2, #48]	; 0x30
 800391a:	4b36      	ldr	r3, [pc, #216]	; (80039f4 <MX_GPIO_Init+0x100>)
 800391c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800391e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003922:	613b      	str	r3, [r7, #16]
 8003924:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003926:	2300      	movs	r3, #0
 8003928:	60fb      	str	r3, [r7, #12]
 800392a:	4b32      	ldr	r3, [pc, #200]	; (80039f4 <MX_GPIO_Init+0x100>)
 800392c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800392e:	4a31      	ldr	r2, [pc, #196]	; (80039f4 <MX_GPIO_Init+0x100>)
 8003930:	f043 0304 	orr.w	r3, r3, #4
 8003934:	6313      	str	r3, [r2, #48]	; 0x30
 8003936:	4b2f      	ldr	r3, [pc, #188]	; (80039f4 <MX_GPIO_Init+0x100>)
 8003938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800393a:	f003 0304 	and.w	r3, r3, #4
 800393e:	60fb      	str	r3, [r7, #12]
 8003940:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003942:	2300      	movs	r3, #0
 8003944:	60bb      	str	r3, [r7, #8]
 8003946:	4b2b      	ldr	r3, [pc, #172]	; (80039f4 <MX_GPIO_Init+0x100>)
 8003948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800394a:	4a2a      	ldr	r2, [pc, #168]	; (80039f4 <MX_GPIO_Init+0x100>)
 800394c:	f043 0301 	orr.w	r3, r3, #1
 8003950:	6313      	str	r3, [r2, #48]	; 0x30
 8003952:	4b28      	ldr	r3, [pc, #160]	; (80039f4 <MX_GPIO_Init+0x100>)
 8003954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003956:	f003 0301 	and.w	r3, r3, #1
 800395a:	60bb      	str	r3, [r7, #8]
 800395c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800395e:	2300      	movs	r3, #0
 8003960:	607b      	str	r3, [r7, #4]
 8003962:	4b24      	ldr	r3, [pc, #144]	; (80039f4 <MX_GPIO_Init+0x100>)
 8003964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003966:	4a23      	ldr	r2, [pc, #140]	; (80039f4 <MX_GPIO_Init+0x100>)
 8003968:	f043 0302 	orr.w	r3, r3, #2
 800396c:	6313      	str	r3, [r2, #48]	; 0x30
 800396e:	4b21      	ldr	r3, [pc, #132]	; (80039f4 <MX_GPIO_Init+0x100>)
 8003970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003972:	f003 0302 	and.w	r3, r3, #2
 8003976:	607b      	str	r3, [r7, #4]
 8003978:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 800397a:	2200      	movs	r2, #0
 800397c:	2101      	movs	r1, #1
 800397e:	481e      	ldr	r0, [pc, #120]	; (80039f8 <MX_GPIO_Init+0x104>)
 8003980:	f001 fb58 	bl	8005034 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8003984:	2200      	movs	r2, #0
 8003986:	2107      	movs	r1, #7
 8003988:	481c      	ldr	r0, [pc, #112]	; (80039fc <MX_GPIO_Init+0x108>)
 800398a:	f001 fb53 	bl	8005034 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BNO_RST_Pin|BNO_INT_Pin, GPIO_PIN_RESET);
 800398e:	2200      	movs	r2, #0
 8003990:	2130      	movs	r1, #48	; 0x30
 8003992:	481b      	ldr	r0, [pc, #108]	; (8003a00 <MX_GPIO_Init+0x10c>)
 8003994:	f001 fb4e 	bl	8005034 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUZZER_Pin */
  GPIO_InitStruct.Pin = BUZZER_Pin;
 8003998:	2301      	movs	r3, #1
 800399a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800399c:	2301      	movs	r3, #1
 800399e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039a0:	2300      	movs	r3, #0
 80039a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039a4:	2300      	movs	r3, #0
 80039a6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 80039a8:	f107 0314 	add.w	r3, r7, #20
 80039ac:	4619      	mov	r1, r3
 80039ae:	4812      	ldr	r0, [pc, #72]	; (80039f8 <MX_GPIO_Init+0x104>)
 80039b0:	f001 f9ac 	bl	8004d0c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 80039b4:	2307      	movs	r3, #7
 80039b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80039b8:	2301      	movs	r3, #1
 80039ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039bc:	2300      	movs	r3, #0
 80039be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039c0:	2300      	movs	r3, #0
 80039c2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039c4:	f107 0314 	add.w	r3, r7, #20
 80039c8:	4619      	mov	r1, r3
 80039ca:	480c      	ldr	r0, [pc, #48]	; (80039fc <MX_GPIO_Init+0x108>)
 80039cc:	f001 f99e 	bl	8004d0c <HAL_GPIO_Init>

  /*Configure GPIO pins : BNO_RST_Pin BNO_INT_Pin */
  GPIO_InitStruct.Pin = BNO_RST_Pin|BNO_INT_Pin;
 80039d0:	2330      	movs	r3, #48	; 0x30
 80039d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80039d4:	2301      	movs	r3, #1
 80039d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039d8:	2300      	movs	r3, #0
 80039da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039dc:	2300      	movs	r3, #0
 80039de:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039e0:	f107 0314 	add.w	r3, r7, #20
 80039e4:	4619      	mov	r1, r3
 80039e6:	4806      	ldr	r0, [pc, #24]	; (8003a00 <MX_GPIO_Init+0x10c>)
 80039e8:	f001 f990 	bl	8004d0c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80039ec:	bf00      	nop
 80039ee:	3728      	adds	r7, #40	; 0x28
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bd80      	pop	{r7, pc}
 80039f4:	40023800 	.word	0x40023800
 80039f8:	40020800 	.word	0x40020800
 80039fc:	40020000 	.word	0x40020000
 8003a00:	40020400 	.word	0x40020400

08003a04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	printf("HATA KODU");
 8003a08:	4802      	ldr	r0, [pc, #8]	; (8003a14 <Error_Handler+0x10>)
 8003a0a:	f00c fda7 	bl	801055c <iprintf>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003a0e:	b672      	cpsid	i
}
 8003a10:	bf00      	nop
  __disable_irq();
  while (1)
 8003a12:	e7fe      	b.n	8003a12 <Error_Handler+0xe>
 8003a14:	08013488 	.word	0x08013488

08003a18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b083      	sub	sp, #12
 8003a1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a1e:	2300      	movs	r3, #0
 8003a20:	607b      	str	r3, [r7, #4]
 8003a22:	4b10      	ldr	r3, [pc, #64]	; (8003a64 <HAL_MspInit+0x4c>)
 8003a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a26:	4a0f      	ldr	r2, [pc, #60]	; (8003a64 <HAL_MspInit+0x4c>)
 8003a28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a2c:	6453      	str	r3, [r2, #68]	; 0x44
 8003a2e:	4b0d      	ldr	r3, [pc, #52]	; (8003a64 <HAL_MspInit+0x4c>)
 8003a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a36:	607b      	str	r3, [r7, #4]
 8003a38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	603b      	str	r3, [r7, #0]
 8003a3e:	4b09      	ldr	r3, [pc, #36]	; (8003a64 <HAL_MspInit+0x4c>)
 8003a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a42:	4a08      	ldr	r2, [pc, #32]	; (8003a64 <HAL_MspInit+0x4c>)
 8003a44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a48:	6413      	str	r3, [r2, #64]	; 0x40
 8003a4a:	4b06      	ldr	r3, [pc, #24]	; (8003a64 <HAL_MspInit+0x4c>)
 8003a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a52:	603b      	str	r3, [r7, #0]
 8003a54:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003a56:	bf00      	nop
 8003a58:	370c      	adds	r7, #12
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a60:	4770      	bx	lr
 8003a62:	bf00      	nop
 8003a64:	40023800 	.word	0x40023800

08003a68 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b08c      	sub	sp, #48	; 0x30
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a70:	f107 031c 	add.w	r3, r7, #28
 8003a74:	2200      	movs	r2, #0
 8003a76:	601a      	str	r2, [r3, #0]
 8003a78:	605a      	str	r2, [r3, #4]
 8003a7a:	609a      	str	r2, [r3, #8]
 8003a7c:	60da      	str	r2, [r3, #12]
 8003a7e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a42      	ldr	r2, [pc, #264]	; (8003b90 <HAL_I2C_MspInit+0x128>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d12c      	bne.n	8003ae4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	61bb      	str	r3, [r7, #24]
 8003a8e:	4b41      	ldr	r3, [pc, #260]	; (8003b94 <HAL_I2C_MspInit+0x12c>)
 8003a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a92:	4a40      	ldr	r2, [pc, #256]	; (8003b94 <HAL_I2C_MspInit+0x12c>)
 8003a94:	f043 0302 	orr.w	r3, r3, #2
 8003a98:	6313      	str	r3, [r2, #48]	; 0x30
 8003a9a:	4b3e      	ldr	r3, [pc, #248]	; (8003b94 <HAL_I2C_MspInit+0x12c>)
 8003a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a9e:	f003 0302 	and.w	r3, r3, #2
 8003aa2:	61bb      	str	r3, [r7, #24]
 8003aa4:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003aa6:	23c0      	movs	r3, #192	; 0xc0
 8003aa8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003aaa:	2312      	movs	r3, #18
 8003aac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ab2:	2303      	movs	r3, #3
 8003ab4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003ab6:	2304      	movs	r3, #4
 8003ab8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003aba:	f107 031c 	add.w	r3, r7, #28
 8003abe:	4619      	mov	r1, r3
 8003ac0:	4835      	ldr	r0, [pc, #212]	; (8003b98 <HAL_I2C_MspInit+0x130>)
 8003ac2:	f001 f923 	bl	8004d0c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	617b      	str	r3, [r7, #20]
 8003aca:	4b32      	ldr	r3, [pc, #200]	; (8003b94 <HAL_I2C_MspInit+0x12c>)
 8003acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ace:	4a31      	ldr	r2, [pc, #196]	; (8003b94 <HAL_I2C_MspInit+0x12c>)
 8003ad0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003ad4:	6413      	str	r3, [r2, #64]	; 0x40
 8003ad6:	4b2f      	ldr	r3, [pc, #188]	; (8003b94 <HAL_I2C_MspInit+0x12c>)
 8003ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ada:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ade:	617b      	str	r3, [r7, #20]
 8003ae0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8003ae2:	e050      	b.n	8003b86 <HAL_I2C_MspInit+0x11e>
  else if(hi2c->Instance==I2C2)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a2c      	ldr	r2, [pc, #176]	; (8003b9c <HAL_I2C_MspInit+0x134>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d14b      	bne.n	8003b86 <HAL_I2C_MspInit+0x11e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003aee:	2300      	movs	r3, #0
 8003af0:	613b      	str	r3, [r7, #16]
 8003af2:	4b28      	ldr	r3, [pc, #160]	; (8003b94 <HAL_I2C_MspInit+0x12c>)
 8003af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003af6:	4a27      	ldr	r2, [pc, #156]	; (8003b94 <HAL_I2C_MspInit+0x12c>)
 8003af8:	f043 0302 	orr.w	r3, r3, #2
 8003afc:	6313      	str	r3, [r2, #48]	; 0x30
 8003afe:	4b25      	ldr	r3, [pc, #148]	; (8003b94 <HAL_I2C_MspInit+0x12c>)
 8003b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b02:	f003 0302 	and.w	r3, r3, #2
 8003b06:	613b      	str	r3, [r7, #16]
 8003b08:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	60fb      	str	r3, [r7, #12]
 8003b0e:	4b21      	ldr	r3, [pc, #132]	; (8003b94 <HAL_I2C_MspInit+0x12c>)
 8003b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b12:	4a20      	ldr	r2, [pc, #128]	; (8003b94 <HAL_I2C_MspInit+0x12c>)
 8003b14:	f043 0304 	orr.w	r3, r3, #4
 8003b18:	6313      	str	r3, [r2, #48]	; 0x30
 8003b1a:	4b1e      	ldr	r3, [pc, #120]	; (8003b94 <HAL_I2C_MspInit+0x12c>)
 8003b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b1e:	f003 0304 	and.w	r3, r3, #4
 8003b22:	60fb      	str	r3, [r7, #12]
 8003b24:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003b26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003b2c:	2312      	movs	r3, #18
 8003b2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b30:	2300      	movs	r3, #0
 8003b32:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b34:	2303      	movs	r3, #3
 8003b36:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003b38:	2304      	movs	r3, #4
 8003b3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b3c:	f107 031c 	add.w	r3, r7, #28
 8003b40:	4619      	mov	r1, r3
 8003b42:	4815      	ldr	r0, [pc, #84]	; (8003b98 <HAL_I2C_MspInit+0x130>)
 8003b44:	f001 f8e2 	bl	8004d0c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003b48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003b4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003b4e:	2312      	movs	r3, #18
 8003b50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b52:	2300      	movs	r3, #0
 8003b54:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b56:	2303      	movs	r3, #3
 8003b58:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003b5a:	2304      	movs	r3, #4
 8003b5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b5e:	f107 031c 	add.w	r3, r7, #28
 8003b62:	4619      	mov	r1, r3
 8003b64:	480e      	ldr	r0, [pc, #56]	; (8003ba0 <HAL_I2C_MspInit+0x138>)
 8003b66:	f001 f8d1 	bl	8004d0c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	60bb      	str	r3, [r7, #8]
 8003b6e:	4b09      	ldr	r3, [pc, #36]	; (8003b94 <HAL_I2C_MspInit+0x12c>)
 8003b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b72:	4a08      	ldr	r2, [pc, #32]	; (8003b94 <HAL_I2C_MspInit+0x12c>)
 8003b74:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003b78:	6413      	str	r3, [r2, #64]	; 0x40
 8003b7a:	4b06      	ldr	r3, [pc, #24]	; (8003b94 <HAL_I2C_MspInit+0x12c>)
 8003b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b82:	60bb      	str	r3, [r7, #8]
 8003b84:	68bb      	ldr	r3, [r7, #8]
}
 8003b86:	bf00      	nop
 8003b88:	3730      	adds	r7, #48	; 0x30
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}
 8003b8e:	bf00      	nop
 8003b90:	40005400 	.word	0x40005400
 8003b94:	40023800 	.word	0x40023800
 8003b98:	40020400 	.word	0x40020400
 8003b9c:	40005800 	.word	0x40005800
 8003ba0:	40020800 	.word	0x40020800

08003ba4 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b08a      	sub	sp, #40	; 0x28
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bac:	f107 0314 	add.w	r3, r7, #20
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	601a      	str	r2, [r3, #0]
 8003bb4:	605a      	str	r2, [r3, #4]
 8003bb6:	609a      	str	r2, [r3, #8]
 8003bb8:	60da      	str	r2, [r3, #12]
 8003bba:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM1)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a19      	ldr	r2, [pc, #100]	; (8003c28 <HAL_TIM_IC_MspInit+0x84>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d12c      	bne.n	8003c20 <HAL_TIM_IC_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	613b      	str	r3, [r7, #16]
 8003bca:	4b18      	ldr	r3, [pc, #96]	; (8003c2c <HAL_TIM_IC_MspInit+0x88>)
 8003bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bce:	4a17      	ldr	r2, [pc, #92]	; (8003c2c <HAL_TIM_IC_MspInit+0x88>)
 8003bd0:	f043 0301 	orr.w	r3, r3, #1
 8003bd4:	6453      	str	r3, [r2, #68]	; 0x44
 8003bd6:	4b15      	ldr	r3, [pc, #84]	; (8003c2c <HAL_TIM_IC_MspInit+0x88>)
 8003bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bda:	f003 0301 	and.w	r3, r3, #1
 8003bde:	613b      	str	r3, [r7, #16]
 8003be0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003be2:	2300      	movs	r3, #0
 8003be4:	60fb      	str	r3, [r7, #12]
 8003be6:	4b11      	ldr	r3, [pc, #68]	; (8003c2c <HAL_TIM_IC_MspInit+0x88>)
 8003be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bea:	4a10      	ldr	r2, [pc, #64]	; (8003c2c <HAL_TIM_IC_MspInit+0x88>)
 8003bec:	f043 0301 	orr.w	r3, r3, #1
 8003bf0:	6313      	str	r3, [r2, #48]	; 0x30
 8003bf2:	4b0e      	ldr	r3, [pc, #56]	; (8003c2c <HAL_TIM_IC_MspInit+0x88>)
 8003bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bf6:	f003 0301 	and.w	r3, r3, #1
 8003bfa:	60fb      	str	r3, [r7, #12]
 8003bfc:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPS_PSS_Pin;
 8003bfe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003c02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c04:	2302      	movs	r3, #2
 8003c06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c08:	2300      	movs	r3, #0
 8003c0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003c10:	2301      	movs	r3, #1
 8003c12:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPS_PSS_GPIO_Port, &GPIO_InitStruct);
 8003c14:	f107 0314 	add.w	r3, r7, #20
 8003c18:	4619      	mov	r1, r3
 8003c1a:	4805      	ldr	r0, [pc, #20]	; (8003c30 <HAL_TIM_IC_MspInit+0x8c>)
 8003c1c:	f001 f876 	bl	8004d0c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8003c20:	bf00      	nop
 8003c22:	3728      	adds	r7, #40	; 0x28
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}
 8003c28:	40010000 	.word	0x40010000
 8003c2c:	40023800 	.word	0x40023800
 8003c30:	40020000 	.word	0x40020000

08003c34 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b088      	sub	sp, #32
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c44:	d116      	bne.n	8003c74 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003c46:	2300      	movs	r3, #0
 8003c48:	61fb      	str	r3, [r7, #28]
 8003c4a:	4b40      	ldr	r3, [pc, #256]	; (8003d4c <HAL_TIM_Base_MspInit+0x118>)
 8003c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c4e:	4a3f      	ldr	r2, [pc, #252]	; (8003d4c <HAL_TIM_Base_MspInit+0x118>)
 8003c50:	f043 0301 	orr.w	r3, r3, #1
 8003c54:	6413      	str	r3, [r2, #64]	; 0x40
 8003c56:	4b3d      	ldr	r3, [pc, #244]	; (8003d4c <HAL_TIM_Base_MspInit+0x118>)
 8003c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c5a:	f003 0301 	and.w	r3, r3, #1
 8003c5e:	61fb      	str	r3, [r7, #28]
 8003c60:	69fb      	ldr	r3, [r7, #28]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003c62:	2200      	movs	r2, #0
 8003c64:	2100      	movs	r1, #0
 8003c66:	201c      	movs	r0, #28
 8003c68:	f000 fc17 	bl	800449a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003c6c:	201c      	movs	r0, #28
 8003c6e:	f000 fc30 	bl	80044d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8003c72:	e066      	b.n	8003d42 <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM4)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a35      	ldr	r2, [pc, #212]	; (8003d50 <HAL_TIM_Base_MspInit+0x11c>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d116      	bne.n	8003cac <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003c7e:	2300      	movs	r3, #0
 8003c80:	61bb      	str	r3, [r7, #24]
 8003c82:	4b32      	ldr	r3, [pc, #200]	; (8003d4c <HAL_TIM_Base_MspInit+0x118>)
 8003c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c86:	4a31      	ldr	r2, [pc, #196]	; (8003d4c <HAL_TIM_Base_MspInit+0x118>)
 8003c88:	f043 0304 	orr.w	r3, r3, #4
 8003c8c:	6413      	str	r3, [r2, #64]	; 0x40
 8003c8e:	4b2f      	ldr	r3, [pc, #188]	; (8003d4c <HAL_TIM_Base_MspInit+0x118>)
 8003c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c92:	f003 0304 	and.w	r3, r3, #4
 8003c96:	61bb      	str	r3, [r7, #24]
 8003c98:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	2100      	movs	r1, #0
 8003c9e:	201e      	movs	r0, #30
 8003ca0:	f000 fbfb 	bl	800449a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003ca4:	201e      	movs	r0, #30
 8003ca6:	f000 fc14 	bl	80044d2 <HAL_NVIC_EnableIRQ>
}
 8003caa:	e04a      	b.n	8003d42 <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM6)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a28      	ldr	r2, [pc, #160]	; (8003d54 <HAL_TIM_Base_MspInit+0x120>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d116      	bne.n	8003ce4 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	617b      	str	r3, [r7, #20]
 8003cba:	4b24      	ldr	r3, [pc, #144]	; (8003d4c <HAL_TIM_Base_MspInit+0x118>)
 8003cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cbe:	4a23      	ldr	r2, [pc, #140]	; (8003d4c <HAL_TIM_Base_MspInit+0x118>)
 8003cc0:	f043 0310 	orr.w	r3, r3, #16
 8003cc4:	6413      	str	r3, [r2, #64]	; 0x40
 8003cc6:	4b21      	ldr	r3, [pc, #132]	; (8003d4c <HAL_TIM_Base_MspInit+0x118>)
 8003cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cca:	f003 0310 	and.w	r3, r3, #16
 8003cce:	617b      	str	r3, [r7, #20]
 8003cd0:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	2100      	movs	r1, #0
 8003cd6:	2036      	movs	r0, #54	; 0x36
 8003cd8:	f000 fbdf 	bl	800449a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003cdc:	2036      	movs	r0, #54	; 0x36
 8003cde:	f000 fbf8 	bl	80044d2 <HAL_NVIC_EnableIRQ>
}
 8003ce2:	e02e      	b.n	8003d42 <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM7)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a1b      	ldr	r2, [pc, #108]	; (8003d58 <HAL_TIM_Base_MspInit+0x124>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d10e      	bne.n	8003d0c <HAL_TIM_Base_MspInit+0xd8>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003cee:	2300      	movs	r3, #0
 8003cf0:	613b      	str	r3, [r7, #16]
 8003cf2:	4b16      	ldr	r3, [pc, #88]	; (8003d4c <HAL_TIM_Base_MspInit+0x118>)
 8003cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf6:	4a15      	ldr	r2, [pc, #84]	; (8003d4c <HAL_TIM_Base_MspInit+0x118>)
 8003cf8:	f043 0320 	orr.w	r3, r3, #32
 8003cfc:	6413      	str	r3, [r2, #64]	; 0x40
 8003cfe:	4b13      	ldr	r3, [pc, #76]	; (8003d4c <HAL_TIM_Base_MspInit+0x118>)
 8003d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d02:	f003 0320 	and.w	r3, r3, #32
 8003d06:	613b      	str	r3, [r7, #16]
 8003d08:	693b      	ldr	r3, [r7, #16]
}
 8003d0a:	e01a      	b.n	8003d42 <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM8)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a12      	ldr	r2, [pc, #72]	; (8003d5c <HAL_TIM_Base_MspInit+0x128>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d115      	bne.n	8003d42 <HAL_TIM_Base_MspInit+0x10e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003d16:	2300      	movs	r3, #0
 8003d18:	60fb      	str	r3, [r7, #12]
 8003d1a:	4b0c      	ldr	r3, [pc, #48]	; (8003d4c <HAL_TIM_Base_MspInit+0x118>)
 8003d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d1e:	4a0b      	ldr	r2, [pc, #44]	; (8003d4c <HAL_TIM_Base_MspInit+0x118>)
 8003d20:	f043 0302 	orr.w	r3, r3, #2
 8003d24:	6453      	str	r3, [r2, #68]	; 0x44
 8003d26:	4b09      	ldr	r3, [pc, #36]	; (8003d4c <HAL_TIM_Base_MspInit+0x118>)
 8003d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d2a:	f003 0302 	and.w	r3, r3, #2
 8003d2e:	60fb      	str	r3, [r7, #12]
 8003d30:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8003d32:	2200      	movs	r2, #0
 8003d34:	2100      	movs	r1, #0
 8003d36:	202c      	movs	r0, #44	; 0x2c
 8003d38:	f000 fbaf 	bl	800449a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8003d3c:	202c      	movs	r0, #44	; 0x2c
 8003d3e:	f000 fbc8 	bl	80044d2 <HAL_NVIC_EnableIRQ>
}
 8003d42:	bf00      	nop
 8003d44:	3720      	adds	r7, #32
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}
 8003d4a:	bf00      	nop
 8003d4c:	40023800 	.word	0x40023800
 8003d50:	40000800 	.word	0x40000800
 8003d54:	40001000 	.word	0x40001000
 8003d58:	40001400 	.word	0x40001400
 8003d5c:	40010400 	.word	0x40010400

08003d60 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b08c      	sub	sp, #48	; 0x30
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d68:	f107 031c 	add.w	r3, r7, #28
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	601a      	str	r2, [r3, #0]
 8003d70:	605a      	str	r2, [r3, #4]
 8003d72:	609a      	str	r2, [r3, #8]
 8003d74:	60da      	str	r2, [r3, #12]
 8003d76:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a4e      	ldr	r2, [pc, #312]	; (8003eb8 <HAL_UART_MspInit+0x158>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d164      	bne.n	8003e4c <HAL_UART_MspInit+0xec>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003d82:	2300      	movs	r3, #0
 8003d84:	61bb      	str	r3, [r7, #24]
 8003d86:	4b4d      	ldr	r3, [pc, #308]	; (8003ebc <HAL_UART_MspInit+0x15c>)
 8003d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d8a:	4a4c      	ldr	r2, [pc, #304]	; (8003ebc <HAL_UART_MspInit+0x15c>)
 8003d8c:	f043 0310 	orr.w	r3, r3, #16
 8003d90:	6453      	str	r3, [r2, #68]	; 0x44
 8003d92:	4b4a      	ldr	r3, [pc, #296]	; (8003ebc <HAL_UART_MspInit+0x15c>)
 8003d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d96:	f003 0310 	and.w	r3, r3, #16
 8003d9a:	61bb      	str	r3, [r7, #24]
 8003d9c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d9e:	2300      	movs	r3, #0
 8003da0:	617b      	str	r3, [r7, #20]
 8003da2:	4b46      	ldr	r3, [pc, #280]	; (8003ebc <HAL_UART_MspInit+0x15c>)
 8003da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003da6:	4a45      	ldr	r2, [pc, #276]	; (8003ebc <HAL_UART_MspInit+0x15c>)
 8003da8:	f043 0301 	orr.w	r3, r3, #1
 8003dac:	6313      	str	r3, [r2, #48]	; 0x30
 8003dae:	4b43      	ldr	r3, [pc, #268]	; (8003ebc <HAL_UART_MspInit+0x15c>)
 8003db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003db2:	f003 0301 	and.w	r3, r3, #1
 8003db6:	617b      	str	r3, [r7, #20]
 8003db8:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPS_TX1_Pin|GPS_RX1_Pin;
 8003dba:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003dbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dc0:	2302      	movs	r3, #2
 8003dc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003dc8:	2303      	movs	r3, #3
 8003dca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003dcc:	2307      	movs	r3, #7
 8003dce:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003dd0:	f107 031c 	add.w	r3, r7, #28
 8003dd4:	4619      	mov	r1, r3
 8003dd6:	483a      	ldr	r0, [pc, #232]	; (8003ec0 <HAL_UART_MspInit+0x160>)
 8003dd8:	f000 ff98 	bl	8004d0c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8003ddc:	4b39      	ldr	r3, [pc, #228]	; (8003ec4 <HAL_UART_MspInit+0x164>)
 8003dde:	4a3a      	ldr	r2, [pc, #232]	; (8003ec8 <HAL_UART_MspInit+0x168>)
 8003de0:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8003de2:	4b38      	ldr	r3, [pc, #224]	; (8003ec4 <HAL_UART_MspInit+0x164>)
 8003de4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003de8:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003dea:	4b36      	ldr	r3, [pc, #216]	; (8003ec4 <HAL_UART_MspInit+0x164>)
 8003dec:	2200      	movs	r2, #0
 8003dee:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003df0:	4b34      	ldr	r3, [pc, #208]	; (8003ec4 <HAL_UART_MspInit+0x164>)
 8003df2:	2200      	movs	r2, #0
 8003df4:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003df6:	4b33      	ldr	r3, [pc, #204]	; (8003ec4 <HAL_UART_MspInit+0x164>)
 8003df8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003dfc:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003dfe:	4b31      	ldr	r3, [pc, #196]	; (8003ec4 <HAL_UART_MspInit+0x164>)
 8003e00:	2200      	movs	r2, #0
 8003e02:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003e04:	4b2f      	ldr	r3, [pc, #188]	; (8003ec4 <HAL_UART_MspInit+0x164>)
 8003e06:	2200      	movs	r2, #0
 8003e08:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8003e0a:	4b2e      	ldr	r3, [pc, #184]	; (8003ec4 <HAL_UART_MspInit+0x164>)
 8003e0c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003e10:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003e12:	4b2c      	ldr	r3, [pc, #176]	; (8003ec4 <HAL_UART_MspInit+0x164>)
 8003e14:	2200      	movs	r2, #0
 8003e16:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003e18:	4b2a      	ldr	r3, [pc, #168]	; (8003ec4 <HAL_UART_MspInit+0x164>)
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003e1e:	4829      	ldr	r0, [pc, #164]	; (8003ec4 <HAL_UART_MspInit+0x164>)
 8003e20:	f000 fb72 	bl	8004508 <HAL_DMA_Init>
 8003e24:	4603      	mov	r3, r0
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d001      	beq.n	8003e2e <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8003e2a:	f7ff fdeb 	bl	8003a04 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	4a24      	ldr	r2, [pc, #144]	; (8003ec4 <HAL_UART_MspInit+0x164>)
 8003e32:	63da      	str	r2, [r3, #60]	; 0x3c
 8003e34:	4a23      	ldr	r2, [pc, #140]	; (8003ec4 <HAL_UART_MspInit+0x164>)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	2100      	movs	r1, #0
 8003e3e:	2025      	movs	r0, #37	; 0x25
 8003e40:	f000 fb2b 	bl	800449a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003e44:	2025      	movs	r0, #37	; 0x25
 8003e46:	f000 fb44 	bl	80044d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003e4a:	e031      	b.n	8003eb0 <HAL_UART_MspInit+0x150>
  else if(huart->Instance==USART3)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a1e      	ldr	r2, [pc, #120]	; (8003ecc <HAL_UART_MspInit+0x16c>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d12c      	bne.n	8003eb0 <HAL_UART_MspInit+0x150>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003e56:	2300      	movs	r3, #0
 8003e58:	613b      	str	r3, [r7, #16]
 8003e5a:	4b18      	ldr	r3, [pc, #96]	; (8003ebc <HAL_UART_MspInit+0x15c>)
 8003e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e5e:	4a17      	ldr	r2, [pc, #92]	; (8003ebc <HAL_UART_MspInit+0x15c>)
 8003e60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e64:	6413      	str	r3, [r2, #64]	; 0x40
 8003e66:	4b15      	ldr	r3, [pc, #84]	; (8003ebc <HAL_UART_MspInit+0x15c>)
 8003e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e6a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e6e:	613b      	str	r3, [r7, #16]
 8003e70:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003e72:	2300      	movs	r3, #0
 8003e74:	60fb      	str	r3, [r7, #12]
 8003e76:	4b11      	ldr	r3, [pc, #68]	; (8003ebc <HAL_UART_MspInit+0x15c>)
 8003e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e7a:	4a10      	ldr	r2, [pc, #64]	; (8003ebc <HAL_UART_MspInit+0x15c>)
 8003e7c:	f043 0304 	orr.w	r3, r3, #4
 8003e80:	6313      	str	r3, [r2, #48]	; 0x30
 8003e82:	4b0e      	ldr	r3, [pc, #56]	; (8003ebc <HAL_UART_MspInit+0x15c>)
 8003e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e86:	f003 0304 	and.w	r3, r3, #4
 8003e8a:	60fb      	str	r3, [r7, #12]
 8003e8c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_10;
 8003e8e:	f44f 6384 	mov.w	r3, #1056	; 0x420
 8003e92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e94:	2302      	movs	r3, #2
 8003e96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e98:	2300      	movs	r3, #0
 8003e9a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e9c:	2303      	movs	r3, #3
 8003e9e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003ea0:	2307      	movs	r3, #7
 8003ea2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003ea4:	f107 031c 	add.w	r3, r7, #28
 8003ea8:	4619      	mov	r1, r3
 8003eaa:	4809      	ldr	r0, [pc, #36]	; (8003ed0 <HAL_UART_MspInit+0x170>)
 8003eac:	f000 ff2e 	bl	8004d0c <HAL_GPIO_Init>
}
 8003eb0:	bf00      	nop
 8003eb2:	3730      	adds	r7, #48	; 0x30
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd80      	pop	{r7, pc}
 8003eb8:	40011000 	.word	0x40011000
 8003ebc:	40023800 	.word	0x40023800
 8003ec0:	40020000 	.word	0x40020000
 8003ec4:	20000550 	.word	0x20000550
 8003ec8:	40026440 	.word	0x40026440
 8003ecc:	40004800 	.word	0x40004800
 8003ed0:	40020800 	.word	0x40020800

08003ed4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003ed8:	e7fe      	b.n	8003ed8 <NMI_Handler+0x4>

08003eda <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003eda:	b480      	push	{r7}
 8003edc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003ede:	e7fe      	b.n	8003ede <HardFault_Handler+0x4>

08003ee0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003ee4:	e7fe      	b.n	8003ee4 <MemManage_Handler+0x4>

08003ee6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003ee6:	b480      	push	{r7}
 8003ee8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003eea:	e7fe      	b.n	8003eea <BusFault_Handler+0x4>

08003eec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003eec:	b480      	push	{r7}
 8003eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003ef0:	e7fe      	b.n	8003ef0 <UsageFault_Handler+0x4>

08003ef2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003ef2:	b480      	push	{r7}
 8003ef4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003ef6:	bf00      	nop
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efe:	4770      	bx	lr

08003f00 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003f00:	b480      	push	{r7}
 8003f02:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003f04:	bf00      	nop
 8003f06:	46bd      	mov	sp, r7
 8003f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0c:	4770      	bx	lr

08003f0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003f0e:	b480      	push	{r7}
 8003f10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003f12:	bf00      	nop
 8003f14:	46bd      	mov	sp, r7
 8003f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1a:	4770      	bx	lr

08003f1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003f20:	f000 f99c 	bl	800425c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003f24:	bf00      	nop
 8003f26:	bd80      	pop	{r7, pc}

08003f28 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003f2c:	4802      	ldr	r0, [pc, #8]	; (8003f38 <TIM2_IRQHandler+0x10>)
 8003f2e:	f006 f828 	bl	8009f82 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003f32:	bf00      	nop
 8003f34:	bd80      	pop	{r7, pc}
 8003f36:	bf00      	nop
 8003f38:	20000358 	.word	0x20000358

08003f3c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003f40:	4802      	ldr	r0, [pc, #8]	; (8003f4c <TIM4_IRQHandler+0x10>)
 8003f42:	f006 f81e 	bl	8009f82 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003f46:	bf00      	nop
 8003f48:	bd80      	pop	{r7, pc}
 8003f4a:	bf00      	nop
 8003f4c:	200003a0 	.word	0x200003a0

08003f50 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003f54:	4802      	ldr	r0, [pc, #8]	; (8003f60 <USART1_IRQHandler+0x10>)
 8003f56:	f006 fe05 	bl	800ab64 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003f5a:	bf00      	nop
 8003f5c:	bd80      	pop	{r7, pc}
 8003f5e:	bf00      	nop
 8003f60:	200004c0 	.word	0x200004c0

08003f64 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8003f68:	4802      	ldr	r0, [pc, #8]	; (8003f74 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8003f6a:	f006 f80a 	bl	8009f82 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8003f6e:	bf00      	nop
 8003f70:	bd80      	pop	{r7, pc}
 8003f72:	bf00      	nop
 8003f74:	20000478 	.word	0x20000478

08003f78 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003f7c:	4802      	ldr	r0, [pc, #8]	; (8003f88 <TIM6_DAC_IRQHandler+0x10>)
 8003f7e:	f006 f800 	bl	8009f82 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003f82:	bf00      	nop
 8003f84:	bd80      	pop	{r7, pc}
 8003f86:	bf00      	nop
 8003f88:	200003e8 	.word	0x200003e8

08003f8c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8003f90:	4802      	ldr	r0, [pc, #8]	; (8003f9c <DMA2_Stream2_IRQHandler+0x10>)
 8003f92:	f000 fc51 	bl	8004838 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8003f96:	bf00      	nop
 8003f98:	bd80      	pop	{r7, pc}
 8003f9a:	bf00      	nop
 8003f9c:	20000550 	.word	0x20000550

08003fa0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8003fa4:	4802      	ldr	r0, [pc, #8]	; (8003fb0 <OTG_FS_IRQHandler+0x10>)
 8003fa6:	f001 fb59 	bl	800565c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003faa:	bf00      	nop
 8003fac:	bd80      	pop	{r7, pc}
 8003fae:	bf00      	nop
 8003fb0:	20001104 	.word	0x20001104

08003fb4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	af00      	add	r7, sp, #0
  return 1;
 8003fb8:	2301      	movs	r3, #1
}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc2:	4770      	bx	lr

08003fc4 <_kill>:

int _kill(int pid, int sig)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b082      	sub	sp, #8
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
 8003fcc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003fce:	f00c fc7b 	bl	80108c8 <__errno>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	2216      	movs	r2, #22
 8003fd6:	601a      	str	r2, [r3, #0]
  return -1;
 8003fd8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003fdc:	4618      	mov	r0, r3
 8003fde:	3708      	adds	r7, #8
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bd80      	pop	{r7, pc}

08003fe4 <_exit>:

void _exit (int status)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b082      	sub	sp, #8
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003fec:	f04f 31ff 	mov.w	r1, #4294967295
 8003ff0:	6878      	ldr	r0, [r7, #4]
 8003ff2:	f7ff ffe7 	bl	8003fc4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003ff6:	e7fe      	b.n	8003ff6 <_exit+0x12>

08003ff8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b086      	sub	sp, #24
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	60f8      	str	r0, [r7, #12]
 8004000:	60b9      	str	r1, [r7, #8]
 8004002:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004004:	2300      	movs	r3, #0
 8004006:	617b      	str	r3, [r7, #20]
 8004008:	e00a      	b.n	8004020 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800400a:	f3af 8000 	nop.w
 800400e:	4601      	mov	r1, r0
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	1c5a      	adds	r2, r3, #1
 8004014:	60ba      	str	r2, [r7, #8]
 8004016:	b2ca      	uxtb	r2, r1
 8004018:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	3301      	adds	r3, #1
 800401e:	617b      	str	r3, [r7, #20]
 8004020:	697a      	ldr	r2, [r7, #20]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	429a      	cmp	r2, r3
 8004026:	dbf0      	blt.n	800400a <_read+0x12>
  }

  return len;
 8004028:	687b      	ldr	r3, [r7, #4]
}
 800402a:	4618      	mov	r0, r3
 800402c:	3718      	adds	r7, #24
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}

08004032 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004032:	b580      	push	{r7, lr}
 8004034:	b086      	sub	sp, #24
 8004036:	af00      	add	r7, sp, #0
 8004038:	60f8      	str	r0, [r7, #12]
 800403a:	60b9      	str	r1, [r7, #8]
 800403c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800403e:	2300      	movs	r3, #0
 8004040:	617b      	str	r3, [r7, #20]
 8004042:	e009      	b.n	8004058 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	1c5a      	adds	r2, r3, #1
 8004048:	60ba      	str	r2, [r7, #8]
 800404a:	781b      	ldrb	r3, [r3, #0]
 800404c:	4618      	mov	r0, r3
 800404e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	3301      	adds	r3, #1
 8004056:	617b      	str	r3, [r7, #20]
 8004058:	697a      	ldr	r2, [r7, #20]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	429a      	cmp	r2, r3
 800405e:	dbf1      	blt.n	8004044 <_write+0x12>
  }
  return len;
 8004060:	687b      	ldr	r3, [r7, #4]
}
 8004062:	4618      	mov	r0, r3
 8004064:	3718      	adds	r7, #24
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}

0800406a <_close>:

int _close(int file)
{
 800406a:	b480      	push	{r7}
 800406c:	b083      	sub	sp, #12
 800406e:	af00      	add	r7, sp, #0
 8004070:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004072:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004076:	4618      	mov	r0, r3
 8004078:	370c      	adds	r7, #12
 800407a:	46bd      	mov	sp, r7
 800407c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004080:	4770      	bx	lr

08004082 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004082:	b480      	push	{r7}
 8004084:	b083      	sub	sp, #12
 8004086:	af00      	add	r7, sp, #0
 8004088:	6078      	str	r0, [r7, #4]
 800408a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004092:	605a      	str	r2, [r3, #4]
  return 0;
 8004094:	2300      	movs	r3, #0
}
 8004096:	4618      	mov	r0, r3
 8004098:	370c      	adds	r7, #12
 800409a:	46bd      	mov	sp, r7
 800409c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a0:	4770      	bx	lr

080040a2 <_isatty>:

int _isatty(int file)
{
 80040a2:	b480      	push	{r7}
 80040a4:	b083      	sub	sp, #12
 80040a6:	af00      	add	r7, sp, #0
 80040a8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80040aa:	2301      	movs	r3, #1
}
 80040ac:	4618      	mov	r0, r3
 80040ae:	370c      	adds	r7, #12
 80040b0:	46bd      	mov	sp, r7
 80040b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b6:	4770      	bx	lr

080040b8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80040b8:	b480      	push	{r7}
 80040ba:	b085      	sub	sp, #20
 80040bc:	af00      	add	r7, sp, #0
 80040be:	60f8      	str	r0, [r7, #12]
 80040c0:	60b9      	str	r1, [r7, #8]
 80040c2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80040c4:	2300      	movs	r3, #0
}
 80040c6:	4618      	mov	r0, r3
 80040c8:	3714      	adds	r7, #20
 80040ca:	46bd      	mov	sp, r7
 80040cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d0:	4770      	bx	lr
	...

080040d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b086      	sub	sp, #24
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80040dc:	4a14      	ldr	r2, [pc, #80]	; (8004130 <_sbrk+0x5c>)
 80040de:	4b15      	ldr	r3, [pc, #84]	; (8004134 <_sbrk+0x60>)
 80040e0:	1ad3      	subs	r3, r2, r3
 80040e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80040e8:	4b13      	ldr	r3, [pc, #76]	; (8004138 <_sbrk+0x64>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d102      	bne.n	80040f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80040f0:	4b11      	ldr	r3, [pc, #68]	; (8004138 <_sbrk+0x64>)
 80040f2:	4a12      	ldr	r2, [pc, #72]	; (800413c <_sbrk+0x68>)
 80040f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80040f6:	4b10      	ldr	r3, [pc, #64]	; (8004138 <_sbrk+0x64>)
 80040f8:	681a      	ldr	r2, [r3, #0]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	4413      	add	r3, r2
 80040fe:	693a      	ldr	r2, [r7, #16]
 8004100:	429a      	cmp	r2, r3
 8004102:	d207      	bcs.n	8004114 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004104:	f00c fbe0 	bl	80108c8 <__errno>
 8004108:	4603      	mov	r3, r0
 800410a:	220c      	movs	r2, #12
 800410c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800410e:	f04f 33ff 	mov.w	r3, #4294967295
 8004112:	e009      	b.n	8004128 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004114:	4b08      	ldr	r3, [pc, #32]	; (8004138 <_sbrk+0x64>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800411a:	4b07      	ldr	r3, [pc, #28]	; (8004138 <_sbrk+0x64>)
 800411c:	681a      	ldr	r2, [r3, #0]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	4413      	add	r3, r2
 8004122:	4a05      	ldr	r2, [pc, #20]	; (8004138 <_sbrk+0x64>)
 8004124:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004126:	68fb      	ldr	r3, [r7, #12]
}
 8004128:	4618      	mov	r0, r3
 800412a:	3718      	adds	r7, #24
 800412c:	46bd      	mov	sp, r7
 800412e:	bd80      	pop	{r7, pc}
 8004130:	20020000 	.word	0x20020000
 8004134:	00000400 	.word	0x00000400
 8004138:	20000d20 	.word	0x20000d20
 800413c:	20001630 	.word	0x20001630

08004140 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004140:	b480      	push	{r7}
 8004142:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004144:	4b06      	ldr	r3, [pc, #24]	; (8004160 <SystemInit+0x20>)
 8004146:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800414a:	4a05      	ldr	r2, [pc, #20]	; (8004160 <SystemInit+0x20>)
 800414c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004150:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004154:	bf00      	nop
 8004156:	46bd      	mov	sp, r7
 8004158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415c:	4770      	bx	lr
 800415e:	bf00      	nop
 8004160:	e000ed00 	.word	0xe000ed00

08004164 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004164:	f8df d034 	ldr.w	sp, [pc, #52]	; 800419c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8004168:	f7ff ffea 	bl	8004140 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800416c:	480c      	ldr	r0, [pc, #48]	; (80041a0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800416e:	490d      	ldr	r1, [pc, #52]	; (80041a4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004170:	4a0d      	ldr	r2, [pc, #52]	; (80041a8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004172:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004174:	e002      	b.n	800417c <LoopCopyDataInit>

08004176 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004176:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004178:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800417a:	3304      	adds	r3, #4

0800417c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800417c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800417e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004180:	d3f9      	bcc.n	8004176 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004182:	4a0a      	ldr	r2, [pc, #40]	; (80041ac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004184:	4c0a      	ldr	r4, [pc, #40]	; (80041b0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8004186:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004188:	e001      	b.n	800418e <LoopFillZerobss>

0800418a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800418a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800418c:	3204      	adds	r2, #4

0800418e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800418e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004190:	d3fb      	bcc.n	800418a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8004192:	f00c fb9f 	bl	80108d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004196:	f7ff f83b 	bl	8003210 <main>
  bx  lr    
 800419a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800419c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80041a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80041a4:	20000210 	.word	0x20000210
  ldr r2, =_sidata
 80041a8:	080138b8 	.word	0x080138b8
  ldr r2, =_sbss
 80041ac:	20000210 	.word	0x20000210
  ldr r4, =_ebss
 80041b0:	20001630 	.word	0x20001630

080041b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80041b4:	e7fe      	b.n	80041b4 <ADC_IRQHandler>
	...

080041b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80041bc:	4b0e      	ldr	r3, [pc, #56]	; (80041f8 <HAL_Init+0x40>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a0d      	ldr	r2, [pc, #52]	; (80041f8 <HAL_Init+0x40>)
 80041c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80041c6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80041c8:	4b0b      	ldr	r3, [pc, #44]	; (80041f8 <HAL_Init+0x40>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a0a      	ldr	r2, [pc, #40]	; (80041f8 <HAL_Init+0x40>)
 80041ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80041d2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80041d4:	4b08      	ldr	r3, [pc, #32]	; (80041f8 <HAL_Init+0x40>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a07      	ldr	r2, [pc, #28]	; (80041f8 <HAL_Init+0x40>)
 80041da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80041e0:	2003      	movs	r0, #3
 80041e2:	f000 f94f 	bl	8004484 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80041e6:	200f      	movs	r0, #15
 80041e8:	f000 f808 	bl	80041fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80041ec:	f7ff fc14 	bl	8003a18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80041f0:	2300      	movs	r3, #0
}
 80041f2:	4618      	mov	r0, r3
 80041f4:	bd80      	pop	{r7, pc}
 80041f6:	bf00      	nop
 80041f8:	40023c00 	.word	0x40023c00

080041fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b082      	sub	sp, #8
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004204:	4b12      	ldr	r3, [pc, #72]	; (8004250 <HAL_InitTick+0x54>)
 8004206:	681a      	ldr	r2, [r3, #0]
 8004208:	4b12      	ldr	r3, [pc, #72]	; (8004254 <HAL_InitTick+0x58>)
 800420a:	781b      	ldrb	r3, [r3, #0]
 800420c:	4619      	mov	r1, r3
 800420e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004212:	fbb3 f3f1 	udiv	r3, r3, r1
 8004216:	fbb2 f3f3 	udiv	r3, r2, r3
 800421a:	4618      	mov	r0, r3
 800421c:	f000 f967 	bl	80044ee <HAL_SYSTICK_Config>
 8004220:	4603      	mov	r3, r0
 8004222:	2b00      	cmp	r3, #0
 8004224:	d001      	beq.n	800422a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004226:	2301      	movs	r3, #1
 8004228:	e00e      	b.n	8004248 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2b0f      	cmp	r3, #15
 800422e:	d80a      	bhi.n	8004246 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004230:	2200      	movs	r2, #0
 8004232:	6879      	ldr	r1, [r7, #4]
 8004234:	f04f 30ff 	mov.w	r0, #4294967295
 8004238:	f000 f92f 	bl	800449a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800423c:	4a06      	ldr	r2, [pc, #24]	; (8004258 <HAL_InitTick+0x5c>)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004242:	2300      	movs	r3, #0
 8004244:	e000      	b.n	8004248 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004246:	2301      	movs	r3, #1
}
 8004248:	4618      	mov	r0, r3
 800424a:	3708      	adds	r7, #8
 800424c:	46bd      	mov	sp, r7
 800424e:	bd80      	pop	{r7, pc}
 8004250:	2000000c 	.word	0x2000000c
 8004254:	20000014 	.word	0x20000014
 8004258:	20000010 	.word	0x20000010

0800425c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800425c:	b480      	push	{r7}
 800425e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004260:	4b06      	ldr	r3, [pc, #24]	; (800427c <HAL_IncTick+0x20>)
 8004262:	781b      	ldrb	r3, [r3, #0]
 8004264:	461a      	mov	r2, r3
 8004266:	4b06      	ldr	r3, [pc, #24]	; (8004280 <HAL_IncTick+0x24>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4413      	add	r3, r2
 800426c:	4a04      	ldr	r2, [pc, #16]	; (8004280 <HAL_IncTick+0x24>)
 800426e:	6013      	str	r3, [r2, #0]
}
 8004270:	bf00      	nop
 8004272:	46bd      	mov	sp, r7
 8004274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004278:	4770      	bx	lr
 800427a:	bf00      	nop
 800427c:	20000014 	.word	0x20000014
 8004280:	20000d24 	.word	0x20000d24

08004284 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004284:	b480      	push	{r7}
 8004286:	af00      	add	r7, sp, #0
  return uwTick;
 8004288:	4b03      	ldr	r3, [pc, #12]	; (8004298 <HAL_GetTick+0x14>)
 800428a:	681b      	ldr	r3, [r3, #0]
}
 800428c:	4618      	mov	r0, r3
 800428e:	46bd      	mov	sp, r7
 8004290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004294:	4770      	bx	lr
 8004296:	bf00      	nop
 8004298:	20000d24 	.word	0x20000d24

0800429c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b084      	sub	sp, #16
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80042a4:	f7ff ffee 	bl	8004284 <HAL_GetTick>
 80042a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042b4:	d005      	beq.n	80042c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80042b6:	4b0a      	ldr	r3, [pc, #40]	; (80042e0 <HAL_Delay+0x44>)
 80042b8:	781b      	ldrb	r3, [r3, #0]
 80042ba:	461a      	mov	r2, r3
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	4413      	add	r3, r2
 80042c0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80042c2:	bf00      	nop
 80042c4:	f7ff ffde 	bl	8004284 <HAL_GetTick>
 80042c8:	4602      	mov	r2, r0
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	1ad3      	subs	r3, r2, r3
 80042ce:	68fa      	ldr	r2, [r7, #12]
 80042d0:	429a      	cmp	r2, r3
 80042d2:	d8f7      	bhi.n	80042c4 <HAL_Delay+0x28>
  {
  }
}
 80042d4:	bf00      	nop
 80042d6:	bf00      	nop
 80042d8:	3710      	adds	r7, #16
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}
 80042de:	bf00      	nop
 80042e0:	20000014 	.word	0x20000014

080042e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80042e4:	b480      	push	{r7}
 80042e6:	b085      	sub	sp, #20
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	f003 0307 	and.w	r3, r3, #7
 80042f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80042f4:	4b0c      	ldr	r3, [pc, #48]	; (8004328 <__NVIC_SetPriorityGrouping+0x44>)
 80042f6:	68db      	ldr	r3, [r3, #12]
 80042f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80042fa:	68ba      	ldr	r2, [r7, #8]
 80042fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004300:	4013      	ands	r3, r2
 8004302:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800430c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004310:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004314:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004316:	4a04      	ldr	r2, [pc, #16]	; (8004328 <__NVIC_SetPriorityGrouping+0x44>)
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	60d3      	str	r3, [r2, #12]
}
 800431c:	bf00      	nop
 800431e:	3714      	adds	r7, #20
 8004320:	46bd      	mov	sp, r7
 8004322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004326:	4770      	bx	lr
 8004328:	e000ed00 	.word	0xe000ed00

0800432c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800432c:	b480      	push	{r7}
 800432e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004330:	4b04      	ldr	r3, [pc, #16]	; (8004344 <__NVIC_GetPriorityGrouping+0x18>)
 8004332:	68db      	ldr	r3, [r3, #12]
 8004334:	0a1b      	lsrs	r3, r3, #8
 8004336:	f003 0307 	and.w	r3, r3, #7
}
 800433a:	4618      	mov	r0, r3
 800433c:	46bd      	mov	sp, r7
 800433e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004342:	4770      	bx	lr
 8004344:	e000ed00 	.word	0xe000ed00

08004348 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004348:	b480      	push	{r7}
 800434a:	b083      	sub	sp, #12
 800434c:	af00      	add	r7, sp, #0
 800434e:	4603      	mov	r3, r0
 8004350:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004352:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004356:	2b00      	cmp	r3, #0
 8004358:	db0b      	blt.n	8004372 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800435a:	79fb      	ldrb	r3, [r7, #7]
 800435c:	f003 021f 	and.w	r2, r3, #31
 8004360:	4907      	ldr	r1, [pc, #28]	; (8004380 <__NVIC_EnableIRQ+0x38>)
 8004362:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004366:	095b      	lsrs	r3, r3, #5
 8004368:	2001      	movs	r0, #1
 800436a:	fa00 f202 	lsl.w	r2, r0, r2
 800436e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004372:	bf00      	nop
 8004374:	370c      	adds	r7, #12
 8004376:	46bd      	mov	sp, r7
 8004378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437c:	4770      	bx	lr
 800437e:	bf00      	nop
 8004380:	e000e100 	.word	0xe000e100

08004384 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004384:	b480      	push	{r7}
 8004386:	b083      	sub	sp, #12
 8004388:	af00      	add	r7, sp, #0
 800438a:	4603      	mov	r3, r0
 800438c:	6039      	str	r1, [r7, #0]
 800438e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004390:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004394:	2b00      	cmp	r3, #0
 8004396:	db0a      	blt.n	80043ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	b2da      	uxtb	r2, r3
 800439c:	490c      	ldr	r1, [pc, #48]	; (80043d0 <__NVIC_SetPriority+0x4c>)
 800439e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043a2:	0112      	lsls	r2, r2, #4
 80043a4:	b2d2      	uxtb	r2, r2
 80043a6:	440b      	add	r3, r1
 80043a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80043ac:	e00a      	b.n	80043c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	b2da      	uxtb	r2, r3
 80043b2:	4908      	ldr	r1, [pc, #32]	; (80043d4 <__NVIC_SetPriority+0x50>)
 80043b4:	79fb      	ldrb	r3, [r7, #7]
 80043b6:	f003 030f 	and.w	r3, r3, #15
 80043ba:	3b04      	subs	r3, #4
 80043bc:	0112      	lsls	r2, r2, #4
 80043be:	b2d2      	uxtb	r2, r2
 80043c0:	440b      	add	r3, r1
 80043c2:	761a      	strb	r2, [r3, #24]
}
 80043c4:	bf00      	nop
 80043c6:	370c      	adds	r7, #12
 80043c8:	46bd      	mov	sp, r7
 80043ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ce:	4770      	bx	lr
 80043d0:	e000e100 	.word	0xe000e100
 80043d4:	e000ed00 	.word	0xe000ed00

080043d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80043d8:	b480      	push	{r7}
 80043da:	b089      	sub	sp, #36	; 0x24
 80043dc:	af00      	add	r7, sp, #0
 80043de:	60f8      	str	r0, [r7, #12]
 80043e0:	60b9      	str	r1, [r7, #8]
 80043e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	f003 0307 	and.w	r3, r3, #7
 80043ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80043ec:	69fb      	ldr	r3, [r7, #28]
 80043ee:	f1c3 0307 	rsb	r3, r3, #7
 80043f2:	2b04      	cmp	r3, #4
 80043f4:	bf28      	it	cs
 80043f6:	2304      	movcs	r3, #4
 80043f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80043fa:	69fb      	ldr	r3, [r7, #28]
 80043fc:	3304      	adds	r3, #4
 80043fe:	2b06      	cmp	r3, #6
 8004400:	d902      	bls.n	8004408 <NVIC_EncodePriority+0x30>
 8004402:	69fb      	ldr	r3, [r7, #28]
 8004404:	3b03      	subs	r3, #3
 8004406:	e000      	b.n	800440a <NVIC_EncodePriority+0x32>
 8004408:	2300      	movs	r3, #0
 800440a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800440c:	f04f 32ff 	mov.w	r2, #4294967295
 8004410:	69bb      	ldr	r3, [r7, #24]
 8004412:	fa02 f303 	lsl.w	r3, r2, r3
 8004416:	43da      	mvns	r2, r3
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	401a      	ands	r2, r3
 800441c:	697b      	ldr	r3, [r7, #20]
 800441e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004420:	f04f 31ff 	mov.w	r1, #4294967295
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	fa01 f303 	lsl.w	r3, r1, r3
 800442a:	43d9      	mvns	r1, r3
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004430:	4313      	orrs	r3, r2
         );
}
 8004432:	4618      	mov	r0, r3
 8004434:	3724      	adds	r7, #36	; 0x24
 8004436:	46bd      	mov	sp, r7
 8004438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443c:	4770      	bx	lr
	...

08004440 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b082      	sub	sp, #8
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	3b01      	subs	r3, #1
 800444c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004450:	d301      	bcc.n	8004456 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004452:	2301      	movs	r3, #1
 8004454:	e00f      	b.n	8004476 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004456:	4a0a      	ldr	r2, [pc, #40]	; (8004480 <SysTick_Config+0x40>)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	3b01      	subs	r3, #1
 800445c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800445e:	210f      	movs	r1, #15
 8004460:	f04f 30ff 	mov.w	r0, #4294967295
 8004464:	f7ff ff8e 	bl	8004384 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004468:	4b05      	ldr	r3, [pc, #20]	; (8004480 <SysTick_Config+0x40>)
 800446a:	2200      	movs	r2, #0
 800446c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800446e:	4b04      	ldr	r3, [pc, #16]	; (8004480 <SysTick_Config+0x40>)
 8004470:	2207      	movs	r2, #7
 8004472:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004474:	2300      	movs	r3, #0
}
 8004476:	4618      	mov	r0, r3
 8004478:	3708      	adds	r7, #8
 800447a:	46bd      	mov	sp, r7
 800447c:	bd80      	pop	{r7, pc}
 800447e:	bf00      	nop
 8004480:	e000e010 	.word	0xe000e010

08004484 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b082      	sub	sp, #8
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800448c:	6878      	ldr	r0, [r7, #4]
 800448e:	f7ff ff29 	bl	80042e4 <__NVIC_SetPriorityGrouping>
}
 8004492:	bf00      	nop
 8004494:	3708      	adds	r7, #8
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}

0800449a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800449a:	b580      	push	{r7, lr}
 800449c:	b086      	sub	sp, #24
 800449e:	af00      	add	r7, sp, #0
 80044a0:	4603      	mov	r3, r0
 80044a2:	60b9      	str	r1, [r7, #8]
 80044a4:	607a      	str	r2, [r7, #4]
 80044a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80044a8:	2300      	movs	r3, #0
 80044aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80044ac:	f7ff ff3e 	bl	800432c <__NVIC_GetPriorityGrouping>
 80044b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80044b2:	687a      	ldr	r2, [r7, #4]
 80044b4:	68b9      	ldr	r1, [r7, #8]
 80044b6:	6978      	ldr	r0, [r7, #20]
 80044b8:	f7ff ff8e 	bl	80043d8 <NVIC_EncodePriority>
 80044bc:	4602      	mov	r2, r0
 80044be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80044c2:	4611      	mov	r1, r2
 80044c4:	4618      	mov	r0, r3
 80044c6:	f7ff ff5d 	bl	8004384 <__NVIC_SetPriority>
}
 80044ca:	bf00      	nop
 80044cc:	3718      	adds	r7, #24
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}

080044d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80044d2:	b580      	push	{r7, lr}
 80044d4:	b082      	sub	sp, #8
 80044d6:	af00      	add	r7, sp, #0
 80044d8:	4603      	mov	r3, r0
 80044da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80044dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044e0:	4618      	mov	r0, r3
 80044e2:	f7ff ff31 	bl	8004348 <__NVIC_EnableIRQ>
}
 80044e6:	bf00      	nop
 80044e8:	3708      	adds	r7, #8
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bd80      	pop	{r7, pc}

080044ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80044ee:	b580      	push	{r7, lr}
 80044f0:	b082      	sub	sp, #8
 80044f2:	af00      	add	r7, sp, #0
 80044f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80044f6:	6878      	ldr	r0, [r7, #4]
 80044f8:	f7ff ffa2 	bl	8004440 <SysTick_Config>
 80044fc:	4603      	mov	r3, r0
}
 80044fe:	4618      	mov	r0, r3
 8004500:	3708      	adds	r7, #8
 8004502:	46bd      	mov	sp, r7
 8004504:	bd80      	pop	{r7, pc}
	...

08004508 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b086      	sub	sp, #24
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004510:	2300      	movs	r3, #0
 8004512:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004514:	f7ff feb6 	bl	8004284 <HAL_GetTick>
 8004518:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d101      	bne.n	8004524 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004520:	2301      	movs	r3, #1
 8004522:	e099      	b.n	8004658 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2202      	movs	r2, #2
 8004528:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2200      	movs	r2, #0
 8004530:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	681a      	ldr	r2, [r3, #0]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f022 0201 	bic.w	r2, r2, #1
 8004542:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004544:	e00f      	b.n	8004566 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004546:	f7ff fe9d 	bl	8004284 <HAL_GetTick>
 800454a:	4602      	mov	r2, r0
 800454c:	693b      	ldr	r3, [r7, #16]
 800454e:	1ad3      	subs	r3, r2, r3
 8004550:	2b05      	cmp	r3, #5
 8004552:	d908      	bls.n	8004566 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2220      	movs	r2, #32
 8004558:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2203      	movs	r2, #3
 800455e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004562:	2303      	movs	r3, #3
 8004564:	e078      	b.n	8004658 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f003 0301 	and.w	r3, r3, #1
 8004570:	2b00      	cmp	r3, #0
 8004572:	d1e8      	bne.n	8004546 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800457c:	697a      	ldr	r2, [r7, #20]
 800457e:	4b38      	ldr	r3, [pc, #224]	; (8004660 <HAL_DMA_Init+0x158>)
 8004580:	4013      	ands	r3, r2
 8004582:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	685a      	ldr	r2, [r3, #4]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	689b      	ldr	r3, [r3, #8]
 800458c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004592:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	691b      	ldr	r3, [r3, #16]
 8004598:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800459e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	699b      	ldr	r3, [r3, #24]
 80045a4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80045aa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6a1b      	ldr	r3, [r3, #32]
 80045b0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80045b2:	697a      	ldr	r2, [r7, #20]
 80045b4:	4313      	orrs	r3, r2
 80045b6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045bc:	2b04      	cmp	r3, #4
 80045be:	d107      	bne.n	80045d0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045c8:	4313      	orrs	r3, r2
 80045ca:	697a      	ldr	r2, [r7, #20]
 80045cc:	4313      	orrs	r3, r2
 80045ce:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	697a      	ldr	r2, [r7, #20]
 80045d6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	695b      	ldr	r3, [r3, #20]
 80045de:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	f023 0307 	bic.w	r3, r3, #7
 80045e6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ec:	697a      	ldr	r2, [r7, #20]
 80045ee:	4313      	orrs	r3, r2
 80045f0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f6:	2b04      	cmp	r3, #4
 80045f8:	d117      	bne.n	800462a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045fe:	697a      	ldr	r2, [r7, #20]
 8004600:	4313      	orrs	r3, r2
 8004602:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004608:	2b00      	cmp	r3, #0
 800460a:	d00e      	beq.n	800462a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800460c:	6878      	ldr	r0, [r7, #4]
 800460e:	f000 fb01 	bl	8004c14 <DMA_CheckFifoParam>
 8004612:	4603      	mov	r3, r0
 8004614:	2b00      	cmp	r3, #0
 8004616:	d008      	beq.n	800462a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2240      	movs	r2, #64	; 0x40
 800461c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2201      	movs	r2, #1
 8004622:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004626:	2301      	movs	r3, #1
 8004628:	e016      	b.n	8004658 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	697a      	ldr	r2, [r7, #20]
 8004630:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004632:	6878      	ldr	r0, [r7, #4]
 8004634:	f000 fab8 	bl	8004ba8 <DMA_CalcBaseAndBitshift>
 8004638:	4603      	mov	r3, r0
 800463a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004640:	223f      	movs	r2, #63	; 0x3f
 8004642:	409a      	lsls	r2, r3
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2200      	movs	r2, #0
 800464c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2201      	movs	r2, #1
 8004652:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004656:	2300      	movs	r3, #0
}
 8004658:	4618      	mov	r0, r3
 800465a:	3718      	adds	r7, #24
 800465c:	46bd      	mov	sp, r7
 800465e:	bd80      	pop	{r7, pc}
 8004660:	f010803f 	.word	0xf010803f

08004664 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b086      	sub	sp, #24
 8004668:	af00      	add	r7, sp, #0
 800466a:	60f8      	str	r0, [r7, #12]
 800466c:	60b9      	str	r1, [r7, #8]
 800466e:	607a      	str	r2, [r7, #4]
 8004670:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004672:	2300      	movs	r3, #0
 8004674:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800467a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004682:	2b01      	cmp	r3, #1
 8004684:	d101      	bne.n	800468a <HAL_DMA_Start_IT+0x26>
 8004686:	2302      	movs	r3, #2
 8004688:	e040      	b.n	800470c <HAL_DMA_Start_IT+0xa8>
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	2201      	movs	r2, #1
 800468e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004698:	b2db      	uxtb	r3, r3
 800469a:	2b01      	cmp	r3, #1
 800469c:	d12f      	bne.n	80046fe <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	2202      	movs	r2, #2
 80046a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	2200      	movs	r2, #0
 80046aa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	687a      	ldr	r2, [r7, #4]
 80046b0:	68b9      	ldr	r1, [r7, #8]
 80046b2:	68f8      	ldr	r0, [r7, #12]
 80046b4:	f000 fa4a 	bl	8004b4c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046bc:	223f      	movs	r2, #63	; 0x3f
 80046be:	409a      	lsls	r2, r3
 80046c0:	693b      	ldr	r3, [r7, #16]
 80046c2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	681a      	ldr	r2, [r3, #0]
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f042 0216 	orr.w	r2, r2, #22
 80046d2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d007      	beq.n	80046ec <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	681a      	ldr	r2, [r3, #0]
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f042 0208 	orr.w	r2, r2, #8
 80046ea:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	681a      	ldr	r2, [r3, #0]
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f042 0201 	orr.w	r2, r2, #1
 80046fa:	601a      	str	r2, [r3, #0]
 80046fc:	e005      	b.n	800470a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	2200      	movs	r2, #0
 8004702:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004706:	2302      	movs	r3, #2
 8004708:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800470a:	7dfb      	ldrb	r3, [r7, #23]
}
 800470c:	4618      	mov	r0, r3
 800470e:	3718      	adds	r7, #24
 8004710:	46bd      	mov	sp, r7
 8004712:	bd80      	pop	{r7, pc}

08004714 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b084      	sub	sp, #16
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004720:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004722:	f7ff fdaf 	bl	8004284 <HAL_GetTick>
 8004726:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800472e:	b2db      	uxtb	r3, r3
 8004730:	2b02      	cmp	r3, #2
 8004732:	d008      	beq.n	8004746 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2280      	movs	r2, #128	; 0x80
 8004738:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2200      	movs	r2, #0
 800473e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004742:	2301      	movs	r3, #1
 8004744:	e052      	b.n	80047ec <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	681a      	ldr	r2, [r3, #0]
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f022 0216 	bic.w	r2, r2, #22
 8004754:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	695a      	ldr	r2, [r3, #20]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004764:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800476a:	2b00      	cmp	r3, #0
 800476c:	d103      	bne.n	8004776 <HAL_DMA_Abort+0x62>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004772:	2b00      	cmp	r3, #0
 8004774:	d007      	beq.n	8004786 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	681a      	ldr	r2, [r3, #0]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f022 0208 	bic.w	r2, r2, #8
 8004784:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	681a      	ldr	r2, [r3, #0]
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f022 0201 	bic.w	r2, r2, #1
 8004794:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004796:	e013      	b.n	80047c0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004798:	f7ff fd74 	bl	8004284 <HAL_GetTick>
 800479c:	4602      	mov	r2, r0
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	1ad3      	subs	r3, r2, r3
 80047a2:	2b05      	cmp	r3, #5
 80047a4:	d90c      	bls.n	80047c0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2220      	movs	r2, #32
 80047aa:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2203      	movs	r2, #3
 80047b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2200      	movs	r2, #0
 80047b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80047bc:	2303      	movs	r3, #3
 80047be:	e015      	b.n	80047ec <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f003 0301 	and.w	r3, r3, #1
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d1e4      	bne.n	8004798 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047d2:	223f      	movs	r2, #63	; 0x3f
 80047d4:	409a      	lsls	r2, r3
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2201      	movs	r2, #1
 80047de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2200      	movs	r2, #0
 80047e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80047ea:	2300      	movs	r3, #0
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	3710      	adds	r7, #16
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bd80      	pop	{r7, pc}

080047f4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80047f4:	b480      	push	{r7}
 80047f6:	b083      	sub	sp, #12
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004802:	b2db      	uxtb	r3, r3
 8004804:	2b02      	cmp	r3, #2
 8004806:	d004      	beq.n	8004812 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2280      	movs	r2, #128	; 0x80
 800480c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800480e:	2301      	movs	r3, #1
 8004810:	e00c      	b.n	800482c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2205      	movs	r2, #5
 8004816:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	681a      	ldr	r2, [r3, #0]
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f022 0201 	bic.w	r2, r2, #1
 8004828:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800482a:	2300      	movs	r3, #0
}
 800482c:	4618      	mov	r0, r3
 800482e:	370c      	adds	r7, #12
 8004830:	46bd      	mov	sp, r7
 8004832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004836:	4770      	bx	lr

08004838 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b086      	sub	sp, #24
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004840:	2300      	movs	r3, #0
 8004842:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004844:	4b8e      	ldr	r3, [pc, #568]	; (8004a80 <HAL_DMA_IRQHandler+0x248>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a8e      	ldr	r2, [pc, #568]	; (8004a84 <HAL_DMA_IRQHandler+0x24c>)
 800484a:	fba2 2303 	umull	r2, r3, r2, r3
 800484e:	0a9b      	lsrs	r3, r3, #10
 8004850:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004856:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004858:	693b      	ldr	r3, [r7, #16]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004862:	2208      	movs	r2, #8
 8004864:	409a      	lsls	r2, r3
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	4013      	ands	r3, r2
 800486a:	2b00      	cmp	r3, #0
 800486c:	d01a      	beq.n	80048a4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f003 0304 	and.w	r3, r3, #4
 8004878:	2b00      	cmp	r3, #0
 800487a:	d013      	beq.n	80048a4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	681a      	ldr	r2, [r3, #0]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f022 0204 	bic.w	r2, r2, #4
 800488a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004890:	2208      	movs	r2, #8
 8004892:	409a      	lsls	r2, r3
 8004894:	693b      	ldr	r3, [r7, #16]
 8004896:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800489c:	f043 0201 	orr.w	r2, r3, #1
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048a8:	2201      	movs	r2, #1
 80048aa:	409a      	lsls	r2, r3
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	4013      	ands	r3, r2
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d012      	beq.n	80048da <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	695b      	ldr	r3, [r3, #20]
 80048ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d00b      	beq.n	80048da <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048c6:	2201      	movs	r2, #1
 80048c8:	409a      	lsls	r2, r3
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048d2:	f043 0202 	orr.w	r2, r3, #2
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048de:	2204      	movs	r2, #4
 80048e0:	409a      	lsls	r2, r3
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	4013      	ands	r3, r2
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d012      	beq.n	8004910 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f003 0302 	and.w	r3, r3, #2
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d00b      	beq.n	8004910 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048fc:	2204      	movs	r2, #4
 80048fe:	409a      	lsls	r2, r3
 8004900:	693b      	ldr	r3, [r7, #16]
 8004902:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004908:	f043 0204 	orr.w	r2, r3, #4
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004914:	2210      	movs	r2, #16
 8004916:	409a      	lsls	r2, r3
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	4013      	ands	r3, r2
 800491c:	2b00      	cmp	r3, #0
 800491e:	d043      	beq.n	80049a8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f003 0308 	and.w	r3, r3, #8
 800492a:	2b00      	cmp	r3, #0
 800492c:	d03c      	beq.n	80049a8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004932:	2210      	movs	r2, #16
 8004934:	409a      	lsls	r2, r3
 8004936:	693b      	ldr	r3, [r7, #16]
 8004938:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004944:	2b00      	cmp	r3, #0
 8004946:	d018      	beq.n	800497a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004952:	2b00      	cmp	r3, #0
 8004954:	d108      	bne.n	8004968 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800495a:	2b00      	cmp	r3, #0
 800495c:	d024      	beq.n	80049a8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004962:	6878      	ldr	r0, [r7, #4]
 8004964:	4798      	blx	r3
 8004966:	e01f      	b.n	80049a8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800496c:	2b00      	cmp	r3, #0
 800496e:	d01b      	beq.n	80049a8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004974:	6878      	ldr	r0, [r7, #4]
 8004976:	4798      	blx	r3
 8004978:	e016      	b.n	80049a8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004984:	2b00      	cmp	r3, #0
 8004986:	d107      	bne.n	8004998 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	681a      	ldr	r2, [r3, #0]
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f022 0208 	bic.w	r2, r2, #8
 8004996:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800499c:	2b00      	cmp	r3, #0
 800499e:	d003      	beq.n	80049a8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049a4:	6878      	ldr	r0, [r7, #4]
 80049a6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049ac:	2220      	movs	r2, #32
 80049ae:	409a      	lsls	r2, r3
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	4013      	ands	r3, r2
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	f000 808f 	beq.w	8004ad8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f003 0310 	and.w	r3, r3, #16
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	f000 8087 	beq.w	8004ad8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049ce:	2220      	movs	r2, #32
 80049d0:	409a      	lsls	r2, r3
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80049dc:	b2db      	uxtb	r3, r3
 80049de:	2b05      	cmp	r3, #5
 80049e0:	d136      	bne.n	8004a50 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	681a      	ldr	r2, [r3, #0]
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f022 0216 	bic.w	r2, r2, #22
 80049f0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	695a      	ldr	r2, [r3, #20]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004a00:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d103      	bne.n	8004a12 <HAL_DMA_IRQHandler+0x1da>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d007      	beq.n	8004a22 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	681a      	ldr	r2, [r3, #0]
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f022 0208 	bic.w	r2, r2, #8
 8004a20:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a26:	223f      	movs	r2, #63	; 0x3f
 8004a28:	409a      	lsls	r2, r3
 8004a2a:	693b      	ldr	r3, [r7, #16]
 8004a2c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2201      	movs	r2, #1
 8004a32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d07e      	beq.n	8004b44 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a4a:	6878      	ldr	r0, [r7, #4]
 8004a4c:	4798      	blx	r3
        }
        return;
 8004a4e:	e079      	b.n	8004b44 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d01d      	beq.n	8004a9a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d10d      	bne.n	8004a88 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d031      	beq.n	8004ad8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a78:	6878      	ldr	r0, [r7, #4]
 8004a7a:	4798      	blx	r3
 8004a7c:	e02c      	b.n	8004ad8 <HAL_DMA_IRQHandler+0x2a0>
 8004a7e:	bf00      	nop
 8004a80:	2000000c 	.word	0x2000000c
 8004a84:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d023      	beq.n	8004ad8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a94:	6878      	ldr	r0, [r7, #4]
 8004a96:	4798      	blx	r3
 8004a98:	e01e      	b.n	8004ad8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d10f      	bne.n	8004ac8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	681a      	ldr	r2, [r3, #0]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f022 0210 	bic.w	r2, r2, #16
 8004ab6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2201      	movs	r2, #1
 8004abc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d003      	beq.n	8004ad8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ad4:	6878      	ldr	r0, [r7, #4]
 8004ad6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d032      	beq.n	8004b46 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ae4:	f003 0301 	and.w	r3, r3, #1
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d022      	beq.n	8004b32 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2205      	movs	r2, #5
 8004af0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	681a      	ldr	r2, [r3, #0]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f022 0201 	bic.w	r2, r2, #1
 8004b02:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	3301      	adds	r3, #1
 8004b08:	60bb      	str	r3, [r7, #8]
 8004b0a:	697a      	ldr	r2, [r7, #20]
 8004b0c:	429a      	cmp	r2, r3
 8004b0e:	d307      	bcc.n	8004b20 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f003 0301 	and.w	r3, r3, #1
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d1f2      	bne.n	8004b04 <HAL_DMA_IRQHandler+0x2cc>
 8004b1e:	e000      	b.n	8004b22 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004b20:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2201      	movs	r2, #1
 8004b26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d005      	beq.n	8004b46 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b3e:	6878      	ldr	r0, [r7, #4]
 8004b40:	4798      	blx	r3
 8004b42:	e000      	b.n	8004b46 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004b44:	bf00      	nop
    }
  }
}
 8004b46:	3718      	adds	r7, #24
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bd80      	pop	{r7, pc}

08004b4c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b085      	sub	sp, #20
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	60f8      	str	r0, [r7, #12]
 8004b54:	60b9      	str	r1, [r7, #8]
 8004b56:	607a      	str	r2, [r7, #4]
 8004b58:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	681a      	ldr	r2, [r3, #0]
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004b68:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	683a      	ldr	r2, [r7, #0]
 8004b70:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	689b      	ldr	r3, [r3, #8]
 8004b76:	2b40      	cmp	r3, #64	; 0x40
 8004b78:	d108      	bne.n	8004b8c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	687a      	ldr	r2, [r7, #4]
 8004b80:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	68ba      	ldr	r2, [r7, #8]
 8004b88:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004b8a:	e007      	b.n	8004b9c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	68ba      	ldr	r2, [r7, #8]
 8004b92:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	687a      	ldr	r2, [r7, #4]
 8004b9a:	60da      	str	r2, [r3, #12]
}
 8004b9c:	bf00      	nop
 8004b9e:	3714      	adds	r7, #20
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba6:	4770      	bx	lr

08004ba8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004ba8:	b480      	push	{r7}
 8004baa:	b085      	sub	sp, #20
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	b2db      	uxtb	r3, r3
 8004bb6:	3b10      	subs	r3, #16
 8004bb8:	4a14      	ldr	r2, [pc, #80]	; (8004c0c <DMA_CalcBaseAndBitshift+0x64>)
 8004bba:	fba2 2303 	umull	r2, r3, r2, r3
 8004bbe:	091b      	lsrs	r3, r3, #4
 8004bc0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004bc2:	4a13      	ldr	r2, [pc, #76]	; (8004c10 <DMA_CalcBaseAndBitshift+0x68>)
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	4413      	add	r3, r2
 8004bc8:	781b      	ldrb	r3, [r3, #0]
 8004bca:	461a      	mov	r2, r3
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	2b03      	cmp	r3, #3
 8004bd4:	d909      	bls.n	8004bea <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004bde:	f023 0303 	bic.w	r3, r3, #3
 8004be2:	1d1a      	adds	r2, r3, #4
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	659a      	str	r2, [r3, #88]	; 0x58
 8004be8:	e007      	b.n	8004bfa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004bf2:	f023 0303 	bic.w	r3, r3, #3
 8004bf6:	687a      	ldr	r2, [r7, #4]
 8004bf8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	3714      	adds	r7, #20
 8004c02:	46bd      	mov	sp, r7
 8004c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c08:	4770      	bx	lr
 8004c0a:	bf00      	nop
 8004c0c:	aaaaaaab 	.word	0xaaaaaaab
 8004c10:	080134b0 	.word	0x080134b0

08004c14 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004c14:	b480      	push	{r7}
 8004c16:	b085      	sub	sp, #20
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c24:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	699b      	ldr	r3, [r3, #24]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d11f      	bne.n	8004c6e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004c2e:	68bb      	ldr	r3, [r7, #8]
 8004c30:	2b03      	cmp	r3, #3
 8004c32:	d856      	bhi.n	8004ce2 <DMA_CheckFifoParam+0xce>
 8004c34:	a201      	add	r2, pc, #4	; (adr r2, 8004c3c <DMA_CheckFifoParam+0x28>)
 8004c36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c3a:	bf00      	nop
 8004c3c:	08004c4d 	.word	0x08004c4d
 8004c40:	08004c5f 	.word	0x08004c5f
 8004c44:	08004c4d 	.word	0x08004c4d
 8004c48:	08004ce3 	.word	0x08004ce3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c50:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d046      	beq.n	8004ce6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004c58:	2301      	movs	r3, #1
 8004c5a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c5c:	e043      	b.n	8004ce6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c62:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004c66:	d140      	bne.n	8004cea <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004c68:	2301      	movs	r3, #1
 8004c6a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c6c:	e03d      	b.n	8004cea <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	699b      	ldr	r3, [r3, #24]
 8004c72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c76:	d121      	bne.n	8004cbc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	2b03      	cmp	r3, #3
 8004c7c:	d837      	bhi.n	8004cee <DMA_CheckFifoParam+0xda>
 8004c7e:	a201      	add	r2, pc, #4	; (adr r2, 8004c84 <DMA_CheckFifoParam+0x70>)
 8004c80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c84:	08004c95 	.word	0x08004c95
 8004c88:	08004c9b 	.word	0x08004c9b
 8004c8c:	08004c95 	.word	0x08004c95
 8004c90:	08004cad 	.word	0x08004cad
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004c94:	2301      	movs	r3, #1
 8004c96:	73fb      	strb	r3, [r7, #15]
      break;
 8004c98:	e030      	b.n	8004cfc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c9e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d025      	beq.n	8004cf2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004caa:	e022      	b.n	8004cf2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cb0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004cb4:	d11f      	bne.n	8004cf6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004cba:	e01c      	b.n	8004cf6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	2b02      	cmp	r3, #2
 8004cc0:	d903      	bls.n	8004cca <DMA_CheckFifoParam+0xb6>
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	2b03      	cmp	r3, #3
 8004cc6:	d003      	beq.n	8004cd0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004cc8:	e018      	b.n	8004cfc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004cca:	2301      	movs	r3, #1
 8004ccc:	73fb      	strb	r3, [r7, #15]
      break;
 8004cce:	e015      	b.n	8004cfc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cd4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d00e      	beq.n	8004cfa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004cdc:	2301      	movs	r3, #1
 8004cde:	73fb      	strb	r3, [r7, #15]
      break;
 8004ce0:	e00b      	b.n	8004cfa <DMA_CheckFifoParam+0xe6>
      break;
 8004ce2:	bf00      	nop
 8004ce4:	e00a      	b.n	8004cfc <DMA_CheckFifoParam+0xe8>
      break;
 8004ce6:	bf00      	nop
 8004ce8:	e008      	b.n	8004cfc <DMA_CheckFifoParam+0xe8>
      break;
 8004cea:	bf00      	nop
 8004cec:	e006      	b.n	8004cfc <DMA_CheckFifoParam+0xe8>
      break;
 8004cee:	bf00      	nop
 8004cf0:	e004      	b.n	8004cfc <DMA_CheckFifoParam+0xe8>
      break;
 8004cf2:	bf00      	nop
 8004cf4:	e002      	b.n	8004cfc <DMA_CheckFifoParam+0xe8>
      break;   
 8004cf6:	bf00      	nop
 8004cf8:	e000      	b.n	8004cfc <DMA_CheckFifoParam+0xe8>
      break;
 8004cfa:	bf00      	nop
    }
  } 
  
  return status; 
 8004cfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	3714      	adds	r7, #20
 8004d02:	46bd      	mov	sp, r7
 8004d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d08:	4770      	bx	lr
 8004d0a:	bf00      	nop

08004d0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b089      	sub	sp, #36	; 0x24
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
 8004d14:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004d16:	2300      	movs	r3, #0
 8004d18:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004d1e:	2300      	movs	r3, #0
 8004d20:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004d22:	2300      	movs	r3, #0
 8004d24:	61fb      	str	r3, [r7, #28]
 8004d26:	e165      	b.n	8004ff4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004d28:	2201      	movs	r2, #1
 8004d2a:	69fb      	ldr	r3, [r7, #28]
 8004d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d30:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	697a      	ldr	r2, [r7, #20]
 8004d38:	4013      	ands	r3, r2
 8004d3a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004d3c:	693a      	ldr	r2, [r7, #16]
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	429a      	cmp	r2, r3
 8004d42:	f040 8154 	bne.w	8004fee <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	f003 0303 	and.w	r3, r3, #3
 8004d4e:	2b01      	cmp	r3, #1
 8004d50:	d005      	beq.n	8004d5e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004d5a:	2b02      	cmp	r3, #2
 8004d5c:	d130      	bne.n	8004dc0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	689b      	ldr	r3, [r3, #8]
 8004d62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004d64:	69fb      	ldr	r3, [r7, #28]
 8004d66:	005b      	lsls	r3, r3, #1
 8004d68:	2203      	movs	r2, #3
 8004d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d6e:	43db      	mvns	r3, r3
 8004d70:	69ba      	ldr	r2, [r7, #24]
 8004d72:	4013      	ands	r3, r2
 8004d74:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	68da      	ldr	r2, [r3, #12]
 8004d7a:	69fb      	ldr	r3, [r7, #28]
 8004d7c:	005b      	lsls	r3, r3, #1
 8004d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d82:	69ba      	ldr	r2, [r7, #24]
 8004d84:	4313      	orrs	r3, r2
 8004d86:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	69ba      	ldr	r2, [r7, #24]
 8004d8c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004d94:	2201      	movs	r2, #1
 8004d96:	69fb      	ldr	r3, [r7, #28]
 8004d98:	fa02 f303 	lsl.w	r3, r2, r3
 8004d9c:	43db      	mvns	r3, r3
 8004d9e:	69ba      	ldr	r2, [r7, #24]
 8004da0:	4013      	ands	r3, r2
 8004da2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	091b      	lsrs	r3, r3, #4
 8004daa:	f003 0201 	and.w	r2, r3, #1
 8004dae:	69fb      	ldr	r3, [r7, #28]
 8004db0:	fa02 f303 	lsl.w	r3, r2, r3
 8004db4:	69ba      	ldr	r2, [r7, #24]
 8004db6:	4313      	orrs	r3, r2
 8004db8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	69ba      	ldr	r2, [r7, #24]
 8004dbe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	f003 0303 	and.w	r3, r3, #3
 8004dc8:	2b03      	cmp	r3, #3
 8004dca:	d017      	beq.n	8004dfc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	68db      	ldr	r3, [r3, #12]
 8004dd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004dd2:	69fb      	ldr	r3, [r7, #28]
 8004dd4:	005b      	lsls	r3, r3, #1
 8004dd6:	2203      	movs	r2, #3
 8004dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8004ddc:	43db      	mvns	r3, r3
 8004dde:	69ba      	ldr	r2, [r7, #24]
 8004de0:	4013      	ands	r3, r2
 8004de2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	689a      	ldr	r2, [r3, #8]
 8004de8:	69fb      	ldr	r3, [r7, #28]
 8004dea:	005b      	lsls	r3, r3, #1
 8004dec:	fa02 f303 	lsl.w	r3, r2, r3
 8004df0:	69ba      	ldr	r2, [r7, #24]
 8004df2:	4313      	orrs	r3, r2
 8004df4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	69ba      	ldr	r2, [r7, #24]
 8004dfa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	f003 0303 	and.w	r3, r3, #3
 8004e04:	2b02      	cmp	r3, #2
 8004e06:	d123      	bne.n	8004e50 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004e08:	69fb      	ldr	r3, [r7, #28]
 8004e0a:	08da      	lsrs	r2, r3, #3
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	3208      	adds	r2, #8
 8004e10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e14:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004e16:	69fb      	ldr	r3, [r7, #28]
 8004e18:	f003 0307 	and.w	r3, r3, #7
 8004e1c:	009b      	lsls	r3, r3, #2
 8004e1e:	220f      	movs	r2, #15
 8004e20:	fa02 f303 	lsl.w	r3, r2, r3
 8004e24:	43db      	mvns	r3, r3
 8004e26:	69ba      	ldr	r2, [r7, #24]
 8004e28:	4013      	ands	r3, r2
 8004e2a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	691a      	ldr	r2, [r3, #16]
 8004e30:	69fb      	ldr	r3, [r7, #28]
 8004e32:	f003 0307 	and.w	r3, r3, #7
 8004e36:	009b      	lsls	r3, r3, #2
 8004e38:	fa02 f303 	lsl.w	r3, r2, r3
 8004e3c:	69ba      	ldr	r2, [r7, #24]
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004e42:	69fb      	ldr	r3, [r7, #28]
 8004e44:	08da      	lsrs	r2, r3, #3
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	3208      	adds	r2, #8
 8004e4a:	69b9      	ldr	r1, [r7, #24]
 8004e4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004e56:	69fb      	ldr	r3, [r7, #28]
 8004e58:	005b      	lsls	r3, r3, #1
 8004e5a:	2203      	movs	r2, #3
 8004e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e60:	43db      	mvns	r3, r3
 8004e62:	69ba      	ldr	r2, [r7, #24]
 8004e64:	4013      	ands	r3, r2
 8004e66:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	685b      	ldr	r3, [r3, #4]
 8004e6c:	f003 0203 	and.w	r2, r3, #3
 8004e70:	69fb      	ldr	r3, [r7, #28]
 8004e72:	005b      	lsls	r3, r3, #1
 8004e74:	fa02 f303 	lsl.w	r3, r2, r3
 8004e78:	69ba      	ldr	r2, [r7, #24]
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	69ba      	ldr	r2, [r7, #24]
 8004e82:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	f000 80ae 	beq.w	8004fee <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e92:	2300      	movs	r3, #0
 8004e94:	60fb      	str	r3, [r7, #12]
 8004e96:	4b5d      	ldr	r3, [pc, #372]	; (800500c <HAL_GPIO_Init+0x300>)
 8004e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e9a:	4a5c      	ldr	r2, [pc, #368]	; (800500c <HAL_GPIO_Init+0x300>)
 8004e9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004ea0:	6453      	str	r3, [r2, #68]	; 0x44
 8004ea2:	4b5a      	ldr	r3, [pc, #360]	; (800500c <HAL_GPIO_Init+0x300>)
 8004ea4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ea6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004eaa:	60fb      	str	r3, [r7, #12]
 8004eac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004eae:	4a58      	ldr	r2, [pc, #352]	; (8005010 <HAL_GPIO_Init+0x304>)
 8004eb0:	69fb      	ldr	r3, [r7, #28]
 8004eb2:	089b      	lsrs	r3, r3, #2
 8004eb4:	3302      	adds	r3, #2
 8004eb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004eba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004ebc:	69fb      	ldr	r3, [r7, #28]
 8004ebe:	f003 0303 	and.w	r3, r3, #3
 8004ec2:	009b      	lsls	r3, r3, #2
 8004ec4:	220f      	movs	r2, #15
 8004ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8004eca:	43db      	mvns	r3, r3
 8004ecc:	69ba      	ldr	r2, [r7, #24]
 8004ece:	4013      	ands	r3, r2
 8004ed0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	4a4f      	ldr	r2, [pc, #316]	; (8005014 <HAL_GPIO_Init+0x308>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d025      	beq.n	8004f26 <HAL_GPIO_Init+0x21a>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	4a4e      	ldr	r2, [pc, #312]	; (8005018 <HAL_GPIO_Init+0x30c>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d01f      	beq.n	8004f22 <HAL_GPIO_Init+0x216>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	4a4d      	ldr	r2, [pc, #308]	; (800501c <HAL_GPIO_Init+0x310>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d019      	beq.n	8004f1e <HAL_GPIO_Init+0x212>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	4a4c      	ldr	r2, [pc, #304]	; (8005020 <HAL_GPIO_Init+0x314>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d013      	beq.n	8004f1a <HAL_GPIO_Init+0x20e>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	4a4b      	ldr	r2, [pc, #300]	; (8005024 <HAL_GPIO_Init+0x318>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d00d      	beq.n	8004f16 <HAL_GPIO_Init+0x20a>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	4a4a      	ldr	r2, [pc, #296]	; (8005028 <HAL_GPIO_Init+0x31c>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d007      	beq.n	8004f12 <HAL_GPIO_Init+0x206>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	4a49      	ldr	r2, [pc, #292]	; (800502c <HAL_GPIO_Init+0x320>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d101      	bne.n	8004f0e <HAL_GPIO_Init+0x202>
 8004f0a:	2306      	movs	r3, #6
 8004f0c:	e00c      	b.n	8004f28 <HAL_GPIO_Init+0x21c>
 8004f0e:	2307      	movs	r3, #7
 8004f10:	e00a      	b.n	8004f28 <HAL_GPIO_Init+0x21c>
 8004f12:	2305      	movs	r3, #5
 8004f14:	e008      	b.n	8004f28 <HAL_GPIO_Init+0x21c>
 8004f16:	2304      	movs	r3, #4
 8004f18:	e006      	b.n	8004f28 <HAL_GPIO_Init+0x21c>
 8004f1a:	2303      	movs	r3, #3
 8004f1c:	e004      	b.n	8004f28 <HAL_GPIO_Init+0x21c>
 8004f1e:	2302      	movs	r3, #2
 8004f20:	e002      	b.n	8004f28 <HAL_GPIO_Init+0x21c>
 8004f22:	2301      	movs	r3, #1
 8004f24:	e000      	b.n	8004f28 <HAL_GPIO_Init+0x21c>
 8004f26:	2300      	movs	r3, #0
 8004f28:	69fa      	ldr	r2, [r7, #28]
 8004f2a:	f002 0203 	and.w	r2, r2, #3
 8004f2e:	0092      	lsls	r2, r2, #2
 8004f30:	4093      	lsls	r3, r2
 8004f32:	69ba      	ldr	r2, [r7, #24]
 8004f34:	4313      	orrs	r3, r2
 8004f36:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004f38:	4935      	ldr	r1, [pc, #212]	; (8005010 <HAL_GPIO_Init+0x304>)
 8004f3a:	69fb      	ldr	r3, [r7, #28]
 8004f3c:	089b      	lsrs	r3, r3, #2
 8004f3e:	3302      	adds	r3, #2
 8004f40:	69ba      	ldr	r2, [r7, #24]
 8004f42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004f46:	4b3a      	ldr	r3, [pc, #232]	; (8005030 <HAL_GPIO_Init+0x324>)
 8004f48:	689b      	ldr	r3, [r3, #8]
 8004f4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f4c:	693b      	ldr	r3, [r7, #16]
 8004f4e:	43db      	mvns	r3, r3
 8004f50:	69ba      	ldr	r2, [r7, #24]
 8004f52:	4013      	ands	r3, r2
 8004f54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d003      	beq.n	8004f6a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8004f62:	69ba      	ldr	r2, [r7, #24]
 8004f64:	693b      	ldr	r3, [r7, #16]
 8004f66:	4313      	orrs	r3, r2
 8004f68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004f6a:	4a31      	ldr	r2, [pc, #196]	; (8005030 <HAL_GPIO_Init+0x324>)
 8004f6c:	69bb      	ldr	r3, [r7, #24]
 8004f6e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004f70:	4b2f      	ldr	r3, [pc, #188]	; (8005030 <HAL_GPIO_Init+0x324>)
 8004f72:	68db      	ldr	r3, [r3, #12]
 8004f74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f76:	693b      	ldr	r3, [r7, #16]
 8004f78:	43db      	mvns	r3, r3
 8004f7a:	69ba      	ldr	r2, [r7, #24]
 8004f7c:	4013      	ands	r3, r2
 8004f7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	685b      	ldr	r3, [r3, #4]
 8004f84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d003      	beq.n	8004f94 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004f8c:	69ba      	ldr	r2, [r7, #24]
 8004f8e:	693b      	ldr	r3, [r7, #16]
 8004f90:	4313      	orrs	r3, r2
 8004f92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004f94:	4a26      	ldr	r2, [pc, #152]	; (8005030 <HAL_GPIO_Init+0x324>)
 8004f96:	69bb      	ldr	r3, [r7, #24]
 8004f98:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004f9a:	4b25      	ldr	r3, [pc, #148]	; (8005030 <HAL_GPIO_Init+0x324>)
 8004f9c:	685b      	ldr	r3, [r3, #4]
 8004f9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004fa0:	693b      	ldr	r3, [r7, #16]
 8004fa2:	43db      	mvns	r3, r3
 8004fa4:	69ba      	ldr	r2, [r7, #24]
 8004fa6:	4013      	ands	r3, r2
 8004fa8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d003      	beq.n	8004fbe <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8004fb6:	69ba      	ldr	r2, [r7, #24]
 8004fb8:	693b      	ldr	r3, [r7, #16]
 8004fba:	4313      	orrs	r3, r2
 8004fbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004fbe:	4a1c      	ldr	r2, [pc, #112]	; (8005030 <HAL_GPIO_Init+0x324>)
 8004fc0:	69bb      	ldr	r3, [r7, #24]
 8004fc2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004fc4:	4b1a      	ldr	r3, [pc, #104]	; (8005030 <HAL_GPIO_Init+0x324>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004fca:	693b      	ldr	r3, [r7, #16]
 8004fcc:	43db      	mvns	r3, r3
 8004fce:	69ba      	ldr	r2, [r7, #24]
 8004fd0:	4013      	ands	r3, r2
 8004fd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	685b      	ldr	r3, [r3, #4]
 8004fd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d003      	beq.n	8004fe8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004fe0:	69ba      	ldr	r2, [r7, #24]
 8004fe2:	693b      	ldr	r3, [r7, #16]
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004fe8:	4a11      	ldr	r2, [pc, #68]	; (8005030 <HAL_GPIO_Init+0x324>)
 8004fea:	69bb      	ldr	r3, [r7, #24]
 8004fec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004fee:	69fb      	ldr	r3, [r7, #28]
 8004ff0:	3301      	adds	r3, #1
 8004ff2:	61fb      	str	r3, [r7, #28]
 8004ff4:	69fb      	ldr	r3, [r7, #28]
 8004ff6:	2b0f      	cmp	r3, #15
 8004ff8:	f67f ae96 	bls.w	8004d28 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004ffc:	bf00      	nop
 8004ffe:	bf00      	nop
 8005000:	3724      	adds	r7, #36	; 0x24
 8005002:	46bd      	mov	sp, r7
 8005004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005008:	4770      	bx	lr
 800500a:	bf00      	nop
 800500c:	40023800 	.word	0x40023800
 8005010:	40013800 	.word	0x40013800
 8005014:	40020000 	.word	0x40020000
 8005018:	40020400 	.word	0x40020400
 800501c:	40020800 	.word	0x40020800
 8005020:	40020c00 	.word	0x40020c00
 8005024:	40021000 	.word	0x40021000
 8005028:	40021400 	.word	0x40021400
 800502c:	40021800 	.word	0x40021800
 8005030:	40013c00 	.word	0x40013c00

08005034 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005034:	b480      	push	{r7}
 8005036:	b083      	sub	sp, #12
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
 800503c:	460b      	mov	r3, r1
 800503e:	807b      	strh	r3, [r7, #2]
 8005040:	4613      	mov	r3, r2
 8005042:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005044:	787b      	ldrb	r3, [r7, #1]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d003      	beq.n	8005052 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800504a:	887a      	ldrh	r2, [r7, #2]
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005050:	e003      	b.n	800505a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005052:	887b      	ldrh	r3, [r7, #2]
 8005054:	041a      	lsls	r2, r3, #16
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	619a      	str	r2, [r3, #24]
}
 800505a:	bf00      	nop
 800505c:	370c      	adds	r7, #12
 800505e:	46bd      	mov	sp, r7
 8005060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005064:	4770      	bx	lr

08005066 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005066:	b480      	push	{r7}
 8005068:	b085      	sub	sp, #20
 800506a:	af00      	add	r7, sp, #0
 800506c:	6078      	str	r0, [r7, #4]
 800506e:	460b      	mov	r3, r1
 8005070:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	695b      	ldr	r3, [r3, #20]
 8005076:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005078:	887a      	ldrh	r2, [r7, #2]
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	4013      	ands	r3, r2
 800507e:	041a      	lsls	r2, r3, #16
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	43d9      	mvns	r1, r3
 8005084:	887b      	ldrh	r3, [r7, #2]
 8005086:	400b      	ands	r3, r1
 8005088:	431a      	orrs	r2, r3
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	619a      	str	r2, [r3, #24]
}
 800508e:	bf00      	nop
 8005090:	3714      	adds	r7, #20
 8005092:	46bd      	mov	sp, r7
 8005094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005098:	4770      	bx	lr

0800509a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800509a:	b580      	push	{r7, lr}
 800509c:	b086      	sub	sp, #24
 800509e:	af02      	add	r7, sp, #8
 80050a0:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d101      	bne.n	80050ac <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80050a8:	2301      	movs	r3, #1
 80050aa:	e059      	b.n	8005160 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	f893 33d5 	ldrb.w	r3, [r3, #981]	; 0x3d5
 80050b8:	b2db      	uxtb	r3, r3
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d106      	bne.n	80050cc <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2200      	movs	r2, #0
 80050c2:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80050c6:	6878      	ldr	r0, [r7, #4]
 80050c8:	f00a f820 	bl	800f10c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2203      	movs	r2, #3
 80050d0:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80050da:	d102      	bne.n	80050e2 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2200      	movs	r2, #0
 80050e0:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4618      	mov	r0, r3
 80050e8:	f006 fe3f 	bl	800bd6a <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6818      	ldr	r0, [r3, #0]
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	7c1a      	ldrb	r2, [r3, #16]
 80050f4:	f88d 2000 	strb.w	r2, [sp]
 80050f8:	3304      	adds	r3, #4
 80050fa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80050fc:	f006 fdc0 	bl	800bc80 <USB_CoreInit>
 8005100:	4603      	mov	r3, r0
 8005102:	2b00      	cmp	r3, #0
 8005104:	d005      	beq.n	8005112 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2202      	movs	r2, #2
 800510a:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 800510e:	2301      	movs	r3, #1
 8005110:	e026      	b.n	8005160 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	2101      	movs	r1, #1
 8005118:	4618      	mov	r0, r3
 800511a:	f006 fe37 	bl	800bd8c <USB_SetCurrentMode>
 800511e:	4603      	mov	r3, r0
 8005120:	2b00      	cmp	r3, #0
 8005122:	d005      	beq.n	8005130 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2202      	movs	r2, #2
 8005128:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 800512c:	2301      	movs	r3, #1
 800512e:	e017      	b.n	8005160 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6818      	ldr	r0, [r3, #0]
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	7c1a      	ldrb	r2, [r3, #16]
 8005138:	f88d 2000 	strb.w	r2, [sp]
 800513c:	3304      	adds	r3, #4
 800513e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005140:	f006 ffda 	bl	800c0f8 <USB_HostInit>
 8005144:	4603      	mov	r3, r0
 8005146:	2b00      	cmp	r3, #0
 8005148:	d005      	beq.n	8005156 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2202      	movs	r2, #2
 800514e:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 8005152:	2301      	movs	r3, #1
 8005154:	e004      	b.n	8005160 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2201      	movs	r2, #1
 800515a:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5

  return HAL_OK;
 800515e:	2300      	movs	r3, #0
}
 8005160:	4618      	mov	r0, r3
 8005162:	3710      	adds	r7, #16
 8005164:	46bd      	mov	sp, r7
 8005166:	bd80      	pop	{r7, pc}

08005168 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8005168:	b590      	push	{r4, r7, lr}
 800516a:	b08b      	sub	sp, #44	; 0x2c
 800516c:	af04      	add	r7, sp, #16
 800516e:	6078      	str	r0, [r7, #4]
 8005170:	4608      	mov	r0, r1
 8005172:	4611      	mov	r1, r2
 8005174:	461a      	mov	r2, r3
 8005176:	4603      	mov	r3, r0
 8005178:	70fb      	strb	r3, [r7, #3]
 800517a:	460b      	mov	r3, r1
 800517c:	70bb      	strb	r3, [r7, #2]
 800517e:	4613      	mov	r3, r2
 8005180:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8005182:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005184:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 800518c:	2b01      	cmp	r3, #1
 800518e:	d101      	bne.n	8005194 <HAL_HCD_HC_Init+0x2c>
 8005190:	2302      	movs	r3, #2
 8005192:	e09d      	b.n	80052d0 <HAL_HCD_HC_Init+0x168>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2201      	movs	r2, #1
 8005198:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 800519c:	78fa      	ldrb	r2, [r7, #3]
 800519e:	6879      	ldr	r1, [r7, #4]
 80051a0:	4613      	mov	r3, r2
 80051a2:	011b      	lsls	r3, r3, #4
 80051a4:	1a9b      	subs	r3, r3, r2
 80051a6:	009b      	lsls	r3, r3, #2
 80051a8:	440b      	add	r3, r1
 80051aa:	3319      	adds	r3, #25
 80051ac:	2200      	movs	r2, #0
 80051ae:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80051b0:	78fa      	ldrb	r2, [r7, #3]
 80051b2:	6879      	ldr	r1, [r7, #4]
 80051b4:	4613      	mov	r3, r2
 80051b6:	011b      	lsls	r3, r3, #4
 80051b8:	1a9b      	subs	r3, r3, r2
 80051ba:	009b      	lsls	r3, r3, #2
 80051bc:	440b      	add	r3, r1
 80051be:	3314      	adds	r3, #20
 80051c0:	787a      	ldrb	r2, [r7, #1]
 80051c2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80051c4:	78fa      	ldrb	r2, [r7, #3]
 80051c6:	6879      	ldr	r1, [r7, #4]
 80051c8:	4613      	mov	r3, r2
 80051ca:	011b      	lsls	r3, r3, #4
 80051cc:	1a9b      	subs	r3, r3, r2
 80051ce:	009b      	lsls	r3, r3, #2
 80051d0:	440b      	add	r3, r1
 80051d2:	3315      	adds	r3, #21
 80051d4:	78fa      	ldrb	r2, [r7, #3]
 80051d6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80051d8:	78fa      	ldrb	r2, [r7, #3]
 80051da:	6879      	ldr	r1, [r7, #4]
 80051dc:	4613      	mov	r3, r2
 80051de:	011b      	lsls	r3, r3, #4
 80051e0:	1a9b      	subs	r3, r3, r2
 80051e2:	009b      	lsls	r3, r3, #2
 80051e4:	440b      	add	r3, r1
 80051e6:	3326      	adds	r3, #38	; 0x26
 80051e8:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80051ec:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80051ee:	78fa      	ldrb	r2, [r7, #3]
 80051f0:	78bb      	ldrb	r3, [r7, #2]
 80051f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80051f6:	b2d8      	uxtb	r0, r3
 80051f8:	6879      	ldr	r1, [r7, #4]
 80051fa:	4613      	mov	r3, r2
 80051fc:	011b      	lsls	r3, r3, #4
 80051fe:	1a9b      	subs	r3, r3, r2
 8005200:	009b      	lsls	r3, r3, #2
 8005202:	440b      	add	r3, r1
 8005204:	3316      	adds	r3, #22
 8005206:	4602      	mov	r2, r0
 8005208:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 800520a:	78fb      	ldrb	r3, [r7, #3]
 800520c:	4619      	mov	r1, r3
 800520e:	6878      	ldr	r0, [r7, #4]
 8005210:	f000 fbc8 	bl	80059a4 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8005214:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005218:	2b00      	cmp	r3, #0
 800521a:	da0a      	bge.n	8005232 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800521c:	78fa      	ldrb	r2, [r7, #3]
 800521e:	6879      	ldr	r1, [r7, #4]
 8005220:	4613      	mov	r3, r2
 8005222:	011b      	lsls	r3, r3, #4
 8005224:	1a9b      	subs	r3, r3, r2
 8005226:	009b      	lsls	r3, r3, #2
 8005228:	440b      	add	r3, r1
 800522a:	3317      	adds	r3, #23
 800522c:	2201      	movs	r2, #1
 800522e:	701a      	strb	r2, [r3, #0]
 8005230:	e009      	b.n	8005246 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8005232:	78fa      	ldrb	r2, [r7, #3]
 8005234:	6879      	ldr	r1, [r7, #4]
 8005236:	4613      	mov	r3, r2
 8005238:	011b      	lsls	r3, r3, #4
 800523a:	1a9b      	subs	r3, r3, r2
 800523c:	009b      	lsls	r3, r3, #2
 800523e:	440b      	add	r3, r1
 8005240:	3317      	adds	r3, #23
 8005242:	2200      	movs	r2, #0
 8005244:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4618      	mov	r0, r3
 800524c:	f007 f8ac 	bl	800c3a8 <USB_GetHostSpeed>
 8005250:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8005252:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005256:	2b01      	cmp	r3, #1
 8005258:	d10b      	bne.n	8005272 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 800525a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800525e:	2b01      	cmp	r3, #1
 8005260:	d107      	bne.n	8005272 <HAL_HCD_HC_Init+0x10a>
 8005262:	693b      	ldr	r3, [r7, #16]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d104      	bne.n	8005272 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8005268:	697b      	ldr	r3, [r7, #20]
 800526a:	2bbc      	cmp	r3, #188	; 0xbc
 800526c:	d901      	bls.n	8005272 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 800526e:	23bc      	movs	r3, #188	; 0xbc
 8005270:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8005272:	78fa      	ldrb	r2, [r7, #3]
 8005274:	6879      	ldr	r1, [r7, #4]
 8005276:	4613      	mov	r3, r2
 8005278:	011b      	lsls	r3, r3, #4
 800527a:	1a9b      	subs	r3, r3, r2
 800527c:	009b      	lsls	r3, r3, #2
 800527e:	440b      	add	r3, r1
 8005280:	3318      	adds	r3, #24
 8005282:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8005286:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8005288:	78fa      	ldrb	r2, [r7, #3]
 800528a:	697b      	ldr	r3, [r7, #20]
 800528c:	b298      	uxth	r0, r3
 800528e:	6879      	ldr	r1, [r7, #4]
 8005290:	4613      	mov	r3, r2
 8005292:	011b      	lsls	r3, r3, #4
 8005294:	1a9b      	subs	r3, r3, r2
 8005296:	009b      	lsls	r3, r3, #2
 8005298:	440b      	add	r3, r1
 800529a:	3328      	adds	r3, #40	; 0x28
 800529c:	4602      	mov	r2, r0
 800529e:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6818      	ldr	r0, [r3, #0]
 80052a4:	697b      	ldr	r3, [r7, #20]
 80052a6:	b29b      	uxth	r3, r3
 80052a8:	787c      	ldrb	r4, [r7, #1]
 80052aa:	78ba      	ldrb	r2, [r7, #2]
 80052ac:	78f9      	ldrb	r1, [r7, #3]
 80052ae:	9302      	str	r3, [sp, #8]
 80052b0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80052b4:	9301      	str	r3, [sp, #4]
 80052b6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80052ba:	9300      	str	r3, [sp, #0]
 80052bc:	4623      	mov	r3, r4
 80052be:	f007 f89b 	bl	800c3f8 <USB_HC_Init>
 80052c2:	4603      	mov	r3, r0
 80052c4:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2200      	movs	r2, #0
 80052ca:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return status;
 80052ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80052d0:	4618      	mov	r0, r3
 80052d2:	371c      	adds	r7, #28
 80052d4:	46bd      	mov	sp, r7
 80052d6:	bd90      	pop	{r4, r7, pc}

080052d8 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b084      	sub	sp, #16
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
 80052e0:	460b      	mov	r3, r1
 80052e2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80052e4:	2300      	movs	r3, #0
 80052e6:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 80052ee:	2b01      	cmp	r3, #1
 80052f0:	d101      	bne.n	80052f6 <HAL_HCD_HC_Halt+0x1e>
 80052f2:	2302      	movs	r3, #2
 80052f4:	e00f      	b.n	8005316 <HAL_HCD_HC_Halt+0x3e>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2201      	movs	r2, #1
 80052fa:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	78fa      	ldrb	r2, [r7, #3]
 8005304:	4611      	mov	r1, r2
 8005306:	4618      	mov	r0, r3
 8005308:	f007 fc2d 	bl	800cb66 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2200      	movs	r2, #0
 8005310:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return status;
 8005314:	7bfb      	ldrb	r3, [r7, #15]
}
 8005316:	4618      	mov	r0, r3
 8005318:	3710      	adds	r7, #16
 800531a:	46bd      	mov	sp, r7
 800531c:	bd80      	pop	{r7, pc}
	...

08005320 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b082      	sub	sp, #8
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
 8005328:	4608      	mov	r0, r1
 800532a:	4611      	mov	r1, r2
 800532c:	461a      	mov	r2, r3
 800532e:	4603      	mov	r3, r0
 8005330:	70fb      	strb	r3, [r7, #3]
 8005332:	460b      	mov	r3, r1
 8005334:	70bb      	strb	r3, [r7, #2]
 8005336:	4613      	mov	r3, r2
 8005338:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800533a:	78fa      	ldrb	r2, [r7, #3]
 800533c:	6879      	ldr	r1, [r7, #4]
 800533e:	4613      	mov	r3, r2
 8005340:	011b      	lsls	r3, r3, #4
 8005342:	1a9b      	subs	r3, r3, r2
 8005344:	009b      	lsls	r3, r3, #2
 8005346:	440b      	add	r3, r1
 8005348:	3317      	adds	r3, #23
 800534a:	78ba      	ldrb	r2, [r7, #2]
 800534c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800534e:	78fa      	ldrb	r2, [r7, #3]
 8005350:	6879      	ldr	r1, [r7, #4]
 8005352:	4613      	mov	r3, r2
 8005354:	011b      	lsls	r3, r3, #4
 8005356:	1a9b      	subs	r3, r3, r2
 8005358:	009b      	lsls	r3, r3, #2
 800535a:	440b      	add	r3, r1
 800535c:	3326      	adds	r3, #38	; 0x26
 800535e:	787a      	ldrb	r2, [r7, #1]
 8005360:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8005362:	7c3b      	ldrb	r3, [r7, #16]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d114      	bne.n	8005392 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8005368:	78fa      	ldrb	r2, [r7, #3]
 800536a:	6879      	ldr	r1, [r7, #4]
 800536c:	4613      	mov	r3, r2
 800536e:	011b      	lsls	r3, r3, #4
 8005370:	1a9b      	subs	r3, r3, r2
 8005372:	009b      	lsls	r3, r3, #2
 8005374:	440b      	add	r3, r1
 8005376:	332a      	adds	r3, #42	; 0x2a
 8005378:	2203      	movs	r2, #3
 800537a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800537c:	78fa      	ldrb	r2, [r7, #3]
 800537e:	6879      	ldr	r1, [r7, #4]
 8005380:	4613      	mov	r3, r2
 8005382:	011b      	lsls	r3, r3, #4
 8005384:	1a9b      	subs	r3, r3, r2
 8005386:	009b      	lsls	r3, r3, #2
 8005388:	440b      	add	r3, r1
 800538a:	3319      	adds	r3, #25
 800538c:	7f3a      	ldrb	r2, [r7, #28]
 800538e:	701a      	strb	r2, [r3, #0]
 8005390:	e009      	b.n	80053a6 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005392:	78fa      	ldrb	r2, [r7, #3]
 8005394:	6879      	ldr	r1, [r7, #4]
 8005396:	4613      	mov	r3, r2
 8005398:	011b      	lsls	r3, r3, #4
 800539a:	1a9b      	subs	r3, r3, r2
 800539c:	009b      	lsls	r3, r3, #2
 800539e:	440b      	add	r3, r1
 80053a0:	332a      	adds	r3, #42	; 0x2a
 80053a2:	2202      	movs	r2, #2
 80053a4:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80053a6:	787b      	ldrb	r3, [r7, #1]
 80053a8:	2b03      	cmp	r3, #3
 80053aa:	f200 8102 	bhi.w	80055b2 <HAL_HCD_HC_SubmitRequest+0x292>
 80053ae:	a201      	add	r2, pc, #4	; (adr r2, 80053b4 <HAL_HCD_HC_SubmitRequest+0x94>)
 80053b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053b4:	080053c5 	.word	0x080053c5
 80053b8:	0800559d 	.word	0x0800559d
 80053bc:	08005489 	.word	0x08005489
 80053c0:	08005513 	.word	0x08005513
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 80053c4:	7c3b      	ldrb	r3, [r7, #16]
 80053c6:	2b01      	cmp	r3, #1
 80053c8:	f040 80f5 	bne.w	80055b6 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 80053cc:	78bb      	ldrb	r3, [r7, #2]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d12d      	bne.n	800542e <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 80053d2:	8b3b      	ldrh	r3, [r7, #24]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d109      	bne.n	80053ec <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 80053d8:	78fa      	ldrb	r2, [r7, #3]
 80053da:	6879      	ldr	r1, [r7, #4]
 80053dc:	4613      	mov	r3, r2
 80053de:	011b      	lsls	r3, r3, #4
 80053e0:	1a9b      	subs	r3, r3, r2
 80053e2:	009b      	lsls	r3, r3, #2
 80053e4:	440b      	add	r3, r1
 80053e6:	333d      	adds	r3, #61	; 0x3d
 80053e8:	2201      	movs	r2, #1
 80053ea:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 80053ec:	78fa      	ldrb	r2, [r7, #3]
 80053ee:	6879      	ldr	r1, [r7, #4]
 80053f0:	4613      	mov	r3, r2
 80053f2:	011b      	lsls	r3, r3, #4
 80053f4:	1a9b      	subs	r3, r3, r2
 80053f6:	009b      	lsls	r3, r3, #2
 80053f8:	440b      	add	r3, r1
 80053fa:	333d      	adds	r3, #61	; 0x3d
 80053fc:	781b      	ldrb	r3, [r3, #0]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d10a      	bne.n	8005418 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005402:	78fa      	ldrb	r2, [r7, #3]
 8005404:	6879      	ldr	r1, [r7, #4]
 8005406:	4613      	mov	r3, r2
 8005408:	011b      	lsls	r3, r3, #4
 800540a:	1a9b      	subs	r3, r3, r2
 800540c:	009b      	lsls	r3, r3, #2
 800540e:	440b      	add	r3, r1
 8005410:	332a      	adds	r3, #42	; 0x2a
 8005412:	2200      	movs	r2, #0
 8005414:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8005416:	e0ce      	b.n	80055b6 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005418:	78fa      	ldrb	r2, [r7, #3]
 800541a:	6879      	ldr	r1, [r7, #4]
 800541c:	4613      	mov	r3, r2
 800541e:	011b      	lsls	r3, r3, #4
 8005420:	1a9b      	subs	r3, r3, r2
 8005422:	009b      	lsls	r3, r3, #2
 8005424:	440b      	add	r3, r1
 8005426:	332a      	adds	r3, #42	; 0x2a
 8005428:	2202      	movs	r2, #2
 800542a:	701a      	strb	r2, [r3, #0]
      break;
 800542c:	e0c3      	b.n	80055b6 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 800542e:	78fa      	ldrb	r2, [r7, #3]
 8005430:	6879      	ldr	r1, [r7, #4]
 8005432:	4613      	mov	r3, r2
 8005434:	011b      	lsls	r3, r3, #4
 8005436:	1a9b      	subs	r3, r3, r2
 8005438:	009b      	lsls	r3, r3, #2
 800543a:	440b      	add	r3, r1
 800543c:	331a      	adds	r3, #26
 800543e:	781b      	ldrb	r3, [r3, #0]
 8005440:	2b01      	cmp	r3, #1
 8005442:	f040 80b8 	bne.w	80055b6 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8005446:	78fa      	ldrb	r2, [r7, #3]
 8005448:	6879      	ldr	r1, [r7, #4]
 800544a:	4613      	mov	r3, r2
 800544c:	011b      	lsls	r3, r3, #4
 800544e:	1a9b      	subs	r3, r3, r2
 8005450:	009b      	lsls	r3, r3, #2
 8005452:	440b      	add	r3, r1
 8005454:	333c      	adds	r3, #60	; 0x3c
 8005456:	781b      	ldrb	r3, [r3, #0]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d10a      	bne.n	8005472 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800545c:	78fa      	ldrb	r2, [r7, #3]
 800545e:	6879      	ldr	r1, [r7, #4]
 8005460:	4613      	mov	r3, r2
 8005462:	011b      	lsls	r3, r3, #4
 8005464:	1a9b      	subs	r3, r3, r2
 8005466:	009b      	lsls	r3, r3, #2
 8005468:	440b      	add	r3, r1
 800546a:	332a      	adds	r3, #42	; 0x2a
 800546c:	2200      	movs	r2, #0
 800546e:	701a      	strb	r2, [r3, #0]
      break;
 8005470:	e0a1      	b.n	80055b6 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005472:	78fa      	ldrb	r2, [r7, #3]
 8005474:	6879      	ldr	r1, [r7, #4]
 8005476:	4613      	mov	r3, r2
 8005478:	011b      	lsls	r3, r3, #4
 800547a:	1a9b      	subs	r3, r3, r2
 800547c:	009b      	lsls	r3, r3, #2
 800547e:	440b      	add	r3, r1
 8005480:	332a      	adds	r3, #42	; 0x2a
 8005482:	2202      	movs	r2, #2
 8005484:	701a      	strb	r2, [r3, #0]
      break;
 8005486:	e096      	b.n	80055b6 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8005488:	78bb      	ldrb	r3, [r7, #2]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d120      	bne.n	80054d0 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800548e:	78fa      	ldrb	r2, [r7, #3]
 8005490:	6879      	ldr	r1, [r7, #4]
 8005492:	4613      	mov	r3, r2
 8005494:	011b      	lsls	r3, r3, #4
 8005496:	1a9b      	subs	r3, r3, r2
 8005498:	009b      	lsls	r3, r3, #2
 800549a:	440b      	add	r3, r1
 800549c:	333d      	adds	r3, #61	; 0x3d
 800549e:	781b      	ldrb	r3, [r3, #0]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d10a      	bne.n	80054ba <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80054a4:	78fa      	ldrb	r2, [r7, #3]
 80054a6:	6879      	ldr	r1, [r7, #4]
 80054a8:	4613      	mov	r3, r2
 80054aa:	011b      	lsls	r3, r3, #4
 80054ac:	1a9b      	subs	r3, r3, r2
 80054ae:	009b      	lsls	r3, r3, #2
 80054b0:	440b      	add	r3, r1
 80054b2:	332a      	adds	r3, #42	; 0x2a
 80054b4:	2200      	movs	r2, #0
 80054b6:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80054b8:	e07e      	b.n	80055b8 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80054ba:	78fa      	ldrb	r2, [r7, #3]
 80054bc:	6879      	ldr	r1, [r7, #4]
 80054be:	4613      	mov	r3, r2
 80054c0:	011b      	lsls	r3, r3, #4
 80054c2:	1a9b      	subs	r3, r3, r2
 80054c4:	009b      	lsls	r3, r3, #2
 80054c6:	440b      	add	r3, r1
 80054c8:	332a      	adds	r3, #42	; 0x2a
 80054ca:	2202      	movs	r2, #2
 80054cc:	701a      	strb	r2, [r3, #0]
      break;
 80054ce:	e073      	b.n	80055b8 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80054d0:	78fa      	ldrb	r2, [r7, #3]
 80054d2:	6879      	ldr	r1, [r7, #4]
 80054d4:	4613      	mov	r3, r2
 80054d6:	011b      	lsls	r3, r3, #4
 80054d8:	1a9b      	subs	r3, r3, r2
 80054da:	009b      	lsls	r3, r3, #2
 80054dc:	440b      	add	r3, r1
 80054de:	333c      	adds	r3, #60	; 0x3c
 80054e0:	781b      	ldrb	r3, [r3, #0]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d10a      	bne.n	80054fc <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80054e6:	78fa      	ldrb	r2, [r7, #3]
 80054e8:	6879      	ldr	r1, [r7, #4]
 80054ea:	4613      	mov	r3, r2
 80054ec:	011b      	lsls	r3, r3, #4
 80054ee:	1a9b      	subs	r3, r3, r2
 80054f0:	009b      	lsls	r3, r3, #2
 80054f2:	440b      	add	r3, r1
 80054f4:	332a      	adds	r3, #42	; 0x2a
 80054f6:	2200      	movs	r2, #0
 80054f8:	701a      	strb	r2, [r3, #0]
      break;
 80054fa:	e05d      	b.n	80055b8 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80054fc:	78fa      	ldrb	r2, [r7, #3]
 80054fe:	6879      	ldr	r1, [r7, #4]
 8005500:	4613      	mov	r3, r2
 8005502:	011b      	lsls	r3, r3, #4
 8005504:	1a9b      	subs	r3, r3, r2
 8005506:	009b      	lsls	r3, r3, #2
 8005508:	440b      	add	r3, r1
 800550a:	332a      	adds	r3, #42	; 0x2a
 800550c:	2202      	movs	r2, #2
 800550e:	701a      	strb	r2, [r3, #0]
      break;
 8005510:	e052      	b.n	80055b8 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8005512:	78bb      	ldrb	r3, [r7, #2]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d120      	bne.n	800555a <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8005518:	78fa      	ldrb	r2, [r7, #3]
 800551a:	6879      	ldr	r1, [r7, #4]
 800551c:	4613      	mov	r3, r2
 800551e:	011b      	lsls	r3, r3, #4
 8005520:	1a9b      	subs	r3, r3, r2
 8005522:	009b      	lsls	r3, r3, #2
 8005524:	440b      	add	r3, r1
 8005526:	333d      	adds	r3, #61	; 0x3d
 8005528:	781b      	ldrb	r3, [r3, #0]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d10a      	bne.n	8005544 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800552e:	78fa      	ldrb	r2, [r7, #3]
 8005530:	6879      	ldr	r1, [r7, #4]
 8005532:	4613      	mov	r3, r2
 8005534:	011b      	lsls	r3, r3, #4
 8005536:	1a9b      	subs	r3, r3, r2
 8005538:	009b      	lsls	r3, r3, #2
 800553a:	440b      	add	r3, r1
 800553c:	332a      	adds	r3, #42	; 0x2a
 800553e:	2200      	movs	r2, #0
 8005540:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8005542:	e039      	b.n	80055b8 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005544:	78fa      	ldrb	r2, [r7, #3]
 8005546:	6879      	ldr	r1, [r7, #4]
 8005548:	4613      	mov	r3, r2
 800554a:	011b      	lsls	r3, r3, #4
 800554c:	1a9b      	subs	r3, r3, r2
 800554e:	009b      	lsls	r3, r3, #2
 8005550:	440b      	add	r3, r1
 8005552:	332a      	adds	r3, #42	; 0x2a
 8005554:	2202      	movs	r2, #2
 8005556:	701a      	strb	r2, [r3, #0]
      break;
 8005558:	e02e      	b.n	80055b8 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800555a:	78fa      	ldrb	r2, [r7, #3]
 800555c:	6879      	ldr	r1, [r7, #4]
 800555e:	4613      	mov	r3, r2
 8005560:	011b      	lsls	r3, r3, #4
 8005562:	1a9b      	subs	r3, r3, r2
 8005564:	009b      	lsls	r3, r3, #2
 8005566:	440b      	add	r3, r1
 8005568:	333c      	adds	r3, #60	; 0x3c
 800556a:	781b      	ldrb	r3, [r3, #0]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d10a      	bne.n	8005586 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005570:	78fa      	ldrb	r2, [r7, #3]
 8005572:	6879      	ldr	r1, [r7, #4]
 8005574:	4613      	mov	r3, r2
 8005576:	011b      	lsls	r3, r3, #4
 8005578:	1a9b      	subs	r3, r3, r2
 800557a:	009b      	lsls	r3, r3, #2
 800557c:	440b      	add	r3, r1
 800557e:	332a      	adds	r3, #42	; 0x2a
 8005580:	2200      	movs	r2, #0
 8005582:	701a      	strb	r2, [r3, #0]
      break;
 8005584:	e018      	b.n	80055b8 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005586:	78fa      	ldrb	r2, [r7, #3]
 8005588:	6879      	ldr	r1, [r7, #4]
 800558a:	4613      	mov	r3, r2
 800558c:	011b      	lsls	r3, r3, #4
 800558e:	1a9b      	subs	r3, r3, r2
 8005590:	009b      	lsls	r3, r3, #2
 8005592:	440b      	add	r3, r1
 8005594:	332a      	adds	r3, #42	; 0x2a
 8005596:	2202      	movs	r2, #2
 8005598:	701a      	strb	r2, [r3, #0]
      break;
 800559a:	e00d      	b.n	80055b8 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800559c:	78fa      	ldrb	r2, [r7, #3]
 800559e:	6879      	ldr	r1, [r7, #4]
 80055a0:	4613      	mov	r3, r2
 80055a2:	011b      	lsls	r3, r3, #4
 80055a4:	1a9b      	subs	r3, r3, r2
 80055a6:	009b      	lsls	r3, r3, #2
 80055a8:	440b      	add	r3, r1
 80055aa:	332a      	adds	r3, #42	; 0x2a
 80055ac:	2200      	movs	r2, #0
 80055ae:	701a      	strb	r2, [r3, #0]
      break;
 80055b0:	e002      	b.n	80055b8 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 80055b2:	bf00      	nop
 80055b4:	e000      	b.n	80055b8 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 80055b6:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80055b8:	78fa      	ldrb	r2, [r7, #3]
 80055ba:	6879      	ldr	r1, [r7, #4]
 80055bc:	4613      	mov	r3, r2
 80055be:	011b      	lsls	r3, r3, #4
 80055c0:	1a9b      	subs	r3, r3, r2
 80055c2:	009b      	lsls	r3, r3, #2
 80055c4:	440b      	add	r3, r1
 80055c6:	332c      	adds	r3, #44	; 0x2c
 80055c8:	697a      	ldr	r2, [r7, #20]
 80055ca:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80055cc:	78fa      	ldrb	r2, [r7, #3]
 80055ce:	8b39      	ldrh	r1, [r7, #24]
 80055d0:	6878      	ldr	r0, [r7, #4]
 80055d2:	4613      	mov	r3, r2
 80055d4:	011b      	lsls	r3, r3, #4
 80055d6:	1a9b      	subs	r3, r3, r2
 80055d8:	009b      	lsls	r3, r3, #2
 80055da:	4403      	add	r3, r0
 80055dc:	3334      	adds	r3, #52	; 0x34
 80055de:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80055e0:	78fa      	ldrb	r2, [r7, #3]
 80055e2:	6879      	ldr	r1, [r7, #4]
 80055e4:	4613      	mov	r3, r2
 80055e6:	011b      	lsls	r3, r3, #4
 80055e8:	1a9b      	subs	r3, r3, r2
 80055ea:	009b      	lsls	r3, r3, #2
 80055ec:	440b      	add	r3, r1
 80055ee:	334c      	adds	r3, #76	; 0x4c
 80055f0:	2200      	movs	r2, #0
 80055f2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80055f4:	78fa      	ldrb	r2, [r7, #3]
 80055f6:	6879      	ldr	r1, [r7, #4]
 80055f8:	4613      	mov	r3, r2
 80055fa:	011b      	lsls	r3, r3, #4
 80055fc:	1a9b      	subs	r3, r3, r2
 80055fe:	009b      	lsls	r3, r3, #2
 8005600:	440b      	add	r3, r1
 8005602:	3338      	adds	r3, #56	; 0x38
 8005604:	2200      	movs	r2, #0
 8005606:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8005608:	78fa      	ldrb	r2, [r7, #3]
 800560a:	6879      	ldr	r1, [r7, #4]
 800560c:	4613      	mov	r3, r2
 800560e:	011b      	lsls	r3, r3, #4
 8005610:	1a9b      	subs	r3, r3, r2
 8005612:	009b      	lsls	r3, r3, #2
 8005614:	440b      	add	r3, r1
 8005616:	3315      	adds	r3, #21
 8005618:	78fa      	ldrb	r2, [r7, #3]
 800561a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 800561c:	78fa      	ldrb	r2, [r7, #3]
 800561e:	6879      	ldr	r1, [r7, #4]
 8005620:	4613      	mov	r3, r2
 8005622:	011b      	lsls	r3, r3, #4
 8005624:	1a9b      	subs	r3, r3, r2
 8005626:	009b      	lsls	r3, r3, #2
 8005628:	440b      	add	r3, r1
 800562a:	334d      	adds	r3, #77	; 0x4d
 800562c:	2200      	movs	r2, #0
 800562e:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6818      	ldr	r0, [r3, #0]
 8005634:	78fa      	ldrb	r2, [r7, #3]
 8005636:	4613      	mov	r3, r2
 8005638:	011b      	lsls	r3, r3, #4
 800563a:	1a9b      	subs	r3, r3, r2
 800563c:	009b      	lsls	r3, r3, #2
 800563e:	3310      	adds	r3, #16
 8005640:	687a      	ldr	r2, [r7, #4]
 8005642:	4413      	add	r3, r2
 8005644:	1d19      	adds	r1, r3, #4
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	799b      	ldrb	r3, [r3, #6]
 800564a:	461a      	mov	r2, r3
 800564c:	f007 f800 	bl	800c650 <USB_HC_StartXfer>
 8005650:	4603      	mov	r3, r0
}
 8005652:	4618      	mov	r0, r3
 8005654:	3708      	adds	r7, #8
 8005656:	46bd      	mov	sp, r7
 8005658:	bd80      	pop	{r7, pc}
 800565a:	bf00      	nop

0800565c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b086      	sub	sp, #24
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800566a:	693b      	ldr	r3, [r7, #16]
 800566c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	4618      	mov	r0, r3
 8005674:	f006 fd00 	bl	800c078 <USB_GetMode>
 8005678:	4603      	mov	r3, r0
 800567a:	2b01      	cmp	r3, #1
 800567c:	f040 80fb 	bne.w	8005876 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4618      	mov	r0, r3
 8005686:	f006 fcc3 	bl	800c010 <USB_ReadInterrupts>
 800568a:	4603      	mov	r3, r0
 800568c:	2b00      	cmp	r3, #0
 800568e:	f000 80f1 	beq.w	8005874 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4618      	mov	r0, r3
 8005698:	f006 fcba 	bl	800c010 <USB_ReadInterrupts>
 800569c:	4603      	mov	r3, r0
 800569e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80056a2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80056a6:	d104      	bne.n	80056b2 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80056b0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	4618      	mov	r0, r3
 80056b8:	f006 fcaa 	bl	800c010 <USB_ReadInterrupts>
 80056bc:	4603      	mov	r3, r0
 80056be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80056c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80056c6:	d104      	bne.n	80056d2 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80056d0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4618      	mov	r0, r3
 80056d8:	f006 fc9a 	bl	800c010 <USB_ReadInterrupts>
 80056dc:	4603      	mov	r3, r0
 80056de:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80056e2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80056e6:	d104      	bne.n	80056f2 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80056f0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4618      	mov	r0, r3
 80056f8:	f006 fc8a 	bl	800c010 <USB_ReadInterrupts>
 80056fc:	4603      	mov	r3, r0
 80056fe:	f003 0302 	and.w	r3, r3, #2
 8005702:	2b02      	cmp	r3, #2
 8005704:	d103      	bne.n	800570e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	2202      	movs	r2, #2
 800570c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4618      	mov	r0, r3
 8005714:	f006 fc7c 	bl	800c010 <USB_ReadInterrupts>
 8005718:	4603      	mov	r3, r0
 800571a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800571e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005722:	d120      	bne.n	8005766 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800572c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f003 0301 	and.w	r3, r3, #1
 800573a:	2b00      	cmp	r3, #0
 800573c:	d113      	bne.n	8005766 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800573e:	2110      	movs	r1, #16
 8005740:	6938      	ldr	r0, [r7, #16]
 8005742:	f006 fb6f 	bl	800be24 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8005746:	6938      	ldr	r0, [r7, #16]
 8005748:	f006 fb9e 	bl	800be88 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	7a5b      	ldrb	r3, [r3, #9]
 8005750:	2b02      	cmp	r3, #2
 8005752:	d105      	bne.n	8005760 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	2101      	movs	r1, #1
 800575a:	4618      	mov	r0, r3
 800575c:	f006 fd84 	bl	800c268 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8005760:	6878      	ldr	r0, [r7, #4]
 8005762:	f009 fd59 	bl	800f218 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4618      	mov	r0, r3
 800576c:	f006 fc50 	bl	800c010 <USB_ReadInterrupts>
 8005770:	4603      	mov	r3, r0
 8005772:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005776:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800577a:	d102      	bne.n	8005782 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 800577c:	6878      	ldr	r0, [r7, #4]
 800577e:	f001 fd33 	bl	80071e8 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	4618      	mov	r0, r3
 8005788:	f006 fc42 	bl	800c010 <USB_ReadInterrupts>
 800578c:	4603      	mov	r3, r0
 800578e:	f003 0308 	and.w	r3, r3, #8
 8005792:	2b08      	cmp	r3, #8
 8005794:	d106      	bne.n	80057a4 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8005796:	6878      	ldr	r0, [r7, #4]
 8005798:	f009 fd22 	bl	800f1e0 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	2208      	movs	r2, #8
 80057a2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	4618      	mov	r0, r3
 80057aa:	f006 fc31 	bl	800c010 <USB_ReadInterrupts>
 80057ae:	4603      	mov	r3, r0
 80057b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057b4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80057b8:	d139      	bne.n	800582e <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4618      	mov	r0, r3
 80057c0:	f007 f9c0 	bl	800cb44 <USB_HC_ReadInterrupt>
 80057c4:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80057c6:	2300      	movs	r3, #0
 80057c8:	617b      	str	r3, [r7, #20]
 80057ca:	e025      	b.n	8005818 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80057cc:	697b      	ldr	r3, [r7, #20]
 80057ce:	f003 030f 	and.w	r3, r3, #15
 80057d2:	68ba      	ldr	r2, [r7, #8]
 80057d4:	fa22 f303 	lsr.w	r3, r2, r3
 80057d8:	f003 0301 	and.w	r3, r3, #1
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d018      	beq.n	8005812 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80057e0:	697b      	ldr	r3, [r7, #20]
 80057e2:	015a      	lsls	r2, r3, #5
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	4413      	add	r3, r2
 80057e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80057f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057f6:	d106      	bne.n	8005806 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80057f8:	697b      	ldr	r3, [r7, #20]
 80057fa:	b2db      	uxtb	r3, r3
 80057fc:	4619      	mov	r1, r3
 80057fe:	6878      	ldr	r0, [r7, #4]
 8005800:	f000 f905 	bl	8005a0e <HCD_HC_IN_IRQHandler>
 8005804:	e005      	b.n	8005812 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8005806:	697b      	ldr	r3, [r7, #20]
 8005808:	b2db      	uxtb	r3, r3
 800580a:	4619      	mov	r1, r3
 800580c:	6878      	ldr	r0, [r7, #4]
 800580e:	f000 ff67 	bl	80066e0 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8005812:	697b      	ldr	r3, [r7, #20]
 8005814:	3301      	adds	r3, #1
 8005816:	617b      	str	r3, [r7, #20]
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	795b      	ldrb	r3, [r3, #5]
 800581c:	461a      	mov	r2, r3
 800581e:	697b      	ldr	r3, [r7, #20]
 8005820:	4293      	cmp	r3, r2
 8005822:	d3d3      	bcc.n	80057cc <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800582c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	4618      	mov	r0, r3
 8005834:	f006 fbec 	bl	800c010 <USB_ReadInterrupts>
 8005838:	4603      	mov	r3, r0
 800583a:	f003 0310 	and.w	r3, r3, #16
 800583e:	2b10      	cmp	r3, #16
 8005840:	d101      	bne.n	8005846 <HAL_HCD_IRQHandler+0x1ea>
 8005842:	2301      	movs	r3, #1
 8005844:	e000      	b.n	8005848 <HAL_HCD_IRQHandler+0x1ec>
 8005846:	2300      	movs	r3, #0
 8005848:	2b00      	cmp	r3, #0
 800584a:	d014      	beq.n	8005876 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	699a      	ldr	r2, [r3, #24]
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f022 0210 	bic.w	r2, r2, #16
 800585a:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800585c:	6878      	ldr	r0, [r7, #4]
 800585e:	f001 fbe4 	bl	800702a <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	699a      	ldr	r2, [r3, #24]
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f042 0210 	orr.w	r2, r2, #16
 8005870:	619a      	str	r2, [r3, #24]
 8005872:	e000      	b.n	8005876 <HAL_HCD_IRQHandler+0x21a>
      return;
 8005874:	bf00      	nop
    }
  }
}
 8005876:	3718      	adds	r7, #24
 8005878:	46bd      	mov	sp, r7
 800587a:	bd80      	pop	{r7, pc}

0800587c <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b082      	sub	sp, #8
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 800588a:	2b01      	cmp	r3, #1
 800588c:	d101      	bne.n	8005892 <HAL_HCD_Start+0x16>
 800588e:	2302      	movs	r3, #2
 8005890:	e013      	b.n	80058ba <HAL_HCD_Start+0x3e>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2201      	movs	r2, #1
 8005896:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	2101      	movs	r1, #1
 80058a0:	4618      	mov	r0, r3
 80058a2:	f006 fd48 	bl	800c336 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4618      	mov	r0, r3
 80058ac:	f006 fa4c 	bl	800bd48 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2200      	movs	r2, #0
 80058b4:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return HAL_OK;
 80058b8:	2300      	movs	r3, #0
}
 80058ba:	4618      	mov	r0, r3
 80058bc:	3708      	adds	r7, #8
 80058be:	46bd      	mov	sp, r7
 80058c0:	bd80      	pop	{r7, pc}

080058c2 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80058c2:	b580      	push	{r7, lr}
 80058c4:	b082      	sub	sp, #8
 80058c6:	af00      	add	r7, sp, #0
 80058c8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 80058d0:	2b01      	cmp	r3, #1
 80058d2:	d101      	bne.n	80058d8 <HAL_HCD_Stop+0x16>
 80058d4:	2302      	movs	r3, #2
 80058d6:	e00d      	b.n	80058f4 <HAL_HCD_Stop+0x32>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2201      	movs	r2, #1
 80058dc:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4618      	mov	r0, r3
 80058e6:	f007 fa9b 	bl	800ce20 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2200      	movs	r2, #0
 80058ee:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return HAL_OK;
 80058f2:	2300      	movs	r3, #0
}
 80058f4:	4618      	mov	r0, r3
 80058f6:	3708      	adds	r7, #8
 80058f8:	46bd      	mov	sp, r7
 80058fa:	bd80      	pop	{r7, pc}

080058fc <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b082      	sub	sp, #8
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	4618      	mov	r0, r3
 800590a:	f006 fcea 	bl	800c2e2 <USB_ResetPort>
 800590e:	4603      	mov	r3, r0
}
 8005910:	4618      	mov	r0, r3
 8005912:	3708      	adds	r7, #8
 8005914:	46bd      	mov	sp, r7
 8005916:	bd80      	pop	{r7, pc}

08005918 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8005918:	b480      	push	{r7}
 800591a:	b083      	sub	sp, #12
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
 8005920:	460b      	mov	r3, r1
 8005922:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8005924:	78fa      	ldrb	r2, [r7, #3]
 8005926:	6879      	ldr	r1, [r7, #4]
 8005928:	4613      	mov	r3, r2
 800592a:	011b      	lsls	r3, r3, #4
 800592c:	1a9b      	subs	r3, r3, r2
 800592e:	009b      	lsls	r3, r3, #2
 8005930:	440b      	add	r3, r1
 8005932:	334c      	adds	r3, #76	; 0x4c
 8005934:	781b      	ldrb	r3, [r3, #0]
}
 8005936:	4618      	mov	r0, r3
 8005938:	370c      	adds	r7, #12
 800593a:	46bd      	mov	sp, r7
 800593c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005940:	4770      	bx	lr

08005942 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8005942:	b480      	push	{r7}
 8005944:	b083      	sub	sp, #12
 8005946:	af00      	add	r7, sp, #0
 8005948:	6078      	str	r0, [r7, #4]
 800594a:	460b      	mov	r3, r1
 800594c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800594e:	78fa      	ldrb	r2, [r7, #3]
 8005950:	6879      	ldr	r1, [r7, #4]
 8005952:	4613      	mov	r3, r2
 8005954:	011b      	lsls	r3, r3, #4
 8005956:	1a9b      	subs	r3, r3, r2
 8005958:	009b      	lsls	r3, r3, #2
 800595a:	440b      	add	r3, r1
 800595c:	3338      	adds	r3, #56	; 0x38
 800595e:	681b      	ldr	r3, [r3, #0]
}
 8005960:	4618      	mov	r0, r3
 8005962:	370c      	adds	r7, #12
 8005964:	46bd      	mov	sp, r7
 8005966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596a:	4770      	bx	lr

0800596c <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b082      	sub	sp, #8
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4618      	mov	r0, r3
 800597a:	f006 fd2c 	bl	800c3d6 <USB_GetCurrentFrame>
 800597e:	4603      	mov	r3, r0
}
 8005980:	4618      	mov	r0, r3
 8005982:	3708      	adds	r7, #8
 8005984:	46bd      	mov	sp, r7
 8005986:	bd80      	pop	{r7, pc}

08005988 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b082      	sub	sp, #8
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4618      	mov	r0, r3
 8005996:	f006 fd07 	bl	800c3a8 <USB_GetHostSpeed>
 800599a:	4603      	mov	r3, r0
}
 800599c:	4618      	mov	r0, r3
 800599e:	3708      	adds	r7, #8
 80059a0:	46bd      	mov	sp, r7
 80059a2:	bd80      	pop	{r7, pc}

080059a4 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80059a4:	b480      	push	{r7}
 80059a6:	b083      	sub	sp, #12
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
 80059ac:	460b      	mov	r3, r1
 80059ae:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 80059b0:	78fa      	ldrb	r2, [r7, #3]
 80059b2:	6879      	ldr	r1, [r7, #4]
 80059b4:	4613      	mov	r3, r2
 80059b6:	011b      	lsls	r3, r3, #4
 80059b8:	1a9b      	subs	r3, r3, r2
 80059ba:	009b      	lsls	r3, r3, #2
 80059bc:	440b      	add	r3, r1
 80059be:	331a      	adds	r3, #26
 80059c0:	2200      	movs	r2, #0
 80059c2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 80059c4:	78fa      	ldrb	r2, [r7, #3]
 80059c6:	6879      	ldr	r1, [r7, #4]
 80059c8:	4613      	mov	r3, r2
 80059ca:	011b      	lsls	r3, r3, #4
 80059cc:	1a9b      	subs	r3, r3, r2
 80059ce:	009b      	lsls	r3, r3, #2
 80059d0:	440b      	add	r3, r1
 80059d2:	331b      	adds	r3, #27
 80059d4:	2200      	movs	r2, #0
 80059d6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 80059d8:	78fa      	ldrb	r2, [r7, #3]
 80059da:	6879      	ldr	r1, [r7, #4]
 80059dc:	4613      	mov	r3, r2
 80059de:	011b      	lsls	r3, r3, #4
 80059e0:	1a9b      	subs	r3, r3, r2
 80059e2:	009b      	lsls	r3, r3, #2
 80059e4:	440b      	add	r3, r1
 80059e6:	3325      	adds	r3, #37	; 0x25
 80059e8:	2200      	movs	r2, #0
 80059ea:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 80059ec:	78fa      	ldrb	r2, [r7, #3]
 80059ee:	6879      	ldr	r1, [r7, #4]
 80059f0:	4613      	mov	r3, r2
 80059f2:	011b      	lsls	r3, r3, #4
 80059f4:	1a9b      	subs	r3, r3, r2
 80059f6:	009b      	lsls	r3, r3, #2
 80059f8:	440b      	add	r3, r1
 80059fa:	3324      	adds	r3, #36	; 0x24
 80059fc:	2200      	movs	r2, #0
 80059fe:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8005a00:	2300      	movs	r3, #0
}
 8005a02:	4618      	mov	r0, r3
 8005a04:	370c      	adds	r7, #12
 8005a06:	46bd      	mov	sp, r7
 8005a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0c:	4770      	bx	lr

08005a0e <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005a0e:	b580      	push	{r7, lr}
 8005a10:	b086      	sub	sp, #24
 8005a12:	af00      	add	r7, sp, #0
 8005a14:	6078      	str	r0, [r7, #4]
 8005a16:	460b      	mov	r3, r1
 8005a18:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a20:	697b      	ldr	r3, [r7, #20]
 8005a22:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	78fa      	ldrb	r2, [r7, #3]
 8005a2a:	4611      	mov	r1, r2
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	f006 fb02 	bl	800c036 <USB_ReadChInterrupts>
 8005a32:	4603      	mov	r3, r0
 8005a34:	f003 0304 	and.w	r3, r3, #4
 8005a38:	2b04      	cmp	r3, #4
 8005a3a:	d11a      	bne.n	8005a72 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8005a3c:	78fb      	ldrb	r3, [r7, #3]
 8005a3e:	015a      	lsls	r2, r3, #5
 8005a40:	693b      	ldr	r3, [r7, #16]
 8005a42:	4413      	add	r3, r2
 8005a44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a48:	461a      	mov	r2, r3
 8005a4a:	2304      	movs	r3, #4
 8005a4c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8005a4e:	78fa      	ldrb	r2, [r7, #3]
 8005a50:	6879      	ldr	r1, [r7, #4]
 8005a52:	4613      	mov	r3, r2
 8005a54:	011b      	lsls	r3, r3, #4
 8005a56:	1a9b      	subs	r3, r3, r2
 8005a58:	009b      	lsls	r3, r3, #2
 8005a5a:	440b      	add	r3, r1
 8005a5c:	334d      	adds	r3, #77	; 0x4d
 8005a5e:	2207      	movs	r2, #7
 8005a60:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	78fa      	ldrb	r2, [r7, #3]
 8005a68:	4611      	mov	r1, r2
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	f007 f87b 	bl	800cb66 <USB_HC_Halt>
 8005a70:	e09e      	b.n	8005bb0 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	78fa      	ldrb	r2, [r7, #3]
 8005a78:	4611      	mov	r1, r2
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	f006 fadb 	bl	800c036 <USB_ReadChInterrupts>
 8005a80:	4603      	mov	r3, r0
 8005a82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a8a:	d11b      	bne.n	8005ac4 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8005a8c:	78fb      	ldrb	r3, [r7, #3]
 8005a8e:	015a      	lsls	r2, r3, #5
 8005a90:	693b      	ldr	r3, [r7, #16]
 8005a92:	4413      	add	r3, r2
 8005a94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a98:	461a      	mov	r2, r3
 8005a9a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005a9e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8005aa0:	78fa      	ldrb	r2, [r7, #3]
 8005aa2:	6879      	ldr	r1, [r7, #4]
 8005aa4:	4613      	mov	r3, r2
 8005aa6:	011b      	lsls	r3, r3, #4
 8005aa8:	1a9b      	subs	r3, r3, r2
 8005aaa:	009b      	lsls	r3, r3, #2
 8005aac:	440b      	add	r3, r1
 8005aae:	334d      	adds	r3, #77	; 0x4d
 8005ab0:	2208      	movs	r2, #8
 8005ab2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	78fa      	ldrb	r2, [r7, #3]
 8005aba:	4611      	mov	r1, r2
 8005abc:	4618      	mov	r0, r3
 8005abe:	f007 f852 	bl	800cb66 <USB_HC_Halt>
 8005ac2:	e075      	b.n	8005bb0 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	78fa      	ldrb	r2, [r7, #3]
 8005aca:	4611      	mov	r1, r2
 8005acc:	4618      	mov	r0, r3
 8005ace:	f006 fab2 	bl	800c036 <USB_ReadChInterrupts>
 8005ad2:	4603      	mov	r3, r0
 8005ad4:	f003 0308 	and.w	r3, r3, #8
 8005ad8:	2b08      	cmp	r3, #8
 8005ada:	d11a      	bne.n	8005b12 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8005adc:	78fb      	ldrb	r3, [r7, #3]
 8005ade:	015a      	lsls	r2, r3, #5
 8005ae0:	693b      	ldr	r3, [r7, #16]
 8005ae2:	4413      	add	r3, r2
 8005ae4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ae8:	461a      	mov	r2, r3
 8005aea:	2308      	movs	r3, #8
 8005aec:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8005aee:	78fa      	ldrb	r2, [r7, #3]
 8005af0:	6879      	ldr	r1, [r7, #4]
 8005af2:	4613      	mov	r3, r2
 8005af4:	011b      	lsls	r3, r3, #4
 8005af6:	1a9b      	subs	r3, r3, r2
 8005af8:	009b      	lsls	r3, r3, #2
 8005afa:	440b      	add	r3, r1
 8005afc:	334d      	adds	r3, #77	; 0x4d
 8005afe:	2206      	movs	r2, #6
 8005b00:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	78fa      	ldrb	r2, [r7, #3]
 8005b08:	4611      	mov	r1, r2
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	f007 f82b 	bl	800cb66 <USB_HC_Halt>
 8005b10:	e04e      	b.n	8005bb0 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	78fa      	ldrb	r2, [r7, #3]
 8005b18:	4611      	mov	r1, r2
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	f006 fa8b 	bl	800c036 <USB_ReadChInterrupts>
 8005b20:	4603      	mov	r3, r0
 8005b22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b2a:	d11b      	bne.n	8005b64 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8005b2c:	78fb      	ldrb	r3, [r7, #3]
 8005b2e:	015a      	lsls	r2, r3, #5
 8005b30:	693b      	ldr	r3, [r7, #16]
 8005b32:	4413      	add	r3, r2
 8005b34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b38:	461a      	mov	r2, r3
 8005b3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005b3e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8005b40:	78fa      	ldrb	r2, [r7, #3]
 8005b42:	6879      	ldr	r1, [r7, #4]
 8005b44:	4613      	mov	r3, r2
 8005b46:	011b      	lsls	r3, r3, #4
 8005b48:	1a9b      	subs	r3, r3, r2
 8005b4a:	009b      	lsls	r3, r3, #2
 8005b4c:	440b      	add	r3, r1
 8005b4e:	334d      	adds	r3, #77	; 0x4d
 8005b50:	2209      	movs	r2, #9
 8005b52:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	78fa      	ldrb	r2, [r7, #3]
 8005b5a:	4611      	mov	r1, r2
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	f007 f802 	bl	800cb66 <USB_HC_Halt>
 8005b62:	e025      	b.n	8005bb0 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	78fa      	ldrb	r2, [r7, #3]
 8005b6a:	4611      	mov	r1, r2
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	f006 fa62 	bl	800c036 <USB_ReadChInterrupts>
 8005b72:	4603      	mov	r3, r0
 8005b74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b78:	2b80      	cmp	r3, #128	; 0x80
 8005b7a:	d119      	bne.n	8005bb0 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8005b7c:	78fb      	ldrb	r3, [r7, #3]
 8005b7e:	015a      	lsls	r2, r3, #5
 8005b80:	693b      	ldr	r3, [r7, #16]
 8005b82:	4413      	add	r3, r2
 8005b84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b88:	461a      	mov	r2, r3
 8005b8a:	2380      	movs	r3, #128	; 0x80
 8005b8c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8005b8e:	78fa      	ldrb	r2, [r7, #3]
 8005b90:	6879      	ldr	r1, [r7, #4]
 8005b92:	4613      	mov	r3, r2
 8005b94:	011b      	lsls	r3, r3, #4
 8005b96:	1a9b      	subs	r3, r3, r2
 8005b98:	009b      	lsls	r3, r3, #2
 8005b9a:	440b      	add	r3, r1
 8005b9c:	334d      	adds	r3, #77	; 0x4d
 8005b9e:	2207      	movs	r2, #7
 8005ba0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	78fa      	ldrb	r2, [r7, #3]
 8005ba8:	4611      	mov	r1, r2
 8005baa:	4618      	mov	r0, r3
 8005bac:	f006 ffdb 	bl	800cb66 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	78fa      	ldrb	r2, [r7, #3]
 8005bb6:	4611      	mov	r1, r2
 8005bb8:	4618      	mov	r0, r3
 8005bba:	f006 fa3c 	bl	800c036 <USB_ReadChInterrupts>
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005bc4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005bc8:	d112      	bne.n	8005bf0 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	78fa      	ldrb	r2, [r7, #3]
 8005bd0:	4611      	mov	r1, r2
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	f006 ffc7 	bl	800cb66 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8005bd8:	78fb      	ldrb	r3, [r7, #3]
 8005bda:	015a      	lsls	r2, r3, #5
 8005bdc:	693b      	ldr	r3, [r7, #16]
 8005bde:	4413      	add	r3, r2
 8005be0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005be4:	461a      	mov	r2, r3
 8005be6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005bea:	6093      	str	r3, [r2, #8]
 8005bec:	f000 bd75 	b.w	80066da <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	78fa      	ldrb	r2, [r7, #3]
 8005bf6:	4611      	mov	r1, r2
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	f006 fa1c 	bl	800c036 <USB_ReadChInterrupts>
 8005bfe:	4603      	mov	r3, r0
 8005c00:	f003 0301 	and.w	r3, r3, #1
 8005c04:	2b01      	cmp	r3, #1
 8005c06:	f040 8128 	bne.w	8005e5a <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8005c0a:	78fb      	ldrb	r3, [r7, #3]
 8005c0c:	015a      	lsls	r2, r3, #5
 8005c0e:	693b      	ldr	r3, [r7, #16]
 8005c10:	4413      	add	r3, r2
 8005c12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c16:	461a      	mov	r2, r3
 8005c18:	2320      	movs	r3, #32
 8005c1a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8005c1c:	78fa      	ldrb	r2, [r7, #3]
 8005c1e:	6879      	ldr	r1, [r7, #4]
 8005c20:	4613      	mov	r3, r2
 8005c22:	011b      	lsls	r3, r3, #4
 8005c24:	1a9b      	subs	r3, r3, r2
 8005c26:	009b      	lsls	r3, r3, #2
 8005c28:	440b      	add	r3, r1
 8005c2a:	331b      	adds	r3, #27
 8005c2c:	781b      	ldrb	r3, [r3, #0]
 8005c2e:	2b01      	cmp	r3, #1
 8005c30:	d119      	bne.n	8005c66 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8005c32:	78fa      	ldrb	r2, [r7, #3]
 8005c34:	6879      	ldr	r1, [r7, #4]
 8005c36:	4613      	mov	r3, r2
 8005c38:	011b      	lsls	r3, r3, #4
 8005c3a:	1a9b      	subs	r3, r3, r2
 8005c3c:	009b      	lsls	r3, r3, #2
 8005c3e:	440b      	add	r3, r1
 8005c40:	331b      	adds	r3, #27
 8005c42:	2200      	movs	r2, #0
 8005c44:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8005c46:	78fb      	ldrb	r3, [r7, #3]
 8005c48:	015a      	lsls	r2, r3, #5
 8005c4a:	693b      	ldr	r3, [r7, #16]
 8005c4c:	4413      	add	r3, r2
 8005c4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c52:	685b      	ldr	r3, [r3, #4]
 8005c54:	78fa      	ldrb	r2, [r7, #3]
 8005c56:	0151      	lsls	r1, r2, #5
 8005c58:	693a      	ldr	r2, [r7, #16]
 8005c5a:	440a      	add	r2, r1
 8005c5c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c64:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	799b      	ldrb	r3, [r3, #6]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d01b      	beq.n	8005ca6 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8005c6e:	78fa      	ldrb	r2, [r7, #3]
 8005c70:	6879      	ldr	r1, [r7, #4]
 8005c72:	4613      	mov	r3, r2
 8005c74:	011b      	lsls	r3, r3, #4
 8005c76:	1a9b      	subs	r3, r3, r2
 8005c78:	009b      	lsls	r3, r3, #2
 8005c7a:	440b      	add	r3, r1
 8005c7c:	3330      	adds	r3, #48	; 0x30
 8005c7e:	6819      	ldr	r1, [r3, #0]
 8005c80:	78fb      	ldrb	r3, [r7, #3]
 8005c82:	015a      	lsls	r2, r3, #5
 8005c84:	693b      	ldr	r3, [r7, #16]
 8005c86:	4413      	add	r3, r2
 8005c88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c8c:	691b      	ldr	r3, [r3, #16]
 8005c8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c92:	78fa      	ldrb	r2, [r7, #3]
 8005c94:	1ac9      	subs	r1, r1, r3
 8005c96:	6878      	ldr	r0, [r7, #4]
 8005c98:	4613      	mov	r3, r2
 8005c9a:	011b      	lsls	r3, r3, #4
 8005c9c:	1a9b      	subs	r3, r3, r2
 8005c9e:	009b      	lsls	r3, r3, #2
 8005ca0:	4403      	add	r3, r0
 8005ca2:	3338      	adds	r3, #56	; 0x38
 8005ca4:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8005ca6:	78fa      	ldrb	r2, [r7, #3]
 8005ca8:	6879      	ldr	r1, [r7, #4]
 8005caa:	4613      	mov	r3, r2
 8005cac:	011b      	lsls	r3, r3, #4
 8005cae:	1a9b      	subs	r3, r3, r2
 8005cb0:	009b      	lsls	r3, r3, #2
 8005cb2:	440b      	add	r3, r1
 8005cb4:	334d      	adds	r3, #77	; 0x4d
 8005cb6:	2201      	movs	r2, #1
 8005cb8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8005cba:	78fa      	ldrb	r2, [r7, #3]
 8005cbc:	6879      	ldr	r1, [r7, #4]
 8005cbe:	4613      	mov	r3, r2
 8005cc0:	011b      	lsls	r3, r3, #4
 8005cc2:	1a9b      	subs	r3, r3, r2
 8005cc4:	009b      	lsls	r3, r3, #2
 8005cc6:	440b      	add	r3, r1
 8005cc8:	3344      	adds	r3, #68	; 0x44
 8005cca:	2200      	movs	r2, #0
 8005ccc:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8005cce:	78fb      	ldrb	r3, [r7, #3]
 8005cd0:	015a      	lsls	r2, r3, #5
 8005cd2:	693b      	ldr	r3, [r7, #16]
 8005cd4:	4413      	add	r3, r2
 8005cd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cda:	461a      	mov	r2, r3
 8005cdc:	2301      	movs	r3, #1
 8005cde:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005ce0:	78fa      	ldrb	r2, [r7, #3]
 8005ce2:	6879      	ldr	r1, [r7, #4]
 8005ce4:	4613      	mov	r3, r2
 8005ce6:	011b      	lsls	r3, r3, #4
 8005ce8:	1a9b      	subs	r3, r3, r2
 8005cea:	009b      	lsls	r3, r3, #2
 8005cec:	440b      	add	r3, r1
 8005cee:	3326      	adds	r3, #38	; 0x26
 8005cf0:	781b      	ldrb	r3, [r3, #0]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d00a      	beq.n	8005d0c <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8005cf6:	78fa      	ldrb	r2, [r7, #3]
 8005cf8:	6879      	ldr	r1, [r7, #4]
 8005cfa:	4613      	mov	r3, r2
 8005cfc:	011b      	lsls	r3, r3, #4
 8005cfe:	1a9b      	subs	r3, r3, r2
 8005d00:	009b      	lsls	r3, r3, #2
 8005d02:	440b      	add	r3, r1
 8005d04:	3326      	adds	r3, #38	; 0x26
 8005d06:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005d08:	2b02      	cmp	r3, #2
 8005d0a:	d110      	bne.n	8005d2e <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	78fa      	ldrb	r2, [r7, #3]
 8005d12:	4611      	mov	r1, r2
 8005d14:	4618      	mov	r0, r3
 8005d16:	f006 ff26 	bl	800cb66 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8005d1a:	78fb      	ldrb	r3, [r7, #3]
 8005d1c:	015a      	lsls	r2, r3, #5
 8005d1e:	693b      	ldr	r3, [r7, #16]
 8005d20:	4413      	add	r3, r2
 8005d22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d26:	461a      	mov	r2, r3
 8005d28:	2310      	movs	r3, #16
 8005d2a:	6093      	str	r3, [r2, #8]
 8005d2c:	e03d      	b.n	8005daa <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8005d2e:	78fa      	ldrb	r2, [r7, #3]
 8005d30:	6879      	ldr	r1, [r7, #4]
 8005d32:	4613      	mov	r3, r2
 8005d34:	011b      	lsls	r3, r3, #4
 8005d36:	1a9b      	subs	r3, r3, r2
 8005d38:	009b      	lsls	r3, r3, #2
 8005d3a:	440b      	add	r3, r1
 8005d3c:	3326      	adds	r3, #38	; 0x26
 8005d3e:	781b      	ldrb	r3, [r3, #0]
 8005d40:	2b03      	cmp	r3, #3
 8005d42:	d00a      	beq.n	8005d5a <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8005d44:	78fa      	ldrb	r2, [r7, #3]
 8005d46:	6879      	ldr	r1, [r7, #4]
 8005d48:	4613      	mov	r3, r2
 8005d4a:	011b      	lsls	r3, r3, #4
 8005d4c:	1a9b      	subs	r3, r3, r2
 8005d4e:	009b      	lsls	r3, r3, #2
 8005d50:	440b      	add	r3, r1
 8005d52:	3326      	adds	r3, #38	; 0x26
 8005d54:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8005d56:	2b01      	cmp	r3, #1
 8005d58:	d127      	bne.n	8005daa <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8005d5a:	78fb      	ldrb	r3, [r7, #3]
 8005d5c:	015a      	lsls	r2, r3, #5
 8005d5e:	693b      	ldr	r3, [r7, #16]
 8005d60:	4413      	add	r3, r2
 8005d62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	78fa      	ldrb	r2, [r7, #3]
 8005d6a:	0151      	lsls	r1, r2, #5
 8005d6c:	693a      	ldr	r2, [r7, #16]
 8005d6e:	440a      	add	r2, r1
 8005d70:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d74:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005d78:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8005d7a:	78fa      	ldrb	r2, [r7, #3]
 8005d7c:	6879      	ldr	r1, [r7, #4]
 8005d7e:	4613      	mov	r3, r2
 8005d80:	011b      	lsls	r3, r3, #4
 8005d82:	1a9b      	subs	r3, r3, r2
 8005d84:	009b      	lsls	r3, r3, #2
 8005d86:	440b      	add	r3, r1
 8005d88:	334c      	adds	r3, #76	; 0x4c
 8005d8a:	2201      	movs	r2, #1
 8005d8c:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8005d8e:	78fa      	ldrb	r2, [r7, #3]
 8005d90:	6879      	ldr	r1, [r7, #4]
 8005d92:	4613      	mov	r3, r2
 8005d94:	011b      	lsls	r3, r3, #4
 8005d96:	1a9b      	subs	r3, r3, r2
 8005d98:	009b      	lsls	r3, r3, #2
 8005d9a:	440b      	add	r3, r1
 8005d9c:	334c      	adds	r3, #76	; 0x4c
 8005d9e:	781a      	ldrb	r2, [r3, #0]
 8005da0:	78fb      	ldrb	r3, [r7, #3]
 8005da2:	4619      	mov	r1, r3
 8005da4:	6878      	ldr	r0, [r7, #4]
 8005da6:	f009 fa45 	bl	800f234 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	799b      	ldrb	r3, [r3, #6]
 8005dae:	2b01      	cmp	r3, #1
 8005db0:	d13b      	bne.n	8005e2a <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8005db2:	78fa      	ldrb	r2, [r7, #3]
 8005db4:	6879      	ldr	r1, [r7, #4]
 8005db6:	4613      	mov	r3, r2
 8005db8:	011b      	lsls	r3, r3, #4
 8005dba:	1a9b      	subs	r3, r3, r2
 8005dbc:	009b      	lsls	r3, r3, #2
 8005dbe:	440b      	add	r3, r1
 8005dc0:	3338      	adds	r3, #56	; 0x38
 8005dc2:	6819      	ldr	r1, [r3, #0]
 8005dc4:	78fa      	ldrb	r2, [r7, #3]
 8005dc6:	6878      	ldr	r0, [r7, #4]
 8005dc8:	4613      	mov	r3, r2
 8005dca:	011b      	lsls	r3, r3, #4
 8005dcc:	1a9b      	subs	r3, r3, r2
 8005dce:	009b      	lsls	r3, r3, #2
 8005dd0:	4403      	add	r3, r0
 8005dd2:	3328      	adds	r3, #40	; 0x28
 8005dd4:	881b      	ldrh	r3, [r3, #0]
 8005dd6:	440b      	add	r3, r1
 8005dd8:	1e59      	subs	r1, r3, #1
 8005dda:	78fa      	ldrb	r2, [r7, #3]
 8005ddc:	6878      	ldr	r0, [r7, #4]
 8005dde:	4613      	mov	r3, r2
 8005de0:	011b      	lsls	r3, r3, #4
 8005de2:	1a9b      	subs	r3, r3, r2
 8005de4:	009b      	lsls	r3, r3, #2
 8005de6:	4403      	add	r3, r0
 8005de8:	3328      	adds	r3, #40	; 0x28
 8005dea:	881b      	ldrh	r3, [r3, #0]
 8005dec:	fbb1 f3f3 	udiv	r3, r1, r3
 8005df0:	f003 0301 	and.w	r3, r3, #1
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	f000 8470 	beq.w	80066da <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8005dfa:	78fa      	ldrb	r2, [r7, #3]
 8005dfc:	6879      	ldr	r1, [r7, #4]
 8005dfe:	4613      	mov	r3, r2
 8005e00:	011b      	lsls	r3, r3, #4
 8005e02:	1a9b      	subs	r3, r3, r2
 8005e04:	009b      	lsls	r3, r3, #2
 8005e06:	440b      	add	r3, r1
 8005e08:	333c      	adds	r3, #60	; 0x3c
 8005e0a:	781b      	ldrb	r3, [r3, #0]
 8005e0c:	78fa      	ldrb	r2, [r7, #3]
 8005e0e:	f083 0301 	eor.w	r3, r3, #1
 8005e12:	b2d8      	uxtb	r0, r3
 8005e14:	6879      	ldr	r1, [r7, #4]
 8005e16:	4613      	mov	r3, r2
 8005e18:	011b      	lsls	r3, r3, #4
 8005e1a:	1a9b      	subs	r3, r3, r2
 8005e1c:	009b      	lsls	r3, r3, #2
 8005e1e:	440b      	add	r3, r1
 8005e20:	333c      	adds	r3, #60	; 0x3c
 8005e22:	4602      	mov	r2, r0
 8005e24:	701a      	strb	r2, [r3, #0]
 8005e26:	f000 bc58 	b.w	80066da <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8005e2a:	78fa      	ldrb	r2, [r7, #3]
 8005e2c:	6879      	ldr	r1, [r7, #4]
 8005e2e:	4613      	mov	r3, r2
 8005e30:	011b      	lsls	r3, r3, #4
 8005e32:	1a9b      	subs	r3, r3, r2
 8005e34:	009b      	lsls	r3, r3, #2
 8005e36:	440b      	add	r3, r1
 8005e38:	333c      	adds	r3, #60	; 0x3c
 8005e3a:	781b      	ldrb	r3, [r3, #0]
 8005e3c:	78fa      	ldrb	r2, [r7, #3]
 8005e3e:	f083 0301 	eor.w	r3, r3, #1
 8005e42:	b2d8      	uxtb	r0, r3
 8005e44:	6879      	ldr	r1, [r7, #4]
 8005e46:	4613      	mov	r3, r2
 8005e48:	011b      	lsls	r3, r3, #4
 8005e4a:	1a9b      	subs	r3, r3, r2
 8005e4c:	009b      	lsls	r3, r3, #2
 8005e4e:	440b      	add	r3, r1
 8005e50:	333c      	adds	r3, #60	; 0x3c
 8005e52:	4602      	mov	r2, r0
 8005e54:	701a      	strb	r2, [r3, #0]
 8005e56:	f000 bc40 	b.w	80066da <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	78fa      	ldrb	r2, [r7, #3]
 8005e60:	4611      	mov	r1, r2
 8005e62:	4618      	mov	r0, r3
 8005e64:	f006 f8e7 	bl	800c036 <USB_ReadChInterrupts>
 8005e68:	4603      	mov	r3, r0
 8005e6a:	f003 0320 	and.w	r3, r3, #32
 8005e6e:	2b20      	cmp	r3, #32
 8005e70:	d131      	bne.n	8005ed6 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8005e72:	78fb      	ldrb	r3, [r7, #3]
 8005e74:	015a      	lsls	r2, r3, #5
 8005e76:	693b      	ldr	r3, [r7, #16]
 8005e78:	4413      	add	r3, r2
 8005e7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e7e:	461a      	mov	r2, r3
 8005e80:	2320      	movs	r3, #32
 8005e82:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8005e84:	78fa      	ldrb	r2, [r7, #3]
 8005e86:	6879      	ldr	r1, [r7, #4]
 8005e88:	4613      	mov	r3, r2
 8005e8a:	011b      	lsls	r3, r3, #4
 8005e8c:	1a9b      	subs	r3, r3, r2
 8005e8e:	009b      	lsls	r3, r3, #2
 8005e90:	440b      	add	r3, r1
 8005e92:	331a      	adds	r3, #26
 8005e94:	781b      	ldrb	r3, [r3, #0]
 8005e96:	2b01      	cmp	r3, #1
 8005e98:	f040 841f 	bne.w	80066da <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8005e9c:	78fa      	ldrb	r2, [r7, #3]
 8005e9e:	6879      	ldr	r1, [r7, #4]
 8005ea0:	4613      	mov	r3, r2
 8005ea2:	011b      	lsls	r3, r3, #4
 8005ea4:	1a9b      	subs	r3, r3, r2
 8005ea6:	009b      	lsls	r3, r3, #2
 8005ea8:	440b      	add	r3, r1
 8005eaa:	331b      	adds	r3, #27
 8005eac:	2201      	movs	r2, #1
 8005eae:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8005eb0:	78fa      	ldrb	r2, [r7, #3]
 8005eb2:	6879      	ldr	r1, [r7, #4]
 8005eb4:	4613      	mov	r3, r2
 8005eb6:	011b      	lsls	r3, r3, #4
 8005eb8:	1a9b      	subs	r3, r3, r2
 8005eba:	009b      	lsls	r3, r3, #2
 8005ebc:	440b      	add	r3, r1
 8005ebe:	334d      	adds	r3, #77	; 0x4d
 8005ec0:	2203      	movs	r2, #3
 8005ec2:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	78fa      	ldrb	r2, [r7, #3]
 8005eca:	4611      	mov	r1, r2
 8005ecc:	4618      	mov	r0, r3
 8005ece:	f006 fe4a 	bl	800cb66 <USB_HC_Halt>
 8005ed2:	f000 bc02 	b.w	80066da <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	78fa      	ldrb	r2, [r7, #3]
 8005edc:	4611      	mov	r1, r2
 8005ede:	4618      	mov	r0, r3
 8005ee0:	f006 f8a9 	bl	800c036 <USB_ReadChInterrupts>
 8005ee4:	4603      	mov	r3, r0
 8005ee6:	f003 0302 	and.w	r3, r3, #2
 8005eea:	2b02      	cmp	r3, #2
 8005eec:	f040 8305 	bne.w	80064fa <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8005ef0:	78fb      	ldrb	r3, [r7, #3]
 8005ef2:	015a      	lsls	r2, r3, #5
 8005ef4:	693b      	ldr	r3, [r7, #16]
 8005ef6:	4413      	add	r3, r2
 8005ef8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005efc:	461a      	mov	r2, r3
 8005efe:	2302      	movs	r3, #2
 8005f00:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8005f02:	78fa      	ldrb	r2, [r7, #3]
 8005f04:	6879      	ldr	r1, [r7, #4]
 8005f06:	4613      	mov	r3, r2
 8005f08:	011b      	lsls	r3, r3, #4
 8005f0a:	1a9b      	subs	r3, r3, r2
 8005f0c:	009b      	lsls	r3, r3, #2
 8005f0e:	440b      	add	r3, r1
 8005f10:	334d      	adds	r3, #77	; 0x4d
 8005f12:	781b      	ldrb	r3, [r3, #0]
 8005f14:	2b01      	cmp	r3, #1
 8005f16:	d114      	bne.n	8005f42 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005f18:	78fa      	ldrb	r2, [r7, #3]
 8005f1a:	6879      	ldr	r1, [r7, #4]
 8005f1c:	4613      	mov	r3, r2
 8005f1e:	011b      	lsls	r3, r3, #4
 8005f20:	1a9b      	subs	r3, r3, r2
 8005f22:	009b      	lsls	r3, r3, #2
 8005f24:	440b      	add	r3, r1
 8005f26:	334d      	adds	r3, #77	; 0x4d
 8005f28:	2202      	movs	r2, #2
 8005f2a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8005f2c:	78fa      	ldrb	r2, [r7, #3]
 8005f2e:	6879      	ldr	r1, [r7, #4]
 8005f30:	4613      	mov	r3, r2
 8005f32:	011b      	lsls	r3, r3, #4
 8005f34:	1a9b      	subs	r3, r3, r2
 8005f36:	009b      	lsls	r3, r3, #2
 8005f38:	440b      	add	r3, r1
 8005f3a:	334c      	adds	r3, #76	; 0x4c
 8005f3c:	2201      	movs	r2, #1
 8005f3e:	701a      	strb	r2, [r3, #0]
 8005f40:	e2cc      	b.n	80064dc <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8005f42:	78fa      	ldrb	r2, [r7, #3]
 8005f44:	6879      	ldr	r1, [r7, #4]
 8005f46:	4613      	mov	r3, r2
 8005f48:	011b      	lsls	r3, r3, #4
 8005f4a:	1a9b      	subs	r3, r3, r2
 8005f4c:	009b      	lsls	r3, r3, #2
 8005f4e:	440b      	add	r3, r1
 8005f50:	334d      	adds	r3, #77	; 0x4d
 8005f52:	781b      	ldrb	r3, [r3, #0]
 8005f54:	2b06      	cmp	r3, #6
 8005f56:	d114      	bne.n	8005f82 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005f58:	78fa      	ldrb	r2, [r7, #3]
 8005f5a:	6879      	ldr	r1, [r7, #4]
 8005f5c:	4613      	mov	r3, r2
 8005f5e:	011b      	lsls	r3, r3, #4
 8005f60:	1a9b      	subs	r3, r3, r2
 8005f62:	009b      	lsls	r3, r3, #2
 8005f64:	440b      	add	r3, r1
 8005f66:	334d      	adds	r3, #77	; 0x4d
 8005f68:	2202      	movs	r2, #2
 8005f6a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8005f6c:	78fa      	ldrb	r2, [r7, #3]
 8005f6e:	6879      	ldr	r1, [r7, #4]
 8005f70:	4613      	mov	r3, r2
 8005f72:	011b      	lsls	r3, r3, #4
 8005f74:	1a9b      	subs	r3, r3, r2
 8005f76:	009b      	lsls	r3, r3, #2
 8005f78:	440b      	add	r3, r1
 8005f7a:	334c      	adds	r3, #76	; 0x4c
 8005f7c:	2205      	movs	r2, #5
 8005f7e:	701a      	strb	r2, [r3, #0]
 8005f80:	e2ac      	b.n	80064dc <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8005f82:	78fa      	ldrb	r2, [r7, #3]
 8005f84:	6879      	ldr	r1, [r7, #4]
 8005f86:	4613      	mov	r3, r2
 8005f88:	011b      	lsls	r3, r3, #4
 8005f8a:	1a9b      	subs	r3, r3, r2
 8005f8c:	009b      	lsls	r3, r3, #2
 8005f8e:	440b      	add	r3, r1
 8005f90:	334d      	adds	r3, #77	; 0x4d
 8005f92:	781b      	ldrb	r3, [r3, #0]
 8005f94:	2b07      	cmp	r3, #7
 8005f96:	d00b      	beq.n	8005fb0 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8005f98:	78fa      	ldrb	r2, [r7, #3]
 8005f9a:	6879      	ldr	r1, [r7, #4]
 8005f9c:	4613      	mov	r3, r2
 8005f9e:	011b      	lsls	r3, r3, #4
 8005fa0:	1a9b      	subs	r3, r3, r2
 8005fa2:	009b      	lsls	r3, r3, #2
 8005fa4:	440b      	add	r3, r1
 8005fa6:	334d      	adds	r3, #77	; 0x4d
 8005fa8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8005faa:	2b09      	cmp	r3, #9
 8005fac:	f040 80a6 	bne.w	80060fc <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005fb0:	78fa      	ldrb	r2, [r7, #3]
 8005fb2:	6879      	ldr	r1, [r7, #4]
 8005fb4:	4613      	mov	r3, r2
 8005fb6:	011b      	lsls	r3, r3, #4
 8005fb8:	1a9b      	subs	r3, r3, r2
 8005fba:	009b      	lsls	r3, r3, #2
 8005fbc:	440b      	add	r3, r1
 8005fbe:	334d      	adds	r3, #77	; 0x4d
 8005fc0:	2202      	movs	r2, #2
 8005fc2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8005fc4:	78fa      	ldrb	r2, [r7, #3]
 8005fc6:	6879      	ldr	r1, [r7, #4]
 8005fc8:	4613      	mov	r3, r2
 8005fca:	011b      	lsls	r3, r3, #4
 8005fcc:	1a9b      	subs	r3, r3, r2
 8005fce:	009b      	lsls	r3, r3, #2
 8005fd0:	440b      	add	r3, r1
 8005fd2:	3344      	adds	r3, #68	; 0x44
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	1c59      	adds	r1, r3, #1
 8005fd8:	6878      	ldr	r0, [r7, #4]
 8005fda:	4613      	mov	r3, r2
 8005fdc:	011b      	lsls	r3, r3, #4
 8005fde:	1a9b      	subs	r3, r3, r2
 8005fe0:	009b      	lsls	r3, r3, #2
 8005fe2:	4403      	add	r3, r0
 8005fe4:	3344      	adds	r3, #68	; 0x44
 8005fe6:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005fe8:	78fa      	ldrb	r2, [r7, #3]
 8005fea:	6879      	ldr	r1, [r7, #4]
 8005fec:	4613      	mov	r3, r2
 8005fee:	011b      	lsls	r3, r3, #4
 8005ff0:	1a9b      	subs	r3, r3, r2
 8005ff2:	009b      	lsls	r3, r3, #2
 8005ff4:	440b      	add	r3, r1
 8005ff6:	3344      	adds	r3, #68	; 0x44
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	2b02      	cmp	r3, #2
 8005ffc:	d943      	bls.n	8006086 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8005ffe:	78fa      	ldrb	r2, [r7, #3]
 8006000:	6879      	ldr	r1, [r7, #4]
 8006002:	4613      	mov	r3, r2
 8006004:	011b      	lsls	r3, r3, #4
 8006006:	1a9b      	subs	r3, r3, r2
 8006008:	009b      	lsls	r3, r3, #2
 800600a:	440b      	add	r3, r1
 800600c:	3344      	adds	r3, #68	; 0x44
 800600e:	2200      	movs	r2, #0
 8006010:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8006012:	78fa      	ldrb	r2, [r7, #3]
 8006014:	6879      	ldr	r1, [r7, #4]
 8006016:	4613      	mov	r3, r2
 8006018:	011b      	lsls	r3, r3, #4
 800601a:	1a9b      	subs	r3, r3, r2
 800601c:	009b      	lsls	r3, r3, #2
 800601e:	440b      	add	r3, r1
 8006020:	331a      	adds	r3, #26
 8006022:	781b      	ldrb	r3, [r3, #0]
 8006024:	2b01      	cmp	r3, #1
 8006026:	d123      	bne.n	8006070 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8006028:	78fa      	ldrb	r2, [r7, #3]
 800602a:	6879      	ldr	r1, [r7, #4]
 800602c:	4613      	mov	r3, r2
 800602e:	011b      	lsls	r3, r3, #4
 8006030:	1a9b      	subs	r3, r3, r2
 8006032:	009b      	lsls	r3, r3, #2
 8006034:	440b      	add	r3, r1
 8006036:	331b      	adds	r3, #27
 8006038:	2200      	movs	r2, #0
 800603a:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 800603c:	78fa      	ldrb	r2, [r7, #3]
 800603e:	6879      	ldr	r1, [r7, #4]
 8006040:	4613      	mov	r3, r2
 8006042:	011b      	lsls	r3, r3, #4
 8006044:	1a9b      	subs	r3, r3, r2
 8006046:	009b      	lsls	r3, r3, #2
 8006048:	440b      	add	r3, r1
 800604a:	331c      	adds	r3, #28
 800604c:	2200      	movs	r2, #0
 800604e:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8006050:	78fb      	ldrb	r3, [r7, #3]
 8006052:	015a      	lsls	r2, r3, #5
 8006054:	693b      	ldr	r3, [r7, #16]
 8006056:	4413      	add	r3, r2
 8006058:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800605c:	685b      	ldr	r3, [r3, #4]
 800605e:	78fa      	ldrb	r2, [r7, #3]
 8006060:	0151      	lsls	r1, r2, #5
 8006062:	693a      	ldr	r2, [r7, #16]
 8006064:	440a      	add	r2, r1
 8006066:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800606a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800606e:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8006070:	78fa      	ldrb	r2, [r7, #3]
 8006072:	6879      	ldr	r1, [r7, #4]
 8006074:	4613      	mov	r3, r2
 8006076:	011b      	lsls	r3, r3, #4
 8006078:	1a9b      	subs	r3, r3, r2
 800607a:	009b      	lsls	r3, r3, #2
 800607c:	440b      	add	r3, r1
 800607e:	334c      	adds	r3, #76	; 0x4c
 8006080:	2204      	movs	r2, #4
 8006082:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8006084:	e229      	b.n	80064da <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8006086:	78fa      	ldrb	r2, [r7, #3]
 8006088:	6879      	ldr	r1, [r7, #4]
 800608a:	4613      	mov	r3, r2
 800608c:	011b      	lsls	r3, r3, #4
 800608e:	1a9b      	subs	r3, r3, r2
 8006090:	009b      	lsls	r3, r3, #2
 8006092:	440b      	add	r3, r1
 8006094:	334c      	adds	r3, #76	; 0x4c
 8006096:	2202      	movs	r2, #2
 8006098:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800609a:	78fa      	ldrb	r2, [r7, #3]
 800609c:	6879      	ldr	r1, [r7, #4]
 800609e:	4613      	mov	r3, r2
 80060a0:	011b      	lsls	r3, r3, #4
 80060a2:	1a9b      	subs	r3, r3, r2
 80060a4:	009b      	lsls	r3, r3, #2
 80060a6:	440b      	add	r3, r1
 80060a8:	3326      	adds	r3, #38	; 0x26
 80060aa:	781b      	ldrb	r3, [r3, #0]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d00b      	beq.n	80060c8 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80060b0:	78fa      	ldrb	r2, [r7, #3]
 80060b2:	6879      	ldr	r1, [r7, #4]
 80060b4:	4613      	mov	r3, r2
 80060b6:	011b      	lsls	r3, r3, #4
 80060b8:	1a9b      	subs	r3, r3, r2
 80060ba:	009b      	lsls	r3, r3, #2
 80060bc:	440b      	add	r3, r1
 80060be:	3326      	adds	r3, #38	; 0x26
 80060c0:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80060c2:	2b02      	cmp	r3, #2
 80060c4:	f040 8209 	bne.w	80064da <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80060c8:	78fb      	ldrb	r3, [r7, #3]
 80060ca:	015a      	lsls	r2, r3, #5
 80060cc:	693b      	ldr	r3, [r7, #16]
 80060ce:	4413      	add	r3, r2
 80060d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80060de:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80060e6:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80060e8:	78fb      	ldrb	r3, [r7, #3]
 80060ea:	015a      	lsls	r2, r3, #5
 80060ec:	693b      	ldr	r3, [r7, #16]
 80060ee:	4413      	add	r3, r2
 80060f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060f4:	461a      	mov	r2, r3
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80060fa:	e1ee      	b.n	80064da <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80060fc:	78fa      	ldrb	r2, [r7, #3]
 80060fe:	6879      	ldr	r1, [r7, #4]
 8006100:	4613      	mov	r3, r2
 8006102:	011b      	lsls	r3, r3, #4
 8006104:	1a9b      	subs	r3, r3, r2
 8006106:	009b      	lsls	r3, r3, #2
 8006108:	440b      	add	r3, r1
 800610a:	334d      	adds	r3, #77	; 0x4d
 800610c:	781b      	ldrb	r3, [r3, #0]
 800610e:	2b05      	cmp	r3, #5
 8006110:	f040 80c8 	bne.w	80062a4 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006114:	78fa      	ldrb	r2, [r7, #3]
 8006116:	6879      	ldr	r1, [r7, #4]
 8006118:	4613      	mov	r3, r2
 800611a:	011b      	lsls	r3, r3, #4
 800611c:	1a9b      	subs	r3, r3, r2
 800611e:	009b      	lsls	r3, r3, #2
 8006120:	440b      	add	r3, r1
 8006122:	334d      	adds	r3, #77	; 0x4d
 8006124:	2202      	movs	r2, #2
 8006126:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8006128:	78fa      	ldrb	r2, [r7, #3]
 800612a:	6879      	ldr	r1, [r7, #4]
 800612c:	4613      	mov	r3, r2
 800612e:	011b      	lsls	r3, r3, #4
 8006130:	1a9b      	subs	r3, r3, r2
 8006132:	009b      	lsls	r3, r3, #2
 8006134:	440b      	add	r3, r1
 8006136:	331b      	adds	r3, #27
 8006138:	781b      	ldrb	r3, [r3, #0]
 800613a:	2b01      	cmp	r3, #1
 800613c:	f040 81ce 	bne.w	80064dc <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8006140:	78fa      	ldrb	r2, [r7, #3]
 8006142:	6879      	ldr	r1, [r7, #4]
 8006144:	4613      	mov	r3, r2
 8006146:	011b      	lsls	r3, r3, #4
 8006148:	1a9b      	subs	r3, r3, r2
 800614a:	009b      	lsls	r3, r3, #2
 800614c:	440b      	add	r3, r1
 800614e:	3326      	adds	r3, #38	; 0x26
 8006150:	781b      	ldrb	r3, [r3, #0]
 8006152:	2b03      	cmp	r3, #3
 8006154:	d16b      	bne.n	800622e <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8006156:	78fa      	ldrb	r2, [r7, #3]
 8006158:	6879      	ldr	r1, [r7, #4]
 800615a:	4613      	mov	r3, r2
 800615c:	011b      	lsls	r3, r3, #4
 800615e:	1a9b      	subs	r3, r3, r2
 8006160:	009b      	lsls	r3, r3, #2
 8006162:	440b      	add	r3, r1
 8006164:	3348      	adds	r3, #72	; 0x48
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	1c59      	adds	r1, r3, #1
 800616a:	6878      	ldr	r0, [r7, #4]
 800616c:	4613      	mov	r3, r2
 800616e:	011b      	lsls	r3, r3, #4
 8006170:	1a9b      	subs	r3, r3, r2
 8006172:	009b      	lsls	r3, r3, #2
 8006174:	4403      	add	r3, r0
 8006176:	3348      	adds	r3, #72	; 0x48
 8006178:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 800617a:	78fa      	ldrb	r2, [r7, #3]
 800617c:	6879      	ldr	r1, [r7, #4]
 800617e:	4613      	mov	r3, r2
 8006180:	011b      	lsls	r3, r3, #4
 8006182:	1a9b      	subs	r3, r3, r2
 8006184:	009b      	lsls	r3, r3, #2
 8006186:	440b      	add	r3, r1
 8006188:	3348      	adds	r3, #72	; 0x48
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	2b02      	cmp	r3, #2
 800618e:	d943      	bls.n	8006218 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8006190:	78fa      	ldrb	r2, [r7, #3]
 8006192:	6879      	ldr	r1, [r7, #4]
 8006194:	4613      	mov	r3, r2
 8006196:	011b      	lsls	r3, r3, #4
 8006198:	1a9b      	subs	r3, r3, r2
 800619a:	009b      	lsls	r3, r3, #2
 800619c:	440b      	add	r3, r1
 800619e:	3348      	adds	r3, #72	; 0x48
 80061a0:	2200      	movs	r2, #0
 80061a2:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 80061a4:	78fa      	ldrb	r2, [r7, #3]
 80061a6:	6879      	ldr	r1, [r7, #4]
 80061a8:	4613      	mov	r3, r2
 80061aa:	011b      	lsls	r3, r3, #4
 80061ac:	1a9b      	subs	r3, r3, r2
 80061ae:	009b      	lsls	r3, r3, #2
 80061b0:	440b      	add	r3, r1
 80061b2:	331b      	adds	r3, #27
 80061b4:	2200      	movs	r2, #0
 80061b6:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 80061b8:	78fa      	ldrb	r2, [r7, #3]
 80061ba:	6879      	ldr	r1, [r7, #4]
 80061bc:	4613      	mov	r3, r2
 80061be:	011b      	lsls	r3, r3, #4
 80061c0:	1a9b      	subs	r3, r3, r2
 80061c2:	009b      	lsls	r3, r3, #2
 80061c4:	440b      	add	r3, r1
 80061c6:	3344      	adds	r3, #68	; 0x44
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	2b02      	cmp	r3, #2
 80061cc:	d809      	bhi.n	80061e2 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 80061ce:	78fa      	ldrb	r2, [r7, #3]
 80061d0:	6879      	ldr	r1, [r7, #4]
 80061d2:	4613      	mov	r3, r2
 80061d4:	011b      	lsls	r3, r3, #4
 80061d6:	1a9b      	subs	r3, r3, r2
 80061d8:	009b      	lsls	r3, r3, #2
 80061da:	440b      	add	r3, r1
 80061dc:	331c      	adds	r3, #28
 80061de:	2201      	movs	r2, #1
 80061e0:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80061e2:	78fb      	ldrb	r3, [r7, #3]
 80061e4:	015a      	lsls	r2, r3, #5
 80061e6:	693b      	ldr	r3, [r7, #16]
 80061e8:	4413      	add	r3, r2
 80061ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061ee:	685b      	ldr	r3, [r3, #4]
 80061f0:	78fa      	ldrb	r2, [r7, #3]
 80061f2:	0151      	lsls	r1, r2, #5
 80061f4:	693a      	ldr	r2, [r7, #16]
 80061f6:	440a      	add	r2, r1
 80061f8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80061fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006200:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8006202:	78fa      	ldrb	r2, [r7, #3]
 8006204:	6879      	ldr	r1, [r7, #4]
 8006206:	4613      	mov	r3, r2
 8006208:	011b      	lsls	r3, r3, #4
 800620a:	1a9b      	subs	r3, r3, r2
 800620c:	009b      	lsls	r3, r3, #2
 800620e:	440b      	add	r3, r1
 8006210:	334c      	adds	r3, #76	; 0x4c
 8006212:	2204      	movs	r2, #4
 8006214:	701a      	strb	r2, [r3, #0]
 8006216:	e014      	b.n	8006242 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8006218:	78fa      	ldrb	r2, [r7, #3]
 800621a:	6879      	ldr	r1, [r7, #4]
 800621c:	4613      	mov	r3, r2
 800621e:	011b      	lsls	r3, r3, #4
 8006220:	1a9b      	subs	r3, r3, r2
 8006222:	009b      	lsls	r3, r3, #2
 8006224:	440b      	add	r3, r1
 8006226:	334c      	adds	r3, #76	; 0x4c
 8006228:	2202      	movs	r2, #2
 800622a:	701a      	strb	r2, [r3, #0]
 800622c:	e009      	b.n	8006242 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800622e:	78fa      	ldrb	r2, [r7, #3]
 8006230:	6879      	ldr	r1, [r7, #4]
 8006232:	4613      	mov	r3, r2
 8006234:	011b      	lsls	r3, r3, #4
 8006236:	1a9b      	subs	r3, r3, r2
 8006238:	009b      	lsls	r3, r3, #2
 800623a:	440b      	add	r3, r1
 800623c:	334c      	adds	r3, #76	; 0x4c
 800623e:	2202      	movs	r2, #2
 8006240:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8006242:	78fa      	ldrb	r2, [r7, #3]
 8006244:	6879      	ldr	r1, [r7, #4]
 8006246:	4613      	mov	r3, r2
 8006248:	011b      	lsls	r3, r3, #4
 800624a:	1a9b      	subs	r3, r3, r2
 800624c:	009b      	lsls	r3, r3, #2
 800624e:	440b      	add	r3, r1
 8006250:	3326      	adds	r3, #38	; 0x26
 8006252:	781b      	ldrb	r3, [r3, #0]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d00b      	beq.n	8006270 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8006258:	78fa      	ldrb	r2, [r7, #3]
 800625a:	6879      	ldr	r1, [r7, #4]
 800625c:	4613      	mov	r3, r2
 800625e:	011b      	lsls	r3, r3, #4
 8006260:	1a9b      	subs	r3, r3, r2
 8006262:	009b      	lsls	r3, r3, #2
 8006264:	440b      	add	r3, r1
 8006266:	3326      	adds	r3, #38	; 0x26
 8006268:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800626a:	2b02      	cmp	r3, #2
 800626c:	f040 8136 	bne.w	80064dc <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8006270:	78fb      	ldrb	r3, [r7, #3]
 8006272:	015a      	lsls	r2, r3, #5
 8006274:	693b      	ldr	r3, [r7, #16]
 8006276:	4413      	add	r3, r2
 8006278:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006286:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800628e:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8006290:	78fb      	ldrb	r3, [r7, #3]
 8006292:	015a      	lsls	r2, r3, #5
 8006294:	693b      	ldr	r3, [r7, #16]
 8006296:	4413      	add	r3, r2
 8006298:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800629c:	461a      	mov	r2, r3
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	6013      	str	r3, [r2, #0]
 80062a2:	e11b      	b.n	80064dc <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80062a4:	78fa      	ldrb	r2, [r7, #3]
 80062a6:	6879      	ldr	r1, [r7, #4]
 80062a8:	4613      	mov	r3, r2
 80062aa:	011b      	lsls	r3, r3, #4
 80062ac:	1a9b      	subs	r3, r3, r2
 80062ae:	009b      	lsls	r3, r3, #2
 80062b0:	440b      	add	r3, r1
 80062b2:	334d      	adds	r3, #77	; 0x4d
 80062b4:	781b      	ldrb	r3, [r3, #0]
 80062b6:	2b03      	cmp	r3, #3
 80062b8:	f040 8081 	bne.w	80063be <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80062bc:	78fa      	ldrb	r2, [r7, #3]
 80062be:	6879      	ldr	r1, [r7, #4]
 80062c0:	4613      	mov	r3, r2
 80062c2:	011b      	lsls	r3, r3, #4
 80062c4:	1a9b      	subs	r3, r3, r2
 80062c6:	009b      	lsls	r3, r3, #2
 80062c8:	440b      	add	r3, r1
 80062ca:	334d      	adds	r3, #77	; 0x4d
 80062cc:	2202      	movs	r2, #2
 80062ce:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80062d0:	78fa      	ldrb	r2, [r7, #3]
 80062d2:	6879      	ldr	r1, [r7, #4]
 80062d4:	4613      	mov	r3, r2
 80062d6:	011b      	lsls	r3, r3, #4
 80062d8:	1a9b      	subs	r3, r3, r2
 80062da:	009b      	lsls	r3, r3, #2
 80062dc:	440b      	add	r3, r1
 80062de:	331b      	adds	r3, #27
 80062e0:	781b      	ldrb	r3, [r3, #0]
 80062e2:	2b01      	cmp	r3, #1
 80062e4:	f040 80fa 	bne.w	80064dc <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80062e8:	78fa      	ldrb	r2, [r7, #3]
 80062ea:	6879      	ldr	r1, [r7, #4]
 80062ec:	4613      	mov	r3, r2
 80062ee:	011b      	lsls	r3, r3, #4
 80062f0:	1a9b      	subs	r3, r3, r2
 80062f2:	009b      	lsls	r3, r3, #2
 80062f4:	440b      	add	r3, r1
 80062f6:	334c      	adds	r3, #76	; 0x4c
 80062f8:	2202      	movs	r2, #2
 80062fa:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80062fc:	78fb      	ldrb	r3, [r7, #3]
 80062fe:	015a      	lsls	r2, r3, #5
 8006300:	693b      	ldr	r3, [r7, #16]
 8006302:	4413      	add	r3, r2
 8006304:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006308:	685b      	ldr	r3, [r3, #4]
 800630a:	78fa      	ldrb	r2, [r7, #3]
 800630c:	0151      	lsls	r1, r2, #5
 800630e:	693a      	ldr	r2, [r7, #16]
 8006310:	440a      	add	r2, r1
 8006312:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006316:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800631a:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 800631c:	78fb      	ldrb	r3, [r7, #3]
 800631e:	015a      	lsls	r2, r3, #5
 8006320:	693b      	ldr	r3, [r7, #16]
 8006322:	4413      	add	r3, r2
 8006324:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006328:	68db      	ldr	r3, [r3, #12]
 800632a:	78fa      	ldrb	r2, [r7, #3]
 800632c:	0151      	lsls	r1, r2, #5
 800632e:	693a      	ldr	r2, [r7, #16]
 8006330:	440a      	add	r2, r1
 8006332:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006336:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800633a:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 800633c:	78fb      	ldrb	r3, [r7, #3]
 800633e:	015a      	lsls	r2, r3, #5
 8006340:	693b      	ldr	r3, [r7, #16]
 8006342:	4413      	add	r3, r2
 8006344:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006348:	68db      	ldr	r3, [r3, #12]
 800634a:	78fa      	ldrb	r2, [r7, #3]
 800634c:	0151      	lsls	r1, r2, #5
 800634e:	693a      	ldr	r2, [r7, #16]
 8006350:	440a      	add	r2, r1
 8006352:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006356:	f023 0320 	bic.w	r3, r3, #32
 800635a:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800635c:	78fa      	ldrb	r2, [r7, #3]
 800635e:	6879      	ldr	r1, [r7, #4]
 8006360:	4613      	mov	r3, r2
 8006362:	011b      	lsls	r3, r3, #4
 8006364:	1a9b      	subs	r3, r3, r2
 8006366:	009b      	lsls	r3, r3, #2
 8006368:	440b      	add	r3, r1
 800636a:	3326      	adds	r3, #38	; 0x26
 800636c:	781b      	ldrb	r3, [r3, #0]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d00b      	beq.n	800638a <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8006372:	78fa      	ldrb	r2, [r7, #3]
 8006374:	6879      	ldr	r1, [r7, #4]
 8006376:	4613      	mov	r3, r2
 8006378:	011b      	lsls	r3, r3, #4
 800637a:	1a9b      	subs	r3, r3, r2
 800637c:	009b      	lsls	r3, r3, #2
 800637e:	440b      	add	r3, r1
 8006380:	3326      	adds	r3, #38	; 0x26
 8006382:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8006384:	2b02      	cmp	r3, #2
 8006386:	f040 80a9 	bne.w	80064dc <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800638a:	78fb      	ldrb	r3, [r7, #3]
 800638c:	015a      	lsls	r2, r3, #5
 800638e:	693b      	ldr	r3, [r7, #16]
 8006390:	4413      	add	r3, r2
 8006392:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80063a0:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80063a8:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80063aa:	78fb      	ldrb	r3, [r7, #3]
 80063ac:	015a      	lsls	r2, r3, #5
 80063ae:	693b      	ldr	r3, [r7, #16]
 80063b0:	4413      	add	r3, r2
 80063b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063b6:	461a      	mov	r2, r3
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	6013      	str	r3, [r2, #0]
 80063bc:	e08e      	b.n	80064dc <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80063be:	78fa      	ldrb	r2, [r7, #3]
 80063c0:	6879      	ldr	r1, [r7, #4]
 80063c2:	4613      	mov	r3, r2
 80063c4:	011b      	lsls	r3, r3, #4
 80063c6:	1a9b      	subs	r3, r3, r2
 80063c8:	009b      	lsls	r3, r3, #2
 80063ca:	440b      	add	r3, r1
 80063cc:	334d      	adds	r3, #77	; 0x4d
 80063ce:	781b      	ldrb	r3, [r3, #0]
 80063d0:	2b04      	cmp	r3, #4
 80063d2:	d143      	bne.n	800645c <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80063d4:	78fa      	ldrb	r2, [r7, #3]
 80063d6:	6879      	ldr	r1, [r7, #4]
 80063d8:	4613      	mov	r3, r2
 80063da:	011b      	lsls	r3, r3, #4
 80063dc:	1a9b      	subs	r3, r3, r2
 80063de:	009b      	lsls	r3, r3, #2
 80063e0:	440b      	add	r3, r1
 80063e2:	334d      	adds	r3, #77	; 0x4d
 80063e4:	2202      	movs	r2, #2
 80063e6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80063e8:	78fa      	ldrb	r2, [r7, #3]
 80063ea:	6879      	ldr	r1, [r7, #4]
 80063ec:	4613      	mov	r3, r2
 80063ee:	011b      	lsls	r3, r3, #4
 80063f0:	1a9b      	subs	r3, r3, r2
 80063f2:	009b      	lsls	r3, r3, #2
 80063f4:	440b      	add	r3, r1
 80063f6:	334c      	adds	r3, #76	; 0x4c
 80063f8:	2202      	movs	r2, #2
 80063fa:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80063fc:	78fa      	ldrb	r2, [r7, #3]
 80063fe:	6879      	ldr	r1, [r7, #4]
 8006400:	4613      	mov	r3, r2
 8006402:	011b      	lsls	r3, r3, #4
 8006404:	1a9b      	subs	r3, r3, r2
 8006406:	009b      	lsls	r3, r3, #2
 8006408:	440b      	add	r3, r1
 800640a:	3326      	adds	r3, #38	; 0x26
 800640c:	781b      	ldrb	r3, [r3, #0]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d00a      	beq.n	8006428 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8006412:	78fa      	ldrb	r2, [r7, #3]
 8006414:	6879      	ldr	r1, [r7, #4]
 8006416:	4613      	mov	r3, r2
 8006418:	011b      	lsls	r3, r3, #4
 800641a:	1a9b      	subs	r3, r3, r2
 800641c:	009b      	lsls	r3, r3, #2
 800641e:	440b      	add	r3, r1
 8006420:	3326      	adds	r3, #38	; 0x26
 8006422:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8006424:	2b02      	cmp	r3, #2
 8006426:	d159      	bne.n	80064dc <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8006428:	78fb      	ldrb	r3, [r7, #3]
 800642a:	015a      	lsls	r2, r3, #5
 800642c:	693b      	ldr	r3, [r7, #16]
 800642e:	4413      	add	r3, r2
 8006430:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800643e:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006446:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8006448:	78fb      	ldrb	r3, [r7, #3]
 800644a:	015a      	lsls	r2, r3, #5
 800644c:	693b      	ldr	r3, [r7, #16]
 800644e:	4413      	add	r3, r2
 8006450:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006454:	461a      	mov	r2, r3
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	6013      	str	r3, [r2, #0]
 800645a:	e03f      	b.n	80064dc <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 800645c:	78fa      	ldrb	r2, [r7, #3]
 800645e:	6879      	ldr	r1, [r7, #4]
 8006460:	4613      	mov	r3, r2
 8006462:	011b      	lsls	r3, r3, #4
 8006464:	1a9b      	subs	r3, r3, r2
 8006466:	009b      	lsls	r3, r3, #2
 8006468:	440b      	add	r3, r1
 800646a:	334d      	adds	r3, #77	; 0x4d
 800646c:	781b      	ldrb	r3, [r3, #0]
 800646e:	2b08      	cmp	r3, #8
 8006470:	d126      	bne.n	80064c0 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006472:	78fa      	ldrb	r2, [r7, #3]
 8006474:	6879      	ldr	r1, [r7, #4]
 8006476:	4613      	mov	r3, r2
 8006478:	011b      	lsls	r3, r3, #4
 800647a:	1a9b      	subs	r3, r3, r2
 800647c:	009b      	lsls	r3, r3, #2
 800647e:	440b      	add	r3, r1
 8006480:	334d      	adds	r3, #77	; 0x4d
 8006482:	2202      	movs	r2, #2
 8006484:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8006486:	78fa      	ldrb	r2, [r7, #3]
 8006488:	6879      	ldr	r1, [r7, #4]
 800648a:	4613      	mov	r3, r2
 800648c:	011b      	lsls	r3, r3, #4
 800648e:	1a9b      	subs	r3, r3, r2
 8006490:	009b      	lsls	r3, r3, #2
 8006492:	440b      	add	r3, r1
 8006494:	3344      	adds	r3, #68	; 0x44
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	1c59      	adds	r1, r3, #1
 800649a:	6878      	ldr	r0, [r7, #4]
 800649c:	4613      	mov	r3, r2
 800649e:	011b      	lsls	r3, r3, #4
 80064a0:	1a9b      	subs	r3, r3, r2
 80064a2:	009b      	lsls	r3, r3, #2
 80064a4:	4403      	add	r3, r0
 80064a6:	3344      	adds	r3, #68	; 0x44
 80064a8:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 80064aa:	78fa      	ldrb	r2, [r7, #3]
 80064ac:	6879      	ldr	r1, [r7, #4]
 80064ae:	4613      	mov	r3, r2
 80064b0:	011b      	lsls	r3, r3, #4
 80064b2:	1a9b      	subs	r3, r3, r2
 80064b4:	009b      	lsls	r3, r3, #2
 80064b6:	440b      	add	r3, r1
 80064b8:	334c      	adds	r3, #76	; 0x4c
 80064ba:	2204      	movs	r2, #4
 80064bc:	701a      	strb	r2, [r3, #0]
 80064be:	e00d      	b.n	80064dc <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 80064c0:	78fa      	ldrb	r2, [r7, #3]
 80064c2:	6879      	ldr	r1, [r7, #4]
 80064c4:	4613      	mov	r3, r2
 80064c6:	011b      	lsls	r3, r3, #4
 80064c8:	1a9b      	subs	r3, r3, r2
 80064ca:	009b      	lsls	r3, r3, #2
 80064cc:	440b      	add	r3, r1
 80064ce:	334d      	adds	r3, #77	; 0x4d
 80064d0:	781b      	ldrb	r3, [r3, #0]
 80064d2:	2b02      	cmp	r3, #2
 80064d4:	f000 8100 	beq.w	80066d8 <HCD_HC_IN_IRQHandler+0xcca>
 80064d8:	e000      	b.n	80064dc <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80064da:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80064dc:	78fa      	ldrb	r2, [r7, #3]
 80064de:	6879      	ldr	r1, [r7, #4]
 80064e0:	4613      	mov	r3, r2
 80064e2:	011b      	lsls	r3, r3, #4
 80064e4:	1a9b      	subs	r3, r3, r2
 80064e6:	009b      	lsls	r3, r3, #2
 80064e8:	440b      	add	r3, r1
 80064ea:	334c      	adds	r3, #76	; 0x4c
 80064ec:	781a      	ldrb	r2, [r3, #0]
 80064ee:	78fb      	ldrb	r3, [r7, #3]
 80064f0:	4619      	mov	r1, r3
 80064f2:	6878      	ldr	r0, [r7, #4]
 80064f4:	f008 fe9e 	bl	800f234 <HAL_HCD_HC_NotifyURBChange_Callback>
 80064f8:	e0ef      	b.n	80066da <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	78fa      	ldrb	r2, [r7, #3]
 8006500:	4611      	mov	r1, r2
 8006502:	4618      	mov	r0, r3
 8006504:	f005 fd97 	bl	800c036 <USB_ReadChInterrupts>
 8006508:	4603      	mov	r3, r0
 800650a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800650e:	2b40      	cmp	r3, #64	; 0x40
 8006510:	d12f      	bne.n	8006572 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8006512:	78fb      	ldrb	r3, [r7, #3]
 8006514:	015a      	lsls	r2, r3, #5
 8006516:	693b      	ldr	r3, [r7, #16]
 8006518:	4413      	add	r3, r2
 800651a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800651e:	461a      	mov	r2, r3
 8006520:	2340      	movs	r3, #64	; 0x40
 8006522:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8006524:	78fa      	ldrb	r2, [r7, #3]
 8006526:	6879      	ldr	r1, [r7, #4]
 8006528:	4613      	mov	r3, r2
 800652a:	011b      	lsls	r3, r3, #4
 800652c:	1a9b      	subs	r3, r3, r2
 800652e:	009b      	lsls	r3, r3, #2
 8006530:	440b      	add	r3, r1
 8006532:	334d      	adds	r3, #77	; 0x4d
 8006534:	2205      	movs	r2, #5
 8006536:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8006538:	78fa      	ldrb	r2, [r7, #3]
 800653a:	6879      	ldr	r1, [r7, #4]
 800653c:	4613      	mov	r3, r2
 800653e:	011b      	lsls	r3, r3, #4
 8006540:	1a9b      	subs	r3, r3, r2
 8006542:	009b      	lsls	r3, r3, #2
 8006544:	440b      	add	r3, r1
 8006546:	331a      	adds	r3, #26
 8006548:	781b      	ldrb	r3, [r3, #0]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d109      	bne.n	8006562 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800654e:	78fa      	ldrb	r2, [r7, #3]
 8006550:	6879      	ldr	r1, [r7, #4]
 8006552:	4613      	mov	r3, r2
 8006554:	011b      	lsls	r3, r3, #4
 8006556:	1a9b      	subs	r3, r3, r2
 8006558:	009b      	lsls	r3, r3, #2
 800655a:	440b      	add	r3, r1
 800655c:	3344      	adds	r3, #68	; 0x44
 800655e:	2200      	movs	r2, #0
 8006560:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	78fa      	ldrb	r2, [r7, #3]
 8006568:	4611      	mov	r1, r2
 800656a:	4618      	mov	r0, r3
 800656c:	f006 fafb 	bl	800cb66 <USB_HC_Halt>
 8006570:	e0b3      	b.n	80066da <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	78fa      	ldrb	r2, [r7, #3]
 8006578:	4611      	mov	r1, r2
 800657a:	4618      	mov	r0, r3
 800657c:	f005 fd5b 	bl	800c036 <USB_ReadChInterrupts>
 8006580:	4603      	mov	r3, r0
 8006582:	f003 0310 	and.w	r3, r3, #16
 8006586:	2b10      	cmp	r3, #16
 8006588:	f040 80a7 	bne.w	80066da <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 800658c:	78fa      	ldrb	r2, [r7, #3]
 800658e:	6879      	ldr	r1, [r7, #4]
 8006590:	4613      	mov	r3, r2
 8006592:	011b      	lsls	r3, r3, #4
 8006594:	1a9b      	subs	r3, r3, r2
 8006596:	009b      	lsls	r3, r3, #2
 8006598:	440b      	add	r3, r1
 800659a:	3326      	adds	r3, #38	; 0x26
 800659c:	781b      	ldrb	r3, [r3, #0]
 800659e:	2b03      	cmp	r3, #3
 80065a0:	d11b      	bne.n	80065da <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80065a2:	78fa      	ldrb	r2, [r7, #3]
 80065a4:	6879      	ldr	r1, [r7, #4]
 80065a6:	4613      	mov	r3, r2
 80065a8:	011b      	lsls	r3, r3, #4
 80065aa:	1a9b      	subs	r3, r3, r2
 80065ac:	009b      	lsls	r3, r3, #2
 80065ae:	440b      	add	r3, r1
 80065b0:	3344      	adds	r3, #68	; 0x44
 80065b2:	2200      	movs	r2, #0
 80065b4:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 80065b6:	78fa      	ldrb	r2, [r7, #3]
 80065b8:	6879      	ldr	r1, [r7, #4]
 80065ba:	4613      	mov	r3, r2
 80065bc:	011b      	lsls	r3, r3, #4
 80065be:	1a9b      	subs	r3, r3, r2
 80065c0:	009b      	lsls	r3, r3, #2
 80065c2:	440b      	add	r3, r1
 80065c4:	334d      	adds	r3, #77	; 0x4d
 80065c6:	2204      	movs	r2, #4
 80065c8:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	78fa      	ldrb	r2, [r7, #3]
 80065d0:	4611      	mov	r1, r2
 80065d2:	4618      	mov	r0, r3
 80065d4:	f006 fac7 	bl	800cb66 <USB_HC_Halt>
 80065d8:	e03f      	b.n	800665a <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80065da:	78fa      	ldrb	r2, [r7, #3]
 80065dc:	6879      	ldr	r1, [r7, #4]
 80065de:	4613      	mov	r3, r2
 80065e0:	011b      	lsls	r3, r3, #4
 80065e2:	1a9b      	subs	r3, r3, r2
 80065e4:	009b      	lsls	r3, r3, #2
 80065e6:	440b      	add	r3, r1
 80065e8:	3326      	adds	r3, #38	; 0x26
 80065ea:	781b      	ldrb	r3, [r3, #0]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d00a      	beq.n	8006606 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80065f0:	78fa      	ldrb	r2, [r7, #3]
 80065f2:	6879      	ldr	r1, [r7, #4]
 80065f4:	4613      	mov	r3, r2
 80065f6:	011b      	lsls	r3, r3, #4
 80065f8:	1a9b      	subs	r3, r3, r2
 80065fa:	009b      	lsls	r3, r3, #2
 80065fc:	440b      	add	r3, r1
 80065fe:	3326      	adds	r3, #38	; 0x26
 8006600:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8006602:	2b02      	cmp	r3, #2
 8006604:	d129      	bne.n	800665a <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8006606:	78fa      	ldrb	r2, [r7, #3]
 8006608:	6879      	ldr	r1, [r7, #4]
 800660a:	4613      	mov	r3, r2
 800660c:	011b      	lsls	r3, r3, #4
 800660e:	1a9b      	subs	r3, r3, r2
 8006610:	009b      	lsls	r3, r3, #2
 8006612:	440b      	add	r3, r1
 8006614:	3344      	adds	r3, #68	; 0x44
 8006616:	2200      	movs	r2, #0
 8006618:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	799b      	ldrb	r3, [r3, #6]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d00a      	beq.n	8006638 <HCD_HC_IN_IRQHandler+0xc2a>
 8006622:	78fa      	ldrb	r2, [r7, #3]
 8006624:	6879      	ldr	r1, [r7, #4]
 8006626:	4613      	mov	r3, r2
 8006628:	011b      	lsls	r3, r3, #4
 800662a:	1a9b      	subs	r3, r3, r2
 800662c:	009b      	lsls	r3, r3, #2
 800662e:	440b      	add	r3, r1
 8006630:	331b      	adds	r3, #27
 8006632:	781b      	ldrb	r3, [r3, #0]
 8006634:	2b01      	cmp	r3, #1
 8006636:	d110      	bne.n	800665a <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8006638:	78fa      	ldrb	r2, [r7, #3]
 800663a:	6879      	ldr	r1, [r7, #4]
 800663c:	4613      	mov	r3, r2
 800663e:	011b      	lsls	r3, r3, #4
 8006640:	1a9b      	subs	r3, r3, r2
 8006642:	009b      	lsls	r3, r3, #2
 8006644:	440b      	add	r3, r1
 8006646:	334d      	adds	r3, #77	; 0x4d
 8006648:	2204      	movs	r2, #4
 800664a:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	78fa      	ldrb	r2, [r7, #3]
 8006652:	4611      	mov	r1, r2
 8006654:	4618      	mov	r0, r3
 8006656:	f006 fa86 	bl	800cb66 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 800665a:	78fa      	ldrb	r2, [r7, #3]
 800665c:	6879      	ldr	r1, [r7, #4]
 800665e:	4613      	mov	r3, r2
 8006660:	011b      	lsls	r3, r3, #4
 8006662:	1a9b      	subs	r3, r3, r2
 8006664:	009b      	lsls	r3, r3, #2
 8006666:	440b      	add	r3, r1
 8006668:	331b      	adds	r3, #27
 800666a:	781b      	ldrb	r3, [r3, #0]
 800666c:	2b01      	cmp	r3, #1
 800666e:	d129      	bne.n	80066c4 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8006670:	78fa      	ldrb	r2, [r7, #3]
 8006672:	6879      	ldr	r1, [r7, #4]
 8006674:	4613      	mov	r3, r2
 8006676:	011b      	lsls	r3, r3, #4
 8006678:	1a9b      	subs	r3, r3, r2
 800667a:	009b      	lsls	r3, r3, #2
 800667c:	440b      	add	r3, r1
 800667e:	331b      	adds	r3, #27
 8006680:	2200      	movs	r2, #0
 8006682:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8006684:	78fb      	ldrb	r3, [r7, #3]
 8006686:	015a      	lsls	r2, r3, #5
 8006688:	693b      	ldr	r3, [r7, #16]
 800668a:	4413      	add	r3, r2
 800668c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006690:	685b      	ldr	r3, [r3, #4]
 8006692:	78fa      	ldrb	r2, [r7, #3]
 8006694:	0151      	lsls	r1, r2, #5
 8006696:	693a      	ldr	r2, [r7, #16]
 8006698:	440a      	add	r2, r1
 800669a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800669e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80066a2:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 80066a4:	78fb      	ldrb	r3, [r7, #3]
 80066a6:	015a      	lsls	r2, r3, #5
 80066a8:	693b      	ldr	r3, [r7, #16]
 80066aa:	4413      	add	r3, r2
 80066ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066b0:	68db      	ldr	r3, [r3, #12]
 80066b2:	78fa      	ldrb	r2, [r7, #3]
 80066b4:	0151      	lsls	r1, r2, #5
 80066b6:	693a      	ldr	r2, [r7, #16]
 80066b8:	440a      	add	r2, r1
 80066ba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80066be:	f043 0320 	orr.w	r3, r3, #32
 80066c2:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80066c4:	78fb      	ldrb	r3, [r7, #3]
 80066c6:	015a      	lsls	r2, r3, #5
 80066c8:	693b      	ldr	r3, [r7, #16]
 80066ca:	4413      	add	r3, r2
 80066cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066d0:	461a      	mov	r2, r3
 80066d2:	2310      	movs	r3, #16
 80066d4:	6093      	str	r3, [r2, #8]
 80066d6:	e000      	b.n	80066da <HCD_HC_IN_IRQHandler+0xccc>
        return;
 80066d8:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 80066da:	3718      	adds	r7, #24
 80066dc:	46bd      	mov	sp, r7
 80066de:	bd80      	pop	{r7, pc}

080066e0 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b086      	sub	sp, #24
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
 80066e8:	460b      	mov	r3, r1
 80066ea:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066f2:	697b      	ldr	r3, [r7, #20]
 80066f4:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	78fa      	ldrb	r2, [r7, #3]
 80066fc:	4611      	mov	r1, r2
 80066fe:	4618      	mov	r0, r3
 8006700:	f005 fc99 	bl	800c036 <USB_ReadChInterrupts>
 8006704:	4603      	mov	r3, r0
 8006706:	f003 0304 	and.w	r3, r3, #4
 800670a:	2b04      	cmp	r3, #4
 800670c:	d11b      	bne.n	8006746 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 800670e:	78fb      	ldrb	r3, [r7, #3]
 8006710:	015a      	lsls	r2, r3, #5
 8006712:	693b      	ldr	r3, [r7, #16]
 8006714:	4413      	add	r3, r2
 8006716:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800671a:	461a      	mov	r2, r3
 800671c:	2304      	movs	r3, #4
 800671e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8006720:	78fa      	ldrb	r2, [r7, #3]
 8006722:	6879      	ldr	r1, [r7, #4]
 8006724:	4613      	mov	r3, r2
 8006726:	011b      	lsls	r3, r3, #4
 8006728:	1a9b      	subs	r3, r3, r2
 800672a:	009b      	lsls	r3, r3, #2
 800672c:	440b      	add	r3, r1
 800672e:	334d      	adds	r3, #77	; 0x4d
 8006730:	2207      	movs	r2, #7
 8006732:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	78fa      	ldrb	r2, [r7, #3]
 800673a:	4611      	mov	r1, r2
 800673c:	4618      	mov	r0, r3
 800673e:	f006 fa12 	bl	800cb66 <USB_HC_Halt>
 8006742:	f000 bc6f 	b.w	8007024 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	78fa      	ldrb	r2, [r7, #3]
 800674c:	4611      	mov	r1, r2
 800674e:	4618      	mov	r0, r3
 8006750:	f005 fc71 	bl	800c036 <USB_ReadChInterrupts>
 8006754:	4603      	mov	r3, r0
 8006756:	f003 0320 	and.w	r3, r3, #32
 800675a:	2b20      	cmp	r3, #32
 800675c:	f040 8082 	bne.w	8006864 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8006760:	78fb      	ldrb	r3, [r7, #3]
 8006762:	015a      	lsls	r2, r3, #5
 8006764:	693b      	ldr	r3, [r7, #16]
 8006766:	4413      	add	r3, r2
 8006768:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800676c:	461a      	mov	r2, r3
 800676e:	2320      	movs	r3, #32
 8006770:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8006772:	78fa      	ldrb	r2, [r7, #3]
 8006774:	6879      	ldr	r1, [r7, #4]
 8006776:	4613      	mov	r3, r2
 8006778:	011b      	lsls	r3, r3, #4
 800677a:	1a9b      	subs	r3, r3, r2
 800677c:	009b      	lsls	r3, r3, #2
 800677e:	440b      	add	r3, r1
 8006780:	3319      	adds	r3, #25
 8006782:	781b      	ldrb	r3, [r3, #0]
 8006784:	2b01      	cmp	r3, #1
 8006786:	d124      	bne.n	80067d2 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8006788:	78fa      	ldrb	r2, [r7, #3]
 800678a:	6879      	ldr	r1, [r7, #4]
 800678c:	4613      	mov	r3, r2
 800678e:	011b      	lsls	r3, r3, #4
 8006790:	1a9b      	subs	r3, r3, r2
 8006792:	009b      	lsls	r3, r3, #2
 8006794:	440b      	add	r3, r1
 8006796:	3319      	adds	r3, #25
 8006798:	2200      	movs	r2, #0
 800679a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800679c:	78fa      	ldrb	r2, [r7, #3]
 800679e:	6879      	ldr	r1, [r7, #4]
 80067a0:	4613      	mov	r3, r2
 80067a2:	011b      	lsls	r3, r3, #4
 80067a4:	1a9b      	subs	r3, r3, r2
 80067a6:	009b      	lsls	r3, r3, #2
 80067a8:	440b      	add	r3, r1
 80067aa:	334c      	adds	r3, #76	; 0x4c
 80067ac:	2202      	movs	r2, #2
 80067ae:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80067b0:	78fa      	ldrb	r2, [r7, #3]
 80067b2:	6879      	ldr	r1, [r7, #4]
 80067b4:	4613      	mov	r3, r2
 80067b6:	011b      	lsls	r3, r3, #4
 80067b8:	1a9b      	subs	r3, r3, r2
 80067ba:	009b      	lsls	r3, r3, #2
 80067bc:	440b      	add	r3, r1
 80067be:	334d      	adds	r3, #77	; 0x4d
 80067c0:	2203      	movs	r2, #3
 80067c2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	78fa      	ldrb	r2, [r7, #3]
 80067ca:	4611      	mov	r1, r2
 80067cc:	4618      	mov	r0, r3
 80067ce:	f006 f9ca 	bl	800cb66 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 80067d2:	78fa      	ldrb	r2, [r7, #3]
 80067d4:	6879      	ldr	r1, [r7, #4]
 80067d6:	4613      	mov	r3, r2
 80067d8:	011b      	lsls	r3, r3, #4
 80067da:	1a9b      	subs	r3, r3, r2
 80067dc:	009b      	lsls	r3, r3, #2
 80067de:	440b      	add	r3, r1
 80067e0:	331a      	adds	r3, #26
 80067e2:	781b      	ldrb	r3, [r3, #0]
 80067e4:	2b01      	cmp	r3, #1
 80067e6:	f040 841d 	bne.w	8007024 <HCD_HC_OUT_IRQHandler+0x944>
 80067ea:	78fa      	ldrb	r2, [r7, #3]
 80067ec:	6879      	ldr	r1, [r7, #4]
 80067ee:	4613      	mov	r3, r2
 80067f0:	011b      	lsls	r3, r3, #4
 80067f2:	1a9b      	subs	r3, r3, r2
 80067f4:	009b      	lsls	r3, r3, #2
 80067f6:	440b      	add	r3, r1
 80067f8:	331b      	adds	r3, #27
 80067fa:	781b      	ldrb	r3, [r3, #0]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	f040 8411 	bne.w	8007024 <HCD_HC_OUT_IRQHandler+0x944>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8006802:	78fa      	ldrb	r2, [r7, #3]
 8006804:	6879      	ldr	r1, [r7, #4]
 8006806:	4613      	mov	r3, r2
 8006808:	011b      	lsls	r3, r3, #4
 800680a:	1a9b      	subs	r3, r3, r2
 800680c:	009b      	lsls	r3, r3, #2
 800680e:	440b      	add	r3, r1
 8006810:	3326      	adds	r3, #38	; 0x26
 8006812:	781b      	ldrb	r3, [r3, #0]
 8006814:	2b01      	cmp	r3, #1
 8006816:	d009      	beq.n	800682c <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8006818:	78fa      	ldrb	r2, [r7, #3]
 800681a:	6879      	ldr	r1, [r7, #4]
 800681c:	4613      	mov	r3, r2
 800681e:	011b      	lsls	r3, r3, #4
 8006820:	1a9b      	subs	r3, r3, r2
 8006822:	009b      	lsls	r3, r3, #2
 8006824:	440b      	add	r3, r1
 8006826:	331b      	adds	r3, #27
 8006828:	2201      	movs	r2, #1
 800682a:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 800682c:	78fa      	ldrb	r2, [r7, #3]
 800682e:	6879      	ldr	r1, [r7, #4]
 8006830:	4613      	mov	r3, r2
 8006832:	011b      	lsls	r3, r3, #4
 8006834:	1a9b      	subs	r3, r3, r2
 8006836:	009b      	lsls	r3, r3, #2
 8006838:	440b      	add	r3, r1
 800683a:	334d      	adds	r3, #77	; 0x4d
 800683c:	2203      	movs	r2, #3
 800683e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	78fa      	ldrb	r2, [r7, #3]
 8006846:	4611      	mov	r1, r2
 8006848:	4618      	mov	r0, r3
 800684a:	f006 f98c 	bl	800cb66 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 800684e:	78fa      	ldrb	r2, [r7, #3]
 8006850:	6879      	ldr	r1, [r7, #4]
 8006852:	4613      	mov	r3, r2
 8006854:	011b      	lsls	r3, r3, #4
 8006856:	1a9b      	subs	r3, r3, r2
 8006858:	009b      	lsls	r3, r3, #2
 800685a:	440b      	add	r3, r1
 800685c:	3344      	adds	r3, #68	; 0x44
 800685e:	2200      	movs	r2, #0
 8006860:	601a      	str	r2, [r3, #0]
 8006862:	e3df      	b.n	8007024 <HCD_HC_OUT_IRQHandler+0x944>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	78fa      	ldrb	r2, [r7, #3]
 800686a:	4611      	mov	r1, r2
 800686c:	4618      	mov	r0, r3
 800686e:	f005 fbe2 	bl	800c036 <USB_ReadChInterrupts>
 8006872:	4603      	mov	r3, r0
 8006874:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006878:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800687c:	d111      	bne.n	80068a2 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 800687e:	78fb      	ldrb	r3, [r7, #3]
 8006880:	015a      	lsls	r2, r3, #5
 8006882:	693b      	ldr	r3, [r7, #16]
 8006884:	4413      	add	r3, r2
 8006886:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800688a:	461a      	mov	r2, r3
 800688c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006890:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	78fa      	ldrb	r2, [r7, #3]
 8006898:	4611      	mov	r1, r2
 800689a:	4618      	mov	r0, r3
 800689c:	f006 f963 	bl	800cb66 <USB_HC_Halt>
 80068a0:	e3c0      	b.n	8007024 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	78fa      	ldrb	r2, [r7, #3]
 80068a8:	4611      	mov	r1, r2
 80068aa:	4618      	mov	r0, r3
 80068ac:	f005 fbc3 	bl	800c036 <USB_ReadChInterrupts>
 80068b0:	4603      	mov	r3, r0
 80068b2:	f003 0301 	and.w	r3, r3, #1
 80068b6:	2b01      	cmp	r3, #1
 80068b8:	d168      	bne.n	800698c <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80068ba:	78fa      	ldrb	r2, [r7, #3]
 80068bc:	6879      	ldr	r1, [r7, #4]
 80068be:	4613      	mov	r3, r2
 80068c0:	011b      	lsls	r3, r3, #4
 80068c2:	1a9b      	subs	r3, r3, r2
 80068c4:	009b      	lsls	r3, r3, #2
 80068c6:	440b      	add	r3, r1
 80068c8:	3344      	adds	r3, #68	; 0x44
 80068ca:	2200      	movs	r2, #0
 80068cc:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	78fa      	ldrb	r2, [r7, #3]
 80068d4:	4611      	mov	r1, r2
 80068d6:	4618      	mov	r0, r3
 80068d8:	f005 fbad 	bl	800c036 <USB_ReadChInterrupts>
 80068dc:	4603      	mov	r3, r0
 80068de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068e2:	2b40      	cmp	r3, #64	; 0x40
 80068e4:	d112      	bne.n	800690c <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80068e6:	78fa      	ldrb	r2, [r7, #3]
 80068e8:	6879      	ldr	r1, [r7, #4]
 80068ea:	4613      	mov	r3, r2
 80068ec:	011b      	lsls	r3, r3, #4
 80068ee:	1a9b      	subs	r3, r3, r2
 80068f0:	009b      	lsls	r3, r3, #2
 80068f2:	440b      	add	r3, r1
 80068f4:	3319      	adds	r3, #25
 80068f6:	2201      	movs	r2, #1
 80068f8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80068fa:	78fb      	ldrb	r3, [r7, #3]
 80068fc:	015a      	lsls	r2, r3, #5
 80068fe:	693b      	ldr	r3, [r7, #16]
 8006900:	4413      	add	r3, r2
 8006902:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006906:	461a      	mov	r2, r3
 8006908:	2340      	movs	r3, #64	; 0x40
 800690a:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 800690c:	78fa      	ldrb	r2, [r7, #3]
 800690e:	6879      	ldr	r1, [r7, #4]
 8006910:	4613      	mov	r3, r2
 8006912:	011b      	lsls	r3, r3, #4
 8006914:	1a9b      	subs	r3, r3, r2
 8006916:	009b      	lsls	r3, r3, #2
 8006918:	440b      	add	r3, r1
 800691a:	331b      	adds	r3, #27
 800691c:	781b      	ldrb	r3, [r3, #0]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d019      	beq.n	8006956 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8006922:	78fa      	ldrb	r2, [r7, #3]
 8006924:	6879      	ldr	r1, [r7, #4]
 8006926:	4613      	mov	r3, r2
 8006928:	011b      	lsls	r3, r3, #4
 800692a:	1a9b      	subs	r3, r3, r2
 800692c:	009b      	lsls	r3, r3, #2
 800692e:	440b      	add	r3, r1
 8006930:	331b      	adds	r3, #27
 8006932:	2200      	movs	r2, #0
 8006934:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8006936:	78fb      	ldrb	r3, [r7, #3]
 8006938:	015a      	lsls	r2, r3, #5
 800693a:	693b      	ldr	r3, [r7, #16]
 800693c:	4413      	add	r3, r2
 800693e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006942:	685b      	ldr	r3, [r3, #4]
 8006944:	78fa      	ldrb	r2, [r7, #3]
 8006946:	0151      	lsls	r1, r2, #5
 8006948:	693a      	ldr	r2, [r7, #16]
 800694a:	440a      	add	r2, r1
 800694c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006950:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006954:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8006956:	78fb      	ldrb	r3, [r7, #3]
 8006958:	015a      	lsls	r2, r3, #5
 800695a:	693b      	ldr	r3, [r7, #16]
 800695c:	4413      	add	r3, r2
 800695e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006962:	461a      	mov	r2, r3
 8006964:	2301      	movs	r3, #1
 8006966:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8006968:	78fa      	ldrb	r2, [r7, #3]
 800696a:	6879      	ldr	r1, [r7, #4]
 800696c:	4613      	mov	r3, r2
 800696e:	011b      	lsls	r3, r3, #4
 8006970:	1a9b      	subs	r3, r3, r2
 8006972:	009b      	lsls	r3, r3, #2
 8006974:	440b      	add	r3, r1
 8006976:	334d      	adds	r3, #77	; 0x4d
 8006978:	2201      	movs	r2, #1
 800697a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	78fa      	ldrb	r2, [r7, #3]
 8006982:	4611      	mov	r1, r2
 8006984:	4618      	mov	r0, r3
 8006986:	f006 f8ee 	bl	800cb66 <USB_HC_Halt>
 800698a:	e34b      	b.n	8007024 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	78fa      	ldrb	r2, [r7, #3]
 8006992:	4611      	mov	r1, r2
 8006994:	4618      	mov	r0, r3
 8006996:	f005 fb4e 	bl	800c036 <USB_ReadChInterrupts>
 800699a:	4603      	mov	r3, r0
 800699c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069a0:	2b40      	cmp	r3, #64	; 0x40
 80069a2:	d139      	bne.n	8006a18 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 80069a4:	78fa      	ldrb	r2, [r7, #3]
 80069a6:	6879      	ldr	r1, [r7, #4]
 80069a8:	4613      	mov	r3, r2
 80069aa:	011b      	lsls	r3, r3, #4
 80069ac:	1a9b      	subs	r3, r3, r2
 80069ae:	009b      	lsls	r3, r3, #2
 80069b0:	440b      	add	r3, r1
 80069b2:	334d      	adds	r3, #77	; 0x4d
 80069b4:	2205      	movs	r2, #5
 80069b6:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80069b8:	78fa      	ldrb	r2, [r7, #3]
 80069ba:	6879      	ldr	r1, [r7, #4]
 80069bc:	4613      	mov	r3, r2
 80069be:	011b      	lsls	r3, r3, #4
 80069c0:	1a9b      	subs	r3, r3, r2
 80069c2:	009b      	lsls	r3, r3, #2
 80069c4:	440b      	add	r3, r1
 80069c6:	331a      	adds	r3, #26
 80069c8:	781b      	ldrb	r3, [r3, #0]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d109      	bne.n	80069e2 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80069ce:	78fa      	ldrb	r2, [r7, #3]
 80069d0:	6879      	ldr	r1, [r7, #4]
 80069d2:	4613      	mov	r3, r2
 80069d4:	011b      	lsls	r3, r3, #4
 80069d6:	1a9b      	subs	r3, r3, r2
 80069d8:	009b      	lsls	r3, r3, #2
 80069da:	440b      	add	r3, r1
 80069dc:	3319      	adds	r3, #25
 80069de:	2201      	movs	r2, #1
 80069e0:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 80069e2:	78fa      	ldrb	r2, [r7, #3]
 80069e4:	6879      	ldr	r1, [r7, #4]
 80069e6:	4613      	mov	r3, r2
 80069e8:	011b      	lsls	r3, r3, #4
 80069ea:	1a9b      	subs	r3, r3, r2
 80069ec:	009b      	lsls	r3, r3, #2
 80069ee:	440b      	add	r3, r1
 80069f0:	3344      	adds	r3, #68	; 0x44
 80069f2:	2200      	movs	r2, #0
 80069f4:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	78fa      	ldrb	r2, [r7, #3]
 80069fc:	4611      	mov	r1, r2
 80069fe:	4618      	mov	r0, r3
 8006a00:	f006 f8b1 	bl	800cb66 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8006a04:	78fb      	ldrb	r3, [r7, #3]
 8006a06:	015a      	lsls	r2, r3, #5
 8006a08:	693b      	ldr	r3, [r7, #16]
 8006a0a:	4413      	add	r3, r2
 8006a0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a10:	461a      	mov	r2, r3
 8006a12:	2340      	movs	r3, #64	; 0x40
 8006a14:	6093      	str	r3, [r2, #8]
 8006a16:	e305      	b.n	8007024 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	78fa      	ldrb	r2, [r7, #3]
 8006a1e:	4611      	mov	r1, r2
 8006a20:	4618      	mov	r0, r3
 8006a22:	f005 fb08 	bl	800c036 <USB_ReadChInterrupts>
 8006a26:	4603      	mov	r3, r0
 8006a28:	f003 0308 	and.w	r3, r3, #8
 8006a2c:	2b08      	cmp	r3, #8
 8006a2e:	d11a      	bne.n	8006a66 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8006a30:	78fb      	ldrb	r3, [r7, #3]
 8006a32:	015a      	lsls	r2, r3, #5
 8006a34:	693b      	ldr	r3, [r7, #16]
 8006a36:	4413      	add	r3, r2
 8006a38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a3c:	461a      	mov	r2, r3
 8006a3e:	2308      	movs	r3, #8
 8006a40:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8006a42:	78fa      	ldrb	r2, [r7, #3]
 8006a44:	6879      	ldr	r1, [r7, #4]
 8006a46:	4613      	mov	r3, r2
 8006a48:	011b      	lsls	r3, r3, #4
 8006a4a:	1a9b      	subs	r3, r3, r2
 8006a4c:	009b      	lsls	r3, r3, #2
 8006a4e:	440b      	add	r3, r1
 8006a50:	334d      	adds	r3, #77	; 0x4d
 8006a52:	2206      	movs	r2, #6
 8006a54:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	78fa      	ldrb	r2, [r7, #3]
 8006a5c:	4611      	mov	r1, r2
 8006a5e:	4618      	mov	r0, r3
 8006a60:	f006 f881 	bl	800cb66 <USB_HC_Halt>
 8006a64:	e2de      	b.n	8007024 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	78fa      	ldrb	r2, [r7, #3]
 8006a6c:	4611      	mov	r1, r2
 8006a6e:	4618      	mov	r0, r3
 8006a70:	f005 fae1 	bl	800c036 <USB_ReadChInterrupts>
 8006a74:	4603      	mov	r3, r0
 8006a76:	f003 0310 	and.w	r3, r3, #16
 8006a7a:	2b10      	cmp	r3, #16
 8006a7c:	d144      	bne.n	8006b08 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8006a7e:	78fa      	ldrb	r2, [r7, #3]
 8006a80:	6879      	ldr	r1, [r7, #4]
 8006a82:	4613      	mov	r3, r2
 8006a84:	011b      	lsls	r3, r3, #4
 8006a86:	1a9b      	subs	r3, r3, r2
 8006a88:	009b      	lsls	r3, r3, #2
 8006a8a:	440b      	add	r3, r1
 8006a8c:	3344      	adds	r3, #68	; 0x44
 8006a8e:	2200      	movs	r2, #0
 8006a90:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8006a92:	78fa      	ldrb	r2, [r7, #3]
 8006a94:	6879      	ldr	r1, [r7, #4]
 8006a96:	4613      	mov	r3, r2
 8006a98:	011b      	lsls	r3, r3, #4
 8006a9a:	1a9b      	subs	r3, r3, r2
 8006a9c:	009b      	lsls	r3, r3, #2
 8006a9e:	440b      	add	r3, r1
 8006aa0:	334d      	adds	r3, #77	; 0x4d
 8006aa2:	2204      	movs	r2, #4
 8006aa4:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8006aa6:	78fa      	ldrb	r2, [r7, #3]
 8006aa8:	6879      	ldr	r1, [r7, #4]
 8006aaa:	4613      	mov	r3, r2
 8006aac:	011b      	lsls	r3, r3, #4
 8006aae:	1a9b      	subs	r3, r3, r2
 8006ab0:	009b      	lsls	r3, r3, #2
 8006ab2:	440b      	add	r3, r1
 8006ab4:	3319      	adds	r3, #25
 8006ab6:	781b      	ldrb	r3, [r3, #0]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d114      	bne.n	8006ae6 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8006abc:	78fa      	ldrb	r2, [r7, #3]
 8006abe:	6879      	ldr	r1, [r7, #4]
 8006ac0:	4613      	mov	r3, r2
 8006ac2:	011b      	lsls	r3, r3, #4
 8006ac4:	1a9b      	subs	r3, r3, r2
 8006ac6:	009b      	lsls	r3, r3, #2
 8006ac8:	440b      	add	r3, r1
 8006aca:	3318      	adds	r3, #24
 8006acc:	781b      	ldrb	r3, [r3, #0]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d109      	bne.n	8006ae6 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8006ad2:	78fa      	ldrb	r2, [r7, #3]
 8006ad4:	6879      	ldr	r1, [r7, #4]
 8006ad6:	4613      	mov	r3, r2
 8006ad8:	011b      	lsls	r3, r3, #4
 8006ada:	1a9b      	subs	r3, r3, r2
 8006adc:	009b      	lsls	r3, r3, #2
 8006ade:	440b      	add	r3, r1
 8006ae0:	3319      	adds	r3, #25
 8006ae2:	2201      	movs	r2, #1
 8006ae4:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	78fa      	ldrb	r2, [r7, #3]
 8006aec:	4611      	mov	r1, r2
 8006aee:	4618      	mov	r0, r3
 8006af0:	f006 f839 	bl	800cb66 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8006af4:	78fb      	ldrb	r3, [r7, #3]
 8006af6:	015a      	lsls	r2, r3, #5
 8006af8:	693b      	ldr	r3, [r7, #16]
 8006afa:	4413      	add	r3, r2
 8006afc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b00:	461a      	mov	r2, r3
 8006b02:	2310      	movs	r3, #16
 8006b04:	6093      	str	r3, [r2, #8]
 8006b06:	e28d      	b.n	8007024 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	78fa      	ldrb	r2, [r7, #3]
 8006b0e:	4611      	mov	r1, r2
 8006b10:	4618      	mov	r0, r3
 8006b12:	f005 fa90 	bl	800c036 <USB_ReadChInterrupts>
 8006b16:	4603      	mov	r3, r0
 8006b18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b1c:	2b80      	cmp	r3, #128	; 0x80
 8006b1e:	d169      	bne.n	8006bf4 <HCD_HC_OUT_IRQHandler+0x514>
  {
    if (hhcd->Init.dma_enable == 0U)
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	799b      	ldrb	r3, [r3, #6]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d111      	bne.n	8006b4c <HCD_HC_OUT_IRQHandler+0x46c>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8006b28:	78fa      	ldrb	r2, [r7, #3]
 8006b2a:	6879      	ldr	r1, [r7, #4]
 8006b2c:	4613      	mov	r3, r2
 8006b2e:	011b      	lsls	r3, r3, #4
 8006b30:	1a9b      	subs	r3, r3, r2
 8006b32:	009b      	lsls	r3, r3, #2
 8006b34:	440b      	add	r3, r1
 8006b36:	334d      	adds	r3, #77	; 0x4d
 8006b38:	2207      	movs	r2, #7
 8006b3a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	78fa      	ldrb	r2, [r7, #3]
 8006b42:	4611      	mov	r1, r2
 8006b44:	4618      	mov	r0, r3
 8006b46:	f006 f80e 	bl	800cb66 <USB_HC_Halt>
 8006b4a:	e049      	b.n	8006be0 <HCD_HC_OUT_IRQHandler+0x500>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8006b4c:	78fa      	ldrb	r2, [r7, #3]
 8006b4e:	6879      	ldr	r1, [r7, #4]
 8006b50:	4613      	mov	r3, r2
 8006b52:	011b      	lsls	r3, r3, #4
 8006b54:	1a9b      	subs	r3, r3, r2
 8006b56:	009b      	lsls	r3, r3, #2
 8006b58:	440b      	add	r3, r1
 8006b5a:	3344      	adds	r3, #68	; 0x44
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	1c59      	adds	r1, r3, #1
 8006b60:	6878      	ldr	r0, [r7, #4]
 8006b62:	4613      	mov	r3, r2
 8006b64:	011b      	lsls	r3, r3, #4
 8006b66:	1a9b      	subs	r3, r3, r2
 8006b68:	009b      	lsls	r3, r3, #2
 8006b6a:	4403      	add	r3, r0
 8006b6c:	3344      	adds	r3, #68	; 0x44
 8006b6e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8006b70:	78fa      	ldrb	r2, [r7, #3]
 8006b72:	6879      	ldr	r1, [r7, #4]
 8006b74:	4613      	mov	r3, r2
 8006b76:	011b      	lsls	r3, r3, #4
 8006b78:	1a9b      	subs	r3, r3, r2
 8006b7a:	009b      	lsls	r3, r3, #2
 8006b7c:	440b      	add	r3, r1
 8006b7e:	3344      	adds	r3, #68	; 0x44
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	2b02      	cmp	r3, #2
 8006b84:	d922      	bls.n	8006bcc <HCD_HC_OUT_IRQHandler+0x4ec>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8006b86:	78fa      	ldrb	r2, [r7, #3]
 8006b88:	6879      	ldr	r1, [r7, #4]
 8006b8a:	4613      	mov	r3, r2
 8006b8c:	011b      	lsls	r3, r3, #4
 8006b8e:	1a9b      	subs	r3, r3, r2
 8006b90:	009b      	lsls	r3, r3, #2
 8006b92:	440b      	add	r3, r1
 8006b94:	3344      	adds	r3, #68	; 0x44
 8006b96:	2200      	movs	r2, #0
 8006b98:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8006b9a:	78fa      	ldrb	r2, [r7, #3]
 8006b9c:	6879      	ldr	r1, [r7, #4]
 8006b9e:	4613      	mov	r3, r2
 8006ba0:	011b      	lsls	r3, r3, #4
 8006ba2:	1a9b      	subs	r3, r3, r2
 8006ba4:	009b      	lsls	r3, r3, #2
 8006ba6:	440b      	add	r3, r1
 8006ba8:	334c      	adds	r3, #76	; 0x4c
 8006baa:	2204      	movs	r2, #4
 8006bac:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8006bae:	78fa      	ldrb	r2, [r7, #3]
 8006bb0:	6879      	ldr	r1, [r7, #4]
 8006bb2:	4613      	mov	r3, r2
 8006bb4:	011b      	lsls	r3, r3, #4
 8006bb6:	1a9b      	subs	r3, r3, r2
 8006bb8:	009b      	lsls	r3, r3, #2
 8006bba:	440b      	add	r3, r1
 8006bbc:	334c      	adds	r3, #76	; 0x4c
 8006bbe:	781a      	ldrb	r2, [r3, #0]
 8006bc0:	78fb      	ldrb	r3, [r7, #3]
 8006bc2:	4619      	mov	r1, r3
 8006bc4:	6878      	ldr	r0, [r7, #4]
 8006bc6:	f008 fb35 	bl	800f234 <HAL_HCD_HC_NotifyURBChange_Callback>
 8006bca:	e009      	b.n	8006be0 <HCD_HC_OUT_IRQHandler+0x500>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8006bcc:	78fa      	ldrb	r2, [r7, #3]
 8006bce:	6879      	ldr	r1, [r7, #4]
 8006bd0:	4613      	mov	r3, r2
 8006bd2:	011b      	lsls	r3, r3, #4
 8006bd4:	1a9b      	subs	r3, r3, r2
 8006bd6:	009b      	lsls	r3, r3, #2
 8006bd8:	440b      	add	r3, r1
 8006bda:	334c      	adds	r3, #76	; 0x4c
 8006bdc:	2202      	movs	r2, #2
 8006bde:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8006be0:	78fb      	ldrb	r3, [r7, #3]
 8006be2:	015a      	lsls	r2, r3, #5
 8006be4:	693b      	ldr	r3, [r7, #16]
 8006be6:	4413      	add	r3, r2
 8006be8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bec:	461a      	mov	r2, r3
 8006bee:	2380      	movs	r3, #128	; 0x80
 8006bf0:	6093      	str	r3, [r2, #8]
 8006bf2:	e217      	b.n	8007024 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	78fa      	ldrb	r2, [r7, #3]
 8006bfa:	4611      	mov	r1, r2
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	f005 fa1a 	bl	800c036 <USB_ReadChInterrupts>
 8006c02:	4603      	mov	r3, r0
 8006c04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c0c:	d11b      	bne.n	8006c46 <HCD_HC_OUT_IRQHandler+0x566>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8006c0e:	78fa      	ldrb	r2, [r7, #3]
 8006c10:	6879      	ldr	r1, [r7, #4]
 8006c12:	4613      	mov	r3, r2
 8006c14:	011b      	lsls	r3, r3, #4
 8006c16:	1a9b      	subs	r3, r3, r2
 8006c18:	009b      	lsls	r3, r3, #2
 8006c1a:	440b      	add	r3, r1
 8006c1c:	334d      	adds	r3, #77	; 0x4d
 8006c1e:	2209      	movs	r2, #9
 8006c20:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	78fa      	ldrb	r2, [r7, #3]
 8006c28:	4611      	mov	r1, r2
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	f005 ff9b 	bl	800cb66 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8006c30:	78fb      	ldrb	r3, [r7, #3]
 8006c32:	015a      	lsls	r2, r3, #5
 8006c34:	693b      	ldr	r3, [r7, #16]
 8006c36:	4413      	add	r3, r2
 8006c38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c3c:	461a      	mov	r2, r3
 8006c3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006c42:	6093      	str	r3, [r2, #8]
 8006c44:	e1ee      	b.n	8007024 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	78fa      	ldrb	r2, [r7, #3]
 8006c4c:	4611      	mov	r1, r2
 8006c4e:	4618      	mov	r0, r3
 8006c50:	f005 f9f1 	bl	800c036 <USB_ReadChInterrupts>
 8006c54:	4603      	mov	r3, r0
 8006c56:	f003 0302 	and.w	r3, r3, #2
 8006c5a:	2b02      	cmp	r3, #2
 8006c5c:	f040 81df 	bne.w	800701e <HCD_HC_OUT_IRQHandler+0x93e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8006c60:	78fb      	ldrb	r3, [r7, #3]
 8006c62:	015a      	lsls	r2, r3, #5
 8006c64:	693b      	ldr	r3, [r7, #16]
 8006c66:	4413      	add	r3, r2
 8006c68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c6c:	461a      	mov	r2, r3
 8006c6e:	2302      	movs	r3, #2
 8006c70:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8006c72:	78fa      	ldrb	r2, [r7, #3]
 8006c74:	6879      	ldr	r1, [r7, #4]
 8006c76:	4613      	mov	r3, r2
 8006c78:	011b      	lsls	r3, r3, #4
 8006c7a:	1a9b      	subs	r3, r3, r2
 8006c7c:	009b      	lsls	r3, r3, #2
 8006c7e:	440b      	add	r3, r1
 8006c80:	334d      	adds	r3, #77	; 0x4d
 8006c82:	781b      	ldrb	r3, [r3, #0]
 8006c84:	2b01      	cmp	r3, #1
 8006c86:	f040 8093 	bne.w	8006db0 <HCD_HC_OUT_IRQHandler+0x6d0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006c8a:	78fa      	ldrb	r2, [r7, #3]
 8006c8c:	6879      	ldr	r1, [r7, #4]
 8006c8e:	4613      	mov	r3, r2
 8006c90:	011b      	lsls	r3, r3, #4
 8006c92:	1a9b      	subs	r3, r3, r2
 8006c94:	009b      	lsls	r3, r3, #2
 8006c96:	440b      	add	r3, r1
 8006c98:	334d      	adds	r3, #77	; 0x4d
 8006c9a:	2202      	movs	r2, #2
 8006c9c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8006c9e:	78fa      	ldrb	r2, [r7, #3]
 8006ca0:	6879      	ldr	r1, [r7, #4]
 8006ca2:	4613      	mov	r3, r2
 8006ca4:	011b      	lsls	r3, r3, #4
 8006ca6:	1a9b      	subs	r3, r3, r2
 8006ca8:	009b      	lsls	r3, r3, #2
 8006caa:	440b      	add	r3, r1
 8006cac:	334c      	adds	r3, #76	; 0x4c
 8006cae:	2201      	movs	r2, #1
 8006cb0:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8006cb2:	78fa      	ldrb	r2, [r7, #3]
 8006cb4:	6879      	ldr	r1, [r7, #4]
 8006cb6:	4613      	mov	r3, r2
 8006cb8:	011b      	lsls	r3, r3, #4
 8006cba:	1a9b      	subs	r3, r3, r2
 8006cbc:	009b      	lsls	r3, r3, #2
 8006cbe:	440b      	add	r3, r1
 8006cc0:	3326      	adds	r3, #38	; 0x26
 8006cc2:	781b      	ldrb	r3, [r3, #0]
 8006cc4:	2b02      	cmp	r3, #2
 8006cc6:	d00b      	beq.n	8006ce0 <HCD_HC_OUT_IRQHandler+0x600>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8006cc8:	78fa      	ldrb	r2, [r7, #3]
 8006cca:	6879      	ldr	r1, [r7, #4]
 8006ccc:	4613      	mov	r3, r2
 8006cce:	011b      	lsls	r3, r3, #4
 8006cd0:	1a9b      	subs	r3, r3, r2
 8006cd2:	009b      	lsls	r3, r3, #2
 8006cd4:	440b      	add	r3, r1
 8006cd6:	3326      	adds	r3, #38	; 0x26
 8006cd8:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8006cda:	2b03      	cmp	r3, #3
 8006cdc:	f040 8190 	bne.w	8007000 <HCD_HC_OUT_IRQHandler+0x920>
      {
        if (hhcd->Init.dma_enable == 0U)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	799b      	ldrb	r3, [r3, #6]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d115      	bne.n	8006d14 <HCD_HC_OUT_IRQHandler+0x634>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8006ce8:	78fa      	ldrb	r2, [r7, #3]
 8006cea:	6879      	ldr	r1, [r7, #4]
 8006cec:	4613      	mov	r3, r2
 8006cee:	011b      	lsls	r3, r3, #4
 8006cf0:	1a9b      	subs	r3, r3, r2
 8006cf2:	009b      	lsls	r3, r3, #2
 8006cf4:	440b      	add	r3, r1
 8006cf6:	333d      	adds	r3, #61	; 0x3d
 8006cf8:	781b      	ldrb	r3, [r3, #0]
 8006cfa:	78fa      	ldrb	r2, [r7, #3]
 8006cfc:	f083 0301 	eor.w	r3, r3, #1
 8006d00:	b2d8      	uxtb	r0, r3
 8006d02:	6879      	ldr	r1, [r7, #4]
 8006d04:	4613      	mov	r3, r2
 8006d06:	011b      	lsls	r3, r3, #4
 8006d08:	1a9b      	subs	r3, r3, r2
 8006d0a:	009b      	lsls	r3, r3, #2
 8006d0c:	440b      	add	r3, r1
 8006d0e:	333d      	adds	r3, #61	; 0x3d
 8006d10:	4602      	mov	r2, r0
 8006d12:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	799b      	ldrb	r3, [r3, #6]
 8006d18:	2b01      	cmp	r3, #1
 8006d1a:	f040 8171 	bne.w	8007000 <HCD_HC_OUT_IRQHandler+0x920>
 8006d1e:	78fa      	ldrb	r2, [r7, #3]
 8006d20:	6879      	ldr	r1, [r7, #4]
 8006d22:	4613      	mov	r3, r2
 8006d24:	011b      	lsls	r3, r3, #4
 8006d26:	1a9b      	subs	r3, r3, r2
 8006d28:	009b      	lsls	r3, r3, #2
 8006d2a:	440b      	add	r3, r1
 8006d2c:	3334      	adds	r3, #52	; 0x34
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	f000 8165 	beq.w	8007000 <HCD_HC_OUT_IRQHandler+0x920>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8006d36:	78fa      	ldrb	r2, [r7, #3]
 8006d38:	6879      	ldr	r1, [r7, #4]
 8006d3a:	4613      	mov	r3, r2
 8006d3c:	011b      	lsls	r3, r3, #4
 8006d3e:	1a9b      	subs	r3, r3, r2
 8006d40:	009b      	lsls	r3, r3, #2
 8006d42:	440b      	add	r3, r1
 8006d44:	3334      	adds	r3, #52	; 0x34
 8006d46:	6819      	ldr	r1, [r3, #0]
 8006d48:	78fa      	ldrb	r2, [r7, #3]
 8006d4a:	6878      	ldr	r0, [r7, #4]
 8006d4c:	4613      	mov	r3, r2
 8006d4e:	011b      	lsls	r3, r3, #4
 8006d50:	1a9b      	subs	r3, r3, r2
 8006d52:	009b      	lsls	r3, r3, #2
 8006d54:	4403      	add	r3, r0
 8006d56:	3328      	adds	r3, #40	; 0x28
 8006d58:	881b      	ldrh	r3, [r3, #0]
 8006d5a:	440b      	add	r3, r1
 8006d5c:	1e59      	subs	r1, r3, #1
 8006d5e:	78fa      	ldrb	r2, [r7, #3]
 8006d60:	6878      	ldr	r0, [r7, #4]
 8006d62:	4613      	mov	r3, r2
 8006d64:	011b      	lsls	r3, r3, #4
 8006d66:	1a9b      	subs	r3, r3, r2
 8006d68:	009b      	lsls	r3, r3, #2
 8006d6a:	4403      	add	r3, r0
 8006d6c:	3328      	adds	r3, #40	; 0x28
 8006d6e:	881b      	ldrh	r3, [r3, #0]
 8006d70:	fbb1 f3f3 	udiv	r3, r1, r3
 8006d74:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8006d76:	68bb      	ldr	r3, [r7, #8]
 8006d78:	f003 0301 	and.w	r3, r3, #1
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	f000 813f 	beq.w	8007000 <HCD_HC_OUT_IRQHandler+0x920>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8006d82:	78fa      	ldrb	r2, [r7, #3]
 8006d84:	6879      	ldr	r1, [r7, #4]
 8006d86:	4613      	mov	r3, r2
 8006d88:	011b      	lsls	r3, r3, #4
 8006d8a:	1a9b      	subs	r3, r3, r2
 8006d8c:	009b      	lsls	r3, r3, #2
 8006d8e:	440b      	add	r3, r1
 8006d90:	333d      	adds	r3, #61	; 0x3d
 8006d92:	781b      	ldrb	r3, [r3, #0]
 8006d94:	78fa      	ldrb	r2, [r7, #3]
 8006d96:	f083 0301 	eor.w	r3, r3, #1
 8006d9a:	b2d8      	uxtb	r0, r3
 8006d9c:	6879      	ldr	r1, [r7, #4]
 8006d9e:	4613      	mov	r3, r2
 8006da0:	011b      	lsls	r3, r3, #4
 8006da2:	1a9b      	subs	r3, r3, r2
 8006da4:	009b      	lsls	r3, r3, #2
 8006da6:	440b      	add	r3, r1
 8006da8:	333d      	adds	r3, #61	; 0x3d
 8006daa:	4602      	mov	r2, r0
 8006dac:	701a      	strb	r2, [r3, #0]
 8006dae:	e127      	b.n	8007000 <HCD_HC_OUT_IRQHandler+0x920>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8006db0:	78fa      	ldrb	r2, [r7, #3]
 8006db2:	6879      	ldr	r1, [r7, #4]
 8006db4:	4613      	mov	r3, r2
 8006db6:	011b      	lsls	r3, r3, #4
 8006db8:	1a9b      	subs	r3, r3, r2
 8006dba:	009b      	lsls	r3, r3, #2
 8006dbc:	440b      	add	r3, r1
 8006dbe:	334d      	adds	r3, #77	; 0x4d
 8006dc0:	781b      	ldrb	r3, [r3, #0]
 8006dc2:	2b03      	cmp	r3, #3
 8006dc4:	d120      	bne.n	8006e08 <HCD_HC_OUT_IRQHandler+0x728>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006dc6:	78fa      	ldrb	r2, [r7, #3]
 8006dc8:	6879      	ldr	r1, [r7, #4]
 8006dca:	4613      	mov	r3, r2
 8006dcc:	011b      	lsls	r3, r3, #4
 8006dce:	1a9b      	subs	r3, r3, r2
 8006dd0:	009b      	lsls	r3, r3, #2
 8006dd2:	440b      	add	r3, r1
 8006dd4:	334d      	adds	r3, #77	; 0x4d
 8006dd6:	2202      	movs	r2, #2
 8006dd8:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8006dda:	78fa      	ldrb	r2, [r7, #3]
 8006ddc:	6879      	ldr	r1, [r7, #4]
 8006dde:	4613      	mov	r3, r2
 8006de0:	011b      	lsls	r3, r3, #4
 8006de2:	1a9b      	subs	r3, r3, r2
 8006de4:	009b      	lsls	r3, r3, #2
 8006de6:	440b      	add	r3, r1
 8006de8:	331b      	adds	r3, #27
 8006dea:	781b      	ldrb	r3, [r3, #0]
 8006dec:	2b01      	cmp	r3, #1
 8006dee:	f040 8107 	bne.w	8007000 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8006df2:	78fa      	ldrb	r2, [r7, #3]
 8006df4:	6879      	ldr	r1, [r7, #4]
 8006df6:	4613      	mov	r3, r2
 8006df8:	011b      	lsls	r3, r3, #4
 8006dfa:	1a9b      	subs	r3, r3, r2
 8006dfc:	009b      	lsls	r3, r3, #2
 8006dfe:	440b      	add	r3, r1
 8006e00:	334c      	adds	r3, #76	; 0x4c
 8006e02:	2202      	movs	r2, #2
 8006e04:	701a      	strb	r2, [r3, #0]
 8006e06:	e0fb      	b.n	8007000 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8006e08:	78fa      	ldrb	r2, [r7, #3]
 8006e0a:	6879      	ldr	r1, [r7, #4]
 8006e0c:	4613      	mov	r3, r2
 8006e0e:	011b      	lsls	r3, r3, #4
 8006e10:	1a9b      	subs	r3, r3, r2
 8006e12:	009b      	lsls	r3, r3, #2
 8006e14:	440b      	add	r3, r1
 8006e16:	334d      	adds	r3, #77	; 0x4d
 8006e18:	781b      	ldrb	r3, [r3, #0]
 8006e1a:	2b04      	cmp	r3, #4
 8006e1c:	d13a      	bne.n	8006e94 <HCD_HC_OUT_IRQHandler+0x7b4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006e1e:	78fa      	ldrb	r2, [r7, #3]
 8006e20:	6879      	ldr	r1, [r7, #4]
 8006e22:	4613      	mov	r3, r2
 8006e24:	011b      	lsls	r3, r3, #4
 8006e26:	1a9b      	subs	r3, r3, r2
 8006e28:	009b      	lsls	r3, r3, #2
 8006e2a:	440b      	add	r3, r1
 8006e2c:	334d      	adds	r3, #77	; 0x4d
 8006e2e:	2202      	movs	r2, #2
 8006e30:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8006e32:	78fa      	ldrb	r2, [r7, #3]
 8006e34:	6879      	ldr	r1, [r7, #4]
 8006e36:	4613      	mov	r3, r2
 8006e38:	011b      	lsls	r3, r3, #4
 8006e3a:	1a9b      	subs	r3, r3, r2
 8006e3c:	009b      	lsls	r3, r3, #2
 8006e3e:	440b      	add	r3, r1
 8006e40:	334c      	adds	r3, #76	; 0x4c
 8006e42:	2202      	movs	r2, #2
 8006e44:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8006e46:	78fa      	ldrb	r2, [r7, #3]
 8006e48:	6879      	ldr	r1, [r7, #4]
 8006e4a:	4613      	mov	r3, r2
 8006e4c:	011b      	lsls	r3, r3, #4
 8006e4e:	1a9b      	subs	r3, r3, r2
 8006e50:	009b      	lsls	r3, r3, #2
 8006e52:	440b      	add	r3, r1
 8006e54:	331b      	adds	r3, #27
 8006e56:	781b      	ldrb	r3, [r3, #0]
 8006e58:	2b01      	cmp	r3, #1
 8006e5a:	f040 80d1 	bne.w	8007000 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8006e5e:	78fa      	ldrb	r2, [r7, #3]
 8006e60:	6879      	ldr	r1, [r7, #4]
 8006e62:	4613      	mov	r3, r2
 8006e64:	011b      	lsls	r3, r3, #4
 8006e66:	1a9b      	subs	r3, r3, r2
 8006e68:	009b      	lsls	r3, r3, #2
 8006e6a:	440b      	add	r3, r1
 8006e6c:	331b      	adds	r3, #27
 8006e6e:	2200      	movs	r2, #0
 8006e70:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8006e72:	78fb      	ldrb	r3, [r7, #3]
 8006e74:	015a      	lsls	r2, r3, #5
 8006e76:	693b      	ldr	r3, [r7, #16]
 8006e78:	4413      	add	r3, r2
 8006e7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e7e:	685b      	ldr	r3, [r3, #4]
 8006e80:	78fa      	ldrb	r2, [r7, #3]
 8006e82:	0151      	lsls	r1, r2, #5
 8006e84:	693a      	ldr	r2, [r7, #16]
 8006e86:	440a      	add	r2, r1
 8006e88:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006e8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006e90:	6053      	str	r3, [r2, #4]
 8006e92:	e0b5      	b.n	8007000 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8006e94:	78fa      	ldrb	r2, [r7, #3]
 8006e96:	6879      	ldr	r1, [r7, #4]
 8006e98:	4613      	mov	r3, r2
 8006e9a:	011b      	lsls	r3, r3, #4
 8006e9c:	1a9b      	subs	r3, r3, r2
 8006e9e:	009b      	lsls	r3, r3, #2
 8006ea0:	440b      	add	r3, r1
 8006ea2:	334d      	adds	r3, #77	; 0x4d
 8006ea4:	781b      	ldrb	r3, [r3, #0]
 8006ea6:	2b05      	cmp	r3, #5
 8006ea8:	d114      	bne.n	8006ed4 <HCD_HC_OUT_IRQHandler+0x7f4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006eaa:	78fa      	ldrb	r2, [r7, #3]
 8006eac:	6879      	ldr	r1, [r7, #4]
 8006eae:	4613      	mov	r3, r2
 8006eb0:	011b      	lsls	r3, r3, #4
 8006eb2:	1a9b      	subs	r3, r3, r2
 8006eb4:	009b      	lsls	r3, r3, #2
 8006eb6:	440b      	add	r3, r1
 8006eb8:	334d      	adds	r3, #77	; 0x4d
 8006eba:	2202      	movs	r2, #2
 8006ebc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8006ebe:	78fa      	ldrb	r2, [r7, #3]
 8006ec0:	6879      	ldr	r1, [r7, #4]
 8006ec2:	4613      	mov	r3, r2
 8006ec4:	011b      	lsls	r3, r3, #4
 8006ec6:	1a9b      	subs	r3, r3, r2
 8006ec8:	009b      	lsls	r3, r3, #2
 8006eca:	440b      	add	r3, r1
 8006ecc:	334c      	adds	r3, #76	; 0x4c
 8006ece:	2202      	movs	r2, #2
 8006ed0:	701a      	strb	r2, [r3, #0]
 8006ed2:	e095      	b.n	8007000 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8006ed4:	78fa      	ldrb	r2, [r7, #3]
 8006ed6:	6879      	ldr	r1, [r7, #4]
 8006ed8:	4613      	mov	r3, r2
 8006eda:	011b      	lsls	r3, r3, #4
 8006edc:	1a9b      	subs	r3, r3, r2
 8006ede:	009b      	lsls	r3, r3, #2
 8006ee0:	440b      	add	r3, r1
 8006ee2:	334d      	adds	r3, #77	; 0x4d
 8006ee4:	781b      	ldrb	r3, [r3, #0]
 8006ee6:	2b06      	cmp	r3, #6
 8006ee8:	d114      	bne.n	8006f14 <HCD_HC_OUT_IRQHandler+0x834>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006eea:	78fa      	ldrb	r2, [r7, #3]
 8006eec:	6879      	ldr	r1, [r7, #4]
 8006eee:	4613      	mov	r3, r2
 8006ef0:	011b      	lsls	r3, r3, #4
 8006ef2:	1a9b      	subs	r3, r3, r2
 8006ef4:	009b      	lsls	r3, r3, #2
 8006ef6:	440b      	add	r3, r1
 8006ef8:	334d      	adds	r3, #77	; 0x4d
 8006efa:	2202      	movs	r2, #2
 8006efc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8006efe:	78fa      	ldrb	r2, [r7, #3]
 8006f00:	6879      	ldr	r1, [r7, #4]
 8006f02:	4613      	mov	r3, r2
 8006f04:	011b      	lsls	r3, r3, #4
 8006f06:	1a9b      	subs	r3, r3, r2
 8006f08:	009b      	lsls	r3, r3, #2
 8006f0a:	440b      	add	r3, r1
 8006f0c:	334c      	adds	r3, #76	; 0x4c
 8006f0e:	2205      	movs	r2, #5
 8006f10:	701a      	strb	r2, [r3, #0]
 8006f12:	e075      	b.n	8007000 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8006f14:	78fa      	ldrb	r2, [r7, #3]
 8006f16:	6879      	ldr	r1, [r7, #4]
 8006f18:	4613      	mov	r3, r2
 8006f1a:	011b      	lsls	r3, r3, #4
 8006f1c:	1a9b      	subs	r3, r3, r2
 8006f1e:	009b      	lsls	r3, r3, #2
 8006f20:	440b      	add	r3, r1
 8006f22:	334d      	adds	r3, #77	; 0x4d
 8006f24:	781b      	ldrb	r3, [r3, #0]
 8006f26:	2b07      	cmp	r3, #7
 8006f28:	d00a      	beq.n	8006f40 <HCD_HC_OUT_IRQHandler+0x860>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8006f2a:	78fa      	ldrb	r2, [r7, #3]
 8006f2c:	6879      	ldr	r1, [r7, #4]
 8006f2e:	4613      	mov	r3, r2
 8006f30:	011b      	lsls	r3, r3, #4
 8006f32:	1a9b      	subs	r3, r3, r2
 8006f34:	009b      	lsls	r3, r3, #2
 8006f36:	440b      	add	r3, r1
 8006f38:	334d      	adds	r3, #77	; 0x4d
 8006f3a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8006f3c:	2b09      	cmp	r3, #9
 8006f3e:	d170      	bne.n	8007022 <HCD_HC_OUT_IRQHandler+0x942>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006f40:	78fa      	ldrb	r2, [r7, #3]
 8006f42:	6879      	ldr	r1, [r7, #4]
 8006f44:	4613      	mov	r3, r2
 8006f46:	011b      	lsls	r3, r3, #4
 8006f48:	1a9b      	subs	r3, r3, r2
 8006f4a:	009b      	lsls	r3, r3, #2
 8006f4c:	440b      	add	r3, r1
 8006f4e:	334d      	adds	r3, #77	; 0x4d
 8006f50:	2202      	movs	r2, #2
 8006f52:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8006f54:	78fa      	ldrb	r2, [r7, #3]
 8006f56:	6879      	ldr	r1, [r7, #4]
 8006f58:	4613      	mov	r3, r2
 8006f5a:	011b      	lsls	r3, r3, #4
 8006f5c:	1a9b      	subs	r3, r3, r2
 8006f5e:	009b      	lsls	r3, r3, #2
 8006f60:	440b      	add	r3, r1
 8006f62:	3344      	adds	r3, #68	; 0x44
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	1c59      	adds	r1, r3, #1
 8006f68:	6878      	ldr	r0, [r7, #4]
 8006f6a:	4613      	mov	r3, r2
 8006f6c:	011b      	lsls	r3, r3, #4
 8006f6e:	1a9b      	subs	r3, r3, r2
 8006f70:	009b      	lsls	r3, r3, #2
 8006f72:	4403      	add	r3, r0
 8006f74:	3344      	adds	r3, #68	; 0x44
 8006f76:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8006f78:	78fa      	ldrb	r2, [r7, #3]
 8006f7a:	6879      	ldr	r1, [r7, #4]
 8006f7c:	4613      	mov	r3, r2
 8006f7e:	011b      	lsls	r3, r3, #4
 8006f80:	1a9b      	subs	r3, r3, r2
 8006f82:	009b      	lsls	r3, r3, #2
 8006f84:	440b      	add	r3, r1
 8006f86:	3344      	adds	r3, #68	; 0x44
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	2b02      	cmp	r3, #2
 8006f8c:	d914      	bls.n	8006fb8 <HCD_HC_OUT_IRQHandler+0x8d8>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8006f8e:	78fa      	ldrb	r2, [r7, #3]
 8006f90:	6879      	ldr	r1, [r7, #4]
 8006f92:	4613      	mov	r3, r2
 8006f94:	011b      	lsls	r3, r3, #4
 8006f96:	1a9b      	subs	r3, r3, r2
 8006f98:	009b      	lsls	r3, r3, #2
 8006f9a:	440b      	add	r3, r1
 8006f9c:	3344      	adds	r3, #68	; 0x44
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8006fa2:	78fa      	ldrb	r2, [r7, #3]
 8006fa4:	6879      	ldr	r1, [r7, #4]
 8006fa6:	4613      	mov	r3, r2
 8006fa8:	011b      	lsls	r3, r3, #4
 8006faa:	1a9b      	subs	r3, r3, r2
 8006fac:	009b      	lsls	r3, r3, #2
 8006fae:	440b      	add	r3, r1
 8006fb0:	334c      	adds	r3, #76	; 0x4c
 8006fb2:	2204      	movs	r2, #4
 8006fb4:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8006fb6:	e022      	b.n	8006ffe <HCD_HC_OUT_IRQHandler+0x91e>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8006fb8:	78fa      	ldrb	r2, [r7, #3]
 8006fba:	6879      	ldr	r1, [r7, #4]
 8006fbc:	4613      	mov	r3, r2
 8006fbe:	011b      	lsls	r3, r3, #4
 8006fc0:	1a9b      	subs	r3, r3, r2
 8006fc2:	009b      	lsls	r3, r3, #2
 8006fc4:	440b      	add	r3, r1
 8006fc6:	334c      	adds	r3, #76	; 0x4c
 8006fc8:	2202      	movs	r2, #2
 8006fca:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8006fcc:	78fb      	ldrb	r3, [r7, #3]
 8006fce:	015a      	lsls	r2, r3, #5
 8006fd0:	693b      	ldr	r3, [r7, #16]
 8006fd2:	4413      	add	r3, r2
 8006fd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006fe2:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006fea:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8006fec:	78fb      	ldrb	r3, [r7, #3]
 8006fee:	015a      	lsls	r2, r3, #5
 8006ff0:	693b      	ldr	r3, [r7, #16]
 8006ff2:	4413      	add	r3, r2
 8006ff4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ff8:	461a      	mov	r2, r3
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8006ffe:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8007000:	78fa      	ldrb	r2, [r7, #3]
 8007002:	6879      	ldr	r1, [r7, #4]
 8007004:	4613      	mov	r3, r2
 8007006:	011b      	lsls	r3, r3, #4
 8007008:	1a9b      	subs	r3, r3, r2
 800700a:	009b      	lsls	r3, r3, #2
 800700c:	440b      	add	r3, r1
 800700e:	334c      	adds	r3, #76	; 0x4c
 8007010:	781a      	ldrb	r2, [r3, #0]
 8007012:	78fb      	ldrb	r3, [r7, #3]
 8007014:	4619      	mov	r1, r3
 8007016:	6878      	ldr	r0, [r7, #4]
 8007018:	f008 f90c 	bl	800f234 <HAL_HCD_HC_NotifyURBChange_Callback>
 800701c:	e002      	b.n	8007024 <HCD_HC_OUT_IRQHandler+0x944>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 800701e:	bf00      	nop
 8007020:	e000      	b.n	8007024 <HCD_HC_OUT_IRQHandler+0x944>
      return;
 8007022:	bf00      	nop
  }
}
 8007024:	3718      	adds	r7, #24
 8007026:	46bd      	mov	sp, r7
 8007028:	bd80      	pop	{r7, pc}

0800702a <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800702a:	b580      	push	{r7, lr}
 800702c:	b08a      	sub	sp, #40	; 0x28
 800702e:	af00      	add	r7, sp, #0
 8007030:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800703a:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	6a1b      	ldr	r3, [r3, #32]
 8007042:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8007044:	69fb      	ldr	r3, [r7, #28]
 8007046:	f003 030f 	and.w	r3, r3, #15
 800704a:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800704c:	69fb      	ldr	r3, [r7, #28]
 800704e:	0c5b      	lsrs	r3, r3, #17
 8007050:	f003 030f 	and.w	r3, r3, #15
 8007054:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007056:	69fb      	ldr	r3, [r7, #28]
 8007058:	091b      	lsrs	r3, r3, #4
 800705a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800705e:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8007060:	697b      	ldr	r3, [r7, #20]
 8007062:	2b02      	cmp	r3, #2
 8007064:	d004      	beq.n	8007070 <HCD_RXQLVL_IRQHandler+0x46>
 8007066:	697b      	ldr	r3, [r7, #20]
 8007068:	2b05      	cmp	r3, #5
 800706a:	f000 80b6 	beq.w	80071da <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800706e:	e0b7      	b.n	80071e0 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8007070:	693b      	ldr	r3, [r7, #16]
 8007072:	2b00      	cmp	r3, #0
 8007074:	f000 80b3 	beq.w	80071de <HCD_RXQLVL_IRQHandler+0x1b4>
 8007078:	6879      	ldr	r1, [r7, #4]
 800707a:	69ba      	ldr	r2, [r7, #24]
 800707c:	4613      	mov	r3, r2
 800707e:	011b      	lsls	r3, r3, #4
 8007080:	1a9b      	subs	r3, r3, r2
 8007082:	009b      	lsls	r3, r3, #2
 8007084:	440b      	add	r3, r1
 8007086:	332c      	adds	r3, #44	; 0x2c
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	2b00      	cmp	r3, #0
 800708c:	f000 80a7 	beq.w	80071de <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8007090:	6879      	ldr	r1, [r7, #4]
 8007092:	69ba      	ldr	r2, [r7, #24]
 8007094:	4613      	mov	r3, r2
 8007096:	011b      	lsls	r3, r3, #4
 8007098:	1a9b      	subs	r3, r3, r2
 800709a:	009b      	lsls	r3, r3, #2
 800709c:	440b      	add	r3, r1
 800709e:	3338      	adds	r3, #56	; 0x38
 80070a0:	681a      	ldr	r2, [r3, #0]
 80070a2:	693b      	ldr	r3, [r7, #16]
 80070a4:	18d1      	adds	r1, r2, r3
 80070a6:	6878      	ldr	r0, [r7, #4]
 80070a8:	69ba      	ldr	r2, [r7, #24]
 80070aa:	4613      	mov	r3, r2
 80070ac:	011b      	lsls	r3, r3, #4
 80070ae:	1a9b      	subs	r3, r3, r2
 80070b0:	009b      	lsls	r3, r3, #2
 80070b2:	4403      	add	r3, r0
 80070b4:	3334      	adds	r3, #52	; 0x34
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	4299      	cmp	r1, r3
 80070ba:	f200 8083 	bhi.w	80071c4 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	6818      	ldr	r0, [r3, #0]
 80070c2:	6879      	ldr	r1, [r7, #4]
 80070c4:	69ba      	ldr	r2, [r7, #24]
 80070c6:	4613      	mov	r3, r2
 80070c8:	011b      	lsls	r3, r3, #4
 80070ca:	1a9b      	subs	r3, r3, r2
 80070cc:	009b      	lsls	r3, r3, #2
 80070ce:	440b      	add	r3, r1
 80070d0:	332c      	adds	r3, #44	; 0x2c
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	693a      	ldr	r2, [r7, #16]
 80070d6:	b292      	uxth	r2, r2
 80070d8:	4619      	mov	r1, r3
 80070da:	f004 ff41 	bl	800bf60 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 80070de:	6879      	ldr	r1, [r7, #4]
 80070e0:	69ba      	ldr	r2, [r7, #24]
 80070e2:	4613      	mov	r3, r2
 80070e4:	011b      	lsls	r3, r3, #4
 80070e6:	1a9b      	subs	r3, r3, r2
 80070e8:	009b      	lsls	r3, r3, #2
 80070ea:	440b      	add	r3, r1
 80070ec:	332c      	adds	r3, #44	; 0x2c
 80070ee:	681a      	ldr	r2, [r3, #0]
 80070f0:	693b      	ldr	r3, [r7, #16]
 80070f2:	18d1      	adds	r1, r2, r3
 80070f4:	6878      	ldr	r0, [r7, #4]
 80070f6:	69ba      	ldr	r2, [r7, #24]
 80070f8:	4613      	mov	r3, r2
 80070fa:	011b      	lsls	r3, r3, #4
 80070fc:	1a9b      	subs	r3, r3, r2
 80070fe:	009b      	lsls	r3, r3, #2
 8007100:	4403      	add	r3, r0
 8007102:	332c      	adds	r3, #44	; 0x2c
 8007104:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8007106:	6879      	ldr	r1, [r7, #4]
 8007108:	69ba      	ldr	r2, [r7, #24]
 800710a:	4613      	mov	r3, r2
 800710c:	011b      	lsls	r3, r3, #4
 800710e:	1a9b      	subs	r3, r3, r2
 8007110:	009b      	lsls	r3, r3, #2
 8007112:	440b      	add	r3, r1
 8007114:	3338      	adds	r3, #56	; 0x38
 8007116:	681a      	ldr	r2, [r3, #0]
 8007118:	693b      	ldr	r3, [r7, #16]
 800711a:	18d1      	adds	r1, r2, r3
 800711c:	6878      	ldr	r0, [r7, #4]
 800711e:	69ba      	ldr	r2, [r7, #24]
 8007120:	4613      	mov	r3, r2
 8007122:	011b      	lsls	r3, r3, #4
 8007124:	1a9b      	subs	r3, r3, r2
 8007126:	009b      	lsls	r3, r3, #2
 8007128:	4403      	add	r3, r0
 800712a:	3338      	adds	r3, #56	; 0x38
 800712c:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800712e:	69bb      	ldr	r3, [r7, #24]
 8007130:	015a      	lsls	r2, r3, #5
 8007132:	6a3b      	ldr	r3, [r7, #32]
 8007134:	4413      	add	r3, r2
 8007136:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800713a:	691b      	ldr	r3, [r3, #16]
 800713c:	0cdb      	lsrs	r3, r3, #19
 800713e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007142:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8007144:	6879      	ldr	r1, [r7, #4]
 8007146:	69ba      	ldr	r2, [r7, #24]
 8007148:	4613      	mov	r3, r2
 800714a:	011b      	lsls	r3, r3, #4
 800714c:	1a9b      	subs	r3, r3, r2
 800714e:	009b      	lsls	r3, r3, #2
 8007150:	440b      	add	r3, r1
 8007152:	3328      	adds	r3, #40	; 0x28
 8007154:	881b      	ldrh	r3, [r3, #0]
 8007156:	461a      	mov	r2, r3
 8007158:	693b      	ldr	r3, [r7, #16]
 800715a:	4293      	cmp	r3, r2
 800715c:	d13f      	bne.n	80071de <HCD_RXQLVL_IRQHandler+0x1b4>
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d03c      	beq.n	80071de <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8007164:	69bb      	ldr	r3, [r7, #24]
 8007166:	015a      	lsls	r2, r3, #5
 8007168:	6a3b      	ldr	r3, [r7, #32]
 800716a:	4413      	add	r3, r2
 800716c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007174:	68bb      	ldr	r3, [r7, #8]
 8007176:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800717a:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800717c:	68bb      	ldr	r3, [r7, #8]
 800717e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007182:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8007184:	69bb      	ldr	r3, [r7, #24]
 8007186:	015a      	lsls	r2, r3, #5
 8007188:	6a3b      	ldr	r3, [r7, #32]
 800718a:	4413      	add	r3, r2
 800718c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007190:	461a      	mov	r2, r3
 8007192:	68bb      	ldr	r3, [r7, #8]
 8007194:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8007196:	6879      	ldr	r1, [r7, #4]
 8007198:	69ba      	ldr	r2, [r7, #24]
 800719a:	4613      	mov	r3, r2
 800719c:	011b      	lsls	r3, r3, #4
 800719e:	1a9b      	subs	r3, r3, r2
 80071a0:	009b      	lsls	r3, r3, #2
 80071a2:	440b      	add	r3, r1
 80071a4:	333c      	adds	r3, #60	; 0x3c
 80071a6:	781b      	ldrb	r3, [r3, #0]
 80071a8:	f083 0301 	eor.w	r3, r3, #1
 80071ac:	b2d8      	uxtb	r0, r3
 80071ae:	6879      	ldr	r1, [r7, #4]
 80071b0:	69ba      	ldr	r2, [r7, #24]
 80071b2:	4613      	mov	r3, r2
 80071b4:	011b      	lsls	r3, r3, #4
 80071b6:	1a9b      	subs	r3, r3, r2
 80071b8:	009b      	lsls	r3, r3, #2
 80071ba:	440b      	add	r3, r1
 80071bc:	333c      	adds	r3, #60	; 0x3c
 80071be:	4602      	mov	r2, r0
 80071c0:	701a      	strb	r2, [r3, #0]
      break;
 80071c2:	e00c      	b.n	80071de <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 80071c4:	6879      	ldr	r1, [r7, #4]
 80071c6:	69ba      	ldr	r2, [r7, #24]
 80071c8:	4613      	mov	r3, r2
 80071ca:	011b      	lsls	r3, r3, #4
 80071cc:	1a9b      	subs	r3, r3, r2
 80071ce:	009b      	lsls	r3, r3, #2
 80071d0:	440b      	add	r3, r1
 80071d2:	334c      	adds	r3, #76	; 0x4c
 80071d4:	2204      	movs	r2, #4
 80071d6:	701a      	strb	r2, [r3, #0]
      break;
 80071d8:	e001      	b.n	80071de <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 80071da:	bf00      	nop
 80071dc:	e000      	b.n	80071e0 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 80071de:	bf00      	nop
  }
}
 80071e0:	bf00      	nop
 80071e2:	3728      	adds	r7, #40	; 0x28
 80071e4:	46bd      	mov	sp, r7
 80071e6:	bd80      	pop	{r7, pc}

080071e8 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b086      	sub	sp, #24
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071f6:	697b      	ldr	r3, [r7, #20]
 80071f8:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80071fa:	693b      	ldr	r3, [r7, #16]
 80071fc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8007204:	693b      	ldr	r3, [r7, #16]
 8007206:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800720e:	68bb      	ldr	r3, [r7, #8]
 8007210:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8007214:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	f003 0302 	and.w	r3, r3, #2
 800721c:	2b02      	cmp	r3, #2
 800721e:	d10b      	bne.n	8007238 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	f003 0301 	and.w	r3, r3, #1
 8007226:	2b01      	cmp	r3, #1
 8007228:	d102      	bne.n	8007230 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800722a:	6878      	ldr	r0, [r7, #4]
 800722c:	f007 ffe6 	bl	800f1fc <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8007230:	68bb      	ldr	r3, [r7, #8]
 8007232:	f043 0302 	orr.w	r3, r3, #2
 8007236:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	f003 0308 	and.w	r3, r3, #8
 800723e:	2b08      	cmp	r3, #8
 8007240:	d132      	bne.n	80072a8 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8007242:	68bb      	ldr	r3, [r7, #8]
 8007244:	f043 0308 	orr.w	r3, r3, #8
 8007248:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	f003 0304 	and.w	r3, r3, #4
 8007250:	2b04      	cmp	r3, #4
 8007252:	d126      	bne.n	80072a2 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	7a5b      	ldrb	r3, [r3, #9]
 8007258:	2b02      	cmp	r3, #2
 800725a:	d113      	bne.n	8007284 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8007262:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007266:	d106      	bne.n	8007276 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	2102      	movs	r1, #2
 800726e:	4618      	mov	r0, r3
 8007270:	f004 fffa 	bl	800c268 <USB_InitFSLSPClkSel>
 8007274:	e011      	b.n	800729a <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	2101      	movs	r1, #1
 800727c:	4618      	mov	r0, r3
 800727e:	f004 fff3 	bl	800c268 <USB_InitFSLSPClkSel>
 8007282:	e00a      	b.n	800729a <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	79db      	ldrb	r3, [r3, #7]
 8007288:	2b01      	cmp	r3, #1
 800728a:	d106      	bne.n	800729a <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 800728c:	693b      	ldr	r3, [r7, #16]
 800728e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007292:	461a      	mov	r2, r3
 8007294:	f64e 2360 	movw	r3, #60000	; 0xea60
 8007298:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800729a:	6878      	ldr	r0, [r7, #4]
 800729c:	f007 ffd8 	bl	800f250 <HAL_HCD_PortEnabled_Callback>
 80072a0:	e002      	b.n	80072a8 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80072a2:	6878      	ldr	r0, [r7, #4]
 80072a4:	f007 ffe2 	bl	800f26c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	f003 0320 	and.w	r3, r3, #32
 80072ae:	2b20      	cmp	r3, #32
 80072b0:	d103      	bne.n	80072ba <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80072b2:	68bb      	ldr	r3, [r7, #8]
 80072b4:	f043 0320 	orr.w	r3, r3, #32
 80072b8:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80072ba:	693b      	ldr	r3, [r7, #16]
 80072bc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80072c0:	461a      	mov	r2, r3
 80072c2:	68bb      	ldr	r3, [r7, #8]
 80072c4:	6013      	str	r3, [r2, #0]
}
 80072c6:	bf00      	nop
 80072c8:	3718      	adds	r7, #24
 80072ca:	46bd      	mov	sp, r7
 80072cc:	bd80      	pop	{r7, pc}
	...

080072d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b084      	sub	sp, #16
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d101      	bne.n	80072e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80072de:	2301      	movs	r3, #1
 80072e0:	e12b      	b.n	800753a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80072e8:	b2db      	uxtb	r3, r3
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d106      	bne.n	80072fc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2200      	movs	r2, #0
 80072f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80072f6:	6878      	ldr	r0, [r7, #4]
 80072f8:	f7fc fbb6 	bl	8003a68 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2224      	movs	r2, #36	; 0x24
 8007300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	681a      	ldr	r2, [r3, #0]
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	f022 0201 	bic.w	r2, r2, #1
 8007312:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	681a      	ldr	r2, [r3, #0]
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007322:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	681a      	ldr	r2, [r3, #0]
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007332:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007334:	f001 fd7c 	bl	8008e30 <HAL_RCC_GetPCLK1Freq>
 8007338:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	685b      	ldr	r3, [r3, #4]
 800733e:	4a81      	ldr	r2, [pc, #516]	; (8007544 <HAL_I2C_Init+0x274>)
 8007340:	4293      	cmp	r3, r2
 8007342:	d807      	bhi.n	8007354 <HAL_I2C_Init+0x84>
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	4a80      	ldr	r2, [pc, #512]	; (8007548 <HAL_I2C_Init+0x278>)
 8007348:	4293      	cmp	r3, r2
 800734a:	bf94      	ite	ls
 800734c:	2301      	movls	r3, #1
 800734e:	2300      	movhi	r3, #0
 8007350:	b2db      	uxtb	r3, r3
 8007352:	e006      	b.n	8007362 <HAL_I2C_Init+0x92>
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	4a7d      	ldr	r2, [pc, #500]	; (800754c <HAL_I2C_Init+0x27c>)
 8007358:	4293      	cmp	r3, r2
 800735a:	bf94      	ite	ls
 800735c:	2301      	movls	r3, #1
 800735e:	2300      	movhi	r3, #0
 8007360:	b2db      	uxtb	r3, r3
 8007362:	2b00      	cmp	r3, #0
 8007364:	d001      	beq.n	800736a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8007366:	2301      	movs	r3, #1
 8007368:	e0e7      	b.n	800753a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	4a78      	ldr	r2, [pc, #480]	; (8007550 <HAL_I2C_Init+0x280>)
 800736e:	fba2 2303 	umull	r2, r3, r2, r3
 8007372:	0c9b      	lsrs	r3, r3, #18
 8007374:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	685b      	ldr	r3, [r3, #4]
 800737c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	68ba      	ldr	r2, [r7, #8]
 8007386:	430a      	orrs	r2, r1
 8007388:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	6a1b      	ldr	r3, [r3, #32]
 8007390:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	685b      	ldr	r3, [r3, #4]
 8007398:	4a6a      	ldr	r2, [pc, #424]	; (8007544 <HAL_I2C_Init+0x274>)
 800739a:	4293      	cmp	r3, r2
 800739c:	d802      	bhi.n	80073a4 <HAL_I2C_Init+0xd4>
 800739e:	68bb      	ldr	r3, [r7, #8]
 80073a0:	3301      	adds	r3, #1
 80073a2:	e009      	b.n	80073b8 <HAL_I2C_Init+0xe8>
 80073a4:	68bb      	ldr	r3, [r7, #8]
 80073a6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80073aa:	fb02 f303 	mul.w	r3, r2, r3
 80073ae:	4a69      	ldr	r2, [pc, #420]	; (8007554 <HAL_I2C_Init+0x284>)
 80073b0:	fba2 2303 	umull	r2, r3, r2, r3
 80073b4:	099b      	lsrs	r3, r3, #6
 80073b6:	3301      	adds	r3, #1
 80073b8:	687a      	ldr	r2, [r7, #4]
 80073ba:	6812      	ldr	r2, [r2, #0]
 80073bc:	430b      	orrs	r3, r1
 80073be:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	69db      	ldr	r3, [r3, #28]
 80073c6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80073ca:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	685b      	ldr	r3, [r3, #4]
 80073d2:	495c      	ldr	r1, [pc, #368]	; (8007544 <HAL_I2C_Init+0x274>)
 80073d4:	428b      	cmp	r3, r1
 80073d6:	d819      	bhi.n	800740c <HAL_I2C_Init+0x13c>
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	1e59      	subs	r1, r3, #1
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	685b      	ldr	r3, [r3, #4]
 80073e0:	005b      	lsls	r3, r3, #1
 80073e2:	fbb1 f3f3 	udiv	r3, r1, r3
 80073e6:	1c59      	adds	r1, r3, #1
 80073e8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80073ec:	400b      	ands	r3, r1
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d00a      	beq.n	8007408 <HAL_I2C_Init+0x138>
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	1e59      	subs	r1, r3, #1
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	685b      	ldr	r3, [r3, #4]
 80073fa:	005b      	lsls	r3, r3, #1
 80073fc:	fbb1 f3f3 	udiv	r3, r1, r3
 8007400:	3301      	adds	r3, #1
 8007402:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007406:	e051      	b.n	80074ac <HAL_I2C_Init+0x1dc>
 8007408:	2304      	movs	r3, #4
 800740a:	e04f      	b.n	80074ac <HAL_I2C_Init+0x1dc>
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	689b      	ldr	r3, [r3, #8]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d111      	bne.n	8007438 <HAL_I2C_Init+0x168>
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	1e58      	subs	r0, r3, #1
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	6859      	ldr	r1, [r3, #4]
 800741c:	460b      	mov	r3, r1
 800741e:	005b      	lsls	r3, r3, #1
 8007420:	440b      	add	r3, r1
 8007422:	fbb0 f3f3 	udiv	r3, r0, r3
 8007426:	3301      	adds	r3, #1
 8007428:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800742c:	2b00      	cmp	r3, #0
 800742e:	bf0c      	ite	eq
 8007430:	2301      	moveq	r3, #1
 8007432:	2300      	movne	r3, #0
 8007434:	b2db      	uxtb	r3, r3
 8007436:	e012      	b.n	800745e <HAL_I2C_Init+0x18e>
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	1e58      	subs	r0, r3, #1
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	6859      	ldr	r1, [r3, #4]
 8007440:	460b      	mov	r3, r1
 8007442:	009b      	lsls	r3, r3, #2
 8007444:	440b      	add	r3, r1
 8007446:	0099      	lsls	r1, r3, #2
 8007448:	440b      	add	r3, r1
 800744a:	fbb0 f3f3 	udiv	r3, r0, r3
 800744e:	3301      	adds	r3, #1
 8007450:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007454:	2b00      	cmp	r3, #0
 8007456:	bf0c      	ite	eq
 8007458:	2301      	moveq	r3, #1
 800745a:	2300      	movne	r3, #0
 800745c:	b2db      	uxtb	r3, r3
 800745e:	2b00      	cmp	r3, #0
 8007460:	d001      	beq.n	8007466 <HAL_I2C_Init+0x196>
 8007462:	2301      	movs	r3, #1
 8007464:	e022      	b.n	80074ac <HAL_I2C_Init+0x1dc>
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	689b      	ldr	r3, [r3, #8]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d10e      	bne.n	800748c <HAL_I2C_Init+0x1bc>
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	1e58      	subs	r0, r3, #1
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	6859      	ldr	r1, [r3, #4]
 8007476:	460b      	mov	r3, r1
 8007478:	005b      	lsls	r3, r3, #1
 800747a:	440b      	add	r3, r1
 800747c:	fbb0 f3f3 	udiv	r3, r0, r3
 8007480:	3301      	adds	r3, #1
 8007482:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007486:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800748a:	e00f      	b.n	80074ac <HAL_I2C_Init+0x1dc>
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	1e58      	subs	r0, r3, #1
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	6859      	ldr	r1, [r3, #4]
 8007494:	460b      	mov	r3, r1
 8007496:	009b      	lsls	r3, r3, #2
 8007498:	440b      	add	r3, r1
 800749a:	0099      	lsls	r1, r3, #2
 800749c:	440b      	add	r3, r1
 800749e:	fbb0 f3f3 	udiv	r3, r0, r3
 80074a2:	3301      	adds	r3, #1
 80074a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80074a8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80074ac:	6879      	ldr	r1, [r7, #4]
 80074ae:	6809      	ldr	r1, [r1, #0]
 80074b0:	4313      	orrs	r3, r2
 80074b2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	69da      	ldr	r2, [r3, #28]
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	6a1b      	ldr	r3, [r3, #32]
 80074c6:	431a      	orrs	r2, r3
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	430a      	orrs	r2, r1
 80074ce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	689b      	ldr	r3, [r3, #8]
 80074d6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80074da:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80074de:	687a      	ldr	r2, [r7, #4]
 80074e0:	6911      	ldr	r1, [r2, #16]
 80074e2:	687a      	ldr	r2, [r7, #4]
 80074e4:	68d2      	ldr	r2, [r2, #12]
 80074e6:	4311      	orrs	r1, r2
 80074e8:	687a      	ldr	r2, [r7, #4]
 80074ea:	6812      	ldr	r2, [r2, #0]
 80074ec:	430b      	orrs	r3, r1
 80074ee:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	68db      	ldr	r3, [r3, #12]
 80074f6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	695a      	ldr	r2, [r3, #20]
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	699b      	ldr	r3, [r3, #24]
 8007502:	431a      	orrs	r2, r3
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	430a      	orrs	r2, r1
 800750a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	681a      	ldr	r2, [r3, #0]
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	f042 0201 	orr.w	r2, r2, #1
 800751a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2200      	movs	r2, #0
 8007520:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	2220      	movs	r2, #32
 8007526:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	2200      	movs	r2, #0
 800752e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2200      	movs	r2, #0
 8007534:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007538:	2300      	movs	r3, #0
}
 800753a:	4618      	mov	r0, r3
 800753c:	3710      	adds	r7, #16
 800753e:	46bd      	mov	sp, r7
 8007540:	bd80      	pop	{r7, pc}
 8007542:	bf00      	nop
 8007544:	000186a0 	.word	0x000186a0
 8007548:	001e847f 	.word	0x001e847f
 800754c:	003d08ff 	.word	0x003d08ff
 8007550:	431bde83 	.word	0x431bde83
 8007554:	10624dd3 	.word	0x10624dd3

08007558 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007558:	b580      	push	{r7, lr}
 800755a:	b088      	sub	sp, #32
 800755c:	af02      	add	r7, sp, #8
 800755e:	60f8      	str	r0, [r7, #12]
 8007560:	607a      	str	r2, [r7, #4]
 8007562:	461a      	mov	r2, r3
 8007564:	460b      	mov	r3, r1
 8007566:	817b      	strh	r3, [r7, #10]
 8007568:	4613      	mov	r3, r2
 800756a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800756c:	f7fc fe8a 	bl	8004284 <HAL_GetTick>
 8007570:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007578:	b2db      	uxtb	r3, r3
 800757a:	2b20      	cmp	r3, #32
 800757c:	f040 80e0 	bne.w	8007740 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007580:	697b      	ldr	r3, [r7, #20]
 8007582:	9300      	str	r3, [sp, #0]
 8007584:	2319      	movs	r3, #25
 8007586:	2201      	movs	r2, #1
 8007588:	4970      	ldr	r1, [pc, #448]	; (800774c <HAL_I2C_Master_Transmit+0x1f4>)
 800758a:	68f8      	ldr	r0, [r7, #12]
 800758c:	f001 f928 	bl	80087e0 <I2C_WaitOnFlagUntilTimeout>
 8007590:	4603      	mov	r3, r0
 8007592:	2b00      	cmp	r3, #0
 8007594:	d001      	beq.n	800759a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8007596:	2302      	movs	r3, #2
 8007598:	e0d3      	b.n	8007742 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80075a0:	2b01      	cmp	r3, #1
 80075a2:	d101      	bne.n	80075a8 <HAL_I2C_Master_Transmit+0x50>
 80075a4:	2302      	movs	r3, #2
 80075a6:	e0cc      	b.n	8007742 <HAL_I2C_Master_Transmit+0x1ea>
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	2201      	movs	r2, #1
 80075ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	f003 0301 	and.w	r3, r3, #1
 80075ba:	2b01      	cmp	r3, #1
 80075bc:	d007      	beq.n	80075ce <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	681a      	ldr	r2, [r3, #0]
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	f042 0201 	orr.w	r2, r2, #1
 80075cc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	681a      	ldr	r2, [r3, #0]
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80075dc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	2221      	movs	r2, #33	; 0x21
 80075e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	2210      	movs	r2, #16
 80075ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	2200      	movs	r2, #0
 80075f2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	687a      	ldr	r2, [r7, #4]
 80075f8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	893a      	ldrh	r2, [r7, #8]
 80075fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007604:	b29a      	uxth	r2, r3
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	4a50      	ldr	r2, [pc, #320]	; (8007750 <HAL_I2C_Master_Transmit+0x1f8>)
 800760e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8007610:	8979      	ldrh	r1, [r7, #10]
 8007612:	697b      	ldr	r3, [r7, #20]
 8007614:	6a3a      	ldr	r2, [r7, #32]
 8007616:	68f8      	ldr	r0, [r7, #12]
 8007618:	f000 fe14 	bl	8008244 <I2C_MasterRequestWrite>
 800761c:	4603      	mov	r3, r0
 800761e:	2b00      	cmp	r3, #0
 8007620:	d001      	beq.n	8007626 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8007622:	2301      	movs	r3, #1
 8007624:	e08d      	b.n	8007742 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007626:	2300      	movs	r3, #0
 8007628:	613b      	str	r3, [r7, #16]
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	695b      	ldr	r3, [r3, #20]
 8007630:	613b      	str	r3, [r7, #16]
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	699b      	ldr	r3, [r3, #24]
 8007638:	613b      	str	r3, [r7, #16]
 800763a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800763c:	e066      	b.n	800770c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800763e:	697a      	ldr	r2, [r7, #20]
 8007640:	6a39      	ldr	r1, [r7, #32]
 8007642:	68f8      	ldr	r0, [r7, #12]
 8007644:	f001 f9e6 	bl	8008a14 <I2C_WaitOnTXEFlagUntilTimeout>
 8007648:	4603      	mov	r3, r0
 800764a:	2b00      	cmp	r3, #0
 800764c:	d00d      	beq.n	800766a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007652:	2b04      	cmp	r3, #4
 8007654:	d107      	bne.n	8007666 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	681a      	ldr	r2, [r3, #0]
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007664:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007666:	2301      	movs	r3, #1
 8007668:	e06b      	b.n	8007742 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800766e:	781a      	ldrb	r2, [r3, #0]
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800767a:	1c5a      	adds	r2, r3, #1
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007684:	b29b      	uxth	r3, r3
 8007686:	3b01      	subs	r3, #1
 8007688:	b29a      	uxth	r2, r3
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007692:	3b01      	subs	r3, #1
 8007694:	b29a      	uxth	r2, r3
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	695b      	ldr	r3, [r3, #20]
 80076a0:	f003 0304 	and.w	r3, r3, #4
 80076a4:	2b04      	cmp	r3, #4
 80076a6:	d11b      	bne.n	80076e0 <HAL_I2C_Master_Transmit+0x188>
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d017      	beq.n	80076e0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076b4:	781a      	ldrb	r2, [r3, #0]
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076c0:	1c5a      	adds	r2, r3, #1
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076ca:	b29b      	uxth	r3, r3
 80076cc:	3b01      	subs	r3, #1
 80076ce:	b29a      	uxth	r2, r3
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80076d8:	3b01      	subs	r3, #1
 80076da:	b29a      	uxth	r2, r3
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80076e0:	697a      	ldr	r2, [r7, #20]
 80076e2:	6a39      	ldr	r1, [r7, #32]
 80076e4:	68f8      	ldr	r0, [r7, #12]
 80076e6:	f001 f9dd 	bl	8008aa4 <I2C_WaitOnBTFFlagUntilTimeout>
 80076ea:	4603      	mov	r3, r0
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d00d      	beq.n	800770c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076f4:	2b04      	cmp	r3, #4
 80076f6:	d107      	bne.n	8007708 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	681a      	ldr	r2, [r3, #0]
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007706:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007708:	2301      	movs	r3, #1
 800770a:	e01a      	b.n	8007742 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007710:	2b00      	cmp	r3, #0
 8007712:	d194      	bne.n	800763e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	681a      	ldr	r2, [r3, #0]
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007722:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	2220      	movs	r2, #32
 8007728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	2200      	movs	r2, #0
 8007730:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	2200      	movs	r2, #0
 8007738:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800773c:	2300      	movs	r3, #0
 800773e:	e000      	b.n	8007742 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8007740:	2302      	movs	r3, #2
  }
}
 8007742:	4618      	mov	r0, r3
 8007744:	3718      	adds	r7, #24
 8007746:	46bd      	mov	sp, r7
 8007748:	bd80      	pop	{r7, pc}
 800774a:	bf00      	nop
 800774c:	00100002 	.word	0x00100002
 8007750:	ffff0000 	.word	0xffff0000

08007754 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007754:	b580      	push	{r7, lr}
 8007756:	b08c      	sub	sp, #48	; 0x30
 8007758:	af02      	add	r7, sp, #8
 800775a:	60f8      	str	r0, [r7, #12]
 800775c:	607a      	str	r2, [r7, #4]
 800775e:	461a      	mov	r2, r3
 8007760:	460b      	mov	r3, r1
 8007762:	817b      	strh	r3, [r7, #10]
 8007764:	4613      	mov	r3, r2
 8007766:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007768:	f7fc fd8c 	bl	8004284 <HAL_GetTick>
 800776c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007774:	b2db      	uxtb	r3, r3
 8007776:	2b20      	cmp	r3, #32
 8007778:	f040 8217 	bne.w	8007baa <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800777c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800777e:	9300      	str	r3, [sp, #0]
 8007780:	2319      	movs	r3, #25
 8007782:	2201      	movs	r2, #1
 8007784:	497c      	ldr	r1, [pc, #496]	; (8007978 <HAL_I2C_Master_Receive+0x224>)
 8007786:	68f8      	ldr	r0, [r7, #12]
 8007788:	f001 f82a 	bl	80087e0 <I2C_WaitOnFlagUntilTimeout>
 800778c:	4603      	mov	r3, r0
 800778e:	2b00      	cmp	r3, #0
 8007790:	d001      	beq.n	8007796 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8007792:	2302      	movs	r3, #2
 8007794:	e20a      	b.n	8007bac <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800779c:	2b01      	cmp	r3, #1
 800779e:	d101      	bne.n	80077a4 <HAL_I2C_Master_Receive+0x50>
 80077a0:	2302      	movs	r3, #2
 80077a2:	e203      	b.n	8007bac <HAL_I2C_Master_Receive+0x458>
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	2201      	movs	r2, #1
 80077a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	f003 0301 	and.w	r3, r3, #1
 80077b6:	2b01      	cmp	r3, #1
 80077b8:	d007      	beq.n	80077ca <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	681a      	ldr	r2, [r3, #0]
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	f042 0201 	orr.w	r2, r2, #1
 80077c8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	681a      	ldr	r2, [r3, #0]
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80077d8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	2222      	movs	r2, #34	; 0x22
 80077de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	2210      	movs	r2, #16
 80077e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	2200      	movs	r2, #0
 80077ee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	687a      	ldr	r2, [r7, #4]
 80077f4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	893a      	ldrh	r2, [r7, #8]
 80077fa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007800:	b29a      	uxth	r2, r3
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	4a5c      	ldr	r2, [pc, #368]	; (800797c <HAL_I2C_Master_Receive+0x228>)
 800780a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800780c:	8979      	ldrh	r1, [r7, #10]
 800780e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007810:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007812:	68f8      	ldr	r0, [r7, #12]
 8007814:	f000 fd98 	bl	8008348 <I2C_MasterRequestRead>
 8007818:	4603      	mov	r3, r0
 800781a:	2b00      	cmp	r3, #0
 800781c:	d001      	beq.n	8007822 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800781e:	2301      	movs	r3, #1
 8007820:	e1c4      	b.n	8007bac <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007826:	2b00      	cmp	r3, #0
 8007828:	d113      	bne.n	8007852 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800782a:	2300      	movs	r3, #0
 800782c:	623b      	str	r3, [r7, #32]
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	695b      	ldr	r3, [r3, #20]
 8007834:	623b      	str	r3, [r7, #32]
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	699b      	ldr	r3, [r3, #24]
 800783c:	623b      	str	r3, [r7, #32]
 800783e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	681a      	ldr	r2, [r3, #0]
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800784e:	601a      	str	r2, [r3, #0]
 8007850:	e198      	b.n	8007b84 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007856:	2b01      	cmp	r3, #1
 8007858:	d11b      	bne.n	8007892 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	681a      	ldr	r2, [r3, #0]
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007868:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800786a:	2300      	movs	r3, #0
 800786c:	61fb      	str	r3, [r7, #28]
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	695b      	ldr	r3, [r3, #20]
 8007874:	61fb      	str	r3, [r7, #28]
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	699b      	ldr	r3, [r3, #24]
 800787c:	61fb      	str	r3, [r7, #28]
 800787e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	681a      	ldr	r2, [r3, #0]
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800788e:	601a      	str	r2, [r3, #0]
 8007890:	e178      	b.n	8007b84 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007896:	2b02      	cmp	r3, #2
 8007898:	d11b      	bne.n	80078d2 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	681a      	ldr	r2, [r3, #0]
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80078a8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	681a      	ldr	r2, [r3, #0]
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80078b8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80078ba:	2300      	movs	r3, #0
 80078bc:	61bb      	str	r3, [r7, #24]
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	695b      	ldr	r3, [r3, #20]
 80078c4:	61bb      	str	r3, [r7, #24]
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	699b      	ldr	r3, [r3, #24]
 80078cc:	61bb      	str	r3, [r7, #24]
 80078ce:	69bb      	ldr	r3, [r7, #24]
 80078d0:	e158      	b.n	8007b84 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	681a      	ldr	r2, [r3, #0]
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80078e0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80078e2:	2300      	movs	r3, #0
 80078e4:	617b      	str	r3, [r7, #20]
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	695b      	ldr	r3, [r3, #20]
 80078ec:	617b      	str	r3, [r7, #20]
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	699b      	ldr	r3, [r3, #24]
 80078f4:	617b      	str	r3, [r7, #20]
 80078f6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80078f8:	e144      	b.n	8007b84 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80078fe:	2b03      	cmp	r3, #3
 8007900:	f200 80f1 	bhi.w	8007ae6 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007908:	2b01      	cmp	r3, #1
 800790a:	d123      	bne.n	8007954 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800790c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800790e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007910:	68f8      	ldr	r0, [r7, #12]
 8007912:	f001 f90f 	bl	8008b34 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007916:	4603      	mov	r3, r0
 8007918:	2b00      	cmp	r3, #0
 800791a:	d001      	beq.n	8007920 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800791c:	2301      	movs	r3, #1
 800791e:	e145      	b.n	8007bac <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	691a      	ldr	r2, [r3, #16]
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800792a:	b2d2      	uxtb	r2, r2
 800792c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007932:	1c5a      	adds	r2, r3, #1
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800793c:	3b01      	subs	r3, #1
 800793e:	b29a      	uxth	r2, r3
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007948:	b29b      	uxth	r3, r3
 800794a:	3b01      	subs	r3, #1
 800794c:	b29a      	uxth	r2, r3
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007952:	e117      	b.n	8007b84 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007958:	2b02      	cmp	r3, #2
 800795a:	d14e      	bne.n	80079fa <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800795c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800795e:	9300      	str	r3, [sp, #0]
 8007960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007962:	2200      	movs	r2, #0
 8007964:	4906      	ldr	r1, [pc, #24]	; (8007980 <HAL_I2C_Master_Receive+0x22c>)
 8007966:	68f8      	ldr	r0, [r7, #12]
 8007968:	f000 ff3a 	bl	80087e0 <I2C_WaitOnFlagUntilTimeout>
 800796c:	4603      	mov	r3, r0
 800796e:	2b00      	cmp	r3, #0
 8007970:	d008      	beq.n	8007984 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8007972:	2301      	movs	r3, #1
 8007974:	e11a      	b.n	8007bac <HAL_I2C_Master_Receive+0x458>
 8007976:	bf00      	nop
 8007978:	00100002 	.word	0x00100002
 800797c:	ffff0000 	.word	0xffff0000
 8007980:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	681a      	ldr	r2, [r3, #0]
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007992:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	691a      	ldr	r2, [r3, #16]
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800799e:	b2d2      	uxtb	r2, r2
 80079a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079a6:	1c5a      	adds	r2, r3, #1
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079b0:	3b01      	subs	r3, #1
 80079b2:	b29a      	uxth	r2, r3
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079bc:	b29b      	uxth	r3, r3
 80079be:	3b01      	subs	r3, #1
 80079c0:	b29a      	uxth	r2, r3
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	691a      	ldr	r2, [r3, #16]
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079d0:	b2d2      	uxtb	r2, r2
 80079d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079d8:	1c5a      	adds	r2, r3, #1
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079e2:	3b01      	subs	r3, #1
 80079e4:	b29a      	uxth	r2, r3
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079ee:	b29b      	uxth	r3, r3
 80079f0:	3b01      	subs	r3, #1
 80079f2:	b29a      	uxth	r2, r3
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80079f8:	e0c4      	b.n	8007b84 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80079fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079fc:	9300      	str	r3, [sp, #0]
 80079fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a00:	2200      	movs	r2, #0
 8007a02:	496c      	ldr	r1, [pc, #432]	; (8007bb4 <HAL_I2C_Master_Receive+0x460>)
 8007a04:	68f8      	ldr	r0, [r7, #12]
 8007a06:	f000 feeb 	bl	80087e0 <I2C_WaitOnFlagUntilTimeout>
 8007a0a:	4603      	mov	r3, r0
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d001      	beq.n	8007a14 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8007a10:	2301      	movs	r3, #1
 8007a12:	e0cb      	b.n	8007bac <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	681a      	ldr	r2, [r3, #0]
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007a22:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	691a      	ldr	r2, [r3, #16]
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a2e:	b2d2      	uxtb	r2, r2
 8007a30:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a36:	1c5a      	adds	r2, r3, #1
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a40:	3b01      	subs	r3, #1
 8007a42:	b29a      	uxth	r2, r3
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a4c:	b29b      	uxth	r3, r3
 8007a4e:	3b01      	subs	r3, #1
 8007a50:	b29a      	uxth	r2, r3
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a58:	9300      	str	r3, [sp, #0]
 8007a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	4955      	ldr	r1, [pc, #340]	; (8007bb4 <HAL_I2C_Master_Receive+0x460>)
 8007a60:	68f8      	ldr	r0, [r7, #12]
 8007a62:	f000 febd 	bl	80087e0 <I2C_WaitOnFlagUntilTimeout>
 8007a66:	4603      	mov	r3, r0
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d001      	beq.n	8007a70 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8007a6c:	2301      	movs	r3, #1
 8007a6e:	e09d      	b.n	8007bac <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	681a      	ldr	r2, [r3, #0]
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007a7e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	691a      	ldr	r2, [r3, #16]
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a8a:	b2d2      	uxtb	r2, r2
 8007a8c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a92:	1c5a      	adds	r2, r3, #1
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a9c:	3b01      	subs	r3, #1
 8007a9e:	b29a      	uxth	r2, r3
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007aa8:	b29b      	uxth	r3, r3
 8007aaa:	3b01      	subs	r3, #1
 8007aac:	b29a      	uxth	r2, r3
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	691a      	ldr	r2, [r3, #16]
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007abc:	b2d2      	uxtb	r2, r2
 8007abe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ac4:	1c5a      	adds	r2, r3, #1
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ace:	3b01      	subs	r3, #1
 8007ad0:	b29a      	uxth	r2, r3
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ada:	b29b      	uxth	r3, r3
 8007adc:	3b01      	subs	r3, #1
 8007ade:	b29a      	uxth	r2, r3
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007ae4:	e04e      	b.n	8007b84 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007ae6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ae8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007aea:	68f8      	ldr	r0, [r7, #12]
 8007aec:	f001 f822 	bl	8008b34 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007af0:	4603      	mov	r3, r0
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d001      	beq.n	8007afa <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8007af6:	2301      	movs	r3, #1
 8007af8:	e058      	b.n	8007bac <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	691a      	ldr	r2, [r3, #16]
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b04:	b2d2      	uxtb	r2, r2
 8007b06:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b0c:	1c5a      	adds	r2, r3, #1
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b16:	3b01      	subs	r3, #1
 8007b18:	b29a      	uxth	r2, r3
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b22:	b29b      	uxth	r3, r3
 8007b24:	3b01      	subs	r3, #1
 8007b26:	b29a      	uxth	r2, r3
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	695b      	ldr	r3, [r3, #20]
 8007b32:	f003 0304 	and.w	r3, r3, #4
 8007b36:	2b04      	cmp	r3, #4
 8007b38:	d124      	bne.n	8007b84 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b3e:	2b03      	cmp	r3, #3
 8007b40:	d107      	bne.n	8007b52 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	681a      	ldr	r2, [r3, #0]
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007b50:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	691a      	ldr	r2, [r3, #16]
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b5c:	b2d2      	uxtb	r2, r2
 8007b5e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b64:	1c5a      	adds	r2, r3, #1
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b6e:	3b01      	subs	r3, #1
 8007b70:	b29a      	uxth	r2, r3
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b7a:	b29b      	uxth	r3, r3
 8007b7c:	3b01      	subs	r3, #1
 8007b7e:	b29a      	uxth	r2, r3
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	f47f aeb6 	bne.w	80078fa <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	2220      	movs	r2, #32
 8007b92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	2200      	movs	r2, #0
 8007b9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	e000      	b.n	8007bac <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8007baa:	2302      	movs	r3, #2
  }
}
 8007bac:	4618      	mov	r0, r3
 8007bae:	3728      	adds	r7, #40	; 0x28
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	bd80      	pop	{r7, pc}
 8007bb4:	00010004 	.word	0x00010004

08007bb8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b088      	sub	sp, #32
 8007bbc:	af02      	add	r7, sp, #8
 8007bbe:	60f8      	str	r0, [r7, #12]
 8007bc0:	4608      	mov	r0, r1
 8007bc2:	4611      	mov	r1, r2
 8007bc4:	461a      	mov	r2, r3
 8007bc6:	4603      	mov	r3, r0
 8007bc8:	817b      	strh	r3, [r7, #10]
 8007bca:	460b      	mov	r3, r1
 8007bcc:	813b      	strh	r3, [r7, #8]
 8007bce:	4613      	mov	r3, r2
 8007bd0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007bd2:	f7fc fb57 	bl	8004284 <HAL_GetTick>
 8007bd6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007bde:	b2db      	uxtb	r3, r3
 8007be0:	2b20      	cmp	r3, #32
 8007be2:	f040 80d9 	bne.w	8007d98 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007be6:	697b      	ldr	r3, [r7, #20]
 8007be8:	9300      	str	r3, [sp, #0]
 8007bea:	2319      	movs	r3, #25
 8007bec:	2201      	movs	r2, #1
 8007bee:	496d      	ldr	r1, [pc, #436]	; (8007da4 <HAL_I2C_Mem_Write+0x1ec>)
 8007bf0:	68f8      	ldr	r0, [r7, #12]
 8007bf2:	f000 fdf5 	bl	80087e0 <I2C_WaitOnFlagUntilTimeout>
 8007bf6:	4603      	mov	r3, r0
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d001      	beq.n	8007c00 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8007bfc:	2302      	movs	r3, #2
 8007bfe:	e0cc      	b.n	8007d9a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c06:	2b01      	cmp	r3, #1
 8007c08:	d101      	bne.n	8007c0e <HAL_I2C_Mem_Write+0x56>
 8007c0a:	2302      	movs	r3, #2
 8007c0c:	e0c5      	b.n	8007d9a <HAL_I2C_Mem_Write+0x1e2>
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	2201      	movs	r2, #1
 8007c12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	f003 0301 	and.w	r3, r3, #1
 8007c20:	2b01      	cmp	r3, #1
 8007c22:	d007      	beq.n	8007c34 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	681a      	ldr	r2, [r3, #0]
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	f042 0201 	orr.w	r2, r2, #1
 8007c32:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	681a      	ldr	r2, [r3, #0]
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007c42:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	2221      	movs	r2, #33	; 0x21
 8007c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	2240      	movs	r2, #64	; 0x40
 8007c50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	2200      	movs	r2, #0
 8007c58:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	6a3a      	ldr	r2, [r7, #32]
 8007c5e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007c64:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c6a:	b29a      	uxth	r2, r3
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	4a4d      	ldr	r2, [pc, #308]	; (8007da8 <HAL_I2C_Mem_Write+0x1f0>)
 8007c74:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007c76:	88f8      	ldrh	r0, [r7, #6]
 8007c78:	893a      	ldrh	r2, [r7, #8]
 8007c7a:	8979      	ldrh	r1, [r7, #10]
 8007c7c:	697b      	ldr	r3, [r7, #20]
 8007c7e:	9301      	str	r3, [sp, #4]
 8007c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c82:	9300      	str	r3, [sp, #0]
 8007c84:	4603      	mov	r3, r0
 8007c86:	68f8      	ldr	r0, [r7, #12]
 8007c88:	f000 fc2c 	bl	80084e4 <I2C_RequestMemoryWrite>
 8007c8c:	4603      	mov	r3, r0
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d052      	beq.n	8007d38 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8007c92:	2301      	movs	r3, #1
 8007c94:	e081      	b.n	8007d9a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007c96:	697a      	ldr	r2, [r7, #20]
 8007c98:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007c9a:	68f8      	ldr	r0, [r7, #12]
 8007c9c:	f000 feba 	bl	8008a14 <I2C_WaitOnTXEFlagUntilTimeout>
 8007ca0:	4603      	mov	r3, r0
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d00d      	beq.n	8007cc2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007caa:	2b04      	cmp	r3, #4
 8007cac:	d107      	bne.n	8007cbe <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	681a      	ldr	r2, [r3, #0]
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007cbc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007cbe:	2301      	movs	r3, #1
 8007cc0:	e06b      	b.n	8007d9a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cc6:	781a      	ldrb	r2, [r3, #0]
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cd2:	1c5a      	adds	r2, r3, #1
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007cdc:	3b01      	subs	r3, #1
 8007cde:	b29a      	uxth	r2, r3
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ce8:	b29b      	uxth	r3, r3
 8007cea:	3b01      	subs	r3, #1
 8007cec:	b29a      	uxth	r2, r3
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	695b      	ldr	r3, [r3, #20]
 8007cf8:	f003 0304 	and.w	r3, r3, #4
 8007cfc:	2b04      	cmp	r3, #4
 8007cfe:	d11b      	bne.n	8007d38 <HAL_I2C_Mem_Write+0x180>
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d017      	beq.n	8007d38 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d0c:	781a      	ldrb	r2, [r3, #0]
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d18:	1c5a      	adds	r2, r3, #1
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d22:	3b01      	subs	r3, #1
 8007d24:	b29a      	uxth	r2, r3
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d2e:	b29b      	uxth	r3, r3
 8007d30:	3b01      	subs	r3, #1
 8007d32:	b29a      	uxth	r2, r3
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d1aa      	bne.n	8007c96 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007d40:	697a      	ldr	r2, [r7, #20]
 8007d42:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007d44:	68f8      	ldr	r0, [r7, #12]
 8007d46:	f000 fead 	bl	8008aa4 <I2C_WaitOnBTFFlagUntilTimeout>
 8007d4a:	4603      	mov	r3, r0
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d00d      	beq.n	8007d6c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d54:	2b04      	cmp	r3, #4
 8007d56:	d107      	bne.n	8007d68 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	681a      	ldr	r2, [r3, #0]
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007d66:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007d68:	2301      	movs	r3, #1
 8007d6a:	e016      	b.n	8007d9a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	681a      	ldr	r2, [r3, #0]
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007d7a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	2220      	movs	r2, #32
 8007d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	2200      	movs	r2, #0
 8007d88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	2200      	movs	r2, #0
 8007d90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007d94:	2300      	movs	r3, #0
 8007d96:	e000      	b.n	8007d9a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8007d98:	2302      	movs	r3, #2
  }
}
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	3718      	adds	r7, #24
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	bd80      	pop	{r7, pc}
 8007da2:	bf00      	nop
 8007da4:	00100002 	.word	0x00100002
 8007da8:	ffff0000 	.word	0xffff0000

08007dac <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007dac:	b580      	push	{r7, lr}
 8007dae:	b08c      	sub	sp, #48	; 0x30
 8007db0:	af02      	add	r7, sp, #8
 8007db2:	60f8      	str	r0, [r7, #12]
 8007db4:	4608      	mov	r0, r1
 8007db6:	4611      	mov	r1, r2
 8007db8:	461a      	mov	r2, r3
 8007dba:	4603      	mov	r3, r0
 8007dbc:	817b      	strh	r3, [r7, #10]
 8007dbe:	460b      	mov	r3, r1
 8007dc0:	813b      	strh	r3, [r7, #8]
 8007dc2:	4613      	mov	r3, r2
 8007dc4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007dc6:	f7fc fa5d 	bl	8004284 <HAL_GetTick>
 8007dca:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007dd2:	b2db      	uxtb	r3, r3
 8007dd4:	2b20      	cmp	r3, #32
 8007dd6:	f040 8214 	bne.w	8008202 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ddc:	9300      	str	r3, [sp, #0]
 8007dde:	2319      	movs	r3, #25
 8007de0:	2201      	movs	r2, #1
 8007de2:	497b      	ldr	r1, [pc, #492]	; (8007fd0 <HAL_I2C_Mem_Read+0x224>)
 8007de4:	68f8      	ldr	r0, [r7, #12]
 8007de6:	f000 fcfb 	bl	80087e0 <I2C_WaitOnFlagUntilTimeout>
 8007dea:	4603      	mov	r3, r0
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d001      	beq.n	8007df4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8007df0:	2302      	movs	r3, #2
 8007df2:	e207      	b.n	8008204 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007dfa:	2b01      	cmp	r3, #1
 8007dfc:	d101      	bne.n	8007e02 <HAL_I2C_Mem_Read+0x56>
 8007dfe:	2302      	movs	r3, #2
 8007e00:	e200      	b.n	8008204 <HAL_I2C_Mem_Read+0x458>
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	2201      	movs	r2, #1
 8007e06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	f003 0301 	and.w	r3, r3, #1
 8007e14:	2b01      	cmp	r3, #1
 8007e16:	d007      	beq.n	8007e28 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	681a      	ldr	r2, [r3, #0]
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	f042 0201 	orr.w	r2, r2, #1
 8007e26:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	681a      	ldr	r2, [r3, #0]
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007e36:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	2222      	movs	r2, #34	; 0x22
 8007e3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	2240      	movs	r2, #64	; 0x40
 8007e44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	2200      	movs	r2, #0
 8007e4c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e52:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8007e58:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e5e:	b29a      	uxth	r2, r3
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	4a5b      	ldr	r2, [pc, #364]	; (8007fd4 <HAL_I2C_Mem_Read+0x228>)
 8007e68:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007e6a:	88f8      	ldrh	r0, [r7, #6]
 8007e6c:	893a      	ldrh	r2, [r7, #8]
 8007e6e:	8979      	ldrh	r1, [r7, #10]
 8007e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e72:	9301      	str	r3, [sp, #4]
 8007e74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e76:	9300      	str	r3, [sp, #0]
 8007e78:	4603      	mov	r3, r0
 8007e7a:	68f8      	ldr	r0, [r7, #12]
 8007e7c:	f000 fbc8 	bl	8008610 <I2C_RequestMemoryRead>
 8007e80:	4603      	mov	r3, r0
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d001      	beq.n	8007e8a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8007e86:	2301      	movs	r3, #1
 8007e88:	e1bc      	b.n	8008204 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d113      	bne.n	8007eba <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007e92:	2300      	movs	r3, #0
 8007e94:	623b      	str	r3, [r7, #32]
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	695b      	ldr	r3, [r3, #20]
 8007e9c:	623b      	str	r3, [r7, #32]
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	699b      	ldr	r3, [r3, #24]
 8007ea4:	623b      	str	r3, [r7, #32]
 8007ea6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	681a      	ldr	r2, [r3, #0]
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007eb6:	601a      	str	r2, [r3, #0]
 8007eb8:	e190      	b.n	80081dc <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ebe:	2b01      	cmp	r3, #1
 8007ec0:	d11b      	bne.n	8007efa <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	681a      	ldr	r2, [r3, #0]
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007ed0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	61fb      	str	r3, [r7, #28]
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	695b      	ldr	r3, [r3, #20]
 8007edc:	61fb      	str	r3, [r7, #28]
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	699b      	ldr	r3, [r3, #24]
 8007ee4:	61fb      	str	r3, [r7, #28]
 8007ee6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	681a      	ldr	r2, [r3, #0]
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007ef6:	601a      	str	r2, [r3, #0]
 8007ef8:	e170      	b.n	80081dc <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007efe:	2b02      	cmp	r3, #2
 8007f00:	d11b      	bne.n	8007f3a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	681a      	ldr	r2, [r3, #0]
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007f10:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	681a      	ldr	r2, [r3, #0]
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007f20:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007f22:	2300      	movs	r3, #0
 8007f24:	61bb      	str	r3, [r7, #24]
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	695b      	ldr	r3, [r3, #20]
 8007f2c:	61bb      	str	r3, [r7, #24]
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	699b      	ldr	r3, [r3, #24]
 8007f34:	61bb      	str	r3, [r7, #24]
 8007f36:	69bb      	ldr	r3, [r7, #24]
 8007f38:	e150      	b.n	80081dc <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	617b      	str	r3, [r7, #20]
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	695b      	ldr	r3, [r3, #20]
 8007f44:	617b      	str	r3, [r7, #20]
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	699b      	ldr	r3, [r3, #24]
 8007f4c:	617b      	str	r3, [r7, #20]
 8007f4e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8007f50:	e144      	b.n	80081dc <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f56:	2b03      	cmp	r3, #3
 8007f58:	f200 80f1 	bhi.w	800813e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f60:	2b01      	cmp	r3, #1
 8007f62:	d123      	bne.n	8007fac <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007f64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f66:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007f68:	68f8      	ldr	r0, [r7, #12]
 8007f6a:	f000 fde3 	bl	8008b34 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007f6e:	4603      	mov	r3, r0
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d001      	beq.n	8007f78 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8007f74:	2301      	movs	r3, #1
 8007f76:	e145      	b.n	8008204 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	691a      	ldr	r2, [r3, #16]
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f82:	b2d2      	uxtb	r2, r2
 8007f84:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f8a:	1c5a      	adds	r2, r3, #1
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f94:	3b01      	subs	r3, #1
 8007f96:	b29a      	uxth	r2, r3
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007fa0:	b29b      	uxth	r3, r3
 8007fa2:	3b01      	subs	r3, #1
 8007fa4:	b29a      	uxth	r2, r3
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007faa:	e117      	b.n	80081dc <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007fb0:	2b02      	cmp	r3, #2
 8007fb2:	d14e      	bne.n	8008052 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fb6:	9300      	str	r3, [sp, #0]
 8007fb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fba:	2200      	movs	r2, #0
 8007fbc:	4906      	ldr	r1, [pc, #24]	; (8007fd8 <HAL_I2C_Mem_Read+0x22c>)
 8007fbe:	68f8      	ldr	r0, [r7, #12]
 8007fc0:	f000 fc0e 	bl	80087e0 <I2C_WaitOnFlagUntilTimeout>
 8007fc4:	4603      	mov	r3, r0
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d008      	beq.n	8007fdc <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8007fca:	2301      	movs	r3, #1
 8007fcc:	e11a      	b.n	8008204 <HAL_I2C_Mem_Read+0x458>
 8007fce:	bf00      	nop
 8007fd0:	00100002 	.word	0x00100002
 8007fd4:	ffff0000 	.word	0xffff0000
 8007fd8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	681a      	ldr	r2, [r3, #0]
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007fea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	691a      	ldr	r2, [r3, #16]
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ff6:	b2d2      	uxtb	r2, r2
 8007ff8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ffe:	1c5a      	adds	r2, r3, #1
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008008:	3b01      	subs	r3, #1
 800800a:	b29a      	uxth	r2, r3
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008014:	b29b      	uxth	r3, r3
 8008016:	3b01      	subs	r3, #1
 8008018:	b29a      	uxth	r2, r3
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	691a      	ldr	r2, [r3, #16]
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008028:	b2d2      	uxtb	r2, r2
 800802a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008030:	1c5a      	adds	r2, r3, #1
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800803a:	3b01      	subs	r3, #1
 800803c:	b29a      	uxth	r2, r3
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008046:	b29b      	uxth	r3, r3
 8008048:	3b01      	subs	r3, #1
 800804a:	b29a      	uxth	r2, r3
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008050:	e0c4      	b.n	80081dc <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008054:	9300      	str	r3, [sp, #0]
 8008056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008058:	2200      	movs	r2, #0
 800805a:	496c      	ldr	r1, [pc, #432]	; (800820c <HAL_I2C_Mem_Read+0x460>)
 800805c:	68f8      	ldr	r0, [r7, #12]
 800805e:	f000 fbbf 	bl	80087e0 <I2C_WaitOnFlagUntilTimeout>
 8008062:	4603      	mov	r3, r0
 8008064:	2b00      	cmp	r3, #0
 8008066:	d001      	beq.n	800806c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8008068:	2301      	movs	r3, #1
 800806a:	e0cb      	b.n	8008204 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	681a      	ldr	r2, [r3, #0]
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800807a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	691a      	ldr	r2, [r3, #16]
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008086:	b2d2      	uxtb	r2, r2
 8008088:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800808e:	1c5a      	adds	r2, r3, #1
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008098:	3b01      	subs	r3, #1
 800809a:	b29a      	uxth	r2, r3
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80080a4:	b29b      	uxth	r3, r3
 80080a6:	3b01      	subs	r3, #1
 80080a8:	b29a      	uxth	r2, r3
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80080ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080b0:	9300      	str	r3, [sp, #0]
 80080b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080b4:	2200      	movs	r2, #0
 80080b6:	4955      	ldr	r1, [pc, #340]	; (800820c <HAL_I2C_Mem_Read+0x460>)
 80080b8:	68f8      	ldr	r0, [r7, #12]
 80080ba:	f000 fb91 	bl	80087e0 <I2C_WaitOnFlagUntilTimeout>
 80080be:	4603      	mov	r3, r0
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d001      	beq.n	80080c8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80080c4:	2301      	movs	r3, #1
 80080c6:	e09d      	b.n	8008204 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	681a      	ldr	r2, [r3, #0]
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80080d6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	691a      	ldr	r2, [r3, #16]
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080e2:	b2d2      	uxtb	r2, r2
 80080e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080ea:	1c5a      	adds	r2, r3, #1
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80080f4:	3b01      	subs	r3, #1
 80080f6:	b29a      	uxth	r2, r3
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008100:	b29b      	uxth	r3, r3
 8008102:	3b01      	subs	r3, #1
 8008104:	b29a      	uxth	r2, r3
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	691a      	ldr	r2, [r3, #16]
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008114:	b2d2      	uxtb	r2, r2
 8008116:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800811c:	1c5a      	adds	r2, r3, #1
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008126:	3b01      	subs	r3, #1
 8008128:	b29a      	uxth	r2, r3
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008132:	b29b      	uxth	r3, r3
 8008134:	3b01      	subs	r3, #1
 8008136:	b29a      	uxth	r2, r3
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800813c:	e04e      	b.n	80081dc <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800813e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008140:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008142:	68f8      	ldr	r0, [r7, #12]
 8008144:	f000 fcf6 	bl	8008b34 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008148:	4603      	mov	r3, r0
 800814a:	2b00      	cmp	r3, #0
 800814c:	d001      	beq.n	8008152 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800814e:	2301      	movs	r3, #1
 8008150:	e058      	b.n	8008204 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	691a      	ldr	r2, [r3, #16]
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800815c:	b2d2      	uxtb	r2, r2
 800815e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008164:	1c5a      	adds	r2, r3, #1
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800816e:	3b01      	subs	r3, #1
 8008170:	b29a      	uxth	r2, r3
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800817a:	b29b      	uxth	r3, r3
 800817c:	3b01      	subs	r3, #1
 800817e:	b29a      	uxth	r2, r3
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	695b      	ldr	r3, [r3, #20]
 800818a:	f003 0304 	and.w	r3, r3, #4
 800818e:	2b04      	cmp	r3, #4
 8008190:	d124      	bne.n	80081dc <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008196:	2b03      	cmp	r3, #3
 8008198:	d107      	bne.n	80081aa <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	681a      	ldr	r2, [r3, #0]
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80081a8:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	691a      	ldr	r2, [r3, #16]
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081b4:	b2d2      	uxtb	r2, r2
 80081b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081bc:	1c5a      	adds	r2, r3, #1
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80081c6:	3b01      	subs	r3, #1
 80081c8:	b29a      	uxth	r2, r3
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80081d2:	b29b      	uxth	r3, r3
 80081d4:	3b01      	subs	r3, #1
 80081d6:	b29a      	uxth	r2, r3
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	f47f aeb6 	bne.w	8007f52 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	2220      	movs	r2, #32
 80081ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	2200      	movs	r2, #0
 80081f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	2200      	movs	r2, #0
 80081fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80081fe:	2300      	movs	r3, #0
 8008200:	e000      	b.n	8008204 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8008202:	2302      	movs	r3, #2
  }
}
 8008204:	4618      	mov	r0, r3
 8008206:	3728      	adds	r7, #40	; 0x28
 8008208:	46bd      	mov	sp, r7
 800820a:	bd80      	pop	{r7, pc}
 800820c:	00010004 	.word	0x00010004

08008210 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8008210:	b480      	push	{r7}
 8008212:	b083      	sub	sp, #12
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800821e:	b2db      	uxtb	r3, r3
}
 8008220:	4618      	mov	r0, r3
 8008222:	370c      	adds	r7, #12
 8008224:	46bd      	mov	sp, r7
 8008226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822a:	4770      	bx	lr

0800822c <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800822c:	b480      	push	{r7}
 800822e:	b083      	sub	sp, #12
 8008230:	af00      	add	r7, sp, #0
 8008232:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8008238:	4618      	mov	r0, r3
 800823a:	370c      	adds	r7, #12
 800823c:	46bd      	mov	sp, r7
 800823e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008242:	4770      	bx	lr

08008244 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b088      	sub	sp, #32
 8008248:	af02      	add	r7, sp, #8
 800824a:	60f8      	str	r0, [r7, #12]
 800824c:	607a      	str	r2, [r7, #4]
 800824e:	603b      	str	r3, [r7, #0]
 8008250:	460b      	mov	r3, r1
 8008252:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008258:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800825a:	697b      	ldr	r3, [r7, #20]
 800825c:	2b08      	cmp	r3, #8
 800825e:	d006      	beq.n	800826e <I2C_MasterRequestWrite+0x2a>
 8008260:	697b      	ldr	r3, [r7, #20]
 8008262:	2b01      	cmp	r3, #1
 8008264:	d003      	beq.n	800826e <I2C_MasterRequestWrite+0x2a>
 8008266:	697b      	ldr	r3, [r7, #20]
 8008268:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800826c:	d108      	bne.n	8008280 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	681a      	ldr	r2, [r3, #0]
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800827c:	601a      	str	r2, [r3, #0]
 800827e:	e00b      	b.n	8008298 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008284:	2b12      	cmp	r3, #18
 8008286:	d107      	bne.n	8008298 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	681a      	ldr	r2, [r3, #0]
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008296:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008298:	683b      	ldr	r3, [r7, #0]
 800829a:	9300      	str	r3, [sp, #0]
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2200      	movs	r2, #0
 80082a0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80082a4:	68f8      	ldr	r0, [r7, #12]
 80082a6:	f000 fa9b 	bl	80087e0 <I2C_WaitOnFlagUntilTimeout>
 80082aa:	4603      	mov	r3, r0
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d00d      	beq.n	80082cc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80082be:	d103      	bne.n	80082c8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80082c6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80082c8:	2303      	movs	r3, #3
 80082ca:	e035      	b.n	8008338 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	691b      	ldr	r3, [r3, #16]
 80082d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80082d4:	d108      	bne.n	80082e8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80082d6:	897b      	ldrh	r3, [r7, #10]
 80082d8:	b2db      	uxtb	r3, r3
 80082da:	461a      	mov	r2, r3
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80082e4:	611a      	str	r2, [r3, #16]
 80082e6:	e01b      	b.n	8008320 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80082e8:	897b      	ldrh	r3, [r7, #10]
 80082ea:	11db      	asrs	r3, r3, #7
 80082ec:	b2db      	uxtb	r3, r3
 80082ee:	f003 0306 	and.w	r3, r3, #6
 80082f2:	b2db      	uxtb	r3, r3
 80082f4:	f063 030f 	orn	r3, r3, #15
 80082f8:	b2da      	uxtb	r2, r3
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8008300:	683b      	ldr	r3, [r7, #0]
 8008302:	687a      	ldr	r2, [r7, #4]
 8008304:	490e      	ldr	r1, [pc, #56]	; (8008340 <I2C_MasterRequestWrite+0xfc>)
 8008306:	68f8      	ldr	r0, [r7, #12]
 8008308:	f000 fae4 	bl	80088d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800830c:	4603      	mov	r3, r0
 800830e:	2b00      	cmp	r3, #0
 8008310:	d001      	beq.n	8008316 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8008312:	2301      	movs	r3, #1
 8008314:	e010      	b.n	8008338 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8008316:	897b      	ldrh	r3, [r7, #10]
 8008318:	b2da      	uxtb	r2, r3
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008320:	683b      	ldr	r3, [r7, #0]
 8008322:	687a      	ldr	r2, [r7, #4]
 8008324:	4907      	ldr	r1, [pc, #28]	; (8008344 <I2C_MasterRequestWrite+0x100>)
 8008326:	68f8      	ldr	r0, [r7, #12]
 8008328:	f000 fad4 	bl	80088d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800832c:	4603      	mov	r3, r0
 800832e:	2b00      	cmp	r3, #0
 8008330:	d001      	beq.n	8008336 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8008332:	2301      	movs	r3, #1
 8008334:	e000      	b.n	8008338 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8008336:	2300      	movs	r3, #0
}
 8008338:	4618      	mov	r0, r3
 800833a:	3718      	adds	r7, #24
 800833c:	46bd      	mov	sp, r7
 800833e:	bd80      	pop	{r7, pc}
 8008340:	00010008 	.word	0x00010008
 8008344:	00010002 	.word	0x00010002

08008348 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8008348:	b580      	push	{r7, lr}
 800834a:	b088      	sub	sp, #32
 800834c:	af02      	add	r7, sp, #8
 800834e:	60f8      	str	r0, [r7, #12]
 8008350:	607a      	str	r2, [r7, #4]
 8008352:	603b      	str	r3, [r7, #0]
 8008354:	460b      	mov	r3, r1
 8008356:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800835c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	681a      	ldr	r2, [r3, #0]
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800836c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800836e:	697b      	ldr	r3, [r7, #20]
 8008370:	2b08      	cmp	r3, #8
 8008372:	d006      	beq.n	8008382 <I2C_MasterRequestRead+0x3a>
 8008374:	697b      	ldr	r3, [r7, #20]
 8008376:	2b01      	cmp	r3, #1
 8008378:	d003      	beq.n	8008382 <I2C_MasterRequestRead+0x3a>
 800837a:	697b      	ldr	r3, [r7, #20]
 800837c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008380:	d108      	bne.n	8008394 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	681a      	ldr	r2, [r3, #0]
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008390:	601a      	str	r2, [r3, #0]
 8008392:	e00b      	b.n	80083ac <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008398:	2b11      	cmp	r3, #17
 800839a:	d107      	bne.n	80083ac <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	681a      	ldr	r2, [r3, #0]
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80083aa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80083ac:	683b      	ldr	r3, [r7, #0]
 80083ae:	9300      	str	r3, [sp, #0]
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	2200      	movs	r2, #0
 80083b4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80083b8:	68f8      	ldr	r0, [r7, #12]
 80083ba:	f000 fa11 	bl	80087e0 <I2C_WaitOnFlagUntilTimeout>
 80083be:	4603      	mov	r3, r0
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d00d      	beq.n	80083e0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80083d2:	d103      	bne.n	80083dc <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80083da:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80083dc:	2303      	movs	r3, #3
 80083de:	e079      	b.n	80084d4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	691b      	ldr	r3, [r3, #16]
 80083e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80083e8:	d108      	bne.n	80083fc <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80083ea:	897b      	ldrh	r3, [r7, #10]
 80083ec:	b2db      	uxtb	r3, r3
 80083ee:	f043 0301 	orr.w	r3, r3, #1
 80083f2:	b2da      	uxtb	r2, r3
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	611a      	str	r2, [r3, #16]
 80083fa:	e05f      	b.n	80084bc <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80083fc:	897b      	ldrh	r3, [r7, #10]
 80083fe:	11db      	asrs	r3, r3, #7
 8008400:	b2db      	uxtb	r3, r3
 8008402:	f003 0306 	and.w	r3, r3, #6
 8008406:	b2db      	uxtb	r3, r3
 8008408:	f063 030f 	orn	r3, r3, #15
 800840c:	b2da      	uxtb	r2, r3
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8008414:	683b      	ldr	r3, [r7, #0]
 8008416:	687a      	ldr	r2, [r7, #4]
 8008418:	4930      	ldr	r1, [pc, #192]	; (80084dc <I2C_MasterRequestRead+0x194>)
 800841a:	68f8      	ldr	r0, [r7, #12]
 800841c:	f000 fa5a 	bl	80088d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008420:	4603      	mov	r3, r0
 8008422:	2b00      	cmp	r3, #0
 8008424:	d001      	beq.n	800842a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8008426:	2301      	movs	r3, #1
 8008428:	e054      	b.n	80084d4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800842a:	897b      	ldrh	r3, [r7, #10]
 800842c:	b2da      	uxtb	r2, r3
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008434:	683b      	ldr	r3, [r7, #0]
 8008436:	687a      	ldr	r2, [r7, #4]
 8008438:	4929      	ldr	r1, [pc, #164]	; (80084e0 <I2C_MasterRequestRead+0x198>)
 800843a:	68f8      	ldr	r0, [r7, #12]
 800843c:	f000 fa4a 	bl	80088d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008440:	4603      	mov	r3, r0
 8008442:	2b00      	cmp	r3, #0
 8008444:	d001      	beq.n	800844a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8008446:	2301      	movs	r3, #1
 8008448:	e044      	b.n	80084d4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800844a:	2300      	movs	r3, #0
 800844c:	613b      	str	r3, [r7, #16]
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	695b      	ldr	r3, [r3, #20]
 8008454:	613b      	str	r3, [r7, #16]
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	699b      	ldr	r3, [r3, #24]
 800845c:	613b      	str	r3, [r7, #16]
 800845e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	681a      	ldr	r2, [r3, #0]
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800846e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008470:	683b      	ldr	r3, [r7, #0]
 8008472:	9300      	str	r3, [sp, #0]
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	2200      	movs	r2, #0
 8008478:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800847c:	68f8      	ldr	r0, [r7, #12]
 800847e:	f000 f9af 	bl	80087e0 <I2C_WaitOnFlagUntilTimeout>
 8008482:	4603      	mov	r3, r0
 8008484:	2b00      	cmp	r3, #0
 8008486:	d00d      	beq.n	80084a4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008492:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008496:	d103      	bne.n	80084a0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800849e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80084a0:	2303      	movs	r3, #3
 80084a2:	e017      	b.n	80084d4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80084a4:	897b      	ldrh	r3, [r7, #10]
 80084a6:	11db      	asrs	r3, r3, #7
 80084a8:	b2db      	uxtb	r3, r3
 80084aa:	f003 0306 	and.w	r3, r3, #6
 80084ae:	b2db      	uxtb	r3, r3
 80084b0:	f063 030e 	orn	r3, r3, #14
 80084b4:	b2da      	uxtb	r2, r3
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80084bc:	683b      	ldr	r3, [r7, #0]
 80084be:	687a      	ldr	r2, [r7, #4]
 80084c0:	4907      	ldr	r1, [pc, #28]	; (80084e0 <I2C_MasterRequestRead+0x198>)
 80084c2:	68f8      	ldr	r0, [r7, #12]
 80084c4:	f000 fa06 	bl	80088d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80084c8:	4603      	mov	r3, r0
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d001      	beq.n	80084d2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80084ce:	2301      	movs	r3, #1
 80084d0:	e000      	b.n	80084d4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80084d2:	2300      	movs	r3, #0
}
 80084d4:	4618      	mov	r0, r3
 80084d6:	3718      	adds	r7, #24
 80084d8:	46bd      	mov	sp, r7
 80084da:	bd80      	pop	{r7, pc}
 80084dc:	00010008 	.word	0x00010008
 80084e0:	00010002 	.word	0x00010002

080084e4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80084e4:	b580      	push	{r7, lr}
 80084e6:	b088      	sub	sp, #32
 80084e8:	af02      	add	r7, sp, #8
 80084ea:	60f8      	str	r0, [r7, #12]
 80084ec:	4608      	mov	r0, r1
 80084ee:	4611      	mov	r1, r2
 80084f0:	461a      	mov	r2, r3
 80084f2:	4603      	mov	r3, r0
 80084f4:	817b      	strh	r3, [r7, #10]
 80084f6:	460b      	mov	r3, r1
 80084f8:	813b      	strh	r3, [r7, #8]
 80084fa:	4613      	mov	r3, r2
 80084fc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	681a      	ldr	r2, [r3, #0]
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800850c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800850e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008510:	9300      	str	r3, [sp, #0]
 8008512:	6a3b      	ldr	r3, [r7, #32]
 8008514:	2200      	movs	r2, #0
 8008516:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800851a:	68f8      	ldr	r0, [r7, #12]
 800851c:	f000 f960 	bl	80087e0 <I2C_WaitOnFlagUntilTimeout>
 8008520:	4603      	mov	r3, r0
 8008522:	2b00      	cmp	r3, #0
 8008524:	d00d      	beq.n	8008542 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008530:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008534:	d103      	bne.n	800853e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	f44f 7200 	mov.w	r2, #512	; 0x200
 800853c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800853e:	2303      	movs	r3, #3
 8008540:	e05f      	b.n	8008602 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008542:	897b      	ldrh	r3, [r7, #10]
 8008544:	b2db      	uxtb	r3, r3
 8008546:	461a      	mov	r2, r3
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008550:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008554:	6a3a      	ldr	r2, [r7, #32]
 8008556:	492d      	ldr	r1, [pc, #180]	; (800860c <I2C_RequestMemoryWrite+0x128>)
 8008558:	68f8      	ldr	r0, [r7, #12]
 800855a:	f000 f9bb 	bl	80088d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800855e:	4603      	mov	r3, r0
 8008560:	2b00      	cmp	r3, #0
 8008562:	d001      	beq.n	8008568 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8008564:	2301      	movs	r3, #1
 8008566:	e04c      	b.n	8008602 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008568:	2300      	movs	r3, #0
 800856a:	617b      	str	r3, [r7, #20]
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	695b      	ldr	r3, [r3, #20]
 8008572:	617b      	str	r3, [r7, #20]
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	699b      	ldr	r3, [r3, #24]
 800857a:	617b      	str	r3, [r7, #20]
 800857c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800857e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008580:	6a39      	ldr	r1, [r7, #32]
 8008582:	68f8      	ldr	r0, [r7, #12]
 8008584:	f000 fa46 	bl	8008a14 <I2C_WaitOnTXEFlagUntilTimeout>
 8008588:	4603      	mov	r3, r0
 800858a:	2b00      	cmp	r3, #0
 800858c:	d00d      	beq.n	80085aa <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008592:	2b04      	cmp	r3, #4
 8008594:	d107      	bne.n	80085a6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	681a      	ldr	r2, [r3, #0]
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80085a4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80085a6:	2301      	movs	r3, #1
 80085a8:	e02b      	b.n	8008602 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80085aa:	88fb      	ldrh	r3, [r7, #6]
 80085ac:	2b01      	cmp	r3, #1
 80085ae:	d105      	bne.n	80085bc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80085b0:	893b      	ldrh	r3, [r7, #8]
 80085b2:	b2da      	uxtb	r2, r3
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	611a      	str	r2, [r3, #16]
 80085ba:	e021      	b.n	8008600 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80085bc:	893b      	ldrh	r3, [r7, #8]
 80085be:	0a1b      	lsrs	r3, r3, #8
 80085c0:	b29b      	uxth	r3, r3
 80085c2:	b2da      	uxtb	r2, r3
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80085ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085cc:	6a39      	ldr	r1, [r7, #32]
 80085ce:	68f8      	ldr	r0, [r7, #12]
 80085d0:	f000 fa20 	bl	8008a14 <I2C_WaitOnTXEFlagUntilTimeout>
 80085d4:	4603      	mov	r3, r0
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d00d      	beq.n	80085f6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085de:	2b04      	cmp	r3, #4
 80085e0:	d107      	bne.n	80085f2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	681a      	ldr	r2, [r3, #0]
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80085f0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80085f2:	2301      	movs	r3, #1
 80085f4:	e005      	b.n	8008602 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80085f6:	893b      	ldrh	r3, [r7, #8]
 80085f8:	b2da      	uxtb	r2, r3
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8008600:	2300      	movs	r3, #0
}
 8008602:	4618      	mov	r0, r3
 8008604:	3718      	adds	r7, #24
 8008606:	46bd      	mov	sp, r7
 8008608:	bd80      	pop	{r7, pc}
 800860a:	bf00      	nop
 800860c:	00010002 	.word	0x00010002

08008610 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008610:	b580      	push	{r7, lr}
 8008612:	b088      	sub	sp, #32
 8008614:	af02      	add	r7, sp, #8
 8008616:	60f8      	str	r0, [r7, #12]
 8008618:	4608      	mov	r0, r1
 800861a:	4611      	mov	r1, r2
 800861c:	461a      	mov	r2, r3
 800861e:	4603      	mov	r3, r0
 8008620:	817b      	strh	r3, [r7, #10]
 8008622:	460b      	mov	r3, r1
 8008624:	813b      	strh	r3, [r7, #8]
 8008626:	4613      	mov	r3, r2
 8008628:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	681a      	ldr	r2, [r3, #0]
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008638:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	681a      	ldr	r2, [r3, #0]
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008648:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800864a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800864c:	9300      	str	r3, [sp, #0]
 800864e:	6a3b      	ldr	r3, [r7, #32]
 8008650:	2200      	movs	r2, #0
 8008652:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008656:	68f8      	ldr	r0, [r7, #12]
 8008658:	f000 f8c2 	bl	80087e0 <I2C_WaitOnFlagUntilTimeout>
 800865c:	4603      	mov	r3, r0
 800865e:	2b00      	cmp	r3, #0
 8008660:	d00d      	beq.n	800867e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800866c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008670:	d103      	bne.n	800867a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008678:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800867a:	2303      	movs	r3, #3
 800867c:	e0aa      	b.n	80087d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800867e:	897b      	ldrh	r3, [r7, #10]
 8008680:	b2db      	uxtb	r3, r3
 8008682:	461a      	mov	r2, r3
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800868c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800868e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008690:	6a3a      	ldr	r2, [r7, #32]
 8008692:	4952      	ldr	r1, [pc, #328]	; (80087dc <I2C_RequestMemoryRead+0x1cc>)
 8008694:	68f8      	ldr	r0, [r7, #12]
 8008696:	f000 f91d 	bl	80088d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800869a:	4603      	mov	r3, r0
 800869c:	2b00      	cmp	r3, #0
 800869e:	d001      	beq.n	80086a4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80086a0:	2301      	movs	r3, #1
 80086a2:	e097      	b.n	80087d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80086a4:	2300      	movs	r3, #0
 80086a6:	617b      	str	r3, [r7, #20]
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	695b      	ldr	r3, [r3, #20]
 80086ae:	617b      	str	r3, [r7, #20]
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	699b      	ldr	r3, [r3, #24]
 80086b6:	617b      	str	r3, [r7, #20]
 80086b8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80086ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80086bc:	6a39      	ldr	r1, [r7, #32]
 80086be:	68f8      	ldr	r0, [r7, #12]
 80086c0:	f000 f9a8 	bl	8008a14 <I2C_WaitOnTXEFlagUntilTimeout>
 80086c4:	4603      	mov	r3, r0
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d00d      	beq.n	80086e6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086ce:	2b04      	cmp	r3, #4
 80086d0:	d107      	bne.n	80086e2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	681a      	ldr	r2, [r3, #0]
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80086e0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80086e2:	2301      	movs	r3, #1
 80086e4:	e076      	b.n	80087d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80086e6:	88fb      	ldrh	r3, [r7, #6]
 80086e8:	2b01      	cmp	r3, #1
 80086ea:	d105      	bne.n	80086f8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80086ec:	893b      	ldrh	r3, [r7, #8]
 80086ee:	b2da      	uxtb	r2, r3
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	611a      	str	r2, [r3, #16]
 80086f6:	e021      	b.n	800873c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80086f8:	893b      	ldrh	r3, [r7, #8]
 80086fa:	0a1b      	lsrs	r3, r3, #8
 80086fc:	b29b      	uxth	r3, r3
 80086fe:	b2da      	uxtb	r2, r3
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008706:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008708:	6a39      	ldr	r1, [r7, #32]
 800870a:	68f8      	ldr	r0, [r7, #12]
 800870c:	f000 f982 	bl	8008a14 <I2C_WaitOnTXEFlagUntilTimeout>
 8008710:	4603      	mov	r3, r0
 8008712:	2b00      	cmp	r3, #0
 8008714:	d00d      	beq.n	8008732 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800871a:	2b04      	cmp	r3, #4
 800871c:	d107      	bne.n	800872e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	681a      	ldr	r2, [r3, #0]
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800872c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800872e:	2301      	movs	r3, #1
 8008730:	e050      	b.n	80087d4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008732:	893b      	ldrh	r3, [r7, #8]
 8008734:	b2da      	uxtb	r2, r3
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800873c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800873e:	6a39      	ldr	r1, [r7, #32]
 8008740:	68f8      	ldr	r0, [r7, #12]
 8008742:	f000 f967 	bl	8008a14 <I2C_WaitOnTXEFlagUntilTimeout>
 8008746:	4603      	mov	r3, r0
 8008748:	2b00      	cmp	r3, #0
 800874a:	d00d      	beq.n	8008768 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008750:	2b04      	cmp	r3, #4
 8008752:	d107      	bne.n	8008764 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	681a      	ldr	r2, [r3, #0]
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008762:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008764:	2301      	movs	r3, #1
 8008766:	e035      	b.n	80087d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	681a      	ldr	r2, [r3, #0]
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008776:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800877a:	9300      	str	r3, [sp, #0]
 800877c:	6a3b      	ldr	r3, [r7, #32]
 800877e:	2200      	movs	r2, #0
 8008780:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008784:	68f8      	ldr	r0, [r7, #12]
 8008786:	f000 f82b 	bl	80087e0 <I2C_WaitOnFlagUntilTimeout>
 800878a:	4603      	mov	r3, r0
 800878c:	2b00      	cmp	r3, #0
 800878e:	d00d      	beq.n	80087ac <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800879a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800879e:	d103      	bne.n	80087a8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80087a6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80087a8:	2303      	movs	r3, #3
 80087aa:	e013      	b.n	80087d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80087ac:	897b      	ldrh	r3, [r7, #10]
 80087ae:	b2db      	uxtb	r3, r3
 80087b0:	f043 0301 	orr.w	r3, r3, #1
 80087b4:	b2da      	uxtb	r2, r3
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80087bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087be:	6a3a      	ldr	r2, [r7, #32]
 80087c0:	4906      	ldr	r1, [pc, #24]	; (80087dc <I2C_RequestMemoryRead+0x1cc>)
 80087c2:	68f8      	ldr	r0, [r7, #12]
 80087c4:	f000 f886 	bl	80088d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80087c8:	4603      	mov	r3, r0
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d001      	beq.n	80087d2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80087ce:	2301      	movs	r3, #1
 80087d0:	e000      	b.n	80087d4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80087d2:	2300      	movs	r3, #0
}
 80087d4:	4618      	mov	r0, r3
 80087d6:	3718      	adds	r7, #24
 80087d8:	46bd      	mov	sp, r7
 80087da:	bd80      	pop	{r7, pc}
 80087dc:	00010002 	.word	0x00010002

080087e0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80087e0:	b580      	push	{r7, lr}
 80087e2:	b084      	sub	sp, #16
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	60f8      	str	r0, [r7, #12]
 80087e8:	60b9      	str	r1, [r7, #8]
 80087ea:	603b      	str	r3, [r7, #0]
 80087ec:	4613      	mov	r3, r2
 80087ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80087f0:	e048      	b.n	8008884 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80087f2:	683b      	ldr	r3, [r7, #0]
 80087f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087f8:	d044      	beq.n	8008884 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80087fa:	f7fb fd43 	bl	8004284 <HAL_GetTick>
 80087fe:	4602      	mov	r2, r0
 8008800:	69bb      	ldr	r3, [r7, #24]
 8008802:	1ad3      	subs	r3, r2, r3
 8008804:	683a      	ldr	r2, [r7, #0]
 8008806:	429a      	cmp	r2, r3
 8008808:	d302      	bcc.n	8008810 <I2C_WaitOnFlagUntilTimeout+0x30>
 800880a:	683b      	ldr	r3, [r7, #0]
 800880c:	2b00      	cmp	r3, #0
 800880e:	d139      	bne.n	8008884 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8008810:	68bb      	ldr	r3, [r7, #8]
 8008812:	0c1b      	lsrs	r3, r3, #16
 8008814:	b2db      	uxtb	r3, r3
 8008816:	2b01      	cmp	r3, #1
 8008818:	d10d      	bne.n	8008836 <I2C_WaitOnFlagUntilTimeout+0x56>
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	695b      	ldr	r3, [r3, #20]
 8008820:	43da      	mvns	r2, r3
 8008822:	68bb      	ldr	r3, [r7, #8]
 8008824:	4013      	ands	r3, r2
 8008826:	b29b      	uxth	r3, r3
 8008828:	2b00      	cmp	r3, #0
 800882a:	bf0c      	ite	eq
 800882c:	2301      	moveq	r3, #1
 800882e:	2300      	movne	r3, #0
 8008830:	b2db      	uxtb	r3, r3
 8008832:	461a      	mov	r2, r3
 8008834:	e00c      	b.n	8008850 <I2C_WaitOnFlagUntilTimeout+0x70>
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	699b      	ldr	r3, [r3, #24]
 800883c:	43da      	mvns	r2, r3
 800883e:	68bb      	ldr	r3, [r7, #8]
 8008840:	4013      	ands	r3, r2
 8008842:	b29b      	uxth	r3, r3
 8008844:	2b00      	cmp	r3, #0
 8008846:	bf0c      	ite	eq
 8008848:	2301      	moveq	r3, #1
 800884a:	2300      	movne	r3, #0
 800884c:	b2db      	uxtb	r3, r3
 800884e:	461a      	mov	r2, r3
 8008850:	79fb      	ldrb	r3, [r7, #7]
 8008852:	429a      	cmp	r2, r3
 8008854:	d116      	bne.n	8008884 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	2200      	movs	r2, #0
 800885a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	2220      	movs	r2, #32
 8008860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	2200      	movs	r2, #0
 8008868:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008870:	f043 0220 	orr.w	r2, r3, #32
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	2200      	movs	r2, #0
 800887c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8008880:	2301      	movs	r3, #1
 8008882:	e023      	b.n	80088cc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008884:	68bb      	ldr	r3, [r7, #8]
 8008886:	0c1b      	lsrs	r3, r3, #16
 8008888:	b2db      	uxtb	r3, r3
 800888a:	2b01      	cmp	r3, #1
 800888c:	d10d      	bne.n	80088aa <I2C_WaitOnFlagUntilTimeout+0xca>
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	695b      	ldr	r3, [r3, #20]
 8008894:	43da      	mvns	r2, r3
 8008896:	68bb      	ldr	r3, [r7, #8]
 8008898:	4013      	ands	r3, r2
 800889a:	b29b      	uxth	r3, r3
 800889c:	2b00      	cmp	r3, #0
 800889e:	bf0c      	ite	eq
 80088a0:	2301      	moveq	r3, #1
 80088a2:	2300      	movne	r3, #0
 80088a4:	b2db      	uxtb	r3, r3
 80088a6:	461a      	mov	r2, r3
 80088a8:	e00c      	b.n	80088c4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	699b      	ldr	r3, [r3, #24]
 80088b0:	43da      	mvns	r2, r3
 80088b2:	68bb      	ldr	r3, [r7, #8]
 80088b4:	4013      	ands	r3, r2
 80088b6:	b29b      	uxth	r3, r3
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	bf0c      	ite	eq
 80088bc:	2301      	moveq	r3, #1
 80088be:	2300      	movne	r3, #0
 80088c0:	b2db      	uxtb	r3, r3
 80088c2:	461a      	mov	r2, r3
 80088c4:	79fb      	ldrb	r3, [r7, #7]
 80088c6:	429a      	cmp	r2, r3
 80088c8:	d093      	beq.n	80087f2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80088ca:	2300      	movs	r3, #0
}
 80088cc:	4618      	mov	r0, r3
 80088ce:	3710      	adds	r7, #16
 80088d0:	46bd      	mov	sp, r7
 80088d2:	bd80      	pop	{r7, pc}

080088d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80088d4:	b580      	push	{r7, lr}
 80088d6:	b084      	sub	sp, #16
 80088d8:	af00      	add	r7, sp, #0
 80088da:	60f8      	str	r0, [r7, #12]
 80088dc:	60b9      	str	r1, [r7, #8]
 80088de:	607a      	str	r2, [r7, #4]
 80088e0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80088e2:	e071      	b.n	80089c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	695b      	ldr	r3, [r3, #20]
 80088ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80088ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80088f2:	d123      	bne.n	800893c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	681a      	ldr	r2, [r3, #0]
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008902:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800890c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	2200      	movs	r2, #0
 8008912:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	2220      	movs	r2, #32
 8008918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	2200      	movs	r2, #0
 8008920:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008928:	f043 0204 	orr.w	r2, r3, #4
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	2200      	movs	r2, #0
 8008934:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008938:	2301      	movs	r3, #1
 800893a:	e067      	b.n	8008a0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008942:	d041      	beq.n	80089c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008944:	f7fb fc9e 	bl	8004284 <HAL_GetTick>
 8008948:	4602      	mov	r2, r0
 800894a:	683b      	ldr	r3, [r7, #0]
 800894c:	1ad3      	subs	r3, r2, r3
 800894e:	687a      	ldr	r2, [r7, #4]
 8008950:	429a      	cmp	r2, r3
 8008952:	d302      	bcc.n	800895a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	2b00      	cmp	r3, #0
 8008958:	d136      	bne.n	80089c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800895a:	68bb      	ldr	r3, [r7, #8]
 800895c:	0c1b      	lsrs	r3, r3, #16
 800895e:	b2db      	uxtb	r3, r3
 8008960:	2b01      	cmp	r3, #1
 8008962:	d10c      	bne.n	800897e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	695b      	ldr	r3, [r3, #20]
 800896a:	43da      	mvns	r2, r3
 800896c:	68bb      	ldr	r3, [r7, #8]
 800896e:	4013      	ands	r3, r2
 8008970:	b29b      	uxth	r3, r3
 8008972:	2b00      	cmp	r3, #0
 8008974:	bf14      	ite	ne
 8008976:	2301      	movne	r3, #1
 8008978:	2300      	moveq	r3, #0
 800897a:	b2db      	uxtb	r3, r3
 800897c:	e00b      	b.n	8008996 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	699b      	ldr	r3, [r3, #24]
 8008984:	43da      	mvns	r2, r3
 8008986:	68bb      	ldr	r3, [r7, #8]
 8008988:	4013      	ands	r3, r2
 800898a:	b29b      	uxth	r3, r3
 800898c:	2b00      	cmp	r3, #0
 800898e:	bf14      	ite	ne
 8008990:	2301      	movne	r3, #1
 8008992:	2300      	moveq	r3, #0
 8008994:	b2db      	uxtb	r3, r3
 8008996:	2b00      	cmp	r3, #0
 8008998:	d016      	beq.n	80089c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	2200      	movs	r2, #0
 800899e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	2220      	movs	r2, #32
 80089a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	2200      	movs	r2, #0
 80089ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089b4:	f043 0220 	orr.w	r2, r3, #32
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	2200      	movs	r2, #0
 80089c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80089c4:	2301      	movs	r3, #1
 80089c6:	e021      	b.n	8008a0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80089c8:	68bb      	ldr	r3, [r7, #8]
 80089ca:	0c1b      	lsrs	r3, r3, #16
 80089cc:	b2db      	uxtb	r3, r3
 80089ce:	2b01      	cmp	r3, #1
 80089d0:	d10c      	bne.n	80089ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	695b      	ldr	r3, [r3, #20]
 80089d8:	43da      	mvns	r2, r3
 80089da:	68bb      	ldr	r3, [r7, #8]
 80089dc:	4013      	ands	r3, r2
 80089de:	b29b      	uxth	r3, r3
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	bf14      	ite	ne
 80089e4:	2301      	movne	r3, #1
 80089e6:	2300      	moveq	r3, #0
 80089e8:	b2db      	uxtb	r3, r3
 80089ea:	e00b      	b.n	8008a04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	699b      	ldr	r3, [r3, #24]
 80089f2:	43da      	mvns	r2, r3
 80089f4:	68bb      	ldr	r3, [r7, #8]
 80089f6:	4013      	ands	r3, r2
 80089f8:	b29b      	uxth	r3, r3
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	bf14      	ite	ne
 80089fe:	2301      	movne	r3, #1
 8008a00:	2300      	moveq	r3, #0
 8008a02:	b2db      	uxtb	r3, r3
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	f47f af6d 	bne.w	80088e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8008a0a:	2300      	movs	r3, #0
}
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	3710      	adds	r7, #16
 8008a10:	46bd      	mov	sp, r7
 8008a12:	bd80      	pop	{r7, pc}

08008a14 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008a14:	b580      	push	{r7, lr}
 8008a16:	b084      	sub	sp, #16
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	60f8      	str	r0, [r7, #12]
 8008a1c:	60b9      	str	r1, [r7, #8]
 8008a1e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008a20:	e034      	b.n	8008a8c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008a22:	68f8      	ldr	r0, [r7, #12]
 8008a24:	f000 f8e3 	bl	8008bee <I2C_IsAcknowledgeFailed>
 8008a28:	4603      	mov	r3, r0
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d001      	beq.n	8008a32 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008a2e:	2301      	movs	r3, #1
 8008a30:	e034      	b.n	8008a9c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008a32:	68bb      	ldr	r3, [r7, #8]
 8008a34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a38:	d028      	beq.n	8008a8c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a3a:	f7fb fc23 	bl	8004284 <HAL_GetTick>
 8008a3e:	4602      	mov	r2, r0
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	1ad3      	subs	r3, r2, r3
 8008a44:	68ba      	ldr	r2, [r7, #8]
 8008a46:	429a      	cmp	r2, r3
 8008a48:	d302      	bcc.n	8008a50 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8008a4a:	68bb      	ldr	r3, [r7, #8]
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d11d      	bne.n	8008a8c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	695b      	ldr	r3, [r3, #20]
 8008a56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a5a:	2b80      	cmp	r3, #128	; 0x80
 8008a5c:	d016      	beq.n	8008a8c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	2200      	movs	r2, #0
 8008a62:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	2220      	movs	r2, #32
 8008a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	2200      	movs	r2, #0
 8008a70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a78:	f043 0220 	orr.w	r2, r3, #32
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	2200      	movs	r2, #0
 8008a84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8008a88:	2301      	movs	r3, #1
 8008a8a:	e007      	b.n	8008a9c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	695b      	ldr	r3, [r3, #20]
 8008a92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a96:	2b80      	cmp	r3, #128	; 0x80
 8008a98:	d1c3      	bne.n	8008a22 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8008a9a:	2300      	movs	r3, #0
}
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	3710      	adds	r7, #16
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	bd80      	pop	{r7, pc}

08008aa4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008aa4:	b580      	push	{r7, lr}
 8008aa6:	b084      	sub	sp, #16
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	60f8      	str	r0, [r7, #12]
 8008aac:	60b9      	str	r1, [r7, #8]
 8008aae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008ab0:	e034      	b.n	8008b1c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008ab2:	68f8      	ldr	r0, [r7, #12]
 8008ab4:	f000 f89b 	bl	8008bee <I2C_IsAcknowledgeFailed>
 8008ab8:	4603      	mov	r3, r0
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d001      	beq.n	8008ac2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008abe:	2301      	movs	r3, #1
 8008ac0:	e034      	b.n	8008b2c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008ac2:	68bb      	ldr	r3, [r7, #8]
 8008ac4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ac8:	d028      	beq.n	8008b1c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008aca:	f7fb fbdb 	bl	8004284 <HAL_GetTick>
 8008ace:	4602      	mov	r2, r0
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	1ad3      	subs	r3, r2, r3
 8008ad4:	68ba      	ldr	r2, [r7, #8]
 8008ad6:	429a      	cmp	r2, r3
 8008ad8:	d302      	bcc.n	8008ae0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8008ada:	68bb      	ldr	r3, [r7, #8]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d11d      	bne.n	8008b1c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	695b      	ldr	r3, [r3, #20]
 8008ae6:	f003 0304 	and.w	r3, r3, #4
 8008aea:	2b04      	cmp	r3, #4
 8008aec:	d016      	beq.n	8008b1c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	2200      	movs	r2, #0
 8008af2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	2220      	movs	r2, #32
 8008af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	2200      	movs	r2, #0
 8008b00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b08:	f043 0220 	orr.w	r2, r3, #32
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	2200      	movs	r2, #0
 8008b14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8008b18:	2301      	movs	r3, #1
 8008b1a:	e007      	b.n	8008b2c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	695b      	ldr	r3, [r3, #20]
 8008b22:	f003 0304 	and.w	r3, r3, #4
 8008b26:	2b04      	cmp	r3, #4
 8008b28:	d1c3      	bne.n	8008ab2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8008b2a:	2300      	movs	r3, #0
}
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	3710      	adds	r7, #16
 8008b30:	46bd      	mov	sp, r7
 8008b32:	bd80      	pop	{r7, pc}

08008b34 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008b34:	b580      	push	{r7, lr}
 8008b36:	b084      	sub	sp, #16
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	60f8      	str	r0, [r7, #12]
 8008b3c:	60b9      	str	r1, [r7, #8]
 8008b3e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008b40:	e049      	b.n	8008bd6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	695b      	ldr	r3, [r3, #20]
 8008b48:	f003 0310 	and.w	r3, r3, #16
 8008b4c:	2b10      	cmp	r3, #16
 8008b4e:	d119      	bne.n	8008b84 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	f06f 0210 	mvn.w	r2, #16
 8008b58:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	2200      	movs	r2, #0
 8008b5e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	2220      	movs	r2, #32
 8008b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	2200      	movs	r2, #0
 8008b6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	2200      	movs	r2, #0
 8008b7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008b80:	2301      	movs	r3, #1
 8008b82:	e030      	b.n	8008be6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008b84:	f7fb fb7e 	bl	8004284 <HAL_GetTick>
 8008b88:	4602      	mov	r2, r0
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	1ad3      	subs	r3, r2, r3
 8008b8e:	68ba      	ldr	r2, [r7, #8]
 8008b90:	429a      	cmp	r2, r3
 8008b92:	d302      	bcc.n	8008b9a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8008b94:	68bb      	ldr	r3, [r7, #8]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d11d      	bne.n	8008bd6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	695b      	ldr	r3, [r3, #20]
 8008ba0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ba4:	2b40      	cmp	r3, #64	; 0x40
 8008ba6:	d016      	beq.n	8008bd6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	2200      	movs	r2, #0
 8008bac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	2220      	movs	r2, #32
 8008bb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	2200      	movs	r2, #0
 8008bba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bc2:	f043 0220 	orr.w	r2, r3, #32
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	2200      	movs	r2, #0
 8008bce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008bd2:	2301      	movs	r3, #1
 8008bd4:	e007      	b.n	8008be6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	695b      	ldr	r3, [r3, #20]
 8008bdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008be0:	2b40      	cmp	r3, #64	; 0x40
 8008be2:	d1ae      	bne.n	8008b42 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008be4:	2300      	movs	r3, #0
}
 8008be6:	4618      	mov	r0, r3
 8008be8:	3710      	adds	r7, #16
 8008bea:	46bd      	mov	sp, r7
 8008bec:	bd80      	pop	{r7, pc}

08008bee <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8008bee:	b480      	push	{r7}
 8008bf0:	b083      	sub	sp, #12
 8008bf2:	af00      	add	r7, sp, #0
 8008bf4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	695b      	ldr	r3, [r3, #20]
 8008bfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008c00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008c04:	d11b      	bne.n	8008c3e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008c0e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	2200      	movs	r2, #0
 8008c14:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	2220      	movs	r2, #32
 8008c1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	2200      	movs	r2, #0
 8008c22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c2a:	f043 0204 	orr.w	r2, r3, #4
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	2200      	movs	r2, #0
 8008c36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8008c3a:	2301      	movs	r3, #1
 8008c3c:	e000      	b.n	8008c40 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8008c3e:	2300      	movs	r3, #0
}
 8008c40:	4618      	mov	r0, r3
 8008c42:	370c      	adds	r7, #12
 8008c44:	46bd      	mov	sp, r7
 8008c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4a:	4770      	bx	lr

08008c4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008c4c:	b580      	push	{r7, lr}
 8008c4e:	b084      	sub	sp, #16
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	6078      	str	r0, [r7, #4]
 8008c54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d101      	bne.n	8008c60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008c5c:	2301      	movs	r3, #1
 8008c5e:	e0cc      	b.n	8008dfa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008c60:	4b68      	ldr	r3, [pc, #416]	; (8008e04 <HAL_RCC_ClockConfig+0x1b8>)
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	f003 030f 	and.w	r3, r3, #15
 8008c68:	683a      	ldr	r2, [r7, #0]
 8008c6a:	429a      	cmp	r2, r3
 8008c6c:	d90c      	bls.n	8008c88 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008c6e:	4b65      	ldr	r3, [pc, #404]	; (8008e04 <HAL_RCC_ClockConfig+0x1b8>)
 8008c70:	683a      	ldr	r2, [r7, #0]
 8008c72:	b2d2      	uxtb	r2, r2
 8008c74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008c76:	4b63      	ldr	r3, [pc, #396]	; (8008e04 <HAL_RCC_ClockConfig+0x1b8>)
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	f003 030f 	and.w	r3, r3, #15
 8008c7e:	683a      	ldr	r2, [r7, #0]
 8008c80:	429a      	cmp	r2, r3
 8008c82:	d001      	beq.n	8008c88 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008c84:	2301      	movs	r3, #1
 8008c86:	e0b8      	b.n	8008dfa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	f003 0302 	and.w	r3, r3, #2
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d020      	beq.n	8008cd6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	f003 0304 	and.w	r3, r3, #4
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d005      	beq.n	8008cac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008ca0:	4b59      	ldr	r3, [pc, #356]	; (8008e08 <HAL_RCC_ClockConfig+0x1bc>)
 8008ca2:	689b      	ldr	r3, [r3, #8]
 8008ca4:	4a58      	ldr	r2, [pc, #352]	; (8008e08 <HAL_RCC_ClockConfig+0x1bc>)
 8008ca6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008caa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	f003 0308 	and.w	r3, r3, #8
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d005      	beq.n	8008cc4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008cb8:	4b53      	ldr	r3, [pc, #332]	; (8008e08 <HAL_RCC_ClockConfig+0x1bc>)
 8008cba:	689b      	ldr	r3, [r3, #8]
 8008cbc:	4a52      	ldr	r2, [pc, #328]	; (8008e08 <HAL_RCC_ClockConfig+0x1bc>)
 8008cbe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008cc2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008cc4:	4b50      	ldr	r3, [pc, #320]	; (8008e08 <HAL_RCC_ClockConfig+0x1bc>)
 8008cc6:	689b      	ldr	r3, [r3, #8]
 8008cc8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	689b      	ldr	r3, [r3, #8]
 8008cd0:	494d      	ldr	r1, [pc, #308]	; (8008e08 <HAL_RCC_ClockConfig+0x1bc>)
 8008cd2:	4313      	orrs	r3, r2
 8008cd4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	f003 0301 	and.w	r3, r3, #1
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d044      	beq.n	8008d6c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	685b      	ldr	r3, [r3, #4]
 8008ce6:	2b01      	cmp	r3, #1
 8008ce8:	d107      	bne.n	8008cfa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008cea:	4b47      	ldr	r3, [pc, #284]	; (8008e08 <HAL_RCC_ClockConfig+0x1bc>)
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d119      	bne.n	8008d2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008cf6:	2301      	movs	r3, #1
 8008cf8:	e07f      	b.n	8008dfa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	685b      	ldr	r3, [r3, #4]
 8008cfe:	2b02      	cmp	r3, #2
 8008d00:	d003      	beq.n	8008d0a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008d06:	2b03      	cmp	r3, #3
 8008d08:	d107      	bne.n	8008d1a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008d0a:	4b3f      	ldr	r3, [pc, #252]	; (8008e08 <HAL_RCC_ClockConfig+0x1bc>)
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d109      	bne.n	8008d2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008d16:	2301      	movs	r3, #1
 8008d18:	e06f      	b.n	8008dfa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008d1a:	4b3b      	ldr	r3, [pc, #236]	; (8008e08 <HAL_RCC_ClockConfig+0x1bc>)
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	f003 0302 	and.w	r3, r3, #2
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d101      	bne.n	8008d2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008d26:	2301      	movs	r3, #1
 8008d28:	e067      	b.n	8008dfa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008d2a:	4b37      	ldr	r3, [pc, #220]	; (8008e08 <HAL_RCC_ClockConfig+0x1bc>)
 8008d2c:	689b      	ldr	r3, [r3, #8]
 8008d2e:	f023 0203 	bic.w	r2, r3, #3
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	685b      	ldr	r3, [r3, #4]
 8008d36:	4934      	ldr	r1, [pc, #208]	; (8008e08 <HAL_RCC_ClockConfig+0x1bc>)
 8008d38:	4313      	orrs	r3, r2
 8008d3a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008d3c:	f7fb faa2 	bl	8004284 <HAL_GetTick>
 8008d40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008d42:	e00a      	b.n	8008d5a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008d44:	f7fb fa9e 	bl	8004284 <HAL_GetTick>
 8008d48:	4602      	mov	r2, r0
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	1ad3      	subs	r3, r2, r3
 8008d4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d52:	4293      	cmp	r3, r2
 8008d54:	d901      	bls.n	8008d5a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008d56:	2303      	movs	r3, #3
 8008d58:	e04f      	b.n	8008dfa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008d5a:	4b2b      	ldr	r3, [pc, #172]	; (8008e08 <HAL_RCC_ClockConfig+0x1bc>)
 8008d5c:	689b      	ldr	r3, [r3, #8]
 8008d5e:	f003 020c 	and.w	r2, r3, #12
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	685b      	ldr	r3, [r3, #4]
 8008d66:	009b      	lsls	r3, r3, #2
 8008d68:	429a      	cmp	r2, r3
 8008d6a:	d1eb      	bne.n	8008d44 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008d6c:	4b25      	ldr	r3, [pc, #148]	; (8008e04 <HAL_RCC_ClockConfig+0x1b8>)
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	f003 030f 	and.w	r3, r3, #15
 8008d74:	683a      	ldr	r2, [r7, #0]
 8008d76:	429a      	cmp	r2, r3
 8008d78:	d20c      	bcs.n	8008d94 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008d7a:	4b22      	ldr	r3, [pc, #136]	; (8008e04 <HAL_RCC_ClockConfig+0x1b8>)
 8008d7c:	683a      	ldr	r2, [r7, #0]
 8008d7e:	b2d2      	uxtb	r2, r2
 8008d80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008d82:	4b20      	ldr	r3, [pc, #128]	; (8008e04 <HAL_RCC_ClockConfig+0x1b8>)
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	f003 030f 	and.w	r3, r3, #15
 8008d8a:	683a      	ldr	r2, [r7, #0]
 8008d8c:	429a      	cmp	r2, r3
 8008d8e:	d001      	beq.n	8008d94 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008d90:	2301      	movs	r3, #1
 8008d92:	e032      	b.n	8008dfa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	f003 0304 	and.w	r3, r3, #4
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d008      	beq.n	8008db2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008da0:	4b19      	ldr	r3, [pc, #100]	; (8008e08 <HAL_RCC_ClockConfig+0x1bc>)
 8008da2:	689b      	ldr	r3, [r3, #8]
 8008da4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	68db      	ldr	r3, [r3, #12]
 8008dac:	4916      	ldr	r1, [pc, #88]	; (8008e08 <HAL_RCC_ClockConfig+0x1bc>)
 8008dae:	4313      	orrs	r3, r2
 8008db0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	f003 0308 	and.w	r3, r3, #8
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d009      	beq.n	8008dd2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008dbe:	4b12      	ldr	r3, [pc, #72]	; (8008e08 <HAL_RCC_ClockConfig+0x1bc>)
 8008dc0:	689b      	ldr	r3, [r3, #8]
 8008dc2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	691b      	ldr	r3, [r3, #16]
 8008dca:	00db      	lsls	r3, r3, #3
 8008dcc:	490e      	ldr	r1, [pc, #56]	; (8008e08 <HAL_RCC_ClockConfig+0x1bc>)
 8008dce:	4313      	orrs	r3, r2
 8008dd0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008dd2:	f000 fb7f 	bl	80094d4 <HAL_RCC_GetSysClockFreq>
 8008dd6:	4602      	mov	r2, r0
 8008dd8:	4b0b      	ldr	r3, [pc, #44]	; (8008e08 <HAL_RCC_ClockConfig+0x1bc>)
 8008dda:	689b      	ldr	r3, [r3, #8]
 8008ddc:	091b      	lsrs	r3, r3, #4
 8008dde:	f003 030f 	and.w	r3, r3, #15
 8008de2:	490a      	ldr	r1, [pc, #40]	; (8008e0c <HAL_RCC_ClockConfig+0x1c0>)
 8008de4:	5ccb      	ldrb	r3, [r1, r3]
 8008de6:	fa22 f303 	lsr.w	r3, r2, r3
 8008dea:	4a09      	ldr	r2, [pc, #36]	; (8008e10 <HAL_RCC_ClockConfig+0x1c4>)
 8008dec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008dee:	4b09      	ldr	r3, [pc, #36]	; (8008e14 <HAL_RCC_ClockConfig+0x1c8>)
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	4618      	mov	r0, r3
 8008df4:	f7fb fa02 	bl	80041fc <HAL_InitTick>

  return HAL_OK;
 8008df8:	2300      	movs	r3, #0
}
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	3710      	adds	r7, #16
 8008dfe:	46bd      	mov	sp, r7
 8008e00:	bd80      	pop	{r7, pc}
 8008e02:	bf00      	nop
 8008e04:	40023c00 	.word	0x40023c00
 8008e08:	40023800 	.word	0x40023800
 8008e0c:	08013498 	.word	0x08013498
 8008e10:	2000000c 	.word	0x2000000c
 8008e14:	20000010 	.word	0x20000010

08008e18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008e18:	b480      	push	{r7}
 8008e1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008e1c:	4b03      	ldr	r3, [pc, #12]	; (8008e2c <HAL_RCC_GetHCLKFreq+0x14>)
 8008e1e:	681b      	ldr	r3, [r3, #0]
}
 8008e20:	4618      	mov	r0, r3
 8008e22:	46bd      	mov	sp, r7
 8008e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e28:	4770      	bx	lr
 8008e2a:	bf00      	nop
 8008e2c:	2000000c 	.word	0x2000000c

08008e30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008e30:	b580      	push	{r7, lr}
 8008e32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008e34:	f7ff fff0 	bl	8008e18 <HAL_RCC_GetHCLKFreq>
 8008e38:	4602      	mov	r2, r0
 8008e3a:	4b05      	ldr	r3, [pc, #20]	; (8008e50 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008e3c:	689b      	ldr	r3, [r3, #8]
 8008e3e:	0a9b      	lsrs	r3, r3, #10
 8008e40:	f003 0307 	and.w	r3, r3, #7
 8008e44:	4903      	ldr	r1, [pc, #12]	; (8008e54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008e46:	5ccb      	ldrb	r3, [r1, r3]
 8008e48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	bd80      	pop	{r7, pc}
 8008e50:	40023800 	.word	0x40023800
 8008e54:	080134a8 	.word	0x080134a8

08008e58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008e5c:	f7ff ffdc 	bl	8008e18 <HAL_RCC_GetHCLKFreq>
 8008e60:	4602      	mov	r2, r0
 8008e62:	4b05      	ldr	r3, [pc, #20]	; (8008e78 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008e64:	689b      	ldr	r3, [r3, #8]
 8008e66:	0b5b      	lsrs	r3, r3, #13
 8008e68:	f003 0307 	and.w	r3, r3, #7
 8008e6c:	4903      	ldr	r1, [pc, #12]	; (8008e7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8008e6e:	5ccb      	ldrb	r3, [r1, r3]
 8008e70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008e74:	4618      	mov	r0, r3
 8008e76:	bd80      	pop	{r7, pc}
 8008e78:	40023800 	.word	0x40023800
 8008e7c:	080134a8 	.word	0x080134a8

08008e80 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008e80:	b580      	push	{r7, lr}
 8008e82:	b08c      	sub	sp, #48	; 0x30
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008e88:	2300      	movs	r3, #0
 8008e8a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8008e8c:	2300      	movs	r3, #0
 8008e8e:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8008e90:	2300      	movs	r3, #0
 8008e92:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8008e94:	2300      	movs	r3, #0
 8008e96:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8008e98:	2300      	movs	r3, #0
 8008e9a:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8008e9c:	2300      	movs	r3, #0
 8008e9e:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8008ea0:	2300      	movs	r3, #0
 8008ea2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8008ea4:	2300      	movs	r3, #0
 8008ea6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8008ea8:	2300      	movs	r3, #0
 8008eaa:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	f003 0301 	and.w	r3, r3, #1
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d010      	beq.n	8008eda <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8008eb8:	4b6f      	ldr	r3, [pc, #444]	; (8009078 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008eba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008ebe:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ec6:	496c      	ldr	r1, [pc, #432]	; (8009078 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008ec8:	4313      	orrs	r3, r2
 8008eca:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d101      	bne.n	8008eda <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8008ed6:	2301      	movs	r3, #1
 8008ed8:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	f003 0302 	and.w	r3, r3, #2
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d010      	beq.n	8008f08 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8008ee6:	4b64      	ldr	r3, [pc, #400]	; (8009078 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008ee8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008eec:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ef4:	4960      	ldr	r1, [pc, #384]	; (8009078 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008ef6:	4313      	orrs	r3, r2
 8008ef8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d101      	bne.n	8008f08 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8008f04:	2301      	movs	r3, #1
 8008f06:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	f003 0304 	and.w	r3, r3, #4
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d017      	beq.n	8008f44 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008f14:	4b58      	ldr	r3, [pc, #352]	; (8009078 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008f16:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008f1a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f22:	4955      	ldr	r1, [pc, #340]	; (8009078 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008f24:	4313      	orrs	r3, r2
 8008f26:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008f32:	d101      	bne.n	8008f38 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8008f34:	2301      	movs	r3, #1
 8008f36:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d101      	bne.n	8008f44 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8008f40:	2301      	movs	r3, #1
 8008f42:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	f003 0308 	and.w	r3, r3, #8
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d017      	beq.n	8008f80 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8008f50:	4b49      	ldr	r3, [pc, #292]	; (8009078 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008f52:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008f56:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f5e:	4946      	ldr	r1, [pc, #280]	; (8009078 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008f60:	4313      	orrs	r3, r2
 8008f62:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f6a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008f6e:	d101      	bne.n	8008f74 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8008f70:	2301      	movs	r3, #1
 8008f72:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d101      	bne.n	8008f80 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8008f7c:	2301      	movs	r3, #1
 8008f7e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	f003 0320 	and.w	r3, r3, #32
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	f000 808a 	beq.w	80090a2 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8008f8e:	2300      	movs	r3, #0
 8008f90:	60bb      	str	r3, [r7, #8]
 8008f92:	4b39      	ldr	r3, [pc, #228]	; (8009078 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f96:	4a38      	ldr	r2, [pc, #224]	; (8009078 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008f98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008f9c:	6413      	str	r3, [r2, #64]	; 0x40
 8008f9e:	4b36      	ldr	r3, [pc, #216]	; (8009078 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008fa6:	60bb      	str	r3, [r7, #8]
 8008fa8:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8008faa:	4b34      	ldr	r3, [pc, #208]	; (800907c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	4a33      	ldr	r2, [pc, #204]	; (800907c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8008fb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008fb4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008fb6:	f7fb f965 	bl	8004284 <HAL_GetTick>
 8008fba:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8008fbc:	e008      	b.n	8008fd0 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8008fbe:	f7fb f961 	bl	8004284 <HAL_GetTick>
 8008fc2:	4602      	mov	r2, r0
 8008fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fc6:	1ad3      	subs	r3, r2, r3
 8008fc8:	2b02      	cmp	r3, #2
 8008fca:	d901      	bls.n	8008fd0 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8008fcc:	2303      	movs	r3, #3
 8008fce:	e278      	b.n	80094c2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8008fd0:	4b2a      	ldr	r3, [pc, #168]	; (800907c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d0f0      	beq.n	8008fbe <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008fdc:	4b26      	ldr	r3, [pc, #152]	; (8009078 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008fde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008fe0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008fe4:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008fe6:	6a3b      	ldr	r3, [r7, #32]
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d02f      	beq.n	800904c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ff0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008ff4:	6a3a      	ldr	r2, [r7, #32]
 8008ff6:	429a      	cmp	r2, r3
 8008ff8:	d028      	beq.n	800904c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008ffa:	4b1f      	ldr	r3, [pc, #124]	; (8009078 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008ffc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ffe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009002:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8009004:	4b1e      	ldr	r3, [pc, #120]	; (8009080 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8009006:	2201      	movs	r2, #1
 8009008:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800900a:	4b1d      	ldr	r3, [pc, #116]	; (8009080 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800900c:	2200      	movs	r2, #0
 800900e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8009010:	4a19      	ldr	r2, [pc, #100]	; (8009078 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8009012:	6a3b      	ldr	r3, [r7, #32]
 8009014:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8009016:	4b18      	ldr	r3, [pc, #96]	; (8009078 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8009018:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800901a:	f003 0301 	and.w	r3, r3, #1
 800901e:	2b01      	cmp	r3, #1
 8009020:	d114      	bne.n	800904c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8009022:	f7fb f92f 	bl	8004284 <HAL_GetTick>
 8009026:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009028:	e00a      	b.n	8009040 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800902a:	f7fb f92b 	bl	8004284 <HAL_GetTick>
 800902e:	4602      	mov	r2, r0
 8009030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009032:	1ad3      	subs	r3, r2, r3
 8009034:	f241 3288 	movw	r2, #5000	; 0x1388
 8009038:	4293      	cmp	r3, r2
 800903a:	d901      	bls.n	8009040 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 800903c:	2303      	movs	r3, #3
 800903e:	e240      	b.n	80094c2 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009040:	4b0d      	ldr	r3, [pc, #52]	; (8009078 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8009042:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009044:	f003 0302 	and.w	r3, r3, #2
 8009048:	2b00      	cmp	r3, #0
 800904a:	d0ee      	beq.n	800902a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009050:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009054:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009058:	d114      	bne.n	8009084 <HAL_RCCEx_PeriphCLKConfig+0x204>
 800905a:	4b07      	ldr	r3, [pc, #28]	; (8009078 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800905c:	689b      	ldr	r3, [r3, #8]
 800905e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009066:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800906a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800906e:	4902      	ldr	r1, [pc, #8]	; (8009078 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8009070:	4313      	orrs	r3, r2
 8009072:	608b      	str	r3, [r1, #8]
 8009074:	e00c      	b.n	8009090 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8009076:	bf00      	nop
 8009078:	40023800 	.word	0x40023800
 800907c:	40007000 	.word	0x40007000
 8009080:	42470e40 	.word	0x42470e40
 8009084:	4b4a      	ldr	r3, [pc, #296]	; (80091b0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8009086:	689b      	ldr	r3, [r3, #8]
 8009088:	4a49      	ldr	r2, [pc, #292]	; (80091b0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800908a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800908e:	6093      	str	r3, [r2, #8]
 8009090:	4b47      	ldr	r3, [pc, #284]	; (80091b0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8009092:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009098:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800909c:	4944      	ldr	r1, [pc, #272]	; (80091b0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800909e:	4313      	orrs	r3, r2
 80090a0:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	f003 0310 	and.w	r3, r3, #16
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d004      	beq.n	80090b8 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 80090b4:	4b3f      	ldr	r3, [pc, #252]	; (80091b4 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 80090b6:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d00a      	beq.n	80090da <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 80090c4:	4b3a      	ldr	r3, [pc, #232]	; (80091b0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80090c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80090ca:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80090d2:	4937      	ldr	r1, [pc, #220]	; (80091b0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80090d4:	4313      	orrs	r3, r2
 80090d6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d00a      	beq.n	80090fc <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80090e6:	4b32      	ldr	r3, [pc, #200]	; (80091b0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80090e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80090ec:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80090f4:	492e      	ldr	r1, [pc, #184]	; (80091b0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80090f6:	4313      	orrs	r3, r2
 80090f8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009104:	2b00      	cmp	r3, #0
 8009106:	d011      	beq.n	800912c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8009108:	4b29      	ldr	r3, [pc, #164]	; (80091b0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800910a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800910e:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009116:	4926      	ldr	r1, [pc, #152]	; (80091b0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8009118:	4313      	orrs	r3, r2
 800911a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009122:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009126:	d101      	bne.n	800912c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8009128:	2301      	movs	r3, #1
 800912a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009134:	2b00      	cmp	r3, #0
 8009136:	d00a      	beq.n	800914e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8009138:	4b1d      	ldr	r3, [pc, #116]	; (80091b0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800913a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800913e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009146:	491a      	ldr	r1, [pc, #104]	; (80091b0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8009148:	4313      	orrs	r3, r2
 800914a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009156:	2b00      	cmp	r3, #0
 8009158:	d011      	beq.n	800917e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 800915a:	4b15      	ldr	r3, [pc, #84]	; (80091b0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800915c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009160:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009168:	4911      	ldr	r1, [pc, #68]	; (80091b0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800916a:	4313      	orrs	r3, r2
 800916c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009174:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009178:	d101      	bne.n	800917e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 800917a:	2301      	movs	r3, #1
 800917c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800917e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009180:	2b01      	cmp	r3, #1
 8009182:	d005      	beq.n	8009190 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800918c:	f040 80ff 	bne.w	800938e <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8009190:	4b09      	ldr	r3, [pc, #36]	; (80091b8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009192:	2200      	movs	r2, #0
 8009194:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8009196:	f7fb f875 	bl	8004284 <HAL_GetTick>
 800919a:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800919c:	e00e      	b.n	80091bc <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800919e:	f7fb f871 	bl	8004284 <HAL_GetTick>
 80091a2:	4602      	mov	r2, r0
 80091a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091a6:	1ad3      	subs	r3, r2, r3
 80091a8:	2b02      	cmp	r3, #2
 80091aa:	d907      	bls.n	80091bc <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80091ac:	2303      	movs	r3, #3
 80091ae:	e188      	b.n	80094c2 <HAL_RCCEx_PeriphCLKConfig+0x642>
 80091b0:	40023800 	.word	0x40023800
 80091b4:	424711e0 	.word	0x424711e0
 80091b8:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80091bc:	4b7e      	ldr	r3, [pc, #504]	; (80093b8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d1ea      	bne.n	800919e <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	f003 0301 	and.w	r3, r3, #1
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d003      	beq.n	80091dc <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d009      	beq.n	80091f0 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d028      	beq.n	800923a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d124      	bne.n	800923a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80091f0:	4b71      	ldr	r3, [pc, #452]	; (80093b8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80091f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80091f6:	0c1b      	lsrs	r3, r3, #16
 80091f8:	f003 0303 	and.w	r3, r3, #3
 80091fc:	3301      	adds	r3, #1
 80091fe:	005b      	lsls	r3, r3, #1
 8009200:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8009202:	4b6d      	ldr	r3, [pc, #436]	; (80093b8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8009204:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009208:	0e1b      	lsrs	r3, r3, #24
 800920a:	f003 030f 	and.w	r3, r3, #15
 800920e:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	685a      	ldr	r2, [r3, #4]
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	689b      	ldr	r3, [r3, #8]
 8009218:	019b      	lsls	r3, r3, #6
 800921a:	431a      	orrs	r2, r3
 800921c:	69fb      	ldr	r3, [r7, #28]
 800921e:	085b      	lsrs	r3, r3, #1
 8009220:	3b01      	subs	r3, #1
 8009222:	041b      	lsls	r3, r3, #16
 8009224:	431a      	orrs	r2, r3
 8009226:	69bb      	ldr	r3, [r7, #24]
 8009228:	061b      	lsls	r3, r3, #24
 800922a:	431a      	orrs	r2, r3
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	695b      	ldr	r3, [r3, #20]
 8009230:	071b      	lsls	r3, r3, #28
 8009232:	4961      	ldr	r1, [pc, #388]	; (80093b8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8009234:	4313      	orrs	r3, r2
 8009236:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	f003 0304 	and.w	r3, r3, #4
 8009242:	2b00      	cmp	r3, #0
 8009244:	d004      	beq.n	8009250 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800924a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800924e:	d00a      	beq.n	8009266 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8009258:	2b00      	cmp	r3, #0
 800925a:	d035      	beq.n	80092c8 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009260:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009264:	d130      	bne.n	80092c8 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8009266:	4b54      	ldr	r3, [pc, #336]	; (80093b8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8009268:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800926c:	0c1b      	lsrs	r3, r3, #16
 800926e:	f003 0303 	and.w	r3, r3, #3
 8009272:	3301      	adds	r3, #1
 8009274:	005b      	lsls	r3, r3, #1
 8009276:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8009278:	4b4f      	ldr	r3, [pc, #316]	; (80093b8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800927a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800927e:	0f1b      	lsrs	r3, r3, #28
 8009280:	f003 0307 	and.w	r3, r3, #7
 8009284:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	685a      	ldr	r2, [r3, #4]
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	689b      	ldr	r3, [r3, #8]
 800928e:	019b      	lsls	r3, r3, #6
 8009290:	431a      	orrs	r2, r3
 8009292:	69fb      	ldr	r3, [r7, #28]
 8009294:	085b      	lsrs	r3, r3, #1
 8009296:	3b01      	subs	r3, #1
 8009298:	041b      	lsls	r3, r3, #16
 800929a:	431a      	orrs	r2, r3
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	691b      	ldr	r3, [r3, #16]
 80092a0:	061b      	lsls	r3, r3, #24
 80092a2:	431a      	orrs	r2, r3
 80092a4:	697b      	ldr	r3, [r7, #20]
 80092a6:	071b      	lsls	r3, r3, #28
 80092a8:	4943      	ldr	r1, [pc, #268]	; (80093b8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80092aa:	4313      	orrs	r3, r2
 80092ac:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80092b0:	4b41      	ldr	r3, [pc, #260]	; (80093b8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80092b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80092b6:	f023 021f 	bic.w	r2, r3, #31
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092be:	3b01      	subs	r3, #1
 80092c0:	493d      	ldr	r1, [pc, #244]	; (80093b8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80092c2:	4313      	orrs	r3, r2
 80092c4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d029      	beq.n	8009328 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80092d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80092dc:	d124      	bne.n	8009328 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80092de:	4b36      	ldr	r3, [pc, #216]	; (80093b8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80092e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80092e4:	0c1b      	lsrs	r3, r3, #16
 80092e6:	f003 0303 	and.w	r3, r3, #3
 80092ea:	3301      	adds	r3, #1
 80092ec:	005b      	lsls	r3, r3, #1
 80092ee:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80092f0:	4b31      	ldr	r3, [pc, #196]	; (80093b8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80092f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80092f6:	0f1b      	lsrs	r3, r3, #28
 80092f8:	f003 0307 	and.w	r3, r3, #7
 80092fc:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	685a      	ldr	r2, [r3, #4]
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	689b      	ldr	r3, [r3, #8]
 8009306:	019b      	lsls	r3, r3, #6
 8009308:	431a      	orrs	r2, r3
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	68db      	ldr	r3, [r3, #12]
 800930e:	085b      	lsrs	r3, r3, #1
 8009310:	3b01      	subs	r3, #1
 8009312:	041b      	lsls	r3, r3, #16
 8009314:	431a      	orrs	r2, r3
 8009316:	69bb      	ldr	r3, [r7, #24]
 8009318:	061b      	lsls	r3, r3, #24
 800931a:	431a      	orrs	r2, r3
 800931c:	697b      	ldr	r3, [r7, #20]
 800931e:	071b      	lsls	r3, r3, #28
 8009320:	4925      	ldr	r1, [pc, #148]	; (80093b8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8009322:	4313      	orrs	r3, r2
 8009324:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009330:	2b00      	cmp	r3, #0
 8009332:	d016      	beq.n	8009362 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	685a      	ldr	r2, [r3, #4]
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	689b      	ldr	r3, [r3, #8]
 800933c:	019b      	lsls	r3, r3, #6
 800933e:	431a      	orrs	r2, r3
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	68db      	ldr	r3, [r3, #12]
 8009344:	085b      	lsrs	r3, r3, #1
 8009346:	3b01      	subs	r3, #1
 8009348:	041b      	lsls	r3, r3, #16
 800934a:	431a      	orrs	r2, r3
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	691b      	ldr	r3, [r3, #16]
 8009350:	061b      	lsls	r3, r3, #24
 8009352:	431a      	orrs	r2, r3
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	695b      	ldr	r3, [r3, #20]
 8009358:	071b      	lsls	r3, r3, #28
 800935a:	4917      	ldr	r1, [pc, #92]	; (80093b8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800935c:	4313      	orrs	r3, r2
 800935e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8009362:	4b16      	ldr	r3, [pc, #88]	; (80093bc <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8009364:	2201      	movs	r2, #1
 8009366:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8009368:	f7fa ff8c 	bl	8004284 <HAL_GetTick>
 800936c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800936e:	e008      	b.n	8009382 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8009370:	f7fa ff88 	bl	8004284 <HAL_GetTick>
 8009374:	4602      	mov	r2, r0
 8009376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009378:	1ad3      	subs	r3, r2, r3
 800937a:	2b02      	cmp	r3, #2
 800937c:	d901      	bls.n	8009382 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800937e:	2303      	movs	r3, #3
 8009380:	e09f      	b.n	80094c2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009382:	4b0d      	ldr	r3, [pc, #52]	; (80093b8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800938a:	2b00      	cmp	r3, #0
 800938c:	d0f0      	beq.n	8009370 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 800938e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009390:	2b01      	cmp	r3, #1
 8009392:	f040 8095 	bne.w	80094c0 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8009396:	4b0a      	ldr	r3, [pc, #40]	; (80093c0 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8009398:	2200      	movs	r2, #0
 800939a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800939c:	f7fa ff72 	bl	8004284 <HAL_GetTick>
 80093a0:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80093a2:	e00f      	b.n	80093c4 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80093a4:	f7fa ff6e 	bl	8004284 <HAL_GetTick>
 80093a8:	4602      	mov	r2, r0
 80093aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093ac:	1ad3      	subs	r3, r2, r3
 80093ae:	2b02      	cmp	r3, #2
 80093b0:	d908      	bls.n	80093c4 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80093b2:	2303      	movs	r3, #3
 80093b4:	e085      	b.n	80094c2 <HAL_RCCEx_PeriphCLKConfig+0x642>
 80093b6:	bf00      	nop
 80093b8:	40023800 	.word	0x40023800
 80093bc:	42470068 	.word	0x42470068
 80093c0:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80093c4:	4b41      	ldr	r3, [pc, #260]	; (80094cc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80093cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80093d0:	d0e8      	beq.n	80093a4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	f003 0304 	and.w	r3, r3, #4
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d003      	beq.n	80093e6 <HAL_RCCEx_PeriphCLKConfig+0x566>
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d009      	beq.n	80093fa <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d02b      	beq.n	800944a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d127      	bne.n	800944a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 80093fa:	4b34      	ldr	r3, [pc, #208]	; (80094cc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80093fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009400:	0c1b      	lsrs	r3, r3, #16
 8009402:	f003 0303 	and.w	r3, r3, #3
 8009406:	3301      	adds	r3, #1
 8009408:	005b      	lsls	r3, r3, #1
 800940a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	699a      	ldr	r2, [r3, #24]
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	69db      	ldr	r3, [r3, #28]
 8009414:	019b      	lsls	r3, r3, #6
 8009416:	431a      	orrs	r2, r3
 8009418:	693b      	ldr	r3, [r7, #16]
 800941a:	085b      	lsrs	r3, r3, #1
 800941c:	3b01      	subs	r3, #1
 800941e:	041b      	lsls	r3, r3, #16
 8009420:	431a      	orrs	r2, r3
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009426:	061b      	lsls	r3, r3, #24
 8009428:	4928      	ldr	r1, [pc, #160]	; (80094cc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800942a:	4313      	orrs	r3, r2
 800942c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8009430:	4b26      	ldr	r3, [pc, #152]	; (80094cc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8009432:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009436:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800943e:	3b01      	subs	r3, #1
 8009440:	021b      	lsls	r3, r3, #8
 8009442:	4922      	ldr	r1, [pc, #136]	; (80094cc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8009444:	4313      	orrs	r3, r2
 8009446:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009452:	2b00      	cmp	r3, #0
 8009454:	d01d      	beq.n	8009492 <HAL_RCCEx_PeriphCLKConfig+0x612>
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800945a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800945e:	d118      	bne.n	8009492 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8009460:	4b1a      	ldr	r3, [pc, #104]	; (80094cc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8009462:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009466:	0e1b      	lsrs	r3, r3, #24
 8009468:	f003 030f 	and.w	r3, r3, #15
 800946c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	699a      	ldr	r2, [r3, #24]
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	69db      	ldr	r3, [r3, #28]
 8009476:	019b      	lsls	r3, r3, #6
 8009478:	431a      	orrs	r2, r3
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	6a1b      	ldr	r3, [r3, #32]
 800947e:	085b      	lsrs	r3, r3, #1
 8009480:	3b01      	subs	r3, #1
 8009482:	041b      	lsls	r3, r3, #16
 8009484:	431a      	orrs	r2, r3
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	061b      	lsls	r3, r3, #24
 800948a:	4910      	ldr	r1, [pc, #64]	; (80094cc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800948c:	4313      	orrs	r3, r2
 800948e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8009492:	4b0f      	ldr	r3, [pc, #60]	; (80094d0 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8009494:	2201      	movs	r2, #1
 8009496:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8009498:	f7fa fef4 	bl	8004284 <HAL_GetTick>
 800949c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800949e:	e008      	b.n	80094b2 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80094a0:	f7fa fef0 	bl	8004284 <HAL_GetTick>
 80094a4:	4602      	mov	r2, r0
 80094a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094a8:	1ad3      	subs	r3, r2, r3
 80094aa:	2b02      	cmp	r3, #2
 80094ac:	d901      	bls.n	80094b2 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80094ae:	2303      	movs	r3, #3
 80094b0:	e007      	b.n	80094c2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80094b2:	4b06      	ldr	r3, [pc, #24]	; (80094cc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80094ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80094be:	d1ef      	bne.n	80094a0 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 80094c0:	2300      	movs	r3, #0
}
 80094c2:	4618      	mov	r0, r3
 80094c4:	3730      	adds	r7, #48	; 0x30
 80094c6:	46bd      	mov	sp, r7
 80094c8:	bd80      	pop	{r7, pc}
 80094ca:	bf00      	nop
 80094cc:	40023800 	.word	0x40023800
 80094d0:	42470070 	.word	0x42470070

080094d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80094d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80094d8:	b0a6      	sub	sp, #152	; 0x98
 80094da:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80094dc:	2300      	movs	r3, #0
 80094de:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 80094e2:	2300      	movs	r3, #0
 80094e4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 80094e8:	2300      	movs	r3, #0
 80094ea:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 80094ee:	2300      	movs	r3, #0
 80094f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 80094f4:	2300      	movs	r3, #0
 80094f6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80094fa:	4bc8      	ldr	r3, [pc, #800]	; (800981c <HAL_RCC_GetSysClockFreq+0x348>)
 80094fc:	689b      	ldr	r3, [r3, #8]
 80094fe:	f003 030c 	and.w	r3, r3, #12
 8009502:	2b0c      	cmp	r3, #12
 8009504:	f200 817e 	bhi.w	8009804 <HAL_RCC_GetSysClockFreq+0x330>
 8009508:	a201      	add	r2, pc, #4	; (adr r2, 8009510 <HAL_RCC_GetSysClockFreq+0x3c>)
 800950a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800950e:	bf00      	nop
 8009510:	08009545 	.word	0x08009545
 8009514:	08009805 	.word	0x08009805
 8009518:	08009805 	.word	0x08009805
 800951c:	08009805 	.word	0x08009805
 8009520:	0800954d 	.word	0x0800954d
 8009524:	08009805 	.word	0x08009805
 8009528:	08009805 	.word	0x08009805
 800952c:	08009805 	.word	0x08009805
 8009530:	08009555 	.word	0x08009555
 8009534:	08009805 	.word	0x08009805
 8009538:	08009805 	.word	0x08009805
 800953c:	08009805 	.word	0x08009805
 8009540:	080096bf 	.word	0x080096bf
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009544:	4bb6      	ldr	r3, [pc, #728]	; (8009820 <HAL_RCC_GetSysClockFreq+0x34c>)
 8009546:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 800954a:	e15f      	b.n	800980c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800954c:	4bb5      	ldr	r3, [pc, #724]	; (8009824 <HAL_RCC_GetSysClockFreq+0x350>)
 800954e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8009552:	e15b      	b.n	800980c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009554:	4bb1      	ldr	r3, [pc, #708]	; (800981c <HAL_RCC_GetSysClockFreq+0x348>)
 8009556:	685b      	ldr	r3, [r3, #4]
 8009558:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800955c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009560:	4bae      	ldr	r3, [pc, #696]	; (800981c <HAL_RCC_GetSysClockFreq+0x348>)
 8009562:	685b      	ldr	r3, [r3, #4]
 8009564:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009568:	2b00      	cmp	r3, #0
 800956a:	d031      	beq.n	80095d0 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800956c:	4bab      	ldr	r3, [pc, #684]	; (800981c <HAL_RCC_GetSysClockFreq+0x348>)
 800956e:	685b      	ldr	r3, [r3, #4]
 8009570:	099b      	lsrs	r3, r3, #6
 8009572:	2200      	movs	r2, #0
 8009574:	66bb      	str	r3, [r7, #104]	; 0x68
 8009576:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009578:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800957a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800957e:	663b      	str	r3, [r7, #96]	; 0x60
 8009580:	2300      	movs	r3, #0
 8009582:	667b      	str	r3, [r7, #100]	; 0x64
 8009584:	4ba7      	ldr	r3, [pc, #668]	; (8009824 <HAL_RCC_GetSysClockFreq+0x350>)
 8009586:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800958a:	462a      	mov	r2, r5
 800958c:	fb03 f202 	mul.w	r2, r3, r2
 8009590:	2300      	movs	r3, #0
 8009592:	4621      	mov	r1, r4
 8009594:	fb01 f303 	mul.w	r3, r1, r3
 8009598:	4413      	add	r3, r2
 800959a:	4aa2      	ldr	r2, [pc, #648]	; (8009824 <HAL_RCC_GetSysClockFreq+0x350>)
 800959c:	4621      	mov	r1, r4
 800959e:	fba1 1202 	umull	r1, r2, r1, r2
 80095a2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80095a4:	460a      	mov	r2, r1
 80095a6:	67ba      	str	r2, [r7, #120]	; 0x78
 80095a8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80095aa:	4413      	add	r3, r2
 80095ac:	67fb      	str	r3, [r7, #124]	; 0x7c
 80095ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80095b2:	2200      	movs	r2, #0
 80095b4:	65bb      	str	r3, [r7, #88]	; 0x58
 80095b6:	65fa      	str	r2, [r7, #92]	; 0x5c
 80095b8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80095bc:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80095c0:	f7f7 fbca 	bl	8000d58 <__aeabi_uldivmod>
 80095c4:	4602      	mov	r2, r0
 80095c6:	460b      	mov	r3, r1
 80095c8:	4613      	mov	r3, r2
 80095ca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80095ce:	e064      	b.n	800969a <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80095d0:	4b92      	ldr	r3, [pc, #584]	; (800981c <HAL_RCC_GetSysClockFreq+0x348>)
 80095d2:	685b      	ldr	r3, [r3, #4]
 80095d4:	099b      	lsrs	r3, r3, #6
 80095d6:	2200      	movs	r2, #0
 80095d8:	653b      	str	r3, [r7, #80]	; 0x50
 80095da:	657a      	str	r2, [r7, #84]	; 0x54
 80095dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80095de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095e2:	64bb      	str	r3, [r7, #72]	; 0x48
 80095e4:	2300      	movs	r3, #0
 80095e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80095e8:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 80095ec:	4622      	mov	r2, r4
 80095ee:	462b      	mov	r3, r5
 80095f0:	f04f 0000 	mov.w	r0, #0
 80095f4:	f04f 0100 	mov.w	r1, #0
 80095f8:	0159      	lsls	r1, r3, #5
 80095fa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80095fe:	0150      	lsls	r0, r2, #5
 8009600:	4602      	mov	r2, r0
 8009602:	460b      	mov	r3, r1
 8009604:	4621      	mov	r1, r4
 8009606:	1a51      	subs	r1, r2, r1
 8009608:	6139      	str	r1, [r7, #16]
 800960a:	4629      	mov	r1, r5
 800960c:	eb63 0301 	sbc.w	r3, r3, r1
 8009610:	617b      	str	r3, [r7, #20]
 8009612:	f04f 0200 	mov.w	r2, #0
 8009616:	f04f 0300 	mov.w	r3, #0
 800961a:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800961e:	4659      	mov	r1, fp
 8009620:	018b      	lsls	r3, r1, #6
 8009622:	4651      	mov	r1, sl
 8009624:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8009628:	4651      	mov	r1, sl
 800962a:	018a      	lsls	r2, r1, #6
 800962c:	4651      	mov	r1, sl
 800962e:	ebb2 0801 	subs.w	r8, r2, r1
 8009632:	4659      	mov	r1, fp
 8009634:	eb63 0901 	sbc.w	r9, r3, r1
 8009638:	f04f 0200 	mov.w	r2, #0
 800963c:	f04f 0300 	mov.w	r3, #0
 8009640:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009644:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009648:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800964c:	4690      	mov	r8, r2
 800964e:	4699      	mov	r9, r3
 8009650:	4623      	mov	r3, r4
 8009652:	eb18 0303 	adds.w	r3, r8, r3
 8009656:	60bb      	str	r3, [r7, #8]
 8009658:	462b      	mov	r3, r5
 800965a:	eb49 0303 	adc.w	r3, r9, r3
 800965e:	60fb      	str	r3, [r7, #12]
 8009660:	f04f 0200 	mov.w	r2, #0
 8009664:	f04f 0300 	mov.w	r3, #0
 8009668:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800966c:	4629      	mov	r1, r5
 800966e:	028b      	lsls	r3, r1, #10
 8009670:	4621      	mov	r1, r4
 8009672:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009676:	4621      	mov	r1, r4
 8009678:	028a      	lsls	r2, r1, #10
 800967a:	4610      	mov	r0, r2
 800967c:	4619      	mov	r1, r3
 800967e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009682:	2200      	movs	r2, #0
 8009684:	643b      	str	r3, [r7, #64]	; 0x40
 8009686:	647a      	str	r2, [r7, #68]	; 0x44
 8009688:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800968c:	f7f7 fb64 	bl	8000d58 <__aeabi_uldivmod>
 8009690:	4602      	mov	r2, r0
 8009692:	460b      	mov	r3, r1
 8009694:	4613      	mov	r3, r2
 8009696:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800969a:	4b60      	ldr	r3, [pc, #384]	; (800981c <HAL_RCC_GetSysClockFreq+0x348>)
 800969c:	685b      	ldr	r3, [r3, #4]
 800969e:	0c1b      	lsrs	r3, r3, #16
 80096a0:	f003 0303 	and.w	r3, r3, #3
 80096a4:	3301      	adds	r3, #1
 80096a6:	005b      	lsls	r3, r3, #1
 80096a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 80096ac:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80096b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80096b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80096b8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80096bc:	e0a6      	b.n	800980c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80096be:	4b57      	ldr	r3, [pc, #348]	; (800981c <HAL_RCC_GetSysClockFreq+0x348>)
 80096c0:	685b      	ldr	r3, [r3, #4]
 80096c2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80096c6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80096ca:	4b54      	ldr	r3, [pc, #336]	; (800981c <HAL_RCC_GetSysClockFreq+0x348>)
 80096cc:	685b      	ldr	r3, [r3, #4]
 80096ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d02a      	beq.n	800972c <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80096d6:	4b51      	ldr	r3, [pc, #324]	; (800981c <HAL_RCC_GetSysClockFreq+0x348>)
 80096d8:	685b      	ldr	r3, [r3, #4]
 80096da:	099b      	lsrs	r3, r3, #6
 80096dc:	2200      	movs	r2, #0
 80096de:	63bb      	str	r3, [r7, #56]	; 0x38
 80096e0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80096e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096e4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80096e8:	2100      	movs	r1, #0
 80096ea:	4b4e      	ldr	r3, [pc, #312]	; (8009824 <HAL_RCC_GetSysClockFreq+0x350>)
 80096ec:	fb03 f201 	mul.w	r2, r3, r1
 80096f0:	2300      	movs	r3, #0
 80096f2:	fb00 f303 	mul.w	r3, r0, r3
 80096f6:	4413      	add	r3, r2
 80096f8:	4a4a      	ldr	r2, [pc, #296]	; (8009824 <HAL_RCC_GetSysClockFreq+0x350>)
 80096fa:	fba0 1202 	umull	r1, r2, r0, r2
 80096fe:	677a      	str	r2, [r7, #116]	; 0x74
 8009700:	460a      	mov	r2, r1
 8009702:	673a      	str	r2, [r7, #112]	; 0x70
 8009704:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8009706:	4413      	add	r3, r2
 8009708:	677b      	str	r3, [r7, #116]	; 0x74
 800970a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800970e:	2200      	movs	r2, #0
 8009710:	633b      	str	r3, [r7, #48]	; 0x30
 8009712:	637a      	str	r2, [r7, #52]	; 0x34
 8009714:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8009718:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 800971c:	f7f7 fb1c 	bl	8000d58 <__aeabi_uldivmod>
 8009720:	4602      	mov	r2, r0
 8009722:	460b      	mov	r3, r1
 8009724:	4613      	mov	r3, r2
 8009726:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800972a:	e05b      	b.n	80097e4 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800972c:	4b3b      	ldr	r3, [pc, #236]	; (800981c <HAL_RCC_GetSysClockFreq+0x348>)
 800972e:	685b      	ldr	r3, [r3, #4]
 8009730:	099b      	lsrs	r3, r3, #6
 8009732:	2200      	movs	r2, #0
 8009734:	62bb      	str	r3, [r7, #40]	; 0x28
 8009736:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800973a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800973e:	623b      	str	r3, [r7, #32]
 8009740:	2300      	movs	r3, #0
 8009742:	627b      	str	r3, [r7, #36]	; 0x24
 8009744:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8009748:	4642      	mov	r2, r8
 800974a:	464b      	mov	r3, r9
 800974c:	f04f 0000 	mov.w	r0, #0
 8009750:	f04f 0100 	mov.w	r1, #0
 8009754:	0159      	lsls	r1, r3, #5
 8009756:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800975a:	0150      	lsls	r0, r2, #5
 800975c:	4602      	mov	r2, r0
 800975e:	460b      	mov	r3, r1
 8009760:	4641      	mov	r1, r8
 8009762:	ebb2 0a01 	subs.w	sl, r2, r1
 8009766:	4649      	mov	r1, r9
 8009768:	eb63 0b01 	sbc.w	fp, r3, r1
 800976c:	f04f 0200 	mov.w	r2, #0
 8009770:	f04f 0300 	mov.w	r3, #0
 8009774:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8009778:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800977c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8009780:	ebb2 040a 	subs.w	r4, r2, sl
 8009784:	eb63 050b 	sbc.w	r5, r3, fp
 8009788:	f04f 0200 	mov.w	r2, #0
 800978c:	f04f 0300 	mov.w	r3, #0
 8009790:	00eb      	lsls	r3, r5, #3
 8009792:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009796:	00e2      	lsls	r2, r4, #3
 8009798:	4614      	mov	r4, r2
 800979a:	461d      	mov	r5, r3
 800979c:	4643      	mov	r3, r8
 800979e:	18e3      	adds	r3, r4, r3
 80097a0:	603b      	str	r3, [r7, #0]
 80097a2:	464b      	mov	r3, r9
 80097a4:	eb45 0303 	adc.w	r3, r5, r3
 80097a8:	607b      	str	r3, [r7, #4]
 80097aa:	f04f 0200 	mov.w	r2, #0
 80097ae:	f04f 0300 	mov.w	r3, #0
 80097b2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80097b6:	4629      	mov	r1, r5
 80097b8:	028b      	lsls	r3, r1, #10
 80097ba:	4621      	mov	r1, r4
 80097bc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80097c0:	4621      	mov	r1, r4
 80097c2:	028a      	lsls	r2, r1, #10
 80097c4:	4610      	mov	r0, r2
 80097c6:	4619      	mov	r1, r3
 80097c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80097cc:	2200      	movs	r2, #0
 80097ce:	61bb      	str	r3, [r7, #24]
 80097d0:	61fa      	str	r2, [r7, #28]
 80097d2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80097d6:	f7f7 fabf 	bl	8000d58 <__aeabi_uldivmod>
 80097da:	4602      	mov	r2, r0
 80097dc:	460b      	mov	r3, r1
 80097de:	4613      	mov	r3, r2
 80097e0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80097e4:	4b0d      	ldr	r3, [pc, #52]	; (800981c <HAL_RCC_GetSysClockFreq+0x348>)
 80097e6:	685b      	ldr	r3, [r3, #4]
 80097e8:	0f1b      	lsrs	r3, r3, #28
 80097ea:	f003 0307 	and.w	r3, r3, #7
 80097ee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 80097f2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80097f6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80097fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80097fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8009802:	e003      	b.n	800980c <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009804:	4b06      	ldr	r3, [pc, #24]	; (8009820 <HAL_RCC_GetSysClockFreq+0x34c>)
 8009806:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 800980a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800980c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 8009810:	4618      	mov	r0, r3
 8009812:	3798      	adds	r7, #152	; 0x98
 8009814:	46bd      	mov	sp, r7
 8009816:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800981a:	bf00      	nop
 800981c:	40023800 	.word	0x40023800
 8009820:	00f42400 	.word	0x00f42400
 8009824:	017d7840 	.word	0x017d7840

08009828 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009828:	b580      	push	{r7, lr}
 800982a:	b086      	sub	sp, #24
 800982c:	af00      	add	r7, sp, #0
 800982e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	2b00      	cmp	r3, #0
 8009834:	d101      	bne.n	800983a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009836:	2301      	movs	r3, #1
 8009838:	e28d      	b.n	8009d56 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	f003 0301 	and.w	r3, r3, #1
 8009842:	2b00      	cmp	r3, #0
 8009844:	f000 8083 	beq.w	800994e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8009848:	4b94      	ldr	r3, [pc, #592]	; (8009a9c <HAL_RCC_OscConfig+0x274>)
 800984a:	689b      	ldr	r3, [r3, #8]
 800984c:	f003 030c 	and.w	r3, r3, #12
 8009850:	2b04      	cmp	r3, #4
 8009852:	d019      	beq.n	8009888 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8009854:	4b91      	ldr	r3, [pc, #580]	; (8009a9c <HAL_RCC_OscConfig+0x274>)
 8009856:	689b      	ldr	r3, [r3, #8]
 8009858:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800985c:	2b08      	cmp	r3, #8
 800985e:	d106      	bne.n	800986e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8009860:	4b8e      	ldr	r3, [pc, #568]	; (8009a9c <HAL_RCC_OscConfig+0x274>)
 8009862:	685b      	ldr	r3, [r3, #4]
 8009864:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009868:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800986c:	d00c      	beq.n	8009888 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800986e:	4b8b      	ldr	r3, [pc, #556]	; (8009a9c <HAL_RCC_OscConfig+0x274>)
 8009870:	689b      	ldr	r3, [r3, #8]
 8009872:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8009876:	2b0c      	cmp	r3, #12
 8009878:	d112      	bne.n	80098a0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800987a:	4b88      	ldr	r3, [pc, #544]	; (8009a9c <HAL_RCC_OscConfig+0x274>)
 800987c:	685b      	ldr	r3, [r3, #4]
 800987e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009882:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009886:	d10b      	bne.n	80098a0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009888:	4b84      	ldr	r3, [pc, #528]	; (8009a9c <HAL_RCC_OscConfig+0x274>)
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009890:	2b00      	cmp	r3, #0
 8009892:	d05b      	beq.n	800994c <HAL_RCC_OscConfig+0x124>
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	685b      	ldr	r3, [r3, #4]
 8009898:	2b00      	cmp	r3, #0
 800989a:	d157      	bne.n	800994c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800989c:	2301      	movs	r3, #1
 800989e:	e25a      	b.n	8009d56 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	685b      	ldr	r3, [r3, #4]
 80098a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80098a8:	d106      	bne.n	80098b8 <HAL_RCC_OscConfig+0x90>
 80098aa:	4b7c      	ldr	r3, [pc, #496]	; (8009a9c <HAL_RCC_OscConfig+0x274>)
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	4a7b      	ldr	r2, [pc, #492]	; (8009a9c <HAL_RCC_OscConfig+0x274>)
 80098b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80098b4:	6013      	str	r3, [r2, #0]
 80098b6:	e01d      	b.n	80098f4 <HAL_RCC_OscConfig+0xcc>
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	685b      	ldr	r3, [r3, #4]
 80098bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80098c0:	d10c      	bne.n	80098dc <HAL_RCC_OscConfig+0xb4>
 80098c2:	4b76      	ldr	r3, [pc, #472]	; (8009a9c <HAL_RCC_OscConfig+0x274>)
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	4a75      	ldr	r2, [pc, #468]	; (8009a9c <HAL_RCC_OscConfig+0x274>)
 80098c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80098cc:	6013      	str	r3, [r2, #0]
 80098ce:	4b73      	ldr	r3, [pc, #460]	; (8009a9c <HAL_RCC_OscConfig+0x274>)
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	4a72      	ldr	r2, [pc, #456]	; (8009a9c <HAL_RCC_OscConfig+0x274>)
 80098d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80098d8:	6013      	str	r3, [r2, #0]
 80098da:	e00b      	b.n	80098f4 <HAL_RCC_OscConfig+0xcc>
 80098dc:	4b6f      	ldr	r3, [pc, #444]	; (8009a9c <HAL_RCC_OscConfig+0x274>)
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	4a6e      	ldr	r2, [pc, #440]	; (8009a9c <HAL_RCC_OscConfig+0x274>)
 80098e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80098e6:	6013      	str	r3, [r2, #0]
 80098e8:	4b6c      	ldr	r3, [pc, #432]	; (8009a9c <HAL_RCC_OscConfig+0x274>)
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	4a6b      	ldr	r2, [pc, #428]	; (8009a9c <HAL_RCC_OscConfig+0x274>)
 80098ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80098f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	685b      	ldr	r3, [r3, #4]
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d013      	beq.n	8009924 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80098fc:	f7fa fcc2 	bl	8004284 <HAL_GetTick>
 8009900:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009902:	e008      	b.n	8009916 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009904:	f7fa fcbe 	bl	8004284 <HAL_GetTick>
 8009908:	4602      	mov	r2, r0
 800990a:	693b      	ldr	r3, [r7, #16]
 800990c:	1ad3      	subs	r3, r2, r3
 800990e:	2b64      	cmp	r3, #100	; 0x64
 8009910:	d901      	bls.n	8009916 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8009912:	2303      	movs	r3, #3
 8009914:	e21f      	b.n	8009d56 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009916:	4b61      	ldr	r3, [pc, #388]	; (8009a9c <HAL_RCC_OscConfig+0x274>)
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800991e:	2b00      	cmp	r3, #0
 8009920:	d0f0      	beq.n	8009904 <HAL_RCC_OscConfig+0xdc>
 8009922:	e014      	b.n	800994e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009924:	f7fa fcae 	bl	8004284 <HAL_GetTick>
 8009928:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800992a:	e008      	b.n	800993e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800992c:	f7fa fcaa 	bl	8004284 <HAL_GetTick>
 8009930:	4602      	mov	r2, r0
 8009932:	693b      	ldr	r3, [r7, #16]
 8009934:	1ad3      	subs	r3, r2, r3
 8009936:	2b64      	cmp	r3, #100	; 0x64
 8009938:	d901      	bls.n	800993e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800993a:	2303      	movs	r3, #3
 800993c:	e20b      	b.n	8009d56 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800993e:	4b57      	ldr	r3, [pc, #348]	; (8009a9c <HAL_RCC_OscConfig+0x274>)
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009946:	2b00      	cmp	r3, #0
 8009948:	d1f0      	bne.n	800992c <HAL_RCC_OscConfig+0x104>
 800994a:	e000      	b.n	800994e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800994c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	f003 0302 	and.w	r3, r3, #2
 8009956:	2b00      	cmp	r3, #0
 8009958:	d06f      	beq.n	8009a3a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800995a:	4b50      	ldr	r3, [pc, #320]	; (8009a9c <HAL_RCC_OscConfig+0x274>)
 800995c:	689b      	ldr	r3, [r3, #8]
 800995e:	f003 030c 	and.w	r3, r3, #12
 8009962:	2b00      	cmp	r3, #0
 8009964:	d017      	beq.n	8009996 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8009966:	4b4d      	ldr	r3, [pc, #308]	; (8009a9c <HAL_RCC_OscConfig+0x274>)
 8009968:	689b      	ldr	r3, [r3, #8]
 800996a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800996e:	2b08      	cmp	r3, #8
 8009970:	d105      	bne.n	800997e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8009972:	4b4a      	ldr	r3, [pc, #296]	; (8009a9c <HAL_RCC_OscConfig+0x274>)
 8009974:	685b      	ldr	r3, [r3, #4]
 8009976:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800997a:	2b00      	cmp	r3, #0
 800997c:	d00b      	beq.n	8009996 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800997e:	4b47      	ldr	r3, [pc, #284]	; (8009a9c <HAL_RCC_OscConfig+0x274>)
 8009980:	689b      	ldr	r3, [r3, #8]
 8009982:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8009986:	2b0c      	cmp	r3, #12
 8009988:	d11c      	bne.n	80099c4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800998a:	4b44      	ldr	r3, [pc, #272]	; (8009a9c <HAL_RCC_OscConfig+0x274>)
 800998c:	685b      	ldr	r3, [r3, #4]
 800998e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009992:	2b00      	cmp	r3, #0
 8009994:	d116      	bne.n	80099c4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009996:	4b41      	ldr	r3, [pc, #260]	; (8009a9c <HAL_RCC_OscConfig+0x274>)
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	f003 0302 	and.w	r3, r3, #2
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d005      	beq.n	80099ae <HAL_RCC_OscConfig+0x186>
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	68db      	ldr	r3, [r3, #12]
 80099a6:	2b01      	cmp	r3, #1
 80099a8:	d001      	beq.n	80099ae <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80099aa:	2301      	movs	r3, #1
 80099ac:	e1d3      	b.n	8009d56 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80099ae:	4b3b      	ldr	r3, [pc, #236]	; (8009a9c <HAL_RCC_OscConfig+0x274>)
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	691b      	ldr	r3, [r3, #16]
 80099ba:	00db      	lsls	r3, r3, #3
 80099bc:	4937      	ldr	r1, [pc, #220]	; (8009a9c <HAL_RCC_OscConfig+0x274>)
 80099be:	4313      	orrs	r3, r2
 80099c0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80099c2:	e03a      	b.n	8009a3a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	68db      	ldr	r3, [r3, #12]
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d020      	beq.n	8009a0e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80099cc:	4b34      	ldr	r3, [pc, #208]	; (8009aa0 <HAL_RCC_OscConfig+0x278>)
 80099ce:	2201      	movs	r2, #1
 80099d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80099d2:	f7fa fc57 	bl	8004284 <HAL_GetTick>
 80099d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80099d8:	e008      	b.n	80099ec <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80099da:	f7fa fc53 	bl	8004284 <HAL_GetTick>
 80099de:	4602      	mov	r2, r0
 80099e0:	693b      	ldr	r3, [r7, #16]
 80099e2:	1ad3      	subs	r3, r2, r3
 80099e4:	2b02      	cmp	r3, #2
 80099e6:	d901      	bls.n	80099ec <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80099e8:	2303      	movs	r3, #3
 80099ea:	e1b4      	b.n	8009d56 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80099ec:	4b2b      	ldr	r3, [pc, #172]	; (8009a9c <HAL_RCC_OscConfig+0x274>)
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	f003 0302 	and.w	r3, r3, #2
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d0f0      	beq.n	80099da <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80099f8:	4b28      	ldr	r3, [pc, #160]	; (8009a9c <HAL_RCC_OscConfig+0x274>)
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	691b      	ldr	r3, [r3, #16]
 8009a04:	00db      	lsls	r3, r3, #3
 8009a06:	4925      	ldr	r1, [pc, #148]	; (8009a9c <HAL_RCC_OscConfig+0x274>)
 8009a08:	4313      	orrs	r3, r2
 8009a0a:	600b      	str	r3, [r1, #0]
 8009a0c:	e015      	b.n	8009a3a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009a0e:	4b24      	ldr	r3, [pc, #144]	; (8009aa0 <HAL_RCC_OscConfig+0x278>)
 8009a10:	2200      	movs	r2, #0
 8009a12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009a14:	f7fa fc36 	bl	8004284 <HAL_GetTick>
 8009a18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009a1a:	e008      	b.n	8009a2e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009a1c:	f7fa fc32 	bl	8004284 <HAL_GetTick>
 8009a20:	4602      	mov	r2, r0
 8009a22:	693b      	ldr	r3, [r7, #16]
 8009a24:	1ad3      	subs	r3, r2, r3
 8009a26:	2b02      	cmp	r3, #2
 8009a28:	d901      	bls.n	8009a2e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8009a2a:	2303      	movs	r3, #3
 8009a2c:	e193      	b.n	8009d56 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009a2e:	4b1b      	ldr	r3, [pc, #108]	; (8009a9c <HAL_RCC_OscConfig+0x274>)
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	f003 0302 	and.w	r3, r3, #2
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d1f0      	bne.n	8009a1c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	f003 0308 	and.w	r3, r3, #8
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d036      	beq.n	8009ab4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	695b      	ldr	r3, [r3, #20]
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d016      	beq.n	8009a7c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009a4e:	4b15      	ldr	r3, [pc, #84]	; (8009aa4 <HAL_RCC_OscConfig+0x27c>)
 8009a50:	2201      	movs	r2, #1
 8009a52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009a54:	f7fa fc16 	bl	8004284 <HAL_GetTick>
 8009a58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009a5a:	e008      	b.n	8009a6e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009a5c:	f7fa fc12 	bl	8004284 <HAL_GetTick>
 8009a60:	4602      	mov	r2, r0
 8009a62:	693b      	ldr	r3, [r7, #16]
 8009a64:	1ad3      	subs	r3, r2, r3
 8009a66:	2b02      	cmp	r3, #2
 8009a68:	d901      	bls.n	8009a6e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8009a6a:	2303      	movs	r3, #3
 8009a6c:	e173      	b.n	8009d56 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009a6e:	4b0b      	ldr	r3, [pc, #44]	; (8009a9c <HAL_RCC_OscConfig+0x274>)
 8009a70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009a72:	f003 0302 	and.w	r3, r3, #2
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d0f0      	beq.n	8009a5c <HAL_RCC_OscConfig+0x234>
 8009a7a:	e01b      	b.n	8009ab4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009a7c:	4b09      	ldr	r3, [pc, #36]	; (8009aa4 <HAL_RCC_OscConfig+0x27c>)
 8009a7e:	2200      	movs	r2, #0
 8009a80:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009a82:	f7fa fbff 	bl	8004284 <HAL_GetTick>
 8009a86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009a88:	e00e      	b.n	8009aa8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009a8a:	f7fa fbfb 	bl	8004284 <HAL_GetTick>
 8009a8e:	4602      	mov	r2, r0
 8009a90:	693b      	ldr	r3, [r7, #16]
 8009a92:	1ad3      	subs	r3, r2, r3
 8009a94:	2b02      	cmp	r3, #2
 8009a96:	d907      	bls.n	8009aa8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8009a98:	2303      	movs	r3, #3
 8009a9a:	e15c      	b.n	8009d56 <HAL_RCC_OscConfig+0x52e>
 8009a9c:	40023800 	.word	0x40023800
 8009aa0:	42470000 	.word	0x42470000
 8009aa4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009aa8:	4b8a      	ldr	r3, [pc, #552]	; (8009cd4 <HAL_RCC_OscConfig+0x4ac>)
 8009aaa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009aac:	f003 0302 	and.w	r3, r3, #2
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d1ea      	bne.n	8009a8a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	f003 0304 	and.w	r3, r3, #4
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	f000 8097 	beq.w	8009bf0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009ac2:	2300      	movs	r3, #0
 8009ac4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009ac6:	4b83      	ldr	r3, [pc, #524]	; (8009cd4 <HAL_RCC_OscConfig+0x4ac>)
 8009ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009aca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d10f      	bne.n	8009af2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009ad2:	2300      	movs	r3, #0
 8009ad4:	60bb      	str	r3, [r7, #8]
 8009ad6:	4b7f      	ldr	r3, [pc, #508]	; (8009cd4 <HAL_RCC_OscConfig+0x4ac>)
 8009ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ada:	4a7e      	ldr	r2, [pc, #504]	; (8009cd4 <HAL_RCC_OscConfig+0x4ac>)
 8009adc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009ae0:	6413      	str	r3, [r2, #64]	; 0x40
 8009ae2:	4b7c      	ldr	r3, [pc, #496]	; (8009cd4 <HAL_RCC_OscConfig+0x4ac>)
 8009ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ae6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009aea:	60bb      	str	r3, [r7, #8]
 8009aec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009aee:	2301      	movs	r3, #1
 8009af0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009af2:	4b79      	ldr	r3, [pc, #484]	; (8009cd8 <HAL_RCC_OscConfig+0x4b0>)
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d118      	bne.n	8009b30 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009afe:	4b76      	ldr	r3, [pc, #472]	; (8009cd8 <HAL_RCC_OscConfig+0x4b0>)
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	4a75      	ldr	r2, [pc, #468]	; (8009cd8 <HAL_RCC_OscConfig+0x4b0>)
 8009b04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009b08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009b0a:	f7fa fbbb 	bl	8004284 <HAL_GetTick>
 8009b0e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009b10:	e008      	b.n	8009b24 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009b12:	f7fa fbb7 	bl	8004284 <HAL_GetTick>
 8009b16:	4602      	mov	r2, r0
 8009b18:	693b      	ldr	r3, [r7, #16]
 8009b1a:	1ad3      	subs	r3, r2, r3
 8009b1c:	2b02      	cmp	r3, #2
 8009b1e:	d901      	bls.n	8009b24 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8009b20:	2303      	movs	r3, #3
 8009b22:	e118      	b.n	8009d56 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009b24:	4b6c      	ldr	r3, [pc, #432]	; (8009cd8 <HAL_RCC_OscConfig+0x4b0>)
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d0f0      	beq.n	8009b12 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	689b      	ldr	r3, [r3, #8]
 8009b34:	2b01      	cmp	r3, #1
 8009b36:	d106      	bne.n	8009b46 <HAL_RCC_OscConfig+0x31e>
 8009b38:	4b66      	ldr	r3, [pc, #408]	; (8009cd4 <HAL_RCC_OscConfig+0x4ac>)
 8009b3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b3c:	4a65      	ldr	r2, [pc, #404]	; (8009cd4 <HAL_RCC_OscConfig+0x4ac>)
 8009b3e:	f043 0301 	orr.w	r3, r3, #1
 8009b42:	6713      	str	r3, [r2, #112]	; 0x70
 8009b44:	e01c      	b.n	8009b80 <HAL_RCC_OscConfig+0x358>
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	689b      	ldr	r3, [r3, #8]
 8009b4a:	2b05      	cmp	r3, #5
 8009b4c:	d10c      	bne.n	8009b68 <HAL_RCC_OscConfig+0x340>
 8009b4e:	4b61      	ldr	r3, [pc, #388]	; (8009cd4 <HAL_RCC_OscConfig+0x4ac>)
 8009b50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b52:	4a60      	ldr	r2, [pc, #384]	; (8009cd4 <HAL_RCC_OscConfig+0x4ac>)
 8009b54:	f043 0304 	orr.w	r3, r3, #4
 8009b58:	6713      	str	r3, [r2, #112]	; 0x70
 8009b5a:	4b5e      	ldr	r3, [pc, #376]	; (8009cd4 <HAL_RCC_OscConfig+0x4ac>)
 8009b5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b5e:	4a5d      	ldr	r2, [pc, #372]	; (8009cd4 <HAL_RCC_OscConfig+0x4ac>)
 8009b60:	f043 0301 	orr.w	r3, r3, #1
 8009b64:	6713      	str	r3, [r2, #112]	; 0x70
 8009b66:	e00b      	b.n	8009b80 <HAL_RCC_OscConfig+0x358>
 8009b68:	4b5a      	ldr	r3, [pc, #360]	; (8009cd4 <HAL_RCC_OscConfig+0x4ac>)
 8009b6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b6c:	4a59      	ldr	r2, [pc, #356]	; (8009cd4 <HAL_RCC_OscConfig+0x4ac>)
 8009b6e:	f023 0301 	bic.w	r3, r3, #1
 8009b72:	6713      	str	r3, [r2, #112]	; 0x70
 8009b74:	4b57      	ldr	r3, [pc, #348]	; (8009cd4 <HAL_RCC_OscConfig+0x4ac>)
 8009b76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b78:	4a56      	ldr	r2, [pc, #344]	; (8009cd4 <HAL_RCC_OscConfig+0x4ac>)
 8009b7a:	f023 0304 	bic.w	r3, r3, #4
 8009b7e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	689b      	ldr	r3, [r3, #8]
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d015      	beq.n	8009bb4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009b88:	f7fa fb7c 	bl	8004284 <HAL_GetTick>
 8009b8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009b8e:	e00a      	b.n	8009ba6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009b90:	f7fa fb78 	bl	8004284 <HAL_GetTick>
 8009b94:	4602      	mov	r2, r0
 8009b96:	693b      	ldr	r3, [r7, #16]
 8009b98:	1ad3      	subs	r3, r2, r3
 8009b9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8009b9e:	4293      	cmp	r3, r2
 8009ba0:	d901      	bls.n	8009ba6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8009ba2:	2303      	movs	r3, #3
 8009ba4:	e0d7      	b.n	8009d56 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009ba6:	4b4b      	ldr	r3, [pc, #300]	; (8009cd4 <HAL_RCC_OscConfig+0x4ac>)
 8009ba8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009baa:	f003 0302 	and.w	r3, r3, #2
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d0ee      	beq.n	8009b90 <HAL_RCC_OscConfig+0x368>
 8009bb2:	e014      	b.n	8009bde <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009bb4:	f7fa fb66 	bl	8004284 <HAL_GetTick>
 8009bb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009bba:	e00a      	b.n	8009bd2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009bbc:	f7fa fb62 	bl	8004284 <HAL_GetTick>
 8009bc0:	4602      	mov	r2, r0
 8009bc2:	693b      	ldr	r3, [r7, #16]
 8009bc4:	1ad3      	subs	r3, r2, r3
 8009bc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8009bca:	4293      	cmp	r3, r2
 8009bcc:	d901      	bls.n	8009bd2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8009bce:	2303      	movs	r3, #3
 8009bd0:	e0c1      	b.n	8009d56 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009bd2:	4b40      	ldr	r3, [pc, #256]	; (8009cd4 <HAL_RCC_OscConfig+0x4ac>)
 8009bd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009bd6:	f003 0302 	and.w	r3, r3, #2
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d1ee      	bne.n	8009bbc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009bde:	7dfb      	ldrb	r3, [r7, #23]
 8009be0:	2b01      	cmp	r3, #1
 8009be2:	d105      	bne.n	8009bf0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009be4:	4b3b      	ldr	r3, [pc, #236]	; (8009cd4 <HAL_RCC_OscConfig+0x4ac>)
 8009be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009be8:	4a3a      	ldr	r2, [pc, #232]	; (8009cd4 <HAL_RCC_OscConfig+0x4ac>)
 8009bea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009bee:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	699b      	ldr	r3, [r3, #24]
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	f000 80ad 	beq.w	8009d54 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009bfa:	4b36      	ldr	r3, [pc, #216]	; (8009cd4 <HAL_RCC_OscConfig+0x4ac>)
 8009bfc:	689b      	ldr	r3, [r3, #8]
 8009bfe:	f003 030c 	and.w	r3, r3, #12
 8009c02:	2b08      	cmp	r3, #8
 8009c04:	d060      	beq.n	8009cc8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	699b      	ldr	r3, [r3, #24]
 8009c0a:	2b02      	cmp	r3, #2
 8009c0c:	d145      	bne.n	8009c9a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009c0e:	4b33      	ldr	r3, [pc, #204]	; (8009cdc <HAL_RCC_OscConfig+0x4b4>)
 8009c10:	2200      	movs	r2, #0
 8009c12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c14:	f7fa fb36 	bl	8004284 <HAL_GetTick>
 8009c18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009c1a:	e008      	b.n	8009c2e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009c1c:	f7fa fb32 	bl	8004284 <HAL_GetTick>
 8009c20:	4602      	mov	r2, r0
 8009c22:	693b      	ldr	r3, [r7, #16]
 8009c24:	1ad3      	subs	r3, r2, r3
 8009c26:	2b02      	cmp	r3, #2
 8009c28:	d901      	bls.n	8009c2e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8009c2a:	2303      	movs	r3, #3
 8009c2c:	e093      	b.n	8009d56 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009c2e:	4b29      	ldr	r3, [pc, #164]	; (8009cd4 <HAL_RCC_OscConfig+0x4ac>)
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d1f0      	bne.n	8009c1c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	69da      	ldr	r2, [r3, #28]
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	6a1b      	ldr	r3, [r3, #32]
 8009c42:	431a      	orrs	r2, r3
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c48:	019b      	lsls	r3, r3, #6
 8009c4a:	431a      	orrs	r2, r3
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c50:	085b      	lsrs	r3, r3, #1
 8009c52:	3b01      	subs	r3, #1
 8009c54:	041b      	lsls	r3, r3, #16
 8009c56:	431a      	orrs	r2, r3
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c5c:	061b      	lsls	r3, r3, #24
 8009c5e:	431a      	orrs	r2, r3
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c64:	071b      	lsls	r3, r3, #28
 8009c66:	491b      	ldr	r1, [pc, #108]	; (8009cd4 <HAL_RCC_OscConfig+0x4ac>)
 8009c68:	4313      	orrs	r3, r2
 8009c6a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009c6c:	4b1b      	ldr	r3, [pc, #108]	; (8009cdc <HAL_RCC_OscConfig+0x4b4>)
 8009c6e:	2201      	movs	r2, #1
 8009c70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c72:	f7fa fb07 	bl	8004284 <HAL_GetTick>
 8009c76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009c78:	e008      	b.n	8009c8c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009c7a:	f7fa fb03 	bl	8004284 <HAL_GetTick>
 8009c7e:	4602      	mov	r2, r0
 8009c80:	693b      	ldr	r3, [r7, #16]
 8009c82:	1ad3      	subs	r3, r2, r3
 8009c84:	2b02      	cmp	r3, #2
 8009c86:	d901      	bls.n	8009c8c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8009c88:	2303      	movs	r3, #3
 8009c8a:	e064      	b.n	8009d56 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009c8c:	4b11      	ldr	r3, [pc, #68]	; (8009cd4 <HAL_RCC_OscConfig+0x4ac>)
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d0f0      	beq.n	8009c7a <HAL_RCC_OscConfig+0x452>
 8009c98:	e05c      	b.n	8009d54 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009c9a:	4b10      	ldr	r3, [pc, #64]	; (8009cdc <HAL_RCC_OscConfig+0x4b4>)
 8009c9c:	2200      	movs	r2, #0
 8009c9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ca0:	f7fa faf0 	bl	8004284 <HAL_GetTick>
 8009ca4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009ca6:	e008      	b.n	8009cba <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009ca8:	f7fa faec 	bl	8004284 <HAL_GetTick>
 8009cac:	4602      	mov	r2, r0
 8009cae:	693b      	ldr	r3, [r7, #16]
 8009cb0:	1ad3      	subs	r3, r2, r3
 8009cb2:	2b02      	cmp	r3, #2
 8009cb4:	d901      	bls.n	8009cba <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8009cb6:	2303      	movs	r3, #3
 8009cb8:	e04d      	b.n	8009d56 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009cba:	4b06      	ldr	r3, [pc, #24]	; (8009cd4 <HAL_RCC_OscConfig+0x4ac>)
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d1f0      	bne.n	8009ca8 <HAL_RCC_OscConfig+0x480>
 8009cc6:	e045      	b.n	8009d54 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	699b      	ldr	r3, [r3, #24]
 8009ccc:	2b01      	cmp	r3, #1
 8009cce:	d107      	bne.n	8009ce0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8009cd0:	2301      	movs	r3, #1
 8009cd2:	e040      	b.n	8009d56 <HAL_RCC_OscConfig+0x52e>
 8009cd4:	40023800 	.word	0x40023800
 8009cd8:	40007000 	.word	0x40007000
 8009cdc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8009ce0:	4b1f      	ldr	r3, [pc, #124]	; (8009d60 <HAL_RCC_OscConfig+0x538>)
 8009ce2:	685b      	ldr	r3, [r3, #4]
 8009ce4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	699b      	ldr	r3, [r3, #24]
 8009cea:	2b01      	cmp	r3, #1
 8009cec:	d030      	beq.n	8009d50 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009cf8:	429a      	cmp	r2, r3
 8009cfa:	d129      	bne.n	8009d50 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009d06:	429a      	cmp	r2, r3
 8009d08:	d122      	bne.n	8009d50 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009d0a:	68fa      	ldr	r2, [r7, #12]
 8009d0c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8009d10:	4013      	ands	r3, r2
 8009d12:	687a      	ldr	r2, [r7, #4]
 8009d14:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009d16:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009d18:	4293      	cmp	r3, r2
 8009d1a:	d119      	bne.n	8009d50 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d26:	085b      	lsrs	r3, r3, #1
 8009d28:	3b01      	subs	r3, #1
 8009d2a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009d2c:	429a      	cmp	r2, r3
 8009d2e:	d10f      	bne.n	8009d50 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d3a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009d3c:	429a      	cmp	r2, r3
 8009d3e:	d107      	bne.n	8009d50 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d4a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009d4c:	429a      	cmp	r2, r3
 8009d4e:	d001      	beq.n	8009d54 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8009d50:	2301      	movs	r3, #1
 8009d52:	e000      	b.n	8009d56 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8009d54:	2300      	movs	r3, #0
}
 8009d56:	4618      	mov	r0, r3
 8009d58:	3718      	adds	r7, #24
 8009d5a:	46bd      	mov	sp, r7
 8009d5c:	bd80      	pop	{r7, pc}
 8009d5e:	bf00      	nop
 8009d60:	40023800 	.word	0x40023800

08009d64 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009d64:	b580      	push	{r7, lr}
 8009d66:	b082      	sub	sp, #8
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d101      	bne.n	8009d76 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009d72:	2301      	movs	r3, #1
 8009d74:	e041      	b.n	8009dfa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009d7c:	b2db      	uxtb	r3, r3
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d106      	bne.n	8009d90 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	2200      	movs	r2, #0
 8009d86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009d8a:	6878      	ldr	r0, [r7, #4]
 8009d8c:	f7f9 ff52 	bl	8003c34 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	2202      	movs	r2, #2
 8009d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	681a      	ldr	r2, [r3, #0]
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	3304      	adds	r3, #4
 8009da0:	4619      	mov	r1, r3
 8009da2:	4610      	mov	r0, r2
 8009da4:	f000 fb68 	bl	800a478 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	2201      	movs	r2, #1
 8009dac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	2201      	movs	r2, #1
 8009db4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	2201      	movs	r2, #1
 8009dbc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	2201      	movs	r2, #1
 8009dc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	2201      	movs	r2, #1
 8009dcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	2201      	movs	r2, #1
 8009dd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	2201      	movs	r2, #1
 8009ddc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	2201      	movs	r2, #1
 8009de4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	2201      	movs	r2, #1
 8009dec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	2201      	movs	r2, #1
 8009df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009df8:	2300      	movs	r3, #0
}
 8009dfa:	4618      	mov	r0, r3
 8009dfc:	3708      	adds	r7, #8
 8009dfe:	46bd      	mov	sp, r7
 8009e00:	bd80      	pop	{r7, pc}
	...

08009e04 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009e04:	b480      	push	{r7}
 8009e06:	b085      	sub	sp, #20
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009e12:	b2db      	uxtb	r3, r3
 8009e14:	2b01      	cmp	r3, #1
 8009e16:	d001      	beq.n	8009e1c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009e18:	2301      	movs	r3, #1
 8009e1a:	e04e      	b.n	8009eba <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	2202      	movs	r2, #2
 8009e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	68da      	ldr	r2, [r3, #12]
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	f042 0201 	orr.w	r2, r2, #1
 8009e32:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	4a23      	ldr	r2, [pc, #140]	; (8009ec8 <HAL_TIM_Base_Start_IT+0xc4>)
 8009e3a:	4293      	cmp	r3, r2
 8009e3c:	d022      	beq.n	8009e84 <HAL_TIM_Base_Start_IT+0x80>
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009e46:	d01d      	beq.n	8009e84 <HAL_TIM_Base_Start_IT+0x80>
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	4a1f      	ldr	r2, [pc, #124]	; (8009ecc <HAL_TIM_Base_Start_IT+0xc8>)
 8009e4e:	4293      	cmp	r3, r2
 8009e50:	d018      	beq.n	8009e84 <HAL_TIM_Base_Start_IT+0x80>
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	4a1e      	ldr	r2, [pc, #120]	; (8009ed0 <HAL_TIM_Base_Start_IT+0xcc>)
 8009e58:	4293      	cmp	r3, r2
 8009e5a:	d013      	beq.n	8009e84 <HAL_TIM_Base_Start_IT+0x80>
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	4a1c      	ldr	r2, [pc, #112]	; (8009ed4 <HAL_TIM_Base_Start_IT+0xd0>)
 8009e62:	4293      	cmp	r3, r2
 8009e64:	d00e      	beq.n	8009e84 <HAL_TIM_Base_Start_IT+0x80>
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	4a1b      	ldr	r2, [pc, #108]	; (8009ed8 <HAL_TIM_Base_Start_IT+0xd4>)
 8009e6c:	4293      	cmp	r3, r2
 8009e6e:	d009      	beq.n	8009e84 <HAL_TIM_Base_Start_IT+0x80>
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	4a19      	ldr	r2, [pc, #100]	; (8009edc <HAL_TIM_Base_Start_IT+0xd8>)
 8009e76:	4293      	cmp	r3, r2
 8009e78:	d004      	beq.n	8009e84 <HAL_TIM_Base_Start_IT+0x80>
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	4a18      	ldr	r2, [pc, #96]	; (8009ee0 <HAL_TIM_Base_Start_IT+0xdc>)
 8009e80:	4293      	cmp	r3, r2
 8009e82:	d111      	bne.n	8009ea8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	689b      	ldr	r3, [r3, #8]
 8009e8a:	f003 0307 	and.w	r3, r3, #7
 8009e8e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	2b06      	cmp	r3, #6
 8009e94:	d010      	beq.n	8009eb8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	681a      	ldr	r2, [r3, #0]
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	f042 0201 	orr.w	r2, r2, #1
 8009ea4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009ea6:	e007      	b.n	8009eb8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	681a      	ldr	r2, [r3, #0]
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	f042 0201 	orr.w	r2, r2, #1
 8009eb6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009eb8:	2300      	movs	r3, #0
}
 8009eba:	4618      	mov	r0, r3
 8009ebc:	3714      	adds	r7, #20
 8009ebe:	46bd      	mov	sp, r7
 8009ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec4:	4770      	bx	lr
 8009ec6:	bf00      	nop
 8009ec8:	40010000 	.word	0x40010000
 8009ecc:	40000400 	.word	0x40000400
 8009ed0:	40000800 	.word	0x40000800
 8009ed4:	40000c00 	.word	0x40000c00
 8009ed8:	40010400 	.word	0x40010400
 8009edc:	40014000 	.word	0x40014000
 8009ee0:	40001800 	.word	0x40001800

08009ee4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8009ee4:	b580      	push	{r7, lr}
 8009ee6:	b082      	sub	sp, #8
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d101      	bne.n	8009ef6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8009ef2:	2301      	movs	r3, #1
 8009ef4:	e041      	b.n	8009f7a <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009efc:	b2db      	uxtb	r3, r3
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d106      	bne.n	8009f10 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	2200      	movs	r2, #0
 8009f06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8009f0a:	6878      	ldr	r0, [r7, #4]
 8009f0c:	f7f9 fe4a 	bl	8003ba4 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	2202      	movs	r2, #2
 8009f14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681a      	ldr	r2, [r3, #0]
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	3304      	adds	r3, #4
 8009f20:	4619      	mov	r1, r3
 8009f22:	4610      	mov	r0, r2
 8009f24:	f000 faa8 	bl	800a478 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	2201      	movs	r2, #1
 8009f2c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	2201      	movs	r2, #1
 8009f34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	2201      	movs	r2, #1
 8009f3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	2201      	movs	r2, #1
 8009f44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	2201      	movs	r2, #1
 8009f4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	2201      	movs	r2, #1
 8009f54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	2201      	movs	r2, #1
 8009f5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	2201      	movs	r2, #1
 8009f64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	2201      	movs	r2, #1
 8009f6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	2201      	movs	r2, #1
 8009f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009f78:	2300      	movs	r3, #0
}
 8009f7a:	4618      	mov	r0, r3
 8009f7c:	3708      	adds	r7, #8
 8009f7e:	46bd      	mov	sp, r7
 8009f80:	bd80      	pop	{r7, pc}

08009f82 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009f82:	b580      	push	{r7, lr}
 8009f84:	b084      	sub	sp, #16
 8009f86:	af00      	add	r7, sp, #0
 8009f88:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	68db      	ldr	r3, [r3, #12]
 8009f90:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	691b      	ldr	r3, [r3, #16]
 8009f98:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009f9a:	68bb      	ldr	r3, [r7, #8]
 8009f9c:	f003 0302 	and.w	r3, r3, #2
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d020      	beq.n	8009fe6 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	f003 0302 	and.w	r3, r3, #2
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d01b      	beq.n	8009fe6 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	f06f 0202 	mvn.w	r2, #2
 8009fb6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	2201      	movs	r2, #1
 8009fbc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	699b      	ldr	r3, [r3, #24]
 8009fc4:	f003 0303 	and.w	r3, r3, #3
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d003      	beq.n	8009fd4 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009fcc:	6878      	ldr	r0, [r7, #4]
 8009fce:	f000 fa35 	bl	800a43c <HAL_TIM_IC_CaptureCallback>
 8009fd2:	e005      	b.n	8009fe0 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009fd4:	6878      	ldr	r0, [r7, #4]
 8009fd6:	f000 fa27 	bl	800a428 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009fda:	6878      	ldr	r0, [r7, #4]
 8009fdc:	f000 fa38 	bl	800a450 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	2200      	movs	r2, #0
 8009fe4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009fe6:	68bb      	ldr	r3, [r7, #8]
 8009fe8:	f003 0304 	and.w	r3, r3, #4
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d020      	beq.n	800a032 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	f003 0304 	and.w	r3, r3, #4
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d01b      	beq.n	800a032 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	f06f 0204 	mvn.w	r2, #4
 800a002:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	2202      	movs	r2, #2
 800a008:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	699b      	ldr	r3, [r3, #24]
 800a010:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a014:	2b00      	cmp	r3, #0
 800a016:	d003      	beq.n	800a020 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a018:	6878      	ldr	r0, [r7, #4]
 800a01a:	f000 fa0f 	bl	800a43c <HAL_TIM_IC_CaptureCallback>
 800a01e:	e005      	b.n	800a02c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a020:	6878      	ldr	r0, [r7, #4]
 800a022:	f000 fa01 	bl	800a428 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a026:	6878      	ldr	r0, [r7, #4]
 800a028:	f000 fa12 	bl	800a450 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	2200      	movs	r2, #0
 800a030:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800a032:	68bb      	ldr	r3, [r7, #8]
 800a034:	f003 0308 	and.w	r3, r3, #8
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d020      	beq.n	800a07e <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	f003 0308 	and.w	r3, r3, #8
 800a042:	2b00      	cmp	r3, #0
 800a044:	d01b      	beq.n	800a07e <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	f06f 0208 	mvn.w	r2, #8
 800a04e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	2204      	movs	r2, #4
 800a054:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	69db      	ldr	r3, [r3, #28]
 800a05c:	f003 0303 	and.w	r3, r3, #3
 800a060:	2b00      	cmp	r3, #0
 800a062:	d003      	beq.n	800a06c <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a064:	6878      	ldr	r0, [r7, #4]
 800a066:	f000 f9e9 	bl	800a43c <HAL_TIM_IC_CaptureCallback>
 800a06a:	e005      	b.n	800a078 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a06c:	6878      	ldr	r0, [r7, #4]
 800a06e:	f000 f9db 	bl	800a428 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a072:	6878      	ldr	r0, [r7, #4]
 800a074:	f000 f9ec 	bl	800a450 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	2200      	movs	r2, #0
 800a07c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800a07e:	68bb      	ldr	r3, [r7, #8]
 800a080:	f003 0310 	and.w	r3, r3, #16
 800a084:	2b00      	cmp	r3, #0
 800a086:	d020      	beq.n	800a0ca <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	f003 0310 	and.w	r3, r3, #16
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d01b      	beq.n	800a0ca <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	f06f 0210 	mvn.w	r2, #16
 800a09a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	2208      	movs	r2, #8
 800a0a0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	69db      	ldr	r3, [r3, #28]
 800a0a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d003      	beq.n	800a0b8 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a0b0:	6878      	ldr	r0, [r7, #4]
 800a0b2:	f000 f9c3 	bl	800a43c <HAL_TIM_IC_CaptureCallback>
 800a0b6:	e005      	b.n	800a0c4 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a0b8:	6878      	ldr	r0, [r7, #4]
 800a0ba:	f000 f9b5 	bl	800a428 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a0be:	6878      	ldr	r0, [r7, #4]
 800a0c0:	f000 f9c6 	bl	800a450 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	2200      	movs	r2, #0
 800a0c8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800a0ca:	68bb      	ldr	r3, [r7, #8]
 800a0cc:	f003 0301 	and.w	r3, r3, #1
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d00c      	beq.n	800a0ee <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	f003 0301 	and.w	r3, r3, #1
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d007      	beq.n	800a0ee <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	f06f 0201 	mvn.w	r2, #1
 800a0e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a0e8:	6878      	ldr	r0, [r7, #4]
 800a0ea:	f7f8 ff5d 	bl	8002fa8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800a0ee:	68bb      	ldr	r3, [r7, #8]
 800a0f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d00c      	beq.n	800a112 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d007      	beq.n	800a112 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a10a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a10c:	6878      	ldr	r0, [r7, #4]
 800a10e:	f000 fca9 	bl	800aa64 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800a112:	68bb      	ldr	r3, [r7, #8]
 800a114:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d00c      	beq.n	800a136 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a122:	2b00      	cmp	r3, #0
 800a124:	d007      	beq.n	800a136 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a12e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a130:	6878      	ldr	r0, [r7, #4]
 800a132:	f000 f997 	bl	800a464 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800a136:	68bb      	ldr	r3, [r7, #8]
 800a138:	f003 0320 	and.w	r3, r3, #32
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d00c      	beq.n	800a15a <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	f003 0320 	and.w	r3, r3, #32
 800a146:	2b00      	cmp	r3, #0
 800a148:	d007      	beq.n	800a15a <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	f06f 0220 	mvn.w	r2, #32
 800a152:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a154:	6878      	ldr	r0, [r7, #4]
 800a156:	f000 fc7b 	bl	800aa50 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a15a:	bf00      	nop
 800a15c:	3710      	adds	r7, #16
 800a15e:	46bd      	mov	sp, r7
 800a160:	bd80      	pop	{r7, pc}

0800a162 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800a162:	b580      	push	{r7, lr}
 800a164:	b086      	sub	sp, #24
 800a166:	af00      	add	r7, sp, #0
 800a168:	60f8      	str	r0, [r7, #12]
 800a16a:	60b9      	str	r1, [r7, #8]
 800a16c:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a16e:	2300      	movs	r3, #0
 800a170:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a178:	2b01      	cmp	r3, #1
 800a17a:	d101      	bne.n	800a180 <HAL_TIM_IC_ConfigChannel+0x1e>
 800a17c:	2302      	movs	r3, #2
 800a17e:	e088      	b.n	800a292 <HAL_TIM_IC_ConfigChannel+0x130>
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	2201      	movs	r2, #1
 800a184:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d11b      	bne.n	800a1c6 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800a192:	68bb      	ldr	r3, [r7, #8]
 800a194:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800a196:	68bb      	ldr	r3, [r7, #8]
 800a198:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800a19a:	68bb      	ldr	r3, [r7, #8]
 800a19c:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800a19e:	f000 fa17 	bl	800a5d0 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	699a      	ldr	r2, [r3, #24]
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	f022 020c 	bic.w	r2, r2, #12
 800a1b0:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	6999      	ldr	r1, [r3, #24]
 800a1b8:	68bb      	ldr	r3, [r7, #8]
 800a1ba:	689a      	ldr	r2, [r3, #8]
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	430a      	orrs	r2, r1
 800a1c2:	619a      	str	r2, [r3, #24]
 800a1c4:	e060      	b.n	800a288 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	2b04      	cmp	r3, #4
 800a1ca:	d11c      	bne.n	800a206 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800a1d0:	68bb      	ldr	r3, [r7, #8]
 800a1d2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800a1d4:	68bb      	ldr	r3, [r7, #8]
 800a1d6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800a1d8:	68bb      	ldr	r3, [r7, #8]
 800a1da:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800a1dc:	f000 fa9b 	bl	800a716 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	699a      	ldr	r2, [r3, #24]
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800a1ee:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	6999      	ldr	r1, [r3, #24]
 800a1f6:	68bb      	ldr	r3, [r7, #8]
 800a1f8:	689b      	ldr	r3, [r3, #8]
 800a1fa:	021a      	lsls	r2, r3, #8
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	430a      	orrs	r2, r1
 800a202:	619a      	str	r2, [r3, #24]
 800a204:	e040      	b.n	800a288 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	2b08      	cmp	r3, #8
 800a20a:	d11b      	bne.n	800a244 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800a210:	68bb      	ldr	r3, [r7, #8]
 800a212:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800a214:	68bb      	ldr	r3, [r7, #8]
 800a216:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800a218:	68bb      	ldr	r3, [r7, #8]
 800a21a:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800a21c:	f000 fae8 	bl	800a7f0 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	69da      	ldr	r2, [r3, #28]
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	f022 020c 	bic.w	r2, r2, #12
 800a22e:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	69d9      	ldr	r1, [r3, #28]
 800a236:	68bb      	ldr	r3, [r7, #8]
 800a238:	689a      	ldr	r2, [r3, #8]
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	430a      	orrs	r2, r1
 800a240:	61da      	str	r2, [r3, #28]
 800a242:	e021      	b.n	800a288 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	2b0c      	cmp	r3, #12
 800a248:	d11c      	bne.n	800a284 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800a24e:	68bb      	ldr	r3, [r7, #8]
 800a250:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800a252:	68bb      	ldr	r3, [r7, #8]
 800a254:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800a256:	68bb      	ldr	r3, [r7, #8]
 800a258:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800a25a:	f000 fb05 	bl	800a868 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	69da      	ldr	r2, [r3, #28]
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800a26c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	69d9      	ldr	r1, [r3, #28]
 800a274:	68bb      	ldr	r3, [r7, #8]
 800a276:	689b      	ldr	r3, [r3, #8]
 800a278:	021a      	lsls	r2, r3, #8
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	430a      	orrs	r2, r1
 800a280:	61da      	str	r2, [r3, #28]
 800a282:	e001      	b.n	800a288 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800a284:	2301      	movs	r3, #1
 800a286:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	2200      	movs	r2, #0
 800a28c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a290:	7dfb      	ldrb	r3, [r7, #23]
}
 800a292:	4618      	mov	r0, r3
 800a294:	3718      	adds	r7, #24
 800a296:	46bd      	mov	sp, r7
 800a298:	bd80      	pop	{r7, pc}

0800a29a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a29a:	b580      	push	{r7, lr}
 800a29c:	b084      	sub	sp, #16
 800a29e:	af00      	add	r7, sp, #0
 800a2a0:	6078      	str	r0, [r7, #4]
 800a2a2:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a2a4:	2300      	movs	r3, #0
 800a2a6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a2ae:	2b01      	cmp	r3, #1
 800a2b0:	d101      	bne.n	800a2b6 <HAL_TIM_ConfigClockSource+0x1c>
 800a2b2:	2302      	movs	r3, #2
 800a2b4:	e0b4      	b.n	800a420 <HAL_TIM_ConfigClockSource+0x186>
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	2201      	movs	r2, #1
 800a2ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	2202      	movs	r2, #2
 800a2c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	689b      	ldr	r3, [r3, #8]
 800a2cc:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a2ce:	68bb      	ldr	r3, [r7, #8]
 800a2d0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a2d4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a2d6:	68bb      	ldr	r3, [r7, #8]
 800a2d8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a2dc:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	68ba      	ldr	r2, [r7, #8]
 800a2e4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a2e6:	683b      	ldr	r3, [r7, #0]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a2ee:	d03e      	beq.n	800a36e <HAL_TIM_ConfigClockSource+0xd4>
 800a2f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a2f4:	f200 8087 	bhi.w	800a406 <HAL_TIM_ConfigClockSource+0x16c>
 800a2f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a2fc:	f000 8086 	beq.w	800a40c <HAL_TIM_ConfigClockSource+0x172>
 800a300:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a304:	d87f      	bhi.n	800a406 <HAL_TIM_ConfigClockSource+0x16c>
 800a306:	2b70      	cmp	r3, #112	; 0x70
 800a308:	d01a      	beq.n	800a340 <HAL_TIM_ConfigClockSource+0xa6>
 800a30a:	2b70      	cmp	r3, #112	; 0x70
 800a30c:	d87b      	bhi.n	800a406 <HAL_TIM_ConfigClockSource+0x16c>
 800a30e:	2b60      	cmp	r3, #96	; 0x60
 800a310:	d050      	beq.n	800a3b4 <HAL_TIM_ConfigClockSource+0x11a>
 800a312:	2b60      	cmp	r3, #96	; 0x60
 800a314:	d877      	bhi.n	800a406 <HAL_TIM_ConfigClockSource+0x16c>
 800a316:	2b50      	cmp	r3, #80	; 0x50
 800a318:	d03c      	beq.n	800a394 <HAL_TIM_ConfigClockSource+0xfa>
 800a31a:	2b50      	cmp	r3, #80	; 0x50
 800a31c:	d873      	bhi.n	800a406 <HAL_TIM_ConfigClockSource+0x16c>
 800a31e:	2b40      	cmp	r3, #64	; 0x40
 800a320:	d058      	beq.n	800a3d4 <HAL_TIM_ConfigClockSource+0x13a>
 800a322:	2b40      	cmp	r3, #64	; 0x40
 800a324:	d86f      	bhi.n	800a406 <HAL_TIM_ConfigClockSource+0x16c>
 800a326:	2b30      	cmp	r3, #48	; 0x30
 800a328:	d064      	beq.n	800a3f4 <HAL_TIM_ConfigClockSource+0x15a>
 800a32a:	2b30      	cmp	r3, #48	; 0x30
 800a32c:	d86b      	bhi.n	800a406 <HAL_TIM_ConfigClockSource+0x16c>
 800a32e:	2b20      	cmp	r3, #32
 800a330:	d060      	beq.n	800a3f4 <HAL_TIM_ConfigClockSource+0x15a>
 800a332:	2b20      	cmp	r3, #32
 800a334:	d867      	bhi.n	800a406 <HAL_TIM_ConfigClockSource+0x16c>
 800a336:	2b00      	cmp	r3, #0
 800a338:	d05c      	beq.n	800a3f4 <HAL_TIM_ConfigClockSource+0x15a>
 800a33a:	2b10      	cmp	r3, #16
 800a33c:	d05a      	beq.n	800a3f4 <HAL_TIM_ConfigClockSource+0x15a>
 800a33e:	e062      	b.n	800a406 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a344:	683b      	ldr	r3, [r7, #0]
 800a346:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a348:	683b      	ldr	r3, [r7, #0]
 800a34a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a34c:	683b      	ldr	r3, [r7, #0]
 800a34e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a350:	f000 fae2 	bl	800a918 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	689b      	ldr	r3, [r3, #8]
 800a35a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a35c:	68bb      	ldr	r3, [r7, #8]
 800a35e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a362:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	68ba      	ldr	r2, [r7, #8]
 800a36a:	609a      	str	r2, [r3, #8]
      break;
 800a36c:	e04f      	b.n	800a40e <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a372:	683b      	ldr	r3, [r7, #0]
 800a374:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a376:	683b      	ldr	r3, [r7, #0]
 800a378:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a37a:	683b      	ldr	r3, [r7, #0]
 800a37c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a37e:	f000 facb 	bl	800a918 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	689a      	ldr	r2, [r3, #8]
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a390:	609a      	str	r2, [r3, #8]
      break;
 800a392:	e03c      	b.n	800a40e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a398:	683b      	ldr	r3, [r7, #0]
 800a39a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a39c:	683b      	ldr	r3, [r7, #0]
 800a39e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a3a0:	461a      	mov	r2, r3
 800a3a2:	f000 f989 	bl	800a6b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	2150      	movs	r1, #80	; 0x50
 800a3ac:	4618      	mov	r0, r3
 800a3ae:	f000 fa98 	bl	800a8e2 <TIM_ITRx_SetConfig>
      break;
 800a3b2:	e02c      	b.n	800a40e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a3b8:	683b      	ldr	r3, [r7, #0]
 800a3ba:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a3bc:	683b      	ldr	r3, [r7, #0]
 800a3be:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a3c0:	461a      	mov	r2, r3
 800a3c2:	f000 f9e5 	bl	800a790 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	2160      	movs	r1, #96	; 0x60
 800a3cc:	4618      	mov	r0, r3
 800a3ce:	f000 fa88 	bl	800a8e2 <TIM_ITRx_SetConfig>
      break;
 800a3d2:	e01c      	b.n	800a40e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a3d8:	683b      	ldr	r3, [r7, #0]
 800a3da:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a3dc:	683b      	ldr	r3, [r7, #0]
 800a3de:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a3e0:	461a      	mov	r2, r3
 800a3e2:	f000 f969 	bl	800a6b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	2140      	movs	r1, #64	; 0x40
 800a3ec:	4618      	mov	r0, r3
 800a3ee:	f000 fa78 	bl	800a8e2 <TIM_ITRx_SetConfig>
      break;
 800a3f2:	e00c      	b.n	800a40e <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	681a      	ldr	r2, [r3, #0]
 800a3f8:	683b      	ldr	r3, [r7, #0]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	4619      	mov	r1, r3
 800a3fe:	4610      	mov	r0, r2
 800a400:	f000 fa6f 	bl	800a8e2 <TIM_ITRx_SetConfig>
      break;
 800a404:	e003      	b.n	800a40e <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800a406:	2301      	movs	r3, #1
 800a408:	73fb      	strb	r3, [r7, #15]
      break;
 800a40a:	e000      	b.n	800a40e <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a40c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	2201      	movs	r2, #1
 800a412:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	2200      	movs	r2, #0
 800a41a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a41e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a420:	4618      	mov	r0, r3
 800a422:	3710      	adds	r7, #16
 800a424:	46bd      	mov	sp, r7
 800a426:	bd80      	pop	{r7, pc}

0800a428 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a428:	b480      	push	{r7}
 800a42a:	b083      	sub	sp, #12
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a430:	bf00      	nop
 800a432:	370c      	adds	r7, #12
 800a434:	46bd      	mov	sp, r7
 800a436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a43a:	4770      	bx	lr

0800a43c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a43c:	b480      	push	{r7}
 800a43e:	b083      	sub	sp, #12
 800a440:	af00      	add	r7, sp, #0
 800a442:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a444:	bf00      	nop
 800a446:	370c      	adds	r7, #12
 800a448:	46bd      	mov	sp, r7
 800a44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a44e:	4770      	bx	lr

0800a450 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a450:	b480      	push	{r7}
 800a452:	b083      	sub	sp, #12
 800a454:	af00      	add	r7, sp, #0
 800a456:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a458:	bf00      	nop
 800a45a:	370c      	adds	r7, #12
 800a45c:	46bd      	mov	sp, r7
 800a45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a462:	4770      	bx	lr

0800a464 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a464:	b480      	push	{r7}
 800a466:	b083      	sub	sp, #12
 800a468:	af00      	add	r7, sp, #0
 800a46a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a46c:	bf00      	nop
 800a46e:	370c      	adds	r7, #12
 800a470:	46bd      	mov	sp, r7
 800a472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a476:	4770      	bx	lr

0800a478 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a478:	b480      	push	{r7}
 800a47a:	b085      	sub	sp, #20
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	6078      	str	r0, [r7, #4]
 800a480:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	4a46      	ldr	r2, [pc, #280]	; (800a5a4 <TIM_Base_SetConfig+0x12c>)
 800a48c:	4293      	cmp	r3, r2
 800a48e:	d013      	beq.n	800a4b8 <TIM_Base_SetConfig+0x40>
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a496:	d00f      	beq.n	800a4b8 <TIM_Base_SetConfig+0x40>
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	4a43      	ldr	r2, [pc, #268]	; (800a5a8 <TIM_Base_SetConfig+0x130>)
 800a49c:	4293      	cmp	r3, r2
 800a49e:	d00b      	beq.n	800a4b8 <TIM_Base_SetConfig+0x40>
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	4a42      	ldr	r2, [pc, #264]	; (800a5ac <TIM_Base_SetConfig+0x134>)
 800a4a4:	4293      	cmp	r3, r2
 800a4a6:	d007      	beq.n	800a4b8 <TIM_Base_SetConfig+0x40>
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	4a41      	ldr	r2, [pc, #260]	; (800a5b0 <TIM_Base_SetConfig+0x138>)
 800a4ac:	4293      	cmp	r3, r2
 800a4ae:	d003      	beq.n	800a4b8 <TIM_Base_SetConfig+0x40>
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	4a40      	ldr	r2, [pc, #256]	; (800a5b4 <TIM_Base_SetConfig+0x13c>)
 800a4b4:	4293      	cmp	r3, r2
 800a4b6:	d108      	bne.n	800a4ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a4be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a4c0:	683b      	ldr	r3, [r7, #0]
 800a4c2:	685b      	ldr	r3, [r3, #4]
 800a4c4:	68fa      	ldr	r2, [r7, #12]
 800a4c6:	4313      	orrs	r3, r2
 800a4c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	4a35      	ldr	r2, [pc, #212]	; (800a5a4 <TIM_Base_SetConfig+0x12c>)
 800a4ce:	4293      	cmp	r3, r2
 800a4d0:	d02b      	beq.n	800a52a <TIM_Base_SetConfig+0xb2>
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a4d8:	d027      	beq.n	800a52a <TIM_Base_SetConfig+0xb2>
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	4a32      	ldr	r2, [pc, #200]	; (800a5a8 <TIM_Base_SetConfig+0x130>)
 800a4de:	4293      	cmp	r3, r2
 800a4e0:	d023      	beq.n	800a52a <TIM_Base_SetConfig+0xb2>
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	4a31      	ldr	r2, [pc, #196]	; (800a5ac <TIM_Base_SetConfig+0x134>)
 800a4e6:	4293      	cmp	r3, r2
 800a4e8:	d01f      	beq.n	800a52a <TIM_Base_SetConfig+0xb2>
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	4a30      	ldr	r2, [pc, #192]	; (800a5b0 <TIM_Base_SetConfig+0x138>)
 800a4ee:	4293      	cmp	r3, r2
 800a4f0:	d01b      	beq.n	800a52a <TIM_Base_SetConfig+0xb2>
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	4a2f      	ldr	r2, [pc, #188]	; (800a5b4 <TIM_Base_SetConfig+0x13c>)
 800a4f6:	4293      	cmp	r3, r2
 800a4f8:	d017      	beq.n	800a52a <TIM_Base_SetConfig+0xb2>
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	4a2e      	ldr	r2, [pc, #184]	; (800a5b8 <TIM_Base_SetConfig+0x140>)
 800a4fe:	4293      	cmp	r3, r2
 800a500:	d013      	beq.n	800a52a <TIM_Base_SetConfig+0xb2>
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	4a2d      	ldr	r2, [pc, #180]	; (800a5bc <TIM_Base_SetConfig+0x144>)
 800a506:	4293      	cmp	r3, r2
 800a508:	d00f      	beq.n	800a52a <TIM_Base_SetConfig+0xb2>
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	4a2c      	ldr	r2, [pc, #176]	; (800a5c0 <TIM_Base_SetConfig+0x148>)
 800a50e:	4293      	cmp	r3, r2
 800a510:	d00b      	beq.n	800a52a <TIM_Base_SetConfig+0xb2>
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	4a2b      	ldr	r2, [pc, #172]	; (800a5c4 <TIM_Base_SetConfig+0x14c>)
 800a516:	4293      	cmp	r3, r2
 800a518:	d007      	beq.n	800a52a <TIM_Base_SetConfig+0xb2>
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	4a2a      	ldr	r2, [pc, #168]	; (800a5c8 <TIM_Base_SetConfig+0x150>)
 800a51e:	4293      	cmp	r3, r2
 800a520:	d003      	beq.n	800a52a <TIM_Base_SetConfig+0xb2>
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	4a29      	ldr	r2, [pc, #164]	; (800a5cc <TIM_Base_SetConfig+0x154>)
 800a526:	4293      	cmp	r3, r2
 800a528:	d108      	bne.n	800a53c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a530:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a532:	683b      	ldr	r3, [r7, #0]
 800a534:	68db      	ldr	r3, [r3, #12]
 800a536:	68fa      	ldr	r2, [r7, #12]
 800a538:	4313      	orrs	r3, r2
 800a53a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a542:	683b      	ldr	r3, [r7, #0]
 800a544:	695b      	ldr	r3, [r3, #20]
 800a546:	4313      	orrs	r3, r2
 800a548:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	68fa      	ldr	r2, [r7, #12]
 800a54e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a550:	683b      	ldr	r3, [r7, #0]
 800a552:	689a      	ldr	r2, [r3, #8]
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a558:	683b      	ldr	r3, [r7, #0]
 800a55a:	681a      	ldr	r2, [r3, #0]
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	4a10      	ldr	r2, [pc, #64]	; (800a5a4 <TIM_Base_SetConfig+0x12c>)
 800a564:	4293      	cmp	r3, r2
 800a566:	d003      	beq.n	800a570 <TIM_Base_SetConfig+0xf8>
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	4a12      	ldr	r2, [pc, #72]	; (800a5b4 <TIM_Base_SetConfig+0x13c>)
 800a56c:	4293      	cmp	r3, r2
 800a56e:	d103      	bne.n	800a578 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a570:	683b      	ldr	r3, [r7, #0]
 800a572:	691a      	ldr	r2, [r3, #16]
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	2201      	movs	r2, #1
 800a57c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	691b      	ldr	r3, [r3, #16]
 800a582:	f003 0301 	and.w	r3, r3, #1
 800a586:	2b01      	cmp	r3, #1
 800a588:	d105      	bne.n	800a596 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	691b      	ldr	r3, [r3, #16]
 800a58e:	f023 0201 	bic.w	r2, r3, #1
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	611a      	str	r2, [r3, #16]
  }
}
 800a596:	bf00      	nop
 800a598:	3714      	adds	r7, #20
 800a59a:	46bd      	mov	sp, r7
 800a59c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a0:	4770      	bx	lr
 800a5a2:	bf00      	nop
 800a5a4:	40010000 	.word	0x40010000
 800a5a8:	40000400 	.word	0x40000400
 800a5ac:	40000800 	.word	0x40000800
 800a5b0:	40000c00 	.word	0x40000c00
 800a5b4:	40010400 	.word	0x40010400
 800a5b8:	40014000 	.word	0x40014000
 800a5bc:	40014400 	.word	0x40014400
 800a5c0:	40014800 	.word	0x40014800
 800a5c4:	40001800 	.word	0x40001800
 800a5c8:	40001c00 	.word	0x40001c00
 800a5cc:	40002000 	.word	0x40002000

0800a5d0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800a5d0:	b480      	push	{r7}
 800a5d2:	b087      	sub	sp, #28
 800a5d4:	af00      	add	r7, sp, #0
 800a5d6:	60f8      	str	r0, [r7, #12]
 800a5d8:	60b9      	str	r1, [r7, #8]
 800a5da:	607a      	str	r2, [r7, #4]
 800a5dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	6a1b      	ldr	r3, [r3, #32]
 800a5e2:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	6a1b      	ldr	r3, [r3, #32]
 800a5e8:	f023 0201 	bic.w	r2, r3, #1
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	699b      	ldr	r3, [r3, #24]
 800a5f4:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	4a28      	ldr	r2, [pc, #160]	; (800a69c <TIM_TI1_SetConfig+0xcc>)
 800a5fa:	4293      	cmp	r3, r2
 800a5fc:	d01b      	beq.n	800a636 <TIM_TI1_SetConfig+0x66>
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a604:	d017      	beq.n	800a636 <TIM_TI1_SetConfig+0x66>
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	4a25      	ldr	r2, [pc, #148]	; (800a6a0 <TIM_TI1_SetConfig+0xd0>)
 800a60a:	4293      	cmp	r3, r2
 800a60c:	d013      	beq.n	800a636 <TIM_TI1_SetConfig+0x66>
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	4a24      	ldr	r2, [pc, #144]	; (800a6a4 <TIM_TI1_SetConfig+0xd4>)
 800a612:	4293      	cmp	r3, r2
 800a614:	d00f      	beq.n	800a636 <TIM_TI1_SetConfig+0x66>
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	4a23      	ldr	r2, [pc, #140]	; (800a6a8 <TIM_TI1_SetConfig+0xd8>)
 800a61a:	4293      	cmp	r3, r2
 800a61c:	d00b      	beq.n	800a636 <TIM_TI1_SetConfig+0x66>
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	4a22      	ldr	r2, [pc, #136]	; (800a6ac <TIM_TI1_SetConfig+0xdc>)
 800a622:	4293      	cmp	r3, r2
 800a624:	d007      	beq.n	800a636 <TIM_TI1_SetConfig+0x66>
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	4a21      	ldr	r2, [pc, #132]	; (800a6b0 <TIM_TI1_SetConfig+0xe0>)
 800a62a:	4293      	cmp	r3, r2
 800a62c:	d003      	beq.n	800a636 <TIM_TI1_SetConfig+0x66>
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	4a20      	ldr	r2, [pc, #128]	; (800a6b4 <TIM_TI1_SetConfig+0xe4>)
 800a632:	4293      	cmp	r3, r2
 800a634:	d101      	bne.n	800a63a <TIM_TI1_SetConfig+0x6a>
 800a636:	2301      	movs	r3, #1
 800a638:	e000      	b.n	800a63c <TIM_TI1_SetConfig+0x6c>
 800a63a:	2300      	movs	r3, #0
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d008      	beq.n	800a652 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800a640:	697b      	ldr	r3, [r7, #20]
 800a642:	f023 0303 	bic.w	r3, r3, #3
 800a646:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800a648:	697a      	ldr	r2, [r7, #20]
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	4313      	orrs	r3, r2
 800a64e:	617b      	str	r3, [r7, #20]
 800a650:	e003      	b.n	800a65a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800a652:	697b      	ldr	r3, [r7, #20]
 800a654:	f043 0301 	orr.w	r3, r3, #1
 800a658:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a65a:	697b      	ldr	r3, [r7, #20]
 800a65c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a660:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800a662:	683b      	ldr	r3, [r7, #0]
 800a664:	011b      	lsls	r3, r3, #4
 800a666:	b2db      	uxtb	r3, r3
 800a668:	697a      	ldr	r2, [r7, #20]
 800a66a:	4313      	orrs	r3, r2
 800a66c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a66e:	693b      	ldr	r3, [r7, #16]
 800a670:	f023 030a 	bic.w	r3, r3, #10
 800a674:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800a676:	68bb      	ldr	r3, [r7, #8]
 800a678:	f003 030a 	and.w	r3, r3, #10
 800a67c:	693a      	ldr	r2, [r7, #16]
 800a67e:	4313      	orrs	r3, r2
 800a680:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	697a      	ldr	r2, [r7, #20]
 800a686:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	693a      	ldr	r2, [r7, #16]
 800a68c:	621a      	str	r2, [r3, #32]
}
 800a68e:	bf00      	nop
 800a690:	371c      	adds	r7, #28
 800a692:	46bd      	mov	sp, r7
 800a694:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a698:	4770      	bx	lr
 800a69a:	bf00      	nop
 800a69c:	40010000 	.word	0x40010000
 800a6a0:	40000400 	.word	0x40000400
 800a6a4:	40000800 	.word	0x40000800
 800a6a8:	40000c00 	.word	0x40000c00
 800a6ac:	40010400 	.word	0x40010400
 800a6b0:	40014000 	.word	0x40014000
 800a6b4:	40001800 	.word	0x40001800

0800a6b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a6b8:	b480      	push	{r7}
 800a6ba:	b087      	sub	sp, #28
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	60f8      	str	r0, [r7, #12]
 800a6c0:	60b9      	str	r1, [r7, #8]
 800a6c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	6a1b      	ldr	r3, [r3, #32]
 800a6c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	6a1b      	ldr	r3, [r3, #32]
 800a6ce:	f023 0201 	bic.w	r2, r3, #1
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	699b      	ldr	r3, [r3, #24]
 800a6da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a6dc:	693b      	ldr	r3, [r7, #16]
 800a6de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a6e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	011b      	lsls	r3, r3, #4
 800a6e8:	693a      	ldr	r2, [r7, #16]
 800a6ea:	4313      	orrs	r3, r2
 800a6ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a6ee:	697b      	ldr	r3, [r7, #20]
 800a6f0:	f023 030a 	bic.w	r3, r3, #10
 800a6f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a6f6:	697a      	ldr	r2, [r7, #20]
 800a6f8:	68bb      	ldr	r3, [r7, #8]
 800a6fa:	4313      	orrs	r3, r2
 800a6fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	693a      	ldr	r2, [r7, #16]
 800a702:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	697a      	ldr	r2, [r7, #20]
 800a708:	621a      	str	r2, [r3, #32]
}
 800a70a:	bf00      	nop
 800a70c:	371c      	adds	r7, #28
 800a70e:	46bd      	mov	sp, r7
 800a710:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a714:	4770      	bx	lr

0800a716 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a716:	b480      	push	{r7}
 800a718:	b087      	sub	sp, #28
 800a71a:	af00      	add	r7, sp, #0
 800a71c:	60f8      	str	r0, [r7, #12]
 800a71e:	60b9      	str	r1, [r7, #8]
 800a720:	607a      	str	r2, [r7, #4]
 800a722:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	6a1b      	ldr	r3, [r3, #32]
 800a728:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	6a1b      	ldr	r3, [r3, #32]
 800a72e:	f023 0210 	bic.w	r2, r3, #16
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	699b      	ldr	r3, [r3, #24]
 800a73a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800a73c:	693b      	ldr	r3, [r7, #16]
 800a73e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a742:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	021b      	lsls	r3, r3, #8
 800a748:	693a      	ldr	r2, [r7, #16]
 800a74a:	4313      	orrs	r3, r2
 800a74c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a74e:	693b      	ldr	r3, [r7, #16]
 800a750:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a754:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800a756:	683b      	ldr	r3, [r7, #0]
 800a758:	031b      	lsls	r3, r3, #12
 800a75a:	b29b      	uxth	r3, r3
 800a75c:	693a      	ldr	r2, [r7, #16]
 800a75e:	4313      	orrs	r3, r2
 800a760:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a762:	697b      	ldr	r3, [r7, #20]
 800a764:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a768:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800a76a:	68bb      	ldr	r3, [r7, #8]
 800a76c:	011b      	lsls	r3, r3, #4
 800a76e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800a772:	697a      	ldr	r2, [r7, #20]
 800a774:	4313      	orrs	r3, r2
 800a776:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	693a      	ldr	r2, [r7, #16]
 800a77c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	697a      	ldr	r2, [r7, #20]
 800a782:	621a      	str	r2, [r3, #32]
}
 800a784:	bf00      	nop
 800a786:	371c      	adds	r7, #28
 800a788:	46bd      	mov	sp, r7
 800a78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a78e:	4770      	bx	lr

0800a790 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a790:	b480      	push	{r7}
 800a792:	b087      	sub	sp, #28
 800a794:	af00      	add	r7, sp, #0
 800a796:	60f8      	str	r0, [r7, #12]
 800a798:	60b9      	str	r1, [r7, #8]
 800a79a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	6a1b      	ldr	r3, [r3, #32]
 800a7a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	6a1b      	ldr	r3, [r3, #32]
 800a7a6:	f023 0210 	bic.w	r2, r3, #16
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	699b      	ldr	r3, [r3, #24]
 800a7b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a7b4:	693b      	ldr	r3, [r7, #16]
 800a7b6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a7ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	031b      	lsls	r3, r3, #12
 800a7c0:	693a      	ldr	r2, [r7, #16]
 800a7c2:	4313      	orrs	r3, r2
 800a7c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a7c6:	697b      	ldr	r3, [r7, #20]
 800a7c8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a7cc:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a7ce:	68bb      	ldr	r3, [r7, #8]
 800a7d0:	011b      	lsls	r3, r3, #4
 800a7d2:	697a      	ldr	r2, [r7, #20]
 800a7d4:	4313      	orrs	r3, r2
 800a7d6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	693a      	ldr	r2, [r7, #16]
 800a7dc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	697a      	ldr	r2, [r7, #20]
 800a7e2:	621a      	str	r2, [r3, #32]
}
 800a7e4:	bf00      	nop
 800a7e6:	371c      	adds	r7, #28
 800a7e8:	46bd      	mov	sp, r7
 800a7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ee:	4770      	bx	lr

0800a7f0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a7f0:	b480      	push	{r7}
 800a7f2:	b087      	sub	sp, #28
 800a7f4:	af00      	add	r7, sp, #0
 800a7f6:	60f8      	str	r0, [r7, #12]
 800a7f8:	60b9      	str	r1, [r7, #8]
 800a7fa:	607a      	str	r2, [r7, #4]
 800a7fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	6a1b      	ldr	r3, [r3, #32]
 800a802:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	6a1b      	ldr	r3, [r3, #32]
 800a808:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	69db      	ldr	r3, [r3, #28]
 800a814:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800a816:	693b      	ldr	r3, [r7, #16]
 800a818:	f023 0303 	bic.w	r3, r3, #3
 800a81c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800a81e:	693a      	ldr	r2, [r7, #16]
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	4313      	orrs	r3, r2
 800a824:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800a826:	693b      	ldr	r3, [r7, #16]
 800a828:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a82c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800a82e:	683b      	ldr	r3, [r7, #0]
 800a830:	011b      	lsls	r3, r3, #4
 800a832:	b2db      	uxtb	r3, r3
 800a834:	693a      	ldr	r2, [r7, #16]
 800a836:	4313      	orrs	r3, r2
 800a838:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800a83a:	697b      	ldr	r3, [r7, #20]
 800a83c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800a840:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800a842:	68bb      	ldr	r3, [r7, #8]
 800a844:	021b      	lsls	r3, r3, #8
 800a846:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800a84a:	697a      	ldr	r2, [r7, #20]
 800a84c:	4313      	orrs	r3, r2
 800a84e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	693a      	ldr	r2, [r7, #16]
 800a854:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	697a      	ldr	r2, [r7, #20]
 800a85a:	621a      	str	r2, [r3, #32]
}
 800a85c:	bf00      	nop
 800a85e:	371c      	adds	r7, #28
 800a860:	46bd      	mov	sp, r7
 800a862:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a866:	4770      	bx	lr

0800a868 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a868:	b480      	push	{r7}
 800a86a:	b087      	sub	sp, #28
 800a86c:	af00      	add	r7, sp, #0
 800a86e:	60f8      	str	r0, [r7, #12]
 800a870:	60b9      	str	r1, [r7, #8]
 800a872:	607a      	str	r2, [r7, #4]
 800a874:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	6a1b      	ldr	r3, [r3, #32]
 800a87a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	6a1b      	ldr	r3, [r3, #32]
 800a880:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	69db      	ldr	r3, [r3, #28]
 800a88c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800a88e:	693b      	ldr	r3, [r7, #16]
 800a890:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a894:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	021b      	lsls	r3, r3, #8
 800a89a:	693a      	ldr	r2, [r7, #16]
 800a89c:	4313      	orrs	r3, r2
 800a89e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800a8a0:	693b      	ldr	r3, [r7, #16]
 800a8a2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a8a6:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800a8a8:	683b      	ldr	r3, [r7, #0]
 800a8aa:	031b      	lsls	r3, r3, #12
 800a8ac:	b29b      	uxth	r3, r3
 800a8ae:	693a      	ldr	r2, [r7, #16]
 800a8b0:	4313      	orrs	r3, r2
 800a8b2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800a8b4:	697b      	ldr	r3, [r7, #20]
 800a8b6:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800a8ba:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800a8bc:	68bb      	ldr	r3, [r7, #8]
 800a8be:	031b      	lsls	r3, r3, #12
 800a8c0:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800a8c4:	697a      	ldr	r2, [r7, #20]
 800a8c6:	4313      	orrs	r3, r2
 800a8c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	693a      	ldr	r2, [r7, #16]
 800a8ce:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	697a      	ldr	r2, [r7, #20]
 800a8d4:	621a      	str	r2, [r3, #32]
}
 800a8d6:	bf00      	nop
 800a8d8:	371c      	adds	r7, #28
 800a8da:	46bd      	mov	sp, r7
 800a8dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e0:	4770      	bx	lr

0800a8e2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a8e2:	b480      	push	{r7}
 800a8e4:	b085      	sub	sp, #20
 800a8e6:	af00      	add	r7, sp, #0
 800a8e8:	6078      	str	r0, [r7, #4]
 800a8ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	689b      	ldr	r3, [r3, #8]
 800a8f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a8f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a8fa:	683a      	ldr	r2, [r7, #0]
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	4313      	orrs	r3, r2
 800a900:	f043 0307 	orr.w	r3, r3, #7
 800a904:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	68fa      	ldr	r2, [r7, #12]
 800a90a:	609a      	str	r2, [r3, #8]
}
 800a90c:	bf00      	nop
 800a90e:	3714      	adds	r7, #20
 800a910:	46bd      	mov	sp, r7
 800a912:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a916:	4770      	bx	lr

0800a918 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a918:	b480      	push	{r7}
 800a91a:	b087      	sub	sp, #28
 800a91c:	af00      	add	r7, sp, #0
 800a91e:	60f8      	str	r0, [r7, #12]
 800a920:	60b9      	str	r1, [r7, #8]
 800a922:	607a      	str	r2, [r7, #4]
 800a924:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	689b      	ldr	r3, [r3, #8]
 800a92a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a92c:	697b      	ldr	r3, [r7, #20]
 800a92e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a932:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a934:	683b      	ldr	r3, [r7, #0]
 800a936:	021a      	lsls	r2, r3, #8
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	431a      	orrs	r2, r3
 800a93c:	68bb      	ldr	r3, [r7, #8]
 800a93e:	4313      	orrs	r3, r2
 800a940:	697a      	ldr	r2, [r7, #20]
 800a942:	4313      	orrs	r3, r2
 800a944:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	697a      	ldr	r2, [r7, #20]
 800a94a:	609a      	str	r2, [r3, #8]
}
 800a94c:	bf00      	nop
 800a94e:	371c      	adds	r7, #28
 800a950:	46bd      	mov	sp, r7
 800a952:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a956:	4770      	bx	lr

0800a958 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a958:	b480      	push	{r7}
 800a95a:	b085      	sub	sp, #20
 800a95c:	af00      	add	r7, sp, #0
 800a95e:	6078      	str	r0, [r7, #4]
 800a960:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a968:	2b01      	cmp	r3, #1
 800a96a:	d101      	bne.n	800a970 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a96c:	2302      	movs	r3, #2
 800a96e:	e05a      	b.n	800aa26 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	2201      	movs	r2, #1
 800a974:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	2202      	movs	r2, #2
 800a97c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	685b      	ldr	r3, [r3, #4]
 800a986:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	689b      	ldr	r3, [r3, #8]
 800a98e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a996:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a998:	683b      	ldr	r3, [r7, #0]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	68fa      	ldr	r2, [r7, #12]
 800a99e:	4313      	orrs	r3, r2
 800a9a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	68fa      	ldr	r2, [r7, #12]
 800a9a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	4a21      	ldr	r2, [pc, #132]	; (800aa34 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800a9b0:	4293      	cmp	r3, r2
 800a9b2:	d022      	beq.n	800a9fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a9bc:	d01d      	beq.n	800a9fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	4a1d      	ldr	r2, [pc, #116]	; (800aa38 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800a9c4:	4293      	cmp	r3, r2
 800a9c6:	d018      	beq.n	800a9fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	4a1b      	ldr	r2, [pc, #108]	; (800aa3c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800a9ce:	4293      	cmp	r3, r2
 800a9d0:	d013      	beq.n	800a9fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	4a1a      	ldr	r2, [pc, #104]	; (800aa40 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800a9d8:	4293      	cmp	r3, r2
 800a9da:	d00e      	beq.n	800a9fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	4a18      	ldr	r2, [pc, #96]	; (800aa44 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800a9e2:	4293      	cmp	r3, r2
 800a9e4:	d009      	beq.n	800a9fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	4a17      	ldr	r2, [pc, #92]	; (800aa48 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a9ec:	4293      	cmp	r3, r2
 800a9ee:	d004      	beq.n	800a9fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	4a15      	ldr	r2, [pc, #84]	; (800aa4c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a9f6:	4293      	cmp	r3, r2
 800a9f8:	d10c      	bne.n	800aa14 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a9fa:	68bb      	ldr	r3, [r7, #8]
 800a9fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800aa00:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800aa02:	683b      	ldr	r3, [r7, #0]
 800aa04:	685b      	ldr	r3, [r3, #4]
 800aa06:	68ba      	ldr	r2, [r7, #8]
 800aa08:	4313      	orrs	r3, r2
 800aa0a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	68ba      	ldr	r2, [r7, #8]
 800aa12:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	2201      	movs	r2, #1
 800aa18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	2200      	movs	r2, #0
 800aa20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800aa24:	2300      	movs	r3, #0
}
 800aa26:	4618      	mov	r0, r3
 800aa28:	3714      	adds	r7, #20
 800aa2a:	46bd      	mov	sp, r7
 800aa2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa30:	4770      	bx	lr
 800aa32:	bf00      	nop
 800aa34:	40010000 	.word	0x40010000
 800aa38:	40000400 	.word	0x40000400
 800aa3c:	40000800 	.word	0x40000800
 800aa40:	40000c00 	.word	0x40000c00
 800aa44:	40010400 	.word	0x40010400
 800aa48:	40014000 	.word	0x40014000
 800aa4c:	40001800 	.word	0x40001800

0800aa50 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800aa50:	b480      	push	{r7}
 800aa52:	b083      	sub	sp, #12
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800aa58:	bf00      	nop
 800aa5a:	370c      	adds	r7, #12
 800aa5c:	46bd      	mov	sp, r7
 800aa5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa62:	4770      	bx	lr

0800aa64 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800aa64:	b480      	push	{r7}
 800aa66:	b083      	sub	sp, #12
 800aa68:	af00      	add	r7, sp, #0
 800aa6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800aa6c:	bf00      	nop
 800aa6e:	370c      	adds	r7, #12
 800aa70:	46bd      	mov	sp, r7
 800aa72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa76:	4770      	bx	lr

0800aa78 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800aa78:	b580      	push	{r7, lr}
 800aa7a:	b082      	sub	sp, #8
 800aa7c:	af00      	add	r7, sp, #0
 800aa7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d101      	bne.n	800aa8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800aa86:	2301      	movs	r3, #1
 800aa88:	e042      	b.n	800ab10 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800aa90:	b2db      	uxtb	r3, r3
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d106      	bne.n	800aaa4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	2200      	movs	r2, #0
 800aa9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800aa9e:	6878      	ldr	r0, [r7, #4]
 800aaa0:	f7f9 f95e 	bl	8003d60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	2224      	movs	r2, #36	; 0x24
 800aaa8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	68da      	ldr	r2, [r3, #12]
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800aaba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800aabc:	6878      	ldr	r0, [r7, #4]
 800aabe:	f000 fe6b 	bl	800b798 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	691a      	ldr	r2, [r3, #16]
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800aad0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	695a      	ldr	r2, [r3, #20]
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800aae0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	68da      	ldr	r2, [r3, #12]
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800aaf0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	2200      	movs	r2, #0
 800aaf6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	2220      	movs	r2, #32
 800aafc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	2220      	movs	r2, #32
 800ab04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	2200      	movs	r2, #0
 800ab0c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800ab0e:	2300      	movs	r3, #0
}
 800ab10:	4618      	mov	r0, r3
 800ab12:	3708      	adds	r7, #8
 800ab14:	46bd      	mov	sp, r7
 800ab16:	bd80      	pop	{r7, pc}

0800ab18 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ab18:	b580      	push	{r7, lr}
 800ab1a:	b084      	sub	sp, #16
 800ab1c:	af00      	add	r7, sp, #0
 800ab1e:	60f8      	str	r0, [r7, #12]
 800ab20:	60b9      	str	r1, [r7, #8]
 800ab22:	4613      	mov	r3, r2
 800ab24:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ab2c:	b2db      	uxtb	r3, r3
 800ab2e:	2b20      	cmp	r3, #32
 800ab30:	d112      	bne.n	800ab58 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800ab32:	68bb      	ldr	r3, [r7, #8]
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d002      	beq.n	800ab3e <HAL_UART_Receive_DMA+0x26>
 800ab38:	88fb      	ldrh	r3, [r7, #6]
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d101      	bne.n	800ab42 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800ab3e:	2301      	movs	r3, #1
 800ab40:	e00b      	b.n	800ab5a <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	2200      	movs	r2, #0
 800ab46:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800ab48:	88fb      	ldrh	r3, [r7, #6]
 800ab4a:	461a      	mov	r2, r3
 800ab4c:	68b9      	ldr	r1, [r7, #8]
 800ab4e:	68f8      	ldr	r0, [r7, #12]
 800ab50:	f000 fbc2 	bl	800b2d8 <UART_Start_Receive_DMA>
 800ab54:	4603      	mov	r3, r0
 800ab56:	e000      	b.n	800ab5a <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 800ab58:	2302      	movs	r3, #2
  }
}
 800ab5a:	4618      	mov	r0, r3
 800ab5c:	3710      	adds	r7, #16
 800ab5e:	46bd      	mov	sp, r7
 800ab60:	bd80      	pop	{r7, pc}
	...

0800ab64 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ab64:	b580      	push	{r7, lr}
 800ab66:	b0ba      	sub	sp, #232	; 0xe8
 800ab68:	af00      	add	r7, sp, #0
 800ab6a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	68db      	ldr	r3, [r3, #12]
 800ab7c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	695b      	ldr	r3, [r3, #20]
 800ab86:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800ab8a:	2300      	movs	r3, #0
 800ab8c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800ab90:	2300      	movs	r3, #0
 800ab92:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800ab96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ab9a:	f003 030f 	and.w	r3, r3, #15
 800ab9e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800aba2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d10f      	bne.n	800abca <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800abaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800abae:	f003 0320 	and.w	r3, r3, #32
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d009      	beq.n	800abca <HAL_UART_IRQHandler+0x66>
 800abb6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800abba:	f003 0320 	and.w	r3, r3, #32
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d003      	beq.n	800abca <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800abc2:	6878      	ldr	r0, [r7, #4]
 800abc4:	f000 fd29 	bl	800b61a <UART_Receive_IT>
      return;
 800abc8:	e25b      	b.n	800b082 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800abca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800abce:	2b00      	cmp	r3, #0
 800abd0:	f000 80de 	beq.w	800ad90 <HAL_UART_IRQHandler+0x22c>
 800abd4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800abd8:	f003 0301 	and.w	r3, r3, #1
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d106      	bne.n	800abee <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800abe0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800abe4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800abe8:	2b00      	cmp	r3, #0
 800abea:	f000 80d1 	beq.w	800ad90 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800abee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800abf2:	f003 0301 	and.w	r3, r3, #1
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d00b      	beq.n	800ac12 <HAL_UART_IRQHandler+0xae>
 800abfa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800abfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d005      	beq.n	800ac12 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac0a:	f043 0201 	orr.w	r2, r3, #1
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ac12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ac16:	f003 0304 	and.w	r3, r3, #4
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d00b      	beq.n	800ac36 <HAL_UART_IRQHandler+0xd2>
 800ac1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ac22:	f003 0301 	and.w	r3, r3, #1
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d005      	beq.n	800ac36 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac2e:	f043 0202 	orr.w	r2, r3, #2
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ac36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ac3a:	f003 0302 	and.w	r3, r3, #2
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d00b      	beq.n	800ac5a <HAL_UART_IRQHandler+0xf6>
 800ac42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ac46:	f003 0301 	and.w	r3, r3, #1
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d005      	beq.n	800ac5a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac52:	f043 0204 	orr.w	r2, r3, #4
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800ac5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ac5e:	f003 0308 	and.w	r3, r3, #8
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d011      	beq.n	800ac8a <HAL_UART_IRQHandler+0x126>
 800ac66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ac6a:	f003 0320 	and.w	r3, r3, #32
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d105      	bne.n	800ac7e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800ac72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ac76:	f003 0301 	and.w	r3, r3, #1
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d005      	beq.n	800ac8a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac82:	f043 0208 	orr.w	r2, r3, #8
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	f000 81f2 	beq.w	800b078 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800ac94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ac98:	f003 0320 	and.w	r3, r3, #32
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d008      	beq.n	800acb2 <HAL_UART_IRQHandler+0x14e>
 800aca0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aca4:	f003 0320 	and.w	r3, r3, #32
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d002      	beq.n	800acb2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800acac:	6878      	ldr	r0, [r7, #4]
 800acae:	f000 fcb4 	bl	800b61a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	695b      	ldr	r3, [r3, #20]
 800acb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800acbc:	2b40      	cmp	r3, #64	; 0x40
 800acbe:	bf0c      	ite	eq
 800acc0:	2301      	moveq	r3, #1
 800acc2:	2300      	movne	r3, #0
 800acc4:	b2db      	uxtb	r3, r3
 800acc6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800acce:	f003 0308 	and.w	r3, r3, #8
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d103      	bne.n	800acde <HAL_UART_IRQHandler+0x17a>
 800acd6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d04f      	beq.n	800ad7e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800acde:	6878      	ldr	r0, [r7, #4]
 800ace0:	f000 fbbc 	bl	800b45c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	695b      	ldr	r3, [r3, #20]
 800acea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800acee:	2b40      	cmp	r3, #64	; 0x40
 800acf0:	d141      	bne.n	800ad76 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	3314      	adds	r3, #20
 800acf8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acfc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ad00:	e853 3f00 	ldrex	r3, [r3]
 800ad04:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800ad08:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ad0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ad10:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	3314      	adds	r3, #20
 800ad1a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800ad1e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800ad22:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad26:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800ad2a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800ad2e:	e841 2300 	strex	r3, r2, [r1]
 800ad32:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800ad36:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d1d9      	bne.n	800acf2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d013      	beq.n	800ad6e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad4a:	4a7e      	ldr	r2, [pc, #504]	; (800af44 <HAL_UART_IRQHandler+0x3e0>)
 800ad4c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad52:	4618      	mov	r0, r3
 800ad54:	f7f9 fd4e 	bl	80047f4 <HAL_DMA_Abort_IT>
 800ad58:	4603      	mov	r3, r0
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d016      	beq.n	800ad8c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ad64:	687a      	ldr	r2, [r7, #4]
 800ad66:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800ad68:	4610      	mov	r0, r2
 800ad6a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ad6c:	e00e      	b.n	800ad8c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ad6e:	6878      	ldr	r0, [r7, #4]
 800ad70:	f000 f99e 	bl	800b0b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ad74:	e00a      	b.n	800ad8c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ad76:	6878      	ldr	r0, [r7, #4]
 800ad78:	f000 f99a 	bl	800b0b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ad7c:	e006      	b.n	800ad8c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ad7e:	6878      	ldr	r0, [r7, #4]
 800ad80:	f000 f996 	bl	800b0b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	2200      	movs	r2, #0
 800ad88:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800ad8a:	e175      	b.n	800b078 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ad8c:	bf00      	nop
    return;
 800ad8e:	e173      	b.n	800b078 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad94:	2b01      	cmp	r3, #1
 800ad96:	f040 814f 	bne.w	800b038 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800ad9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ad9e:	f003 0310 	and.w	r3, r3, #16
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	f000 8148 	beq.w	800b038 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800ada8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800adac:	f003 0310 	and.w	r3, r3, #16
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	f000 8141 	beq.w	800b038 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800adb6:	2300      	movs	r3, #0
 800adb8:	60bb      	str	r3, [r7, #8]
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	60bb      	str	r3, [r7, #8]
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	685b      	ldr	r3, [r3, #4]
 800adc8:	60bb      	str	r3, [r7, #8]
 800adca:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	695b      	ldr	r3, [r3, #20]
 800add2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800add6:	2b40      	cmp	r3, #64	; 0x40
 800add8:	f040 80b6 	bne.w	800af48 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	685b      	ldr	r3, [r3, #4]
 800ade4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800ade8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800adec:	2b00      	cmp	r3, #0
 800adee:	f000 8145 	beq.w	800b07c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800adf6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800adfa:	429a      	cmp	r2, r3
 800adfc:	f080 813e 	bcs.w	800b07c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800ae06:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae0c:	69db      	ldr	r3, [r3, #28]
 800ae0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ae12:	f000 8088 	beq.w	800af26 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	330c      	adds	r3, #12
 800ae1c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae20:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ae24:	e853 3f00 	ldrex	r3, [r3]
 800ae28:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800ae2c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ae30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ae34:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	330c      	adds	r3, #12
 800ae3e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800ae42:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800ae46:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae4a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800ae4e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800ae52:	e841 2300 	strex	r3, r2, [r1]
 800ae56:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800ae5a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d1d9      	bne.n	800ae16 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	3314      	adds	r3, #20
 800ae68:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ae6c:	e853 3f00 	ldrex	r3, [r3]
 800ae70:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800ae72:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ae74:	f023 0301 	bic.w	r3, r3, #1
 800ae78:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	3314      	adds	r3, #20
 800ae82:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800ae86:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800ae8a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae8c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800ae8e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800ae92:	e841 2300 	strex	r3, r2, [r1]
 800ae96:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800ae98:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d1e1      	bne.n	800ae62 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	3314      	adds	r3, #20
 800aea4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aea6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800aea8:	e853 3f00 	ldrex	r3, [r3]
 800aeac:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800aeae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800aeb0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aeb4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	3314      	adds	r3, #20
 800aebe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800aec2:	66fa      	str	r2, [r7, #108]	; 0x6c
 800aec4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aec6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800aec8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800aeca:	e841 2300 	strex	r3, r2, [r1]
 800aece:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800aed0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d1e3      	bne.n	800ae9e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	2220      	movs	r2, #32
 800aeda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	2200      	movs	r2, #0
 800aee2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	330c      	adds	r3, #12
 800aeea:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aeec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aeee:	e853 3f00 	ldrex	r3, [r3]
 800aef2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800aef4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aef6:	f023 0310 	bic.w	r3, r3, #16
 800aefa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	330c      	adds	r3, #12
 800af04:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800af08:	65ba      	str	r2, [r7, #88]	; 0x58
 800af0a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af0c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800af0e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800af10:	e841 2300 	strex	r3, r2, [r1]
 800af14:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800af16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d1e3      	bne.n	800aee4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af20:	4618      	mov	r0, r3
 800af22:	f7f9 fbf7 	bl	8004714 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	2202      	movs	r2, #2
 800af2a:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800af34:	b29b      	uxth	r3, r3
 800af36:	1ad3      	subs	r3, r2, r3
 800af38:	b29b      	uxth	r3, r3
 800af3a:	4619      	mov	r1, r3
 800af3c:	6878      	ldr	r0, [r7, #4]
 800af3e:	f000 f8c1 	bl	800b0c4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800af42:	e09b      	b.n	800b07c <HAL_UART_IRQHandler+0x518>
 800af44:	0800b523 	.word	0x0800b523
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800af50:	b29b      	uxth	r3, r3
 800af52:	1ad3      	subs	r3, r2, r3
 800af54:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800af5c:	b29b      	uxth	r3, r3
 800af5e:	2b00      	cmp	r3, #0
 800af60:	f000 808e 	beq.w	800b080 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800af64:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800af68:	2b00      	cmp	r3, #0
 800af6a:	f000 8089 	beq.w	800b080 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	330c      	adds	r3, #12
 800af74:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af78:	e853 3f00 	ldrex	r3, [r3]
 800af7c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800af7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af80:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800af84:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	330c      	adds	r3, #12
 800af8e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800af92:	647a      	str	r2, [r7, #68]	; 0x44
 800af94:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af96:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800af98:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800af9a:	e841 2300 	strex	r3, r2, [r1]
 800af9e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800afa0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d1e3      	bne.n	800af6e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	3314      	adds	r3, #20
 800afac:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afb0:	e853 3f00 	ldrex	r3, [r3]
 800afb4:	623b      	str	r3, [r7, #32]
   return(result);
 800afb6:	6a3b      	ldr	r3, [r7, #32]
 800afb8:	f023 0301 	bic.w	r3, r3, #1
 800afbc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	3314      	adds	r3, #20
 800afc6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800afca:	633a      	str	r2, [r7, #48]	; 0x30
 800afcc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800afd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800afd2:	e841 2300 	strex	r3, r2, [r1]
 800afd6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800afd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d1e3      	bne.n	800afa6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	2220      	movs	r2, #32
 800afe2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	2200      	movs	r2, #0
 800afea:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	330c      	adds	r3, #12
 800aff2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aff4:	693b      	ldr	r3, [r7, #16]
 800aff6:	e853 3f00 	ldrex	r3, [r3]
 800affa:	60fb      	str	r3, [r7, #12]
   return(result);
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	f023 0310 	bic.w	r3, r3, #16
 800b002:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	330c      	adds	r3, #12
 800b00c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800b010:	61fa      	str	r2, [r7, #28]
 800b012:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b014:	69b9      	ldr	r1, [r7, #24]
 800b016:	69fa      	ldr	r2, [r7, #28]
 800b018:	e841 2300 	strex	r3, r2, [r1]
 800b01c:	617b      	str	r3, [r7, #20]
   return(result);
 800b01e:	697b      	ldr	r3, [r7, #20]
 800b020:	2b00      	cmp	r3, #0
 800b022:	d1e3      	bne.n	800afec <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	2202      	movs	r2, #2
 800b028:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b02a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b02e:	4619      	mov	r1, r3
 800b030:	6878      	ldr	r0, [r7, #4]
 800b032:	f000 f847 	bl	800b0c4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b036:	e023      	b.n	800b080 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800b038:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b03c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b040:	2b00      	cmp	r3, #0
 800b042:	d009      	beq.n	800b058 <HAL_UART_IRQHandler+0x4f4>
 800b044:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b048:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d003      	beq.n	800b058 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800b050:	6878      	ldr	r0, [r7, #4]
 800b052:	f000 fa7a 	bl	800b54a <UART_Transmit_IT>
    return;
 800b056:	e014      	b.n	800b082 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800b058:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b05c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b060:	2b00      	cmp	r3, #0
 800b062:	d00e      	beq.n	800b082 <HAL_UART_IRQHandler+0x51e>
 800b064:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b068:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d008      	beq.n	800b082 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800b070:	6878      	ldr	r0, [r7, #4]
 800b072:	f000 faba 	bl	800b5ea <UART_EndTransmit_IT>
    return;
 800b076:	e004      	b.n	800b082 <HAL_UART_IRQHandler+0x51e>
    return;
 800b078:	bf00      	nop
 800b07a:	e002      	b.n	800b082 <HAL_UART_IRQHandler+0x51e>
      return;
 800b07c:	bf00      	nop
 800b07e:	e000      	b.n	800b082 <HAL_UART_IRQHandler+0x51e>
      return;
 800b080:	bf00      	nop
  }
}
 800b082:	37e8      	adds	r7, #232	; 0xe8
 800b084:	46bd      	mov	sp, r7
 800b086:	bd80      	pop	{r7, pc}

0800b088 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b088:	b480      	push	{r7}
 800b08a:	b083      	sub	sp, #12
 800b08c:	af00      	add	r7, sp, #0
 800b08e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800b090:	bf00      	nop
 800b092:	370c      	adds	r7, #12
 800b094:	46bd      	mov	sp, r7
 800b096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b09a:	4770      	bx	lr

0800b09c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b09c:	b480      	push	{r7}
 800b09e:	b083      	sub	sp, #12
 800b0a0:	af00      	add	r7, sp, #0
 800b0a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800b0a4:	bf00      	nop
 800b0a6:	370c      	adds	r7, #12
 800b0a8:	46bd      	mov	sp, r7
 800b0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ae:	4770      	bx	lr

0800b0b0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b0b0:	b480      	push	{r7}
 800b0b2:	b083      	sub	sp, #12
 800b0b4:	af00      	add	r7, sp, #0
 800b0b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800b0b8:	bf00      	nop
 800b0ba:	370c      	adds	r7, #12
 800b0bc:	46bd      	mov	sp, r7
 800b0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c2:	4770      	bx	lr

0800b0c4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b0c4:	b480      	push	{r7}
 800b0c6:	b083      	sub	sp, #12
 800b0c8:	af00      	add	r7, sp, #0
 800b0ca:	6078      	str	r0, [r7, #4]
 800b0cc:	460b      	mov	r3, r1
 800b0ce:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b0d0:	bf00      	nop
 800b0d2:	370c      	adds	r7, #12
 800b0d4:	46bd      	mov	sp, r7
 800b0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0da:	4770      	bx	lr

0800b0dc <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b0dc:	b580      	push	{r7, lr}
 800b0de:	b09c      	sub	sp, #112	; 0x70
 800b0e0:	af00      	add	r7, sp, #0
 800b0e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0e8:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d172      	bne.n	800b1de <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800b0f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b0fa:	2200      	movs	r2, #0
 800b0fc:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b0fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	330c      	adds	r3, #12
 800b104:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b106:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b108:	e853 3f00 	ldrex	r3, [r3]
 800b10c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b10e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b110:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b114:	66bb      	str	r3, [r7, #104]	; 0x68
 800b116:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	330c      	adds	r3, #12
 800b11c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b11e:	65ba      	str	r2, [r7, #88]	; 0x58
 800b120:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b122:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b124:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b126:	e841 2300 	strex	r3, r2, [r1]
 800b12a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b12c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d1e5      	bne.n	800b0fe <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b132:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	3314      	adds	r3, #20
 800b138:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b13a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b13c:	e853 3f00 	ldrex	r3, [r3]
 800b140:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b142:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b144:	f023 0301 	bic.w	r3, r3, #1
 800b148:	667b      	str	r3, [r7, #100]	; 0x64
 800b14a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	3314      	adds	r3, #20
 800b150:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b152:	647a      	str	r2, [r7, #68]	; 0x44
 800b154:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b156:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b158:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b15a:	e841 2300 	strex	r3, r2, [r1]
 800b15e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b160:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b162:	2b00      	cmp	r3, #0
 800b164:	d1e5      	bne.n	800b132 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b166:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	3314      	adds	r3, #20
 800b16c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b16e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b170:	e853 3f00 	ldrex	r3, [r3]
 800b174:	623b      	str	r3, [r7, #32]
   return(result);
 800b176:	6a3b      	ldr	r3, [r7, #32]
 800b178:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b17c:	663b      	str	r3, [r7, #96]	; 0x60
 800b17e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	3314      	adds	r3, #20
 800b184:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b186:	633a      	str	r2, [r7, #48]	; 0x30
 800b188:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b18a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b18c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b18e:	e841 2300 	strex	r3, r2, [r1]
 800b192:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b196:	2b00      	cmp	r3, #0
 800b198:	d1e5      	bne.n	800b166 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b19a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b19c:	2220      	movs	r2, #32
 800b19e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b1a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b1a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1a6:	2b01      	cmp	r3, #1
 800b1a8:	d119      	bne.n	800b1de <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b1aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	330c      	adds	r3, #12
 800b1b0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1b2:	693b      	ldr	r3, [r7, #16]
 800b1b4:	e853 3f00 	ldrex	r3, [r3]
 800b1b8:	60fb      	str	r3, [r7, #12]
   return(result);
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	f023 0310 	bic.w	r3, r3, #16
 800b1c0:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b1c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	330c      	adds	r3, #12
 800b1c8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b1ca:	61fa      	str	r2, [r7, #28]
 800b1cc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1ce:	69b9      	ldr	r1, [r7, #24]
 800b1d0:	69fa      	ldr	r2, [r7, #28]
 800b1d2:	e841 2300 	strex	r3, r2, [r1]
 800b1d6:	617b      	str	r3, [r7, #20]
   return(result);
 800b1d8:	697b      	ldr	r3, [r7, #20]
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d1e5      	bne.n	800b1aa <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b1de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b1e0:	2200      	movs	r2, #0
 800b1e2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b1e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b1e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1e8:	2b01      	cmp	r3, #1
 800b1ea:	d106      	bne.n	800b1fa <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b1ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b1ee:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b1f0:	4619      	mov	r1, r3
 800b1f2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800b1f4:	f7ff ff66 	bl	800b0c4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b1f8:	e002      	b.n	800b200 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800b1fa:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800b1fc:	f7f7 fe7a 	bl	8002ef4 <HAL_UART_RxCpltCallback>
}
 800b200:	bf00      	nop
 800b202:	3770      	adds	r7, #112	; 0x70
 800b204:	46bd      	mov	sp, r7
 800b206:	bd80      	pop	{r7, pc}

0800b208 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b208:	b580      	push	{r7, lr}
 800b20a:	b084      	sub	sp, #16
 800b20c:	af00      	add	r7, sp, #0
 800b20e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b214:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	2201      	movs	r2, #1
 800b21a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b220:	2b01      	cmp	r3, #1
 800b222:	d108      	bne.n	800b236 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b228:	085b      	lsrs	r3, r3, #1
 800b22a:	b29b      	uxth	r3, r3
 800b22c:	4619      	mov	r1, r3
 800b22e:	68f8      	ldr	r0, [r7, #12]
 800b230:	f7ff ff48 	bl	800b0c4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b234:	e002      	b.n	800b23c <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800b236:	68f8      	ldr	r0, [r7, #12]
 800b238:	f7ff ff30 	bl	800b09c <HAL_UART_RxHalfCpltCallback>
}
 800b23c:	bf00      	nop
 800b23e:	3710      	adds	r7, #16
 800b240:	46bd      	mov	sp, r7
 800b242:	bd80      	pop	{r7, pc}

0800b244 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b244:	b580      	push	{r7, lr}
 800b246:	b084      	sub	sp, #16
 800b248:	af00      	add	r7, sp, #0
 800b24a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800b24c:	2300      	movs	r3, #0
 800b24e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b254:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800b256:	68bb      	ldr	r3, [r7, #8]
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	695b      	ldr	r3, [r3, #20]
 800b25c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b260:	2b80      	cmp	r3, #128	; 0x80
 800b262:	bf0c      	ite	eq
 800b264:	2301      	moveq	r3, #1
 800b266:	2300      	movne	r3, #0
 800b268:	b2db      	uxtb	r3, r3
 800b26a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800b26c:	68bb      	ldr	r3, [r7, #8]
 800b26e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b272:	b2db      	uxtb	r3, r3
 800b274:	2b21      	cmp	r3, #33	; 0x21
 800b276:	d108      	bne.n	800b28a <UART_DMAError+0x46>
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d005      	beq.n	800b28a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800b27e:	68bb      	ldr	r3, [r7, #8]
 800b280:	2200      	movs	r2, #0
 800b282:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800b284:	68b8      	ldr	r0, [r7, #8]
 800b286:	f000 f8c1 	bl	800b40c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b28a:	68bb      	ldr	r3, [r7, #8]
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	695b      	ldr	r3, [r3, #20]
 800b290:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b294:	2b40      	cmp	r3, #64	; 0x40
 800b296:	bf0c      	ite	eq
 800b298:	2301      	moveq	r3, #1
 800b29a:	2300      	movne	r3, #0
 800b29c:	b2db      	uxtb	r3, r3
 800b29e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800b2a0:	68bb      	ldr	r3, [r7, #8]
 800b2a2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b2a6:	b2db      	uxtb	r3, r3
 800b2a8:	2b22      	cmp	r3, #34	; 0x22
 800b2aa:	d108      	bne.n	800b2be <UART_DMAError+0x7a>
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d005      	beq.n	800b2be <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800b2b2:	68bb      	ldr	r3, [r7, #8]
 800b2b4:	2200      	movs	r2, #0
 800b2b6:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800b2b8:	68b8      	ldr	r0, [r7, #8]
 800b2ba:	f000 f8cf 	bl	800b45c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b2be:	68bb      	ldr	r3, [r7, #8]
 800b2c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b2c2:	f043 0210 	orr.w	r2, r3, #16
 800b2c6:	68bb      	ldr	r3, [r7, #8]
 800b2c8:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b2ca:	68b8      	ldr	r0, [r7, #8]
 800b2cc:	f7ff fef0 	bl	800b0b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b2d0:	bf00      	nop
 800b2d2:	3710      	adds	r7, #16
 800b2d4:	46bd      	mov	sp, r7
 800b2d6:	bd80      	pop	{r7, pc}

0800b2d8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b2d8:	b580      	push	{r7, lr}
 800b2da:	b098      	sub	sp, #96	; 0x60
 800b2dc:	af00      	add	r7, sp, #0
 800b2de:	60f8      	str	r0, [r7, #12]
 800b2e0:	60b9      	str	r1, [r7, #8]
 800b2e2:	4613      	mov	r3, r2
 800b2e4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800b2e6:	68ba      	ldr	r2, [r7, #8]
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	88fa      	ldrh	r2, [r7, #6]
 800b2f0:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	2200      	movs	r2, #0
 800b2f6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	2222      	movs	r2, #34	; 0x22
 800b2fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b304:	4a3e      	ldr	r2, [pc, #248]	; (800b400 <UART_Start_Receive_DMA+0x128>)
 800b306:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b30c:	4a3d      	ldr	r2, [pc, #244]	; (800b404 <UART_Start_Receive_DMA+0x12c>)
 800b30e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b314:	4a3c      	ldr	r2, [pc, #240]	; (800b408 <UART_Start_Receive_DMA+0x130>)
 800b316:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b31c:	2200      	movs	r2, #0
 800b31e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800b320:	f107 0308 	add.w	r3, r7, #8
 800b324:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	3304      	adds	r3, #4
 800b330:	4619      	mov	r1, r3
 800b332:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b334:	681a      	ldr	r2, [r3, #0]
 800b336:	88fb      	ldrh	r3, [r7, #6]
 800b338:	f7f9 f994 	bl	8004664 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800b33c:	2300      	movs	r3, #0
 800b33e:	613b      	str	r3, [r7, #16]
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	613b      	str	r3, [r7, #16]
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	685b      	ldr	r3, [r3, #4]
 800b34e:	613b      	str	r3, [r7, #16]
 800b350:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	691b      	ldr	r3, [r3, #16]
 800b356:	2b00      	cmp	r3, #0
 800b358:	d019      	beq.n	800b38e <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	330c      	adds	r3, #12
 800b360:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b362:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b364:	e853 3f00 	ldrex	r3, [r3]
 800b368:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b36a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b36c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b370:	65bb      	str	r3, [r7, #88]	; 0x58
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	330c      	adds	r3, #12
 800b378:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b37a:	64fa      	str	r2, [r7, #76]	; 0x4c
 800b37c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b37e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800b380:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b382:	e841 2300 	strex	r3, r2, [r1]
 800b386:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800b388:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d1e5      	bne.n	800b35a <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	3314      	adds	r3, #20
 800b394:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b398:	e853 3f00 	ldrex	r3, [r3]
 800b39c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b39e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3a0:	f043 0301 	orr.w	r3, r3, #1
 800b3a4:	657b      	str	r3, [r7, #84]	; 0x54
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	3314      	adds	r3, #20
 800b3ac:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b3ae:	63ba      	str	r2, [r7, #56]	; 0x38
 800b3b0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3b2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b3b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b3b6:	e841 2300 	strex	r3, r2, [r1]
 800b3ba:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b3bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d1e5      	bne.n	800b38e <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	3314      	adds	r3, #20
 800b3c8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3ca:	69bb      	ldr	r3, [r7, #24]
 800b3cc:	e853 3f00 	ldrex	r3, [r3]
 800b3d0:	617b      	str	r3, [r7, #20]
   return(result);
 800b3d2:	697b      	ldr	r3, [r7, #20]
 800b3d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b3d8:	653b      	str	r3, [r7, #80]	; 0x50
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	3314      	adds	r3, #20
 800b3e0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b3e2:	627a      	str	r2, [r7, #36]	; 0x24
 800b3e4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3e6:	6a39      	ldr	r1, [r7, #32]
 800b3e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b3ea:	e841 2300 	strex	r3, r2, [r1]
 800b3ee:	61fb      	str	r3, [r7, #28]
   return(result);
 800b3f0:	69fb      	ldr	r3, [r7, #28]
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d1e5      	bne.n	800b3c2 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800b3f6:	2300      	movs	r3, #0
}
 800b3f8:	4618      	mov	r0, r3
 800b3fa:	3760      	adds	r7, #96	; 0x60
 800b3fc:	46bd      	mov	sp, r7
 800b3fe:	bd80      	pop	{r7, pc}
 800b400:	0800b0dd 	.word	0x0800b0dd
 800b404:	0800b209 	.word	0x0800b209
 800b408:	0800b245 	.word	0x0800b245

0800b40c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b40c:	b480      	push	{r7}
 800b40e:	b089      	sub	sp, #36	; 0x24
 800b410:	af00      	add	r7, sp, #0
 800b412:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	330c      	adds	r3, #12
 800b41a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	e853 3f00 	ldrex	r3, [r3]
 800b422:	60bb      	str	r3, [r7, #8]
   return(result);
 800b424:	68bb      	ldr	r3, [r7, #8]
 800b426:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800b42a:	61fb      	str	r3, [r7, #28]
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	330c      	adds	r3, #12
 800b432:	69fa      	ldr	r2, [r7, #28]
 800b434:	61ba      	str	r2, [r7, #24]
 800b436:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b438:	6979      	ldr	r1, [r7, #20]
 800b43a:	69ba      	ldr	r2, [r7, #24]
 800b43c:	e841 2300 	strex	r3, r2, [r1]
 800b440:	613b      	str	r3, [r7, #16]
   return(result);
 800b442:	693b      	ldr	r3, [r7, #16]
 800b444:	2b00      	cmp	r3, #0
 800b446:	d1e5      	bne.n	800b414 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	2220      	movs	r2, #32
 800b44c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 800b450:	bf00      	nop
 800b452:	3724      	adds	r7, #36	; 0x24
 800b454:	46bd      	mov	sp, r7
 800b456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b45a:	4770      	bx	lr

0800b45c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b45c:	b480      	push	{r7}
 800b45e:	b095      	sub	sp, #84	; 0x54
 800b460:	af00      	add	r7, sp, #0
 800b462:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	330c      	adds	r3, #12
 800b46a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b46c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b46e:	e853 3f00 	ldrex	r3, [r3]
 800b472:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b476:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b47a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	330c      	adds	r3, #12
 800b482:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b484:	643a      	str	r2, [r7, #64]	; 0x40
 800b486:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b488:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b48a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b48c:	e841 2300 	strex	r3, r2, [r1]
 800b490:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b492:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b494:	2b00      	cmp	r3, #0
 800b496:	d1e5      	bne.n	800b464 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	3314      	adds	r3, #20
 800b49e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4a0:	6a3b      	ldr	r3, [r7, #32]
 800b4a2:	e853 3f00 	ldrex	r3, [r3]
 800b4a6:	61fb      	str	r3, [r7, #28]
   return(result);
 800b4a8:	69fb      	ldr	r3, [r7, #28]
 800b4aa:	f023 0301 	bic.w	r3, r3, #1
 800b4ae:	64bb      	str	r3, [r7, #72]	; 0x48
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	3314      	adds	r3, #20
 800b4b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b4b8:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b4ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b4be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b4c0:	e841 2300 	strex	r3, r2, [r1]
 800b4c4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b4c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d1e5      	bne.n	800b498 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4d0:	2b01      	cmp	r3, #1
 800b4d2:	d119      	bne.n	800b508 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	330c      	adds	r3, #12
 800b4da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	e853 3f00 	ldrex	r3, [r3]
 800b4e2:	60bb      	str	r3, [r7, #8]
   return(result);
 800b4e4:	68bb      	ldr	r3, [r7, #8]
 800b4e6:	f023 0310 	bic.w	r3, r3, #16
 800b4ea:	647b      	str	r3, [r7, #68]	; 0x44
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	330c      	adds	r3, #12
 800b4f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b4f4:	61ba      	str	r2, [r7, #24]
 800b4f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4f8:	6979      	ldr	r1, [r7, #20]
 800b4fa:	69ba      	ldr	r2, [r7, #24]
 800b4fc:	e841 2300 	strex	r3, r2, [r1]
 800b500:	613b      	str	r3, [r7, #16]
   return(result);
 800b502:	693b      	ldr	r3, [r7, #16]
 800b504:	2b00      	cmp	r3, #0
 800b506:	d1e5      	bne.n	800b4d4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	2220      	movs	r2, #32
 800b50c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	2200      	movs	r2, #0
 800b514:	631a      	str	r2, [r3, #48]	; 0x30
}
 800b516:	bf00      	nop
 800b518:	3754      	adds	r7, #84	; 0x54
 800b51a:	46bd      	mov	sp, r7
 800b51c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b520:	4770      	bx	lr

0800b522 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b522:	b580      	push	{r7, lr}
 800b524:	b084      	sub	sp, #16
 800b526:	af00      	add	r7, sp, #0
 800b528:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b52e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	2200      	movs	r2, #0
 800b534:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	2200      	movs	r2, #0
 800b53a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b53c:	68f8      	ldr	r0, [r7, #12]
 800b53e:	f7ff fdb7 	bl	800b0b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b542:	bf00      	nop
 800b544:	3710      	adds	r7, #16
 800b546:	46bd      	mov	sp, r7
 800b548:	bd80      	pop	{r7, pc}

0800b54a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800b54a:	b480      	push	{r7}
 800b54c:	b085      	sub	sp, #20
 800b54e:	af00      	add	r7, sp, #0
 800b550:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b558:	b2db      	uxtb	r3, r3
 800b55a:	2b21      	cmp	r3, #33	; 0x21
 800b55c:	d13e      	bne.n	800b5dc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	689b      	ldr	r3, [r3, #8]
 800b562:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b566:	d114      	bne.n	800b592 <UART_Transmit_IT+0x48>
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	691b      	ldr	r3, [r3, #16]
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d110      	bne.n	800b592 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	6a1b      	ldr	r3, [r3, #32]
 800b574:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	881b      	ldrh	r3, [r3, #0]
 800b57a:	461a      	mov	r2, r3
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b584:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	6a1b      	ldr	r3, [r3, #32]
 800b58a:	1c9a      	adds	r2, r3, #2
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	621a      	str	r2, [r3, #32]
 800b590:	e008      	b.n	800b5a4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	6a1b      	ldr	r3, [r3, #32]
 800b596:	1c59      	adds	r1, r3, #1
 800b598:	687a      	ldr	r2, [r7, #4]
 800b59a:	6211      	str	r1, [r2, #32]
 800b59c:	781a      	ldrb	r2, [r3, #0]
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b5a8:	b29b      	uxth	r3, r3
 800b5aa:	3b01      	subs	r3, #1
 800b5ac:	b29b      	uxth	r3, r3
 800b5ae:	687a      	ldr	r2, [r7, #4]
 800b5b0:	4619      	mov	r1, r3
 800b5b2:	84d1      	strh	r1, [r2, #38]	; 0x26
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d10f      	bne.n	800b5d8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	68da      	ldr	r2, [r3, #12]
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b5c6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	68da      	ldr	r2, [r3, #12]
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b5d6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800b5d8:	2300      	movs	r3, #0
 800b5da:	e000      	b.n	800b5de <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800b5dc:	2302      	movs	r3, #2
  }
}
 800b5de:	4618      	mov	r0, r3
 800b5e0:	3714      	adds	r7, #20
 800b5e2:	46bd      	mov	sp, r7
 800b5e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e8:	4770      	bx	lr

0800b5ea <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b5ea:	b580      	push	{r7, lr}
 800b5ec:	b082      	sub	sp, #8
 800b5ee:	af00      	add	r7, sp, #0
 800b5f0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	68da      	ldr	r2, [r3, #12]
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b600:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	2220      	movs	r2, #32
 800b606:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b60a:	6878      	ldr	r0, [r7, #4]
 800b60c:	f7ff fd3c 	bl	800b088 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800b610:	2300      	movs	r3, #0
}
 800b612:	4618      	mov	r0, r3
 800b614:	3708      	adds	r7, #8
 800b616:	46bd      	mov	sp, r7
 800b618:	bd80      	pop	{r7, pc}

0800b61a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800b61a:	b580      	push	{r7, lr}
 800b61c:	b08c      	sub	sp, #48	; 0x30
 800b61e:	af00      	add	r7, sp, #0
 800b620:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b628:	b2db      	uxtb	r3, r3
 800b62a:	2b22      	cmp	r3, #34	; 0x22
 800b62c:	f040 80ae 	bne.w	800b78c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	689b      	ldr	r3, [r3, #8]
 800b634:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b638:	d117      	bne.n	800b66a <UART_Receive_IT+0x50>
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	691b      	ldr	r3, [r3, #16]
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d113      	bne.n	800b66a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800b642:	2300      	movs	r3, #0
 800b644:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b64a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	685b      	ldr	r3, [r3, #4]
 800b652:	b29b      	uxth	r3, r3
 800b654:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b658:	b29a      	uxth	r2, r3
 800b65a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b65c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b662:	1c9a      	adds	r2, r3, #2
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	629a      	str	r2, [r3, #40]	; 0x28
 800b668:	e026      	b.n	800b6b8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b66e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800b670:	2300      	movs	r3, #0
 800b672:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	689b      	ldr	r3, [r3, #8]
 800b678:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b67c:	d007      	beq.n	800b68e <UART_Receive_IT+0x74>
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	689b      	ldr	r3, [r3, #8]
 800b682:	2b00      	cmp	r3, #0
 800b684:	d10a      	bne.n	800b69c <UART_Receive_IT+0x82>
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	691b      	ldr	r3, [r3, #16]
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d106      	bne.n	800b69c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	685b      	ldr	r3, [r3, #4]
 800b694:	b2da      	uxtb	r2, r3
 800b696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b698:	701a      	strb	r2, [r3, #0]
 800b69a:	e008      	b.n	800b6ae <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	685b      	ldr	r3, [r3, #4]
 800b6a2:	b2db      	uxtb	r3, r3
 800b6a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b6a8:	b2da      	uxtb	r2, r3
 800b6aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6ac:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6b2:	1c5a      	adds	r2, r3, #1
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b6bc:	b29b      	uxth	r3, r3
 800b6be:	3b01      	subs	r3, #1
 800b6c0:	b29b      	uxth	r3, r3
 800b6c2:	687a      	ldr	r2, [r7, #4]
 800b6c4:	4619      	mov	r1, r3
 800b6c6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d15d      	bne.n	800b788 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	68da      	ldr	r2, [r3, #12]
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	f022 0220 	bic.w	r2, r2, #32
 800b6da:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	68da      	ldr	r2, [r3, #12]
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b6ea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	695a      	ldr	r2, [r3, #20]
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	f022 0201 	bic.w	r2, r2, #1
 800b6fa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	2220      	movs	r2, #32
 800b700:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	2200      	movs	r2, #0
 800b708:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b70e:	2b01      	cmp	r3, #1
 800b710:	d135      	bne.n	800b77e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	2200      	movs	r2, #0
 800b716:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	330c      	adds	r3, #12
 800b71e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b720:	697b      	ldr	r3, [r7, #20]
 800b722:	e853 3f00 	ldrex	r3, [r3]
 800b726:	613b      	str	r3, [r7, #16]
   return(result);
 800b728:	693b      	ldr	r3, [r7, #16]
 800b72a:	f023 0310 	bic.w	r3, r3, #16
 800b72e:	627b      	str	r3, [r7, #36]	; 0x24
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	330c      	adds	r3, #12
 800b736:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b738:	623a      	str	r2, [r7, #32]
 800b73a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b73c:	69f9      	ldr	r1, [r7, #28]
 800b73e:	6a3a      	ldr	r2, [r7, #32]
 800b740:	e841 2300 	strex	r3, r2, [r1]
 800b744:	61bb      	str	r3, [r7, #24]
   return(result);
 800b746:	69bb      	ldr	r3, [r7, #24]
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d1e5      	bne.n	800b718 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	f003 0310 	and.w	r3, r3, #16
 800b756:	2b10      	cmp	r3, #16
 800b758:	d10a      	bne.n	800b770 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b75a:	2300      	movs	r3, #0
 800b75c:	60fb      	str	r3, [r7, #12]
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	60fb      	str	r3, [r7, #12]
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	685b      	ldr	r3, [r3, #4]
 800b76c:	60fb      	str	r3, [r7, #12]
 800b76e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b774:	4619      	mov	r1, r3
 800b776:	6878      	ldr	r0, [r7, #4]
 800b778:	f7ff fca4 	bl	800b0c4 <HAL_UARTEx_RxEventCallback>
 800b77c:	e002      	b.n	800b784 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800b77e:	6878      	ldr	r0, [r7, #4]
 800b780:	f7f7 fbb8 	bl	8002ef4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800b784:	2300      	movs	r3, #0
 800b786:	e002      	b.n	800b78e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800b788:	2300      	movs	r3, #0
 800b78a:	e000      	b.n	800b78e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800b78c:	2302      	movs	r3, #2
  }
}
 800b78e:	4618      	mov	r0, r3
 800b790:	3730      	adds	r7, #48	; 0x30
 800b792:	46bd      	mov	sp, r7
 800b794:	bd80      	pop	{r7, pc}
	...

0800b798 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b798:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b79c:	b0c0      	sub	sp, #256	; 0x100
 800b79e:	af00      	add	r7, sp, #0
 800b7a0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b7a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	691b      	ldr	r3, [r3, #16]
 800b7ac:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800b7b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b7b4:	68d9      	ldr	r1, [r3, #12]
 800b7b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b7ba:	681a      	ldr	r2, [r3, #0]
 800b7bc:	ea40 0301 	orr.w	r3, r0, r1
 800b7c0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b7c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b7c6:	689a      	ldr	r2, [r3, #8]
 800b7c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b7cc:	691b      	ldr	r3, [r3, #16]
 800b7ce:	431a      	orrs	r2, r3
 800b7d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b7d4:	695b      	ldr	r3, [r3, #20]
 800b7d6:	431a      	orrs	r2, r3
 800b7d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b7dc:	69db      	ldr	r3, [r3, #28]
 800b7de:	4313      	orrs	r3, r2
 800b7e0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800b7e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	68db      	ldr	r3, [r3, #12]
 800b7ec:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800b7f0:	f021 010c 	bic.w	r1, r1, #12
 800b7f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b7f8:	681a      	ldr	r2, [r3, #0]
 800b7fa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b7fe:	430b      	orrs	r3, r1
 800b800:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b802:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	695b      	ldr	r3, [r3, #20]
 800b80a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800b80e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b812:	6999      	ldr	r1, [r3, #24]
 800b814:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b818:	681a      	ldr	r2, [r3, #0]
 800b81a:	ea40 0301 	orr.w	r3, r0, r1
 800b81e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b820:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b824:	681a      	ldr	r2, [r3, #0]
 800b826:	4b8f      	ldr	r3, [pc, #572]	; (800ba64 <UART_SetConfig+0x2cc>)
 800b828:	429a      	cmp	r2, r3
 800b82a:	d005      	beq.n	800b838 <UART_SetConfig+0xa0>
 800b82c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b830:	681a      	ldr	r2, [r3, #0]
 800b832:	4b8d      	ldr	r3, [pc, #564]	; (800ba68 <UART_SetConfig+0x2d0>)
 800b834:	429a      	cmp	r2, r3
 800b836:	d104      	bne.n	800b842 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b838:	f7fd fb0e 	bl	8008e58 <HAL_RCC_GetPCLK2Freq>
 800b83c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800b840:	e003      	b.n	800b84a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b842:	f7fd faf5 	bl	8008e30 <HAL_RCC_GetPCLK1Freq>
 800b846:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b84a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b84e:	69db      	ldr	r3, [r3, #28]
 800b850:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b854:	f040 810c 	bne.w	800ba70 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b858:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b85c:	2200      	movs	r2, #0
 800b85e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b862:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800b866:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800b86a:	4622      	mov	r2, r4
 800b86c:	462b      	mov	r3, r5
 800b86e:	1891      	adds	r1, r2, r2
 800b870:	65b9      	str	r1, [r7, #88]	; 0x58
 800b872:	415b      	adcs	r3, r3
 800b874:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b876:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800b87a:	4621      	mov	r1, r4
 800b87c:	eb12 0801 	adds.w	r8, r2, r1
 800b880:	4629      	mov	r1, r5
 800b882:	eb43 0901 	adc.w	r9, r3, r1
 800b886:	f04f 0200 	mov.w	r2, #0
 800b88a:	f04f 0300 	mov.w	r3, #0
 800b88e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b892:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b896:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b89a:	4690      	mov	r8, r2
 800b89c:	4699      	mov	r9, r3
 800b89e:	4623      	mov	r3, r4
 800b8a0:	eb18 0303 	adds.w	r3, r8, r3
 800b8a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b8a8:	462b      	mov	r3, r5
 800b8aa:	eb49 0303 	adc.w	r3, r9, r3
 800b8ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b8b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b8b6:	685b      	ldr	r3, [r3, #4]
 800b8b8:	2200      	movs	r2, #0
 800b8ba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b8be:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800b8c2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800b8c6:	460b      	mov	r3, r1
 800b8c8:	18db      	adds	r3, r3, r3
 800b8ca:	653b      	str	r3, [r7, #80]	; 0x50
 800b8cc:	4613      	mov	r3, r2
 800b8ce:	eb42 0303 	adc.w	r3, r2, r3
 800b8d2:	657b      	str	r3, [r7, #84]	; 0x54
 800b8d4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800b8d8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800b8dc:	f7f5 fa3c 	bl	8000d58 <__aeabi_uldivmod>
 800b8e0:	4602      	mov	r2, r0
 800b8e2:	460b      	mov	r3, r1
 800b8e4:	4b61      	ldr	r3, [pc, #388]	; (800ba6c <UART_SetConfig+0x2d4>)
 800b8e6:	fba3 2302 	umull	r2, r3, r3, r2
 800b8ea:	095b      	lsrs	r3, r3, #5
 800b8ec:	011c      	lsls	r4, r3, #4
 800b8ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b8f2:	2200      	movs	r2, #0
 800b8f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b8f8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800b8fc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800b900:	4642      	mov	r2, r8
 800b902:	464b      	mov	r3, r9
 800b904:	1891      	adds	r1, r2, r2
 800b906:	64b9      	str	r1, [r7, #72]	; 0x48
 800b908:	415b      	adcs	r3, r3
 800b90a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b90c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800b910:	4641      	mov	r1, r8
 800b912:	eb12 0a01 	adds.w	sl, r2, r1
 800b916:	4649      	mov	r1, r9
 800b918:	eb43 0b01 	adc.w	fp, r3, r1
 800b91c:	f04f 0200 	mov.w	r2, #0
 800b920:	f04f 0300 	mov.w	r3, #0
 800b924:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800b928:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800b92c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b930:	4692      	mov	sl, r2
 800b932:	469b      	mov	fp, r3
 800b934:	4643      	mov	r3, r8
 800b936:	eb1a 0303 	adds.w	r3, sl, r3
 800b93a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b93e:	464b      	mov	r3, r9
 800b940:	eb4b 0303 	adc.w	r3, fp, r3
 800b944:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b948:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b94c:	685b      	ldr	r3, [r3, #4]
 800b94e:	2200      	movs	r2, #0
 800b950:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b954:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800b958:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800b95c:	460b      	mov	r3, r1
 800b95e:	18db      	adds	r3, r3, r3
 800b960:	643b      	str	r3, [r7, #64]	; 0x40
 800b962:	4613      	mov	r3, r2
 800b964:	eb42 0303 	adc.w	r3, r2, r3
 800b968:	647b      	str	r3, [r7, #68]	; 0x44
 800b96a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800b96e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800b972:	f7f5 f9f1 	bl	8000d58 <__aeabi_uldivmod>
 800b976:	4602      	mov	r2, r0
 800b978:	460b      	mov	r3, r1
 800b97a:	4611      	mov	r1, r2
 800b97c:	4b3b      	ldr	r3, [pc, #236]	; (800ba6c <UART_SetConfig+0x2d4>)
 800b97e:	fba3 2301 	umull	r2, r3, r3, r1
 800b982:	095b      	lsrs	r3, r3, #5
 800b984:	2264      	movs	r2, #100	; 0x64
 800b986:	fb02 f303 	mul.w	r3, r2, r3
 800b98a:	1acb      	subs	r3, r1, r3
 800b98c:	00db      	lsls	r3, r3, #3
 800b98e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800b992:	4b36      	ldr	r3, [pc, #216]	; (800ba6c <UART_SetConfig+0x2d4>)
 800b994:	fba3 2302 	umull	r2, r3, r3, r2
 800b998:	095b      	lsrs	r3, r3, #5
 800b99a:	005b      	lsls	r3, r3, #1
 800b99c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b9a0:	441c      	add	r4, r3
 800b9a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b9a6:	2200      	movs	r2, #0
 800b9a8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b9ac:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800b9b0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800b9b4:	4642      	mov	r2, r8
 800b9b6:	464b      	mov	r3, r9
 800b9b8:	1891      	adds	r1, r2, r2
 800b9ba:	63b9      	str	r1, [r7, #56]	; 0x38
 800b9bc:	415b      	adcs	r3, r3
 800b9be:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b9c0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800b9c4:	4641      	mov	r1, r8
 800b9c6:	1851      	adds	r1, r2, r1
 800b9c8:	6339      	str	r1, [r7, #48]	; 0x30
 800b9ca:	4649      	mov	r1, r9
 800b9cc:	414b      	adcs	r3, r1
 800b9ce:	637b      	str	r3, [r7, #52]	; 0x34
 800b9d0:	f04f 0200 	mov.w	r2, #0
 800b9d4:	f04f 0300 	mov.w	r3, #0
 800b9d8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800b9dc:	4659      	mov	r1, fp
 800b9de:	00cb      	lsls	r3, r1, #3
 800b9e0:	4651      	mov	r1, sl
 800b9e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b9e6:	4651      	mov	r1, sl
 800b9e8:	00ca      	lsls	r2, r1, #3
 800b9ea:	4610      	mov	r0, r2
 800b9ec:	4619      	mov	r1, r3
 800b9ee:	4603      	mov	r3, r0
 800b9f0:	4642      	mov	r2, r8
 800b9f2:	189b      	adds	r3, r3, r2
 800b9f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b9f8:	464b      	mov	r3, r9
 800b9fa:	460a      	mov	r2, r1
 800b9fc:	eb42 0303 	adc.w	r3, r2, r3
 800ba00:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ba04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ba08:	685b      	ldr	r3, [r3, #4]
 800ba0a:	2200      	movs	r2, #0
 800ba0c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800ba10:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800ba14:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800ba18:	460b      	mov	r3, r1
 800ba1a:	18db      	adds	r3, r3, r3
 800ba1c:	62bb      	str	r3, [r7, #40]	; 0x28
 800ba1e:	4613      	mov	r3, r2
 800ba20:	eb42 0303 	adc.w	r3, r2, r3
 800ba24:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ba26:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800ba2a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800ba2e:	f7f5 f993 	bl	8000d58 <__aeabi_uldivmod>
 800ba32:	4602      	mov	r2, r0
 800ba34:	460b      	mov	r3, r1
 800ba36:	4b0d      	ldr	r3, [pc, #52]	; (800ba6c <UART_SetConfig+0x2d4>)
 800ba38:	fba3 1302 	umull	r1, r3, r3, r2
 800ba3c:	095b      	lsrs	r3, r3, #5
 800ba3e:	2164      	movs	r1, #100	; 0x64
 800ba40:	fb01 f303 	mul.w	r3, r1, r3
 800ba44:	1ad3      	subs	r3, r2, r3
 800ba46:	00db      	lsls	r3, r3, #3
 800ba48:	3332      	adds	r3, #50	; 0x32
 800ba4a:	4a08      	ldr	r2, [pc, #32]	; (800ba6c <UART_SetConfig+0x2d4>)
 800ba4c:	fba2 2303 	umull	r2, r3, r2, r3
 800ba50:	095b      	lsrs	r3, r3, #5
 800ba52:	f003 0207 	and.w	r2, r3, #7
 800ba56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	4422      	add	r2, r4
 800ba5e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800ba60:	e106      	b.n	800bc70 <UART_SetConfig+0x4d8>
 800ba62:	bf00      	nop
 800ba64:	40011000 	.word	0x40011000
 800ba68:	40011400 	.word	0x40011400
 800ba6c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800ba70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ba74:	2200      	movs	r2, #0
 800ba76:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800ba7a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800ba7e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800ba82:	4642      	mov	r2, r8
 800ba84:	464b      	mov	r3, r9
 800ba86:	1891      	adds	r1, r2, r2
 800ba88:	6239      	str	r1, [r7, #32]
 800ba8a:	415b      	adcs	r3, r3
 800ba8c:	627b      	str	r3, [r7, #36]	; 0x24
 800ba8e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800ba92:	4641      	mov	r1, r8
 800ba94:	1854      	adds	r4, r2, r1
 800ba96:	4649      	mov	r1, r9
 800ba98:	eb43 0501 	adc.w	r5, r3, r1
 800ba9c:	f04f 0200 	mov.w	r2, #0
 800baa0:	f04f 0300 	mov.w	r3, #0
 800baa4:	00eb      	lsls	r3, r5, #3
 800baa6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800baaa:	00e2      	lsls	r2, r4, #3
 800baac:	4614      	mov	r4, r2
 800baae:	461d      	mov	r5, r3
 800bab0:	4643      	mov	r3, r8
 800bab2:	18e3      	adds	r3, r4, r3
 800bab4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800bab8:	464b      	mov	r3, r9
 800baba:	eb45 0303 	adc.w	r3, r5, r3
 800babe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800bac2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bac6:	685b      	ldr	r3, [r3, #4]
 800bac8:	2200      	movs	r2, #0
 800baca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800bace:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800bad2:	f04f 0200 	mov.w	r2, #0
 800bad6:	f04f 0300 	mov.w	r3, #0
 800bada:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800bade:	4629      	mov	r1, r5
 800bae0:	008b      	lsls	r3, r1, #2
 800bae2:	4621      	mov	r1, r4
 800bae4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bae8:	4621      	mov	r1, r4
 800baea:	008a      	lsls	r2, r1, #2
 800baec:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800baf0:	f7f5 f932 	bl	8000d58 <__aeabi_uldivmod>
 800baf4:	4602      	mov	r2, r0
 800baf6:	460b      	mov	r3, r1
 800baf8:	4b60      	ldr	r3, [pc, #384]	; (800bc7c <UART_SetConfig+0x4e4>)
 800bafa:	fba3 2302 	umull	r2, r3, r3, r2
 800bafe:	095b      	lsrs	r3, r3, #5
 800bb00:	011c      	lsls	r4, r3, #4
 800bb02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bb06:	2200      	movs	r2, #0
 800bb08:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800bb0c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800bb10:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800bb14:	4642      	mov	r2, r8
 800bb16:	464b      	mov	r3, r9
 800bb18:	1891      	adds	r1, r2, r2
 800bb1a:	61b9      	str	r1, [r7, #24]
 800bb1c:	415b      	adcs	r3, r3
 800bb1e:	61fb      	str	r3, [r7, #28]
 800bb20:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800bb24:	4641      	mov	r1, r8
 800bb26:	1851      	adds	r1, r2, r1
 800bb28:	6139      	str	r1, [r7, #16]
 800bb2a:	4649      	mov	r1, r9
 800bb2c:	414b      	adcs	r3, r1
 800bb2e:	617b      	str	r3, [r7, #20]
 800bb30:	f04f 0200 	mov.w	r2, #0
 800bb34:	f04f 0300 	mov.w	r3, #0
 800bb38:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800bb3c:	4659      	mov	r1, fp
 800bb3e:	00cb      	lsls	r3, r1, #3
 800bb40:	4651      	mov	r1, sl
 800bb42:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800bb46:	4651      	mov	r1, sl
 800bb48:	00ca      	lsls	r2, r1, #3
 800bb4a:	4610      	mov	r0, r2
 800bb4c:	4619      	mov	r1, r3
 800bb4e:	4603      	mov	r3, r0
 800bb50:	4642      	mov	r2, r8
 800bb52:	189b      	adds	r3, r3, r2
 800bb54:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800bb58:	464b      	mov	r3, r9
 800bb5a:	460a      	mov	r2, r1
 800bb5c:	eb42 0303 	adc.w	r3, r2, r3
 800bb60:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800bb64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bb68:	685b      	ldr	r3, [r3, #4]
 800bb6a:	2200      	movs	r2, #0
 800bb6c:	67bb      	str	r3, [r7, #120]	; 0x78
 800bb6e:	67fa      	str	r2, [r7, #124]	; 0x7c
 800bb70:	f04f 0200 	mov.w	r2, #0
 800bb74:	f04f 0300 	mov.w	r3, #0
 800bb78:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800bb7c:	4649      	mov	r1, r9
 800bb7e:	008b      	lsls	r3, r1, #2
 800bb80:	4641      	mov	r1, r8
 800bb82:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bb86:	4641      	mov	r1, r8
 800bb88:	008a      	lsls	r2, r1, #2
 800bb8a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800bb8e:	f7f5 f8e3 	bl	8000d58 <__aeabi_uldivmod>
 800bb92:	4602      	mov	r2, r0
 800bb94:	460b      	mov	r3, r1
 800bb96:	4611      	mov	r1, r2
 800bb98:	4b38      	ldr	r3, [pc, #224]	; (800bc7c <UART_SetConfig+0x4e4>)
 800bb9a:	fba3 2301 	umull	r2, r3, r3, r1
 800bb9e:	095b      	lsrs	r3, r3, #5
 800bba0:	2264      	movs	r2, #100	; 0x64
 800bba2:	fb02 f303 	mul.w	r3, r2, r3
 800bba6:	1acb      	subs	r3, r1, r3
 800bba8:	011b      	lsls	r3, r3, #4
 800bbaa:	3332      	adds	r3, #50	; 0x32
 800bbac:	4a33      	ldr	r2, [pc, #204]	; (800bc7c <UART_SetConfig+0x4e4>)
 800bbae:	fba2 2303 	umull	r2, r3, r2, r3
 800bbb2:	095b      	lsrs	r3, r3, #5
 800bbb4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bbb8:	441c      	add	r4, r3
 800bbba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bbbe:	2200      	movs	r2, #0
 800bbc0:	673b      	str	r3, [r7, #112]	; 0x70
 800bbc2:	677a      	str	r2, [r7, #116]	; 0x74
 800bbc4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800bbc8:	4642      	mov	r2, r8
 800bbca:	464b      	mov	r3, r9
 800bbcc:	1891      	adds	r1, r2, r2
 800bbce:	60b9      	str	r1, [r7, #8]
 800bbd0:	415b      	adcs	r3, r3
 800bbd2:	60fb      	str	r3, [r7, #12]
 800bbd4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800bbd8:	4641      	mov	r1, r8
 800bbda:	1851      	adds	r1, r2, r1
 800bbdc:	6039      	str	r1, [r7, #0]
 800bbde:	4649      	mov	r1, r9
 800bbe0:	414b      	adcs	r3, r1
 800bbe2:	607b      	str	r3, [r7, #4]
 800bbe4:	f04f 0200 	mov.w	r2, #0
 800bbe8:	f04f 0300 	mov.w	r3, #0
 800bbec:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800bbf0:	4659      	mov	r1, fp
 800bbf2:	00cb      	lsls	r3, r1, #3
 800bbf4:	4651      	mov	r1, sl
 800bbf6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800bbfa:	4651      	mov	r1, sl
 800bbfc:	00ca      	lsls	r2, r1, #3
 800bbfe:	4610      	mov	r0, r2
 800bc00:	4619      	mov	r1, r3
 800bc02:	4603      	mov	r3, r0
 800bc04:	4642      	mov	r2, r8
 800bc06:	189b      	adds	r3, r3, r2
 800bc08:	66bb      	str	r3, [r7, #104]	; 0x68
 800bc0a:	464b      	mov	r3, r9
 800bc0c:	460a      	mov	r2, r1
 800bc0e:	eb42 0303 	adc.w	r3, r2, r3
 800bc12:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bc14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bc18:	685b      	ldr	r3, [r3, #4]
 800bc1a:	2200      	movs	r2, #0
 800bc1c:	663b      	str	r3, [r7, #96]	; 0x60
 800bc1e:	667a      	str	r2, [r7, #100]	; 0x64
 800bc20:	f04f 0200 	mov.w	r2, #0
 800bc24:	f04f 0300 	mov.w	r3, #0
 800bc28:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800bc2c:	4649      	mov	r1, r9
 800bc2e:	008b      	lsls	r3, r1, #2
 800bc30:	4641      	mov	r1, r8
 800bc32:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bc36:	4641      	mov	r1, r8
 800bc38:	008a      	lsls	r2, r1, #2
 800bc3a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800bc3e:	f7f5 f88b 	bl	8000d58 <__aeabi_uldivmod>
 800bc42:	4602      	mov	r2, r0
 800bc44:	460b      	mov	r3, r1
 800bc46:	4b0d      	ldr	r3, [pc, #52]	; (800bc7c <UART_SetConfig+0x4e4>)
 800bc48:	fba3 1302 	umull	r1, r3, r3, r2
 800bc4c:	095b      	lsrs	r3, r3, #5
 800bc4e:	2164      	movs	r1, #100	; 0x64
 800bc50:	fb01 f303 	mul.w	r3, r1, r3
 800bc54:	1ad3      	subs	r3, r2, r3
 800bc56:	011b      	lsls	r3, r3, #4
 800bc58:	3332      	adds	r3, #50	; 0x32
 800bc5a:	4a08      	ldr	r2, [pc, #32]	; (800bc7c <UART_SetConfig+0x4e4>)
 800bc5c:	fba2 2303 	umull	r2, r3, r2, r3
 800bc60:	095b      	lsrs	r3, r3, #5
 800bc62:	f003 020f 	and.w	r2, r3, #15
 800bc66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	4422      	add	r2, r4
 800bc6e:	609a      	str	r2, [r3, #8]
}
 800bc70:	bf00      	nop
 800bc72:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800bc76:	46bd      	mov	sp, r7
 800bc78:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bc7c:	51eb851f 	.word	0x51eb851f

0800bc80 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800bc80:	b084      	sub	sp, #16
 800bc82:	b580      	push	{r7, lr}
 800bc84:	b084      	sub	sp, #16
 800bc86:	af00      	add	r7, sp, #0
 800bc88:	6078      	str	r0, [r7, #4]
 800bc8a:	f107 001c 	add.w	r0, r7, #28
 800bc8e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800bc92:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800bc96:	2b01      	cmp	r3, #1
 800bc98:	d123      	bne.n	800bce2 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc9e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	68db      	ldr	r3, [r3, #12]
 800bcaa:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800bcae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bcb2:	687a      	ldr	r2, [r7, #4]
 800bcb4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	68db      	ldr	r3, [r3, #12]
 800bcba:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800bcc2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800bcc6:	2b01      	cmp	r3, #1
 800bcc8:	d105      	bne.n	800bcd6 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	68db      	ldr	r3, [r3, #12]
 800bcce:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800bcd6:	6878      	ldr	r0, [r7, #4]
 800bcd8:	f000 f9dc 	bl	800c094 <USB_CoreReset>
 800bcdc:	4603      	mov	r3, r0
 800bcde:	73fb      	strb	r3, [r7, #15]
 800bce0:	e01b      	b.n	800bd1a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	68db      	ldr	r3, [r3, #12]
 800bce6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800bcee:	6878      	ldr	r0, [r7, #4]
 800bcf0:	f000 f9d0 	bl	800c094 <USB_CoreReset>
 800bcf4:	4603      	mov	r3, r0
 800bcf6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800bcf8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d106      	bne.n	800bd0e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd04:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	639a      	str	r2, [r3, #56]	; 0x38
 800bd0c:	e005      	b.n	800bd1a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd12:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800bd1a:	7fbb      	ldrb	r3, [r7, #30]
 800bd1c:	2b01      	cmp	r3, #1
 800bd1e:	d10b      	bne.n	800bd38 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	689b      	ldr	r3, [r3, #8]
 800bd24:	f043 0206 	orr.w	r2, r3, #6
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	689b      	ldr	r3, [r3, #8]
 800bd30:	f043 0220 	orr.w	r2, r3, #32
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800bd38:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd3a:	4618      	mov	r0, r3
 800bd3c:	3710      	adds	r7, #16
 800bd3e:	46bd      	mov	sp, r7
 800bd40:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bd44:	b004      	add	sp, #16
 800bd46:	4770      	bx	lr

0800bd48 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800bd48:	b480      	push	{r7}
 800bd4a:	b083      	sub	sp, #12
 800bd4c:	af00      	add	r7, sp, #0
 800bd4e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	689b      	ldr	r3, [r3, #8]
 800bd54:	f043 0201 	orr.w	r2, r3, #1
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800bd5c:	2300      	movs	r3, #0
}
 800bd5e:	4618      	mov	r0, r3
 800bd60:	370c      	adds	r7, #12
 800bd62:	46bd      	mov	sp, r7
 800bd64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd68:	4770      	bx	lr

0800bd6a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800bd6a:	b480      	push	{r7}
 800bd6c:	b083      	sub	sp, #12
 800bd6e:	af00      	add	r7, sp, #0
 800bd70:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	689b      	ldr	r3, [r3, #8]
 800bd76:	f023 0201 	bic.w	r2, r3, #1
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800bd7e:	2300      	movs	r3, #0
}
 800bd80:	4618      	mov	r0, r3
 800bd82:	370c      	adds	r7, #12
 800bd84:	46bd      	mov	sp, r7
 800bd86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd8a:	4770      	bx	lr

0800bd8c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800bd8c:	b580      	push	{r7, lr}
 800bd8e:	b084      	sub	sp, #16
 800bd90:	af00      	add	r7, sp, #0
 800bd92:	6078      	str	r0, [r7, #4]
 800bd94:	460b      	mov	r3, r1
 800bd96:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800bd98:	2300      	movs	r3, #0
 800bd9a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	68db      	ldr	r3, [r3, #12]
 800bda0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800bda8:	78fb      	ldrb	r3, [r7, #3]
 800bdaa:	2b01      	cmp	r3, #1
 800bdac:	d115      	bne.n	800bdda <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	68db      	ldr	r3, [r3, #12]
 800bdb2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800bdba:	200a      	movs	r0, #10
 800bdbc:	f7f8 fa6e 	bl	800429c <HAL_Delay>
      ms += 10U;
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	330a      	adds	r3, #10
 800bdc4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800bdc6:	6878      	ldr	r0, [r7, #4]
 800bdc8:	f000 f956 	bl	800c078 <USB_GetMode>
 800bdcc:	4603      	mov	r3, r0
 800bdce:	2b01      	cmp	r3, #1
 800bdd0:	d01e      	beq.n	800be10 <USB_SetCurrentMode+0x84>
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	2bc7      	cmp	r3, #199	; 0xc7
 800bdd6:	d9f0      	bls.n	800bdba <USB_SetCurrentMode+0x2e>
 800bdd8:	e01a      	b.n	800be10 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800bdda:	78fb      	ldrb	r3, [r7, #3]
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d115      	bne.n	800be0c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	68db      	ldr	r3, [r3, #12]
 800bde4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800bdec:	200a      	movs	r0, #10
 800bdee:	f7f8 fa55 	bl	800429c <HAL_Delay>
      ms += 10U;
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	330a      	adds	r3, #10
 800bdf6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800bdf8:	6878      	ldr	r0, [r7, #4]
 800bdfa:	f000 f93d 	bl	800c078 <USB_GetMode>
 800bdfe:	4603      	mov	r3, r0
 800be00:	2b00      	cmp	r3, #0
 800be02:	d005      	beq.n	800be10 <USB_SetCurrentMode+0x84>
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	2bc7      	cmp	r3, #199	; 0xc7
 800be08:	d9f0      	bls.n	800bdec <USB_SetCurrentMode+0x60>
 800be0a:	e001      	b.n	800be10 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800be0c:	2301      	movs	r3, #1
 800be0e:	e005      	b.n	800be1c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	2bc8      	cmp	r3, #200	; 0xc8
 800be14:	d101      	bne.n	800be1a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800be16:	2301      	movs	r3, #1
 800be18:	e000      	b.n	800be1c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800be1a:	2300      	movs	r3, #0
}
 800be1c:	4618      	mov	r0, r3
 800be1e:	3710      	adds	r7, #16
 800be20:	46bd      	mov	sp, r7
 800be22:	bd80      	pop	{r7, pc}

0800be24 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800be24:	b480      	push	{r7}
 800be26:	b085      	sub	sp, #20
 800be28:	af00      	add	r7, sp, #0
 800be2a:	6078      	str	r0, [r7, #4]
 800be2c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800be2e:	2300      	movs	r3, #0
 800be30:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	3301      	adds	r3, #1
 800be36:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800be3e:	d901      	bls.n	800be44 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800be40:	2303      	movs	r3, #3
 800be42:	e01b      	b.n	800be7c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	691b      	ldr	r3, [r3, #16]
 800be48:	2b00      	cmp	r3, #0
 800be4a:	daf2      	bge.n	800be32 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800be4c:	2300      	movs	r3, #0
 800be4e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800be50:	683b      	ldr	r3, [r7, #0]
 800be52:	019b      	lsls	r3, r3, #6
 800be54:	f043 0220 	orr.w	r2, r3, #32
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	3301      	adds	r3, #1
 800be60:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800be68:	d901      	bls.n	800be6e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800be6a:	2303      	movs	r3, #3
 800be6c:	e006      	b.n	800be7c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	691b      	ldr	r3, [r3, #16]
 800be72:	f003 0320 	and.w	r3, r3, #32
 800be76:	2b20      	cmp	r3, #32
 800be78:	d0f0      	beq.n	800be5c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800be7a:	2300      	movs	r3, #0
}
 800be7c:	4618      	mov	r0, r3
 800be7e:	3714      	adds	r7, #20
 800be80:	46bd      	mov	sp, r7
 800be82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be86:	4770      	bx	lr

0800be88 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800be88:	b480      	push	{r7}
 800be8a:	b085      	sub	sp, #20
 800be8c:	af00      	add	r7, sp, #0
 800be8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800be90:	2300      	movs	r3, #0
 800be92:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	3301      	adds	r3, #1
 800be98:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800bea0:	d901      	bls.n	800bea6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800bea2:	2303      	movs	r3, #3
 800bea4:	e018      	b.n	800bed8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	691b      	ldr	r3, [r3, #16]
 800beaa:	2b00      	cmp	r3, #0
 800beac:	daf2      	bge.n	800be94 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800beae:	2300      	movs	r3, #0
 800beb0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	2210      	movs	r2, #16
 800beb6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	3301      	adds	r3, #1
 800bebc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800bec4:	d901      	bls.n	800beca <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800bec6:	2303      	movs	r3, #3
 800bec8:	e006      	b.n	800bed8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	691b      	ldr	r3, [r3, #16]
 800bece:	f003 0310 	and.w	r3, r3, #16
 800bed2:	2b10      	cmp	r3, #16
 800bed4:	d0f0      	beq.n	800beb8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800bed6:	2300      	movs	r3, #0
}
 800bed8:	4618      	mov	r0, r3
 800beda:	3714      	adds	r7, #20
 800bedc:	46bd      	mov	sp, r7
 800bede:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bee2:	4770      	bx	lr

0800bee4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800bee4:	b480      	push	{r7}
 800bee6:	b089      	sub	sp, #36	; 0x24
 800bee8:	af00      	add	r7, sp, #0
 800beea:	60f8      	str	r0, [r7, #12]
 800beec:	60b9      	str	r1, [r7, #8]
 800beee:	4611      	mov	r1, r2
 800bef0:	461a      	mov	r2, r3
 800bef2:	460b      	mov	r3, r1
 800bef4:	71fb      	strb	r3, [r7, #7]
 800bef6:	4613      	mov	r3, r2
 800bef8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800befe:	68bb      	ldr	r3, [r7, #8]
 800bf00:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800bf02:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d123      	bne.n	800bf52 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800bf0a:	88bb      	ldrh	r3, [r7, #4]
 800bf0c:	3303      	adds	r3, #3
 800bf0e:	089b      	lsrs	r3, r3, #2
 800bf10:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800bf12:	2300      	movs	r3, #0
 800bf14:	61bb      	str	r3, [r7, #24]
 800bf16:	e018      	b.n	800bf4a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800bf18:	79fb      	ldrb	r3, [r7, #7]
 800bf1a:	031a      	lsls	r2, r3, #12
 800bf1c:	697b      	ldr	r3, [r7, #20]
 800bf1e:	4413      	add	r3, r2
 800bf20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bf24:	461a      	mov	r2, r3
 800bf26:	69fb      	ldr	r3, [r7, #28]
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800bf2c:	69fb      	ldr	r3, [r7, #28]
 800bf2e:	3301      	adds	r3, #1
 800bf30:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800bf32:	69fb      	ldr	r3, [r7, #28]
 800bf34:	3301      	adds	r3, #1
 800bf36:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800bf38:	69fb      	ldr	r3, [r7, #28]
 800bf3a:	3301      	adds	r3, #1
 800bf3c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800bf3e:	69fb      	ldr	r3, [r7, #28]
 800bf40:	3301      	adds	r3, #1
 800bf42:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800bf44:	69bb      	ldr	r3, [r7, #24]
 800bf46:	3301      	adds	r3, #1
 800bf48:	61bb      	str	r3, [r7, #24]
 800bf4a:	69ba      	ldr	r2, [r7, #24]
 800bf4c:	693b      	ldr	r3, [r7, #16]
 800bf4e:	429a      	cmp	r2, r3
 800bf50:	d3e2      	bcc.n	800bf18 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800bf52:	2300      	movs	r3, #0
}
 800bf54:	4618      	mov	r0, r3
 800bf56:	3724      	adds	r7, #36	; 0x24
 800bf58:	46bd      	mov	sp, r7
 800bf5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf5e:	4770      	bx	lr

0800bf60 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800bf60:	b480      	push	{r7}
 800bf62:	b08b      	sub	sp, #44	; 0x2c
 800bf64:	af00      	add	r7, sp, #0
 800bf66:	60f8      	str	r0, [r7, #12]
 800bf68:	60b9      	str	r1, [r7, #8]
 800bf6a:	4613      	mov	r3, r2
 800bf6c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800bf72:	68bb      	ldr	r3, [r7, #8]
 800bf74:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800bf76:	88fb      	ldrh	r3, [r7, #6]
 800bf78:	089b      	lsrs	r3, r3, #2
 800bf7a:	b29b      	uxth	r3, r3
 800bf7c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800bf7e:	88fb      	ldrh	r3, [r7, #6]
 800bf80:	f003 0303 	and.w	r3, r3, #3
 800bf84:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800bf86:	2300      	movs	r3, #0
 800bf88:	623b      	str	r3, [r7, #32]
 800bf8a:	e014      	b.n	800bfb6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800bf8c:	69bb      	ldr	r3, [r7, #24]
 800bf8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bf92:	681a      	ldr	r2, [r3, #0]
 800bf94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf96:	601a      	str	r2, [r3, #0]
    pDest++;
 800bf98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf9a:	3301      	adds	r3, #1
 800bf9c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800bf9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfa0:	3301      	adds	r3, #1
 800bfa2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800bfa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfa6:	3301      	adds	r3, #1
 800bfa8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800bfaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfac:	3301      	adds	r3, #1
 800bfae:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800bfb0:	6a3b      	ldr	r3, [r7, #32]
 800bfb2:	3301      	adds	r3, #1
 800bfb4:	623b      	str	r3, [r7, #32]
 800bfb6:	6a3a      	ldr	r2, [r7, #32]
 800bfb8:	697b      	ldr	r3, [r7, #20]
 800bfba:	429a      	cmp	r2, r3
 800bfbc:	d3e6      	bcc.n	800bf8c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800bfbe:	8bfb      	ldrh	r3, [r7, #30]
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	d01e      	beq.n	800c002 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800bfc4:	2300      	movs	r3, #0
 800bfc6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800bfc8:	69bb      	ldr	r3, [r7, #24]
 800bfca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bfce:	461a      	mov	r2, r3
 800bfd0:	f107 0310 	add.w	r3, r7, #16
 800bfd4:	6812      	ldr	r2, [r2, #0]
 800bfd6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800bfd8:	693a      	ldr	r2, [r7, #16]
 800bfda:	6a3b      	ldr	r3, [r7, #32]
 800bfdc:	b2db      	uxtb	r3, r3
 800bfde:	00db      	lsls	r3, r3, #3
 800bfe0:	fa22 f303 	lsr.w	r3, r2, r3
 800bfe4:	b2da      	uxtb	r2, r3
 800bfe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfe8:	701a      	strb	r2, [r3, #0]
      i++;
 800bfea:	6a3b      	ldr	r3, [r7, #32]
 800bfec:	3301      	adds	r3, #1
 800bfee:	623b      	str	r3, [r7, #32]
      pDest++;
 800bff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bff2:	3301      	adds	r3, #1
 800bff4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800bff6:	8bfb      	ldrh	r3, [r7, #30]
 800bff8:	3b01      	subs	r3, #1
 800bffa:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800bffc:	8bfb      	ldrh	r3, [r7, #30]
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d1ea      	bne.n	800bfd8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800c002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c004:	4618      	mov	r0, r3
 800c006:	372c      	adds	r7, #44	; 0x2c
 800c008:	46bd      	mov	sp, r7
 800c00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c00e:	4770      	bx	lr

0800c010 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800c010:	b480      	push	{r7}
 800c012:	b085      	sub	sp, #20
 800c014:	af00      	add	r7, sp, #0
 800c016:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	695b      	ldr	r3, [r3, #20]
 800c01c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	699b      	ldr	r3, [r3, #24]
 800c022:	68fa      	ldr	r2, [r7, #12]
 800c024:	4013      	ands	r3, r2
 800c026:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800c028:	68fb      	ldr	r3, [r7, #12]
}
 800c02a:	4618      	mov	r0, r3
 800c02c:	3714      	adds	r7, #20
 800c02e:	46bd      	mov	sp, r7
 800c030:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c034:	4770      	bx	lr

0800c036 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 800c036:	b480      	push	{r7}
 800c038:	b085      	sub	sp, #20
 800c03a:	af00      	add	r7, sp, #0
 800c03c:	6078      	str	r0, [r7, #4]
 800c03e:	460b      	mov	r3, r1
 800c040:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 800c046:	78fb      	ldrb	r3, [r7, #3]
 800c048:	015a      	lsls	r2, r3, #5
 800c04a:	68fb      	ldr	r3, [r7, #12]
 800c04c:	4413      	add	r3, r2
 800c04e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c052:	689b      	ldr	r3, [r3, #8]
 800c054:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 800c056:	78fb      	ldrb	r3, [r7, #3]
 800c058:	015a      	lsls	r2, r3, #5
 800c05a:	68fb      	ldr	r3, [r7, #12]
 800c05c:	4413      	add	r3, r2
 800c05e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c062:	68db      	ldr	r3, [r3, #12]
 800c064:	68ba      	ldr	r2, [r7, #8]
 800c066:	4013      	ands	r3, r2
 800c068:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800c06a:	68bb      	ldr	r3, [r7, #8]
}
 800c06c:	4618      	mov	r0, r3
 800c06e:	3714      	adds	r7, #20
 800c070:	46bd      	mov	sp, r7
 800c072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c076:	4770      	bx	lr

0800c078 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800c078:	b480      	push	{r7}
 800c07a:	b083      	sub	sp, #12
 800c07c:	af00      	add	r7, sp, #0
 800c07e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	695b      	ldr	r3, [r3, #20]
 800c084:	f003 0301 	and.w	r3, r3, #1
}
 800c088:	4618      	mov	r0, r3
 800c08a:	370c      	adds	r7, #12
 800c08c:	46bd      	mov	sp, r7
 800c08e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c092:	4770      	bx	lr

0800c094 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800c094:	b480      	push	{r7}
 800c096:	b085      	sub	sp, #20
 800c098:	af00      	add	r7, sp, #0
 800c09a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c09c:	2300      	movs	r3, #0
 800c09e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	3301      	adds	r3, #1
 800c0a4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800c0ac:	d901      	bls.n	800c0b2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800c0ae:	2303      	movs	r3, #3
 800c0b0:	e01b      	b.n	800c0ea <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	691b      	ldr	r3, [r3, #16]
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	daf2      	bge.n	800c0a0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800c0ba:	2300      	movs	r3, #0
 800c0bc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	691b      	ldr	r3, [r3, #16]
 800c0c2:	f043 0201 	orr.w	r2, r3, #1
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	3301      	adds	r3, #1
 800c0ce:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800c0d6:	d901      	bls.n	800c0dc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800c0d8:	2303      	movs	r3, #3
 800c0da:	e006      	b.n	800c0ea <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	691b      	ldr	r3, [r3, #16]
 800c0e0:	f003 0301 	and.w	r3, r3, #1
 800c0e4:	2b01      	cmp	r3, #1
 800c0e6:	d0f0      	beq.n	800c0ca <USB_CoreReset+0x36>

  return HAL_OK;
 800c0e8:	2300      	movs	r3, #0
}
 800c0ea:	4618      	mov	r0, r3
 800c0ec:	3714      	adds	r7, #20
 800c0ee:	46bd      	mov	sp, r7
 800c0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0f4:	4770      	bx	lr
	...

0800c0f8 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c0f8:	b084      	sub	sp, #16
 800c0fa:	b580      	push	{r7, lr}
 800c0fc:	b086      	sub	sp, #24
 800c0fe:	af00      	add	r7, sp, #0
 800c100:	6078      	str	r0, [r7, #4]
 800c102:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800c106:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800c10a:	2300      	movs	r3, #0
 800c10c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800c112:	68fb      	ldr	r3, [r7, #12]
 800c114:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c118:	461a      	mov	r2, r3
 800c11a:	2300      	movs	r3, #0
 800c11c:	6013      	str	r3, [r2, #0]

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* Disable HW VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c122:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	639a      	str	r2, [r3, #56]	; 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	68db      	ldr	r3, [r3, #12]
 800c12e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c132:	2b00      	cmp	r3, #0
 800c134:	d119      	bne.n	800c16a <USB_HostInit+0x72>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800c136:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c13a:	2b01      	cmp	r3, #1
 800c13c:	d10a      	bne.n	800c154 <USB_HostInit+0x5c>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	68fa      	ldr	r2, [r7, #12]
 800c148:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c14c:	f043 0304 	orr.w	r3, r3, #4
 800c150:	6013      	str	r3, [r2, #0]
 800c152:	e014      	b.n	800c17e <USB_HostInit+0x86>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	68fa      	ldr	r2, [r7, #12]
 800c15e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c162:	f023 0304 	bic.w	r3, r3, #4
 800c166:	6013      	str	r3, [r2, #0]
 800c168:	e009      	b.n	800c17e <USB_HostInit+0x86>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	68fa      	ldr	r2, [r7, #12]
 800c174:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c178:	f023 0304 	bic.w	r3, r3, #4
 800c17c:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800c17e:	2110      	movs	r1, #16
 800c180:	6878      	ldr	r0, [r7, #4]
 800c182:	f7ff fe4f 	bl	800be24 <USB_FlushTxFifo>
 800c186:	4603      	mov	r3, r0
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d001      	beq.n	800c190 <USB_HostInit+0x98>
  {
    ret = HAL_ERROR;
 800c18c:	2301      	movs	r3, #1
 800c18e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800c190:	6878      	ldr	r0, [r7, #4]
 800c192:	f7ff fe79 	bl	800be88 <USB_FlushRxFifo>
 800c196:	4603      	mov	r3, r0
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d001      	beq.n	800c1a0 <USB_HostInit+0xa8>
  {
    ret = HAL_ERROR;
 800c19c:	2301      	movs	r3, #1
 800c19e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800c1a0:	2300      	movs	r3, #0
 800c1a2:	613b      	str	r3, [r7, #16]
 800c1a4:	e015      	b.n	800c1d2 <USB_HostInit+0xda>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 800c1a6:	693b      	ldr	r3, [r7, #16]
 800c1a8:	015a      	lsls	r2, r3, #5
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	4413      	add	r3, r2
 800c1ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c1b2:	461a      	mov	r2, r3
 800c1b4:	f04f 33ff 	mov.w	r3, #4294967295
 800c1b8:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800c1ba:	693b      	ldr	r3, [r7, #16]
 800c1bc:	015a      	lsls	r2, r3, #5
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	4413      	add	r3, r2
 800c1c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c1c6:	461a      	mov	r2, r3
 800c1c8:	2300      	movs	r3, #0
 800c1ca:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800c1cc:	693b      	ldr	r3, [r7, #16]
 800c1ce:	3301      	adds	r3, #1
 800c1d0:	613b      	str	r3, [r7, #16]
 800c1d2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800c1d6:	461a      	mov	r2, r3
 800c1d8:	693b      	ldr	r3, [r7, #16]
 800c1da:	4293      	cmp	r3, r2
 800c1dc:	d3e3      	bcc.n	800c1a6 <USB_HostInit+0xae>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	2200      	movs	r2, #0
 800c1e2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	f04f 32ff 	mov.w	r2, #4294967295
 800c1ea:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	4a18      	ldr	r2, [pc, #96]	; (800c250 <USB_HostInit+0x158>)
 800c1f0:	4293      	cmp	r3, r2
 800c1f2:	d10b      	bne.n	800c20c <USB_HostInit+0x114>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c1fa:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	4a15      	ldr	r2, [pc, #84]	; (800c254 <USB_HostInit+0x15c>)
 800c200:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	4a14      	ldr	r2, [pc, #80]	; (800c258 <USB_HostInit+0x160>)
 800c206:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800c20a:	e009      	b.n	800c220 <USB_HostInit+0x128>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	2280      	movs	r2, #128	; 0x80
 800c210:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	4a11      	ldr	r2, [pc, #68]	; (800c25c <USB_HostInit+0x164>)
 800c216:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	4a11      	ldr	r2, [pc, #68]	; (800c260 <USB_HostInit+0x168>)
 800c21c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800c220:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c224:	2b00      	cmp	r3, #0
 800c226:	d105      	bne.n	800c234 <USB_HostInit+0x13c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	699b      	ldr	r3, [r3, #24]
 800c22c:	f043 0210 	orr.w	r2, r3, #16
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	699a      	ldr	r2, [r3, #24]
 800c238:	4b0a      	ldr	r3, [pc, #40]	; (800c264 <USB_HostInit+0x16c>)
 800c23a:	4313      	orrs	r3, r2
 800c23c:	687a      	ldr	r2, [r7, #4]
 800c23e:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800c240:	7dfb      	ldrb	r3, [r7, #23]
}
 800c242:	4618      	mov	r0, r3
 800c244:	3718      	adds	r7, #24
 800c246:	46bd      	mov	sp, r7
 800c248:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c24c:	b004      	add	sp, #16
 800c24e:	4770      	bx	lr
 800c250:	40040000 	.word	0x40040000
 800c254:	01000200 	.word	0x01000200
 800c258:	00e00300 	.word	0x00e00300
 800c25c:	00600080 	.word	0x00600080
 800c260:	004000e0 	.word	0x004000e0
 800c264:	a3200008 	.word	0xa3200008

0800c268 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800c268:	b480      	push	{r7}
 800c26a:	b085      	sub	sp, #20
 800c26c:	af00      	add	r7, sp, #0
 800c26e:	6078      	str	r0, [r7, #4]
 800c270:	460b      	mov	r3, r1
 800c272:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	68fa      	ldr	r2, [r7, #12]
 800c282:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c286:	f023 0303 	bic.w	r3, r3, #3
 800c28a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c292:	681a      	ldr	r2, [r3, #0]
 800c294:	78fb      	ldrb	r3, [r7, #3]
 800c296:	f003 0303 	and.w	r3, r3, #3
 800c29a:	68f9      	ldr	r1, [r7, #12]
 800c29c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800c2a0:	4313      	orrs	r3, r2
 800c2a2:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800c2a4:	78fb      	ldrb	r3, [r7, #3]
 800c2a6:	2b01      	cmp	r3, #1
 800c2a8:	d107      	bne.n	800c2ba <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 800c2aa:	68fb      	ldr	r3, [r7, #12]
 800c2ac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c2b0:	461a      	mov	r2, r3
 800c2b2:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800c2b6:	6053      	str	r3, [r2, #4]
 800c2b8:	e00c      	b.n	800c2d4 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 800c2ba:	78fb      	ldrb	r3, [r7, #3]
 800c2bc:	2b02      	cmp	r3, #2
 800c2be:	d107      	bne.n	800c2d0 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 800c2c0:	68fb      	ldr	r3, [r7, #12]
 800c2c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c2c6:	461a      	mov	r2, r3
 800c2c8:	f241 7370 	movw	r3, #6000	; 0x1770
 800c2cc:	6053      	str	r3, [r2, #4]
 800c2ce:	e001      	b.n	800c2d4 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 800c2d0:	2301      	movs	r3, #1
 800c2d2:	e000      	b.n	800c2d6 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 800c2d4:	2300      	movs	r3, #0
}
 800c2d6:	4618      	mov	r0, r3
 800c2d8:	3714      	adds	r7, #20
 800c2da:	46bd      	mov	sp, r7
 800c2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2e0:	4770      	bx	lr

0800c2e2 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 800c2e2:	b580      	push	{r7, lr}
 800c2e4:	b084      	sub	sp, #16
 800c2e6:	af00      	add	r7, sp, #0
 800c2e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800c2ee:	2300      	movs	r3, #0
 800c2f0:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800c2fc:	68bb      	ldr	r3, [r7, #8]
 800c2fe:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800c302:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800c304:	68bb      	ldr	r3, [r7, #8]
 800c306:	68fa      	ldr	r2, [r7, #12]
 800c308:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800c30c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c310:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800c312:	2064      	movs	r0, #100	; 0x64
 800c314:	f7f7 ffc2 	bl	800429c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800c318:	68bb      	ldr	r3, [r7, #8]
 800c31a:	68fa      	ldr	r2, [r7, #12]
 800c31c:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800c320:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c324:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800c326:	200a      	movs	r0, #10
 800c328:	f7f7 ffb8 	bl	800429c <HAL_Delay>

  return HAL_OK;
 800c32c:	2300      	movs	r3, #0
}
 800c32e:	4618      	mov	r0, r3
 800c330:	3710      	adds	r7, #16
 800c332:	46bd      	mov	sp, r7
 800c334:	bd80      	pop	{r7, pc}

0800c336 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800c336:	b480      	push	{r7}
 800c338:	b085      	sub	sp, #20
 800c33a:	af00      	add	r7, sp, #0
 800c33c:	6078      	str	r0, [r7, #4]
 800c33e:	460b      	mov	r3, r1
 800c340:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800c346:	2300      	movs	r3, #0
 800c348:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800c354:	68bb      	ldr	r3, [r7, #8]
 800c356:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800c35a:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800c35c:	68bb      	ldr	r3, [r7, #8]
 800c35e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c362:	2b00      	cmp	r3, #0
 800c364:	d109      	bne.n	800c37a <USB_DriveVbus+0x44>
 800c366:	78fb      	ldrb	r3, [r7, #3]
 800c368:	2b01      	cmp	r3, #1
 800c36a:	d106      	bne.n	800c37a <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800c36c:	68bb      	ldr	r3, [r7, #8]
 800c36e:	68fa      	ldr	r2, [r7, #12]
 800c370:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800c374:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800c378:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800c37a:	68bb      	ldr	r3, [r7, #8]
 800c37c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c380:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c384:	d109      	bne.n	800c39a <USB_DriveVbus+0x64>
 800c386:	78fb      	ldrb	r3, [r7, #3]
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d106      	bne.n	800c39a <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800c38c:	68bb      	ldr	r3, [r7, #8]
 800c38e:	68fa      	ldr	r2, [r7, #12]
 800c390:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800c394:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c398:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800c39a:	2300      	movs	r3, #0
}
 800c39c:	4618      	mov	r0, r3
 800c39e:	3714      	adds	r7, #20
 800c3a0:	46bd      	mov	sp, r7
 800c3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3a6:	4770      	bx	lr

0800c3a8 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 800c3a8:	b480      	push	{r7}
 800c3aa:	b085      	sub	sp, #20
 800c3ac:	af00      	add	r7, sp, #0
 800c3ae:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800c3b4:	2300      	movs	r3, #0
 800c3b6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800c3c2:	68bb      	ldr	r3, [r7, #8]
 800c3c4:	0c5b      	lsrs	r3, r3, #17
 800c3c6:	f003 0303 	and.w	r3, r3, #3
}
 800c3ca:	4618      	mov	r0, r3
 800c3cc:	3714      	adds	r7, #20
 800c3ce:	46bd      	mov	sp, r7
 800c3d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3d4:	4770      	bx	lr

0800c3d6 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 800c3d6:	b480      	push	{r7}
 800c3d8:	b085      	sub	sp, #20
 800c3da:	af00      	add	r7, sp, #0
 800c3dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c3e8:	689b      	ldr	r3, [r3, #8]
 800c3ea:	b29b      	uxth	r3, r3
}
 800c3ec:	4618      	mov	r0, r3
 800c3ee:	3714      	adds	r7, #20
 800c3f0:	46bd      	mov	sp, r7
 800c3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3f6:	4770      	bx	lr

0800c3f8 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800c3f8:	b580      	push	{r7, lr}
 800c3fa:	b088      	sub	sp, #32
 800c3fc:	af00      	add	r7, sp, #0
 800c3fe:	6078      	str	r0, [r7, #4]
 800c400:	4608      	mov	r0, r1
 800c402:	4611      	mov	r1, r2
 800c404:	461a      	mov	r2, r3
 800c406:	4603      	mov	r3, r0
 800c408:	70fb      	strb	r3, [r7, #3]
 800c40a:	460b      	mov	r3, r1
 800c40c:	70bb      	strb	r3, [r7, #2]
 800c40e:	4613      	mov	r3, r2
 800c410:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800c412:	2300      	movs	r3, #0
 800c414:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 800c41a:	78fb      	ldrb	r3, [r7, #3]
 800c41c:	015a      	lsls	r2, r3, #5
 800c41e:	693b      	ldr	r3, [r7, #16]
 800c420:	4413      	add	r3, r2
 800c422:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c426:	461a      	mov	r2, r3
 800c428:	f04f 33ff 	mov.w	r3, #4294967295
 800c42c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800c42e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c432:	2b03      	cmp	r3, #3
 800c434:	d87c      	bhi.n	800c530 <USB_HC_Init+0x138>
 800c436:	a201      	add	r2, pc, #4	; (adr r2, 800c43c <USB_HC_Init+0x44>)
 800c438:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c43c:	0800c44d 	.word	0x0800c44d
 800c440:	0800c4f3 	.word	0x0800c4f3
 800c444:	0800c44d 	.word	0x0800c44d
 800c448:	0800c4b5 	.word	0x0800c4b5
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800c44c:	78fb      	ldrb	r3, [r7, #3]
 800c44e:	015a      	lsls	r2, r3, #5
 800c450:	693b      	ldr	r3, [r7, #16]
 800c452:	4413      	add	r3, r2
 800c454:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c458:	461a      	mov	r2, r3
 800c45a:	f240 439d 	movw	r3, #1181	; 0x49d
 800c45e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800c460:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800c464:	2b00      	cmp	r3, #0
 800c466:	da10      	bge.n	800c48a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800c468:	78fb      	ldrb	r3, [r7, #3]
 800c46a:	015a      	lsls	r2, r3, #5
 800c46c:	693b      	ldr	r3, [r7, #16]
 800c46e:	4413      	add	r3, r2
 800c470:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c474:	68db      	ldr	r3, [r3, #12]
 800c476:	78fa      	ldrb	r2, [r7, #3]
 800c478:	0151      	lsls	r1, r2, #5
 800c47a:	693a      	ldr	r2, [r7, #16]
 800c47c:	440a      	add	r2, r1
 800c47e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c482:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c486:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 800c488:	e055      	b.n	800c536 <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	4a6f      	ldr	r2, [pc, #444]	; (800c64c <USB_HC_Init+0x254>)
 800c48e:	4293      	cmp	r3, r2
 800c490:	d151      	bne.n	800c536 <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800c492:	78fb      	ldrb	r3, [r7, #3]
 800c494:	015a      	lsls	r2, r3, #5
 800c496:	693b      	ldr	r3, [r7, #16]
 800c498:	4413      	add	r3, r2
 800c49a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c49e:	68db      	ldr	r3, [r3, #12]
 800c4a0:	78fa      	ldrb	r2, [r7, #3]
 800c4a2:	0151      	lsls	r1, r2, #5
 800c4a4:	693a      	ldr	r2, [r7, #16]
 800c4a6:	440a      	add	r2, r1
 800c4a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c4ac:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800c4b0:	60d3      	str	r3, [r2, #12]
      break;
 800c4b2:	e040      	b.n	800c536 <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800c4b4:	78fb      	ldrb	r3, [r7, #3]
 800c4b6:	015a      	lsls	r2, r3, #5
 800c4b8:	693b      	ldr	r3, [r7, #16]
 800c4ba:	4413      	add	r3, r2
 800c4bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c4c0:	461a      	mov	r2, r3
 800c4c2:	f240 639d 	movw	r3, #1693	; 0x69d
 800c4c6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800c4c8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	da34      	bge.n	800c53a <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800c4d0:	78fb      	ldrb	r3, [r7, #3]
 800c4d2:	015a      	lsls	r2, r3, #5
 800c4d4:	693b      	ldr	r3, [r7, #16]
 800c4d6:	4413      	add	r3, r2
 800c4d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c4dc:	68db      	ldr	r3, [r3, #12]
 800c4de:	78fa      	ldrb	r2, [r7, #3]
 800c4e0:	0151      	lsls	r1, r2, #5
 800c4e2:	693a      	ldr	r2, [r7, #16]
 800c4e4:	440a      	add	r2, r1
 800c4e6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c4ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c4ee:	60d3      	str	r3, [r2, #12]
      }

      break;
 800c4f0:	e023      	b.n	800c53a <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800c4f2:	78fb      	ldrb	r3, [r7, #3]
 800c4f4:	015a      	lsls	r2, r3, #5
 800c4f6:	693b      	ldr	r3, [r7, #16]
 800c4f8:	4413      	add	r3, r2
 800c4fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c4fe:	461a      	mov	r2, r3
 800c500:	f240 2325 	movw	r3, #549	; 0x225
 800c504:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800c506:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	da17      	bge.n	800c53e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800c50e:	78fb      	ldrb	r3, [r7, #3]
 800c510:	015a      	lsls	r2, r3, #5
 800c512:	693b      	ldr	r3, [r7, #16]
 800c514:	4413      	add	r3, r2
 800c516:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c51a:	68db      	ldr	r3, [r3, #12]
 800c51c:	78fa      	ldrb	r2, [r7, #3]
 800c51e:	0151      	lsls	r1, r2, #5
 800c520:	693a      	ldr	r2, [r7, #16]
 800c522:	440a      	add	r2, r1
 800c524:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c528:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800c52c:	60d3      	str	r3, [r2, #12]
      }
      break;
 800c52e:	e006      	b.n	800c53e <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 800c530:	2301      	movs	r3, #1
 800c532:	77fb      	strb	r3, [r7, #31]
      break;
 800c534:	e004      	b.n	800c540 <USB_HC_Init+0x148>
      break;
 800c536:	bf00      	nop
 800c538:	e002      	b.n	800c540 <USB_HC_Init+0x148>
      break;
 800c53a:	bf00      	nop
 800c53c:	e000      	b.n	800c540 <USB_HC_Init+0x148>
      break;
 800c53e:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800c540:	78fb      	ldrb	r3, [r7, #3]
 800c542:	015a      	lsls	r2, r3, #5
 800c544:	693b      	ldr	r3, [r7, #16]
 800c546:	4413      	add	r3, r2
 800c548:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c54c:	461a      	mov	r2, r3
 800c54e:	2300      	movs	r3, #0
 800c550:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800c552:	78fb      	ldrb	r3, [r7, #3]
 800c554:	015a      	lsls	r2, r3, #5
 800c556:	693b      	ldr	r3, [r7, #16]
 800c558:	4413      	add	r3, r2
 800c55a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c55e:	68db      	ldr	r3, [r3, #12]
 800c560:	78fa      	ldrb	r2, [r7, #3]
 800c562:	0151      	lsls	r1, r2, #5
 800c564:	693a      	ldr	r2, [r7, #16]
 800c566:	440a      	add	r2, r1
 800c568:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c56c:	f043 0302 	orr.w	r3, r3, #2
 800c570:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800c572:	693b      	ldr	r3, [r7, #16]
 800c574:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c578:	699a      	ldr	r2, [r3, #24]
 800c57a:	78fb      	ldrb	r3, [r7, #3]
 800c57c:	f003 030f 	and.w	r3, r3, #15
 800c580:	2101      	movs	r1, #1
 800c582:	fa01 f303 	lsl.w	r3, r1, r3
 800c586:	6939      	ldr	r1, [r7, #16]
 800c588:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800c58c:	4313      	orrs	r3, r2
 800c58e:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	699b      	ldr	r3, [r3, #24]
 800c594:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800c59c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	da03      	bge.n	800c5ac <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800c5a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c5a8:	61bb      	str	r3, [r7, #24]
 800c5aa:	e001      	b.n	800c5b0 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 800c5ac:	2300      	movs	r3, #0
 800c5ae:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800c5b0:	6878      	ldr	r0, [r7, #4]
 800c5b2:	f7ff fef9 	bl	800c3a8 <USB_GetHostSpeed>
 800c5b6:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800c5b8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c5bc:	2b02      	cmp	r3, #2
 800c5be:	d106      	bne.n	800c5ce <USB_HC_Init+0x1d6>
 800c5c0:	68fb      	ldr	r3, [r7, #12]
 800c5c2:	2b02      	cmp	r3, #2
 800c5c4:	d003      	beq.n	800c5ce <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800c5c6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800c5ca:	617b      	str	r3, [r7, #20]
 800c5cc:	e001      	b.n	800c5d2 <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800c5ce:	2300      	movs	r3, #0
 800c5d0:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800c5d2:	787b      	ldrb	r3, [r7, #1]
 800c5d4:	059b      	lsls	r3, r3, #22
 800c5d6:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800c5da:	78bb      	ldrb	r3, [r7, #2]
 800c5dc:	02db      	lsls	r3, r3, #11
 800c5de:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800c5e2:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800c5e4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c5e8:	049b      	lsls	r3, r3, #18
 800c5ea:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800c5ee:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 800c5f0:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800c5f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800c5f6:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800c5f8:	69bb      	ldr	r3, [r7, #24]
 800c5fa:	431a      	orrs	r2, r3
 800c5fc:	697b      	ldr	r3, [r7, #20]
 800c5fe:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800c600:	78fa      	ldrb	r2, [r7, #3]
 800c602:	0151      	lsls	r1, r2, #5
 800c604:	693a      	ldr	r2, [r7, #16]
 800c606:	440a      	add	r2, r1
 800c608:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800c60c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800c610:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800c612:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c616:	2b03      	cmp	r3, #3
 800c618:	d003      	beq.n	800c622 <USB_HC_Init+0x22a>
 800c61a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c61e:	2b01      	cmp	r3, #1
 800c620:	d10f      	bne.n	800c642 <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800c622:	78fb      	ldrb	r3, [r7, #3]
 800c624:	015a      	lsls	r2, r3, #5
 800c626:	693b      	ldr	r3, [r7, #16]
 800c628:	4413      	add	r3, r2
 800c62a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	78fa      	ldrb	r2, [r7, #3]
 800c632:	0151      	lsls	r1, r2, #5
 800c634:	693a      	ldr	r2, [r7, #16]
 800c636:	440a      	add	r2, r1
 800c638:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c63c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c640:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800c642:	7ffb      	ldrb	r3, [r7, #31]
}
 800c644:	4618      	mov	r0, r3
 800c646:	3720      	adds	r7, #32
 800c648:	46bd      	mov	sp, r7
 800c64a:	bd80      	pop	{r7, pc}
 800c64c:	40040000 	.word	0x40040000

0800c650 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800c650:	b580      	push	{r7, lr}
 800c652:	b08c      	sub	sp, #48	; 0x30
 800c654:	af02      	add	r7, sp, #8
 800c656:	60f8      	str	r0, [r7, #12]
 800c658:	60b9      	str	r1, [r7, #8]
 800c65a:	4613      	mov	r3, r2
 800c65c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c65e:	68fb      	ldr	r3, [r7, #12]
 800c660:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800c662:	68bb      	ldr	r3, [r7, #8]
 800c664:	785b      	ldrb	r3, [r3, #1]
 800c666:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 800c668:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c66c:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	4a5d      	ldr	r2, [pc, #372]	; (800c7e8 <USB_HC_StartXfer+0x198>)
 800c672:	4293      	cmp	r3, r2
 800c674:	d12f      	bne.n	800c6d6 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 800c676:	79fb      	ldrb	r3, [r7, #7]
 800c678:	2b01      	cmp	r3, #1
 800c67a:	d11c      	bne.n	800c6b6 <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 800c67c:	68bb      	ldr	r3, [r7, #8]
 800c67e:	7c9b      	ldrb	r3, [r3, #18]
 800c680:	2b00      	cmp	r3, #0
 800c682:	d003      	beq.n	800c68c <USB_HC_StartXfer+0x3c>
 800c684:	68bb      	ldr	r3, [r7, #8]
 800c686:	7c9b      	ldrb	r3, [r3, #18]
 800c688:	2b02      	cmp	r3, #2
 800c68a:	d124      	bne.n	800c6d6 <USB_HC_StartXfer+0x86>
 800c68c:	68bb      	ldr	r3, [r7, #8]
 800c68e:	799b      	ldrb	r3, [r3, #6]
 800c690:	2b00      	cmp	r3, #0
 800c692:	d120      	bne.n	800c6d6 <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800c694:	69fb      	ldr	r3, [r7, #28]
 800c696:	015a      	lsls	r2, r3, #5
 800c698:	6a3b      	ldr	r3, [r7, #32]
 800c69a:	4413      	add	r3, r2
 800c69c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c6a0:	68db      	ldr	r3, [r3, #12]
 800c6a2:	69fa      	ldr	r2, [r7, #28]
 800c6a4:	0151      	lsls	r1, r2, #5
 800c6a6:	6a3a      	ldr	r2, [r7, #32]
 800c6a8:	440a      	add	r2, r1
 800c6aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c6ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c6b2:	60d3      	str	r3, [r2, #12]
 800c6b4:	e00f      	b.n	800c6d6 <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 800c6b6:	68bb      	ldr	r3, [r7, #8]
 800c6b8:	791b      	ldrb	r3, [r3, #4]
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d10b      	bne.n	800c6d6 <USB_HC_StartXfer+0x86>
 800c6be:	68bb      	ldr	r3, [r7, #8]
 800c6c0:	795b      	ldrb	r3, [r3, #5]
 800c6c2:	2b01      	cmp	r3, #1
 800c6c4:	d107      	bne.n	800c6d6 <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 800c6c6:	68bb      	ldr	r3, [r7, #8]
 800c6c8:	785b      	ldrb	r3, [r3, #1]
 800c6ca:	4619      	mov	r1, r3
 800c6cc:	68f8      	ldr	r0, [r7, #12]
 800c6ce:	f000 fb6b 	bl	800cda8 <USB_DoPing>
        return HAL_OK;
 800c6d2:	2300      	movs	r3, #0
 800c6d4:	e232      	b.n	800cb3c <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 800c6d6:	68bb      	ldr	r3, [r7, #8]
 800c6d8:	799b      	ldrb	r3, [r3, #6]
 800c6da:	2b01      	cmp	r3, #1
 800c6dc:	d158      	bne.n	800c790 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 800c6de:	2301      	movs	r3, #1
 800c6e0:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (hc->ep_is_in != 0U)
 800c6e2:	68bb      	ldr	r3, [r7, #8]
 800c6e4:	78db      	ldrb	r3, [r3, #3]
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d007      	beq.n	800c6fa <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800c6ea:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c6ec:	68ba      	ldr	r2, [r7, #8]
 800c6ee:	8a92      	ldrh	r2, [r2, #20]
 800c6f0:	fb03 f202 	mul.w	r2, r3, r2
 800c6f4:	68bb      	ldr	r3, [r7, #8]
 800c6f6:	61da      	str	r2, [r3, #28]
 800c6f8:	e07c      	b.n	800c7f4 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 800c6fa:	68bb      	ldr	r3, [r7, #8]
 800c6fc:	7c9b      	ldrb	r3, [r3, #18]
 800c6fe:	2b01      	cmp	r3, #1
 800c700:	d130      	bne.n	800c764 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 800c702:	68bb      	ldr	r3, [r7, #8]
 800c704:	6a1b      	ldr	r3, [r3, #32]
 800c706:	2bbc      	cmp	r3, #188	; 0xbc
 800c708:	d918      	bls.n	800c73c <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 800c70a:	68bb      	ldr	r3, [r7, #8]
 800c70c:	8a9b      	ldrh	r3, [r3, #20]
 800c70e:	461a      	mov	r2, r3
 800c710:	68bb      	ldr	r3, [r7, #8]
 800c712:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 800c714:	68bb      	ldr	r3, [r7, #8]
 800c716:	69da      	ldr	r2, [r3, #28]
 800c718:	68bb      	ldr	r3, [r7, #8]
 800c71a:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 800c71c:	68bb      	ldr	r3, [r7, #8]
 800c71e:	68db      	ldr	r3, [r3, #12]
 800c720:	2b01      	cmp	r3, #1
 800c722:	d003      	beq.n	800c72c <USB_HC_StartXfer+0xdc>
 800c724:	68bb      	ldr	r3, [r7, #8]
 800c726:	68db      	ldr	r3, [r3, #12]
 800c728:	2b02      	cmp	r3, #2
 800c72a:	d103      	bne.n	800c734 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 800c72c:	68bb      	ldr	r3, [r7, #8]
 800c72e:	2202      	movs	r2, #2
 800c730:	60da      	str	r2, [r3, #12]
 800c732:	e05f      	b.n	800c7f4 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 800c734:	68bb      	ldr	r3, [r7, #8]
 800c736:	2201      	movs	r2, #1
 800c738:	60da      	str	r2, [r3, #12]
 800c73a:	e05b      	b.n	800c7f4 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800c73c:	68bb      	ldr	r3, [r7, #8]
 800c73e:	6a1a      	ldr	r2, [r3, #32]
 800c740:	68bb      	ldr	r3, [r7, #8]
 800c742:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 800c744:	68bb      	ldr	r3, [r7, #8]
 800c746:	68db      	ldr	r3, [r3, #12]
 800c748:	2b01      	cmp	r3, #1
 800c74a:	d007      	beq.n	800c75c <USB_HC_StartXfer+0x10c>
 800c74c:	68bb      	ldr	r3, [r7, #8]
 800c74e:	68db      	ldr	r3, [r3, #12]
 800c750:	2b02      	cmp	r3, #2
 800c752:	d003      	beq.n	800c75c <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 800c754:	68bb      	ldr	r3, [r7, #8]
 800c756:	2204      	movs	r2, #4
 800c758:	60da      	str	r2, [r3, #12]
 800c75a:	e04b      	b.n	800c7f4 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 800c75c:	68bb      	ldr	r3, [r7, #8]
 800c75e:	2203      	movs	r2, #3
 800c760:	60da      	str	r2, [r3, #12]
 800c762:	e047      	b.n	800c7f4 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 800c764:	79fb      	ldrb	r3, [r7, #7]
 800c766:	2b01      	cmp	r3, #1
 800c768:	d10d      	bne.n	800c786 <USB_HC_StartXfer+0x136>
 800c76a:	68bb      	ldr	r3, [r7, #8]
 800c76c:	6a1b      	ldr	r3, [r3, #32]
 800c76e:	68ba      	ldr	r2, [r7, #8]
 800c770:	8a92      	ldrh	r2, [r2, #20]
 800c772:	4293      	cmp	r3, r2
 800c774:	d907      	bls.n	800c786 <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800c776:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c778:	68ba      	ldr	r2, [r7, #8]
 800c77a:	8a92      	ldrh	r2, [r2, #20]
 800c77c:	fb03 f202 	mul.w	r2, r3, r2
 800c780:	68bb      	ldr	r3, [r7, #8]
 800c782:	61da      	str	r2, [r3, #28]
 800c784:	e036      	b.n	800c7f4 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800c786:	68bb      	ldr	r3, [r7, #8]
 800c788:	6a1a      	ldr	r2, [r3, #32]
 800c78a:	68bb      	ldr	r3, [r7, #8]
 800c78c:	61da      	str	r2, [r3, #28]
 800c78e:	e031      	b.n	800c7f4 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 800c790:	68bb      	ldr	r3, [r7, #8]
 800c792:	6a1b      	ldr	r3, [r3, #32]
 800c794:	2b00      	cmp	r3, #0
 800c796:	d018      	beq.n	800c7ca <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800c798:	68bb      	ldr	r3, [r7, #8]
 800c79a:	6a1b      	ldr	r3, [r3, #32]
 800c79c:	68ba      	ldr	r2, [r7, #8]
 800c79e:	8a92      	ldrh	r2, [r2, #20]
 800c7a0:	4413      	add	r3, r2
 800c7a2:	3b01      	subs	r3, #1
 800c7a4:	68ba      	ldr	r2, [r7, #8]
 800c7a6:	8a92      	ldrh	r2, [r2, #20]
 800c7a8:	fbb3 f3f2 	udiv	r3, r3, r2
 800c7ac:	84fb      	strh	r3, [r7, #38]	; 0x26

      if (num_packets > max_hc_pkt_count)
 800c7ae:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800c7b0:	8b7b      	ldrh	r3, [r7, #26]
 800c7b2:	429a      	cmp	r2, r3
 800c7b4:	d90b      	bls.n	800c7ce <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 800c7b6:	8b7b      	ldrh	r3, [r7, #26]
 800c7b8:	84fb      	strh	r3, [r7, #38]	; 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800c7ba:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c7bc:	68ba      	ldr	r2, [r7, #8]
 800c7be:	8a92      	ldrh	r2, [r2, #20]
 800c7c0:	fb03 f202 	mul.w	r2, r3, r2
 800c7c4:	68bb      	ldr	r3, [r7, #8]
 800c7c6:	61da      	str	r2, [r3, #28]
 800c7c8:	e001      	b.n	800c7ce <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 800c7ca:	2301      	movs	r3, #1
 800c7cc:	84fb      	strh	r3, [r7, #38]	; 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 800c7ce:	68bb      	ldr	r3, [r7, #8]
 800c7d0:	78db      	ldrb	r3, [r3, #3]
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d00a      	beq.n	800c7ec <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800c7d6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c7d8:	68ba      	ldr	r2, [r7, #8]
 800c7da:	8a92      	ldrh	r2, [r2, #20]
 800c7dc:	fb03 f202 	mul.w	r2, r3, r2
 800c7e0:	68bb      	ldr	r3, [r7, #8]
 800c7e2:	61da      	str	r2, [r3, #28]
 800c7e4:	e006      	b.n	800c7f4 <USB_HC_StartXfer+0x1a4>
 800c7e6:	bf00      	nop
 800c7e8:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 800c7ec:	68bb      	ldr	r3, [r7, #8]
 800c7ee:	6a1a      	ldr	r2, [r3, #32]
 800c7f0:	68bb      	ldr	r3, [r7, #8]
 800c7f2:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800c7f4:	68bb      	ldr	r3, [r7, #8]
 800c7f6:	69db      	ldr	r3, [r3, #28]
 800c7f8:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800c7fc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c7fe:	04d9      	lsls	r1, r3, #19
 800c800:	4ba3      	ldr	r3, [pc, #652]	; (800ca90 <USB_HC_StartXfer+0x440>)
 800c802:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800c804:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800c806:	68bb      	ldr	r3, [r7, #8]
 800c808:	7d9b      	ldrb	r3, [r3, #22]
 800c80a:	075b      	lsls	r3, r3, #29
 800c80c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800c810:	69f9      	ldr	r1, [r7, #28]
 800c812:	0148      	lsls	r0, r1, #5
 800c814:	6a39      	ldr	r1, [r7, #32]
 800c816:	4401      	add	r1, r0
 800c818:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800c81c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800c81e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800c820:	79fb      	ldrb	r3, [r7, #7]
 800c822:	2b00      	cmp	r3, #0
 800c824:	d009      	beq.n	800c83a <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800c826:	68bb      	ldr	r3, [r7, #8]
 800c828:	6999      	ldr	r1, [r3, #24]
 800c82a:	69fb      	ldr	r3, [r7, #28]
 800c82c:	015a      	lsls	r2, r3, #5
 800c82e:	6a3b      	ldr	r3, [r7, #32]
 800c830:	4413      	add	r3, r2
 800c832:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c836:	460a      	mov	r2, r1
 800c838:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800c83a:	6a3b      	ldr	r3, [r7, #32]
 800c83c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c840:	689b      	ldr	r3, [r3, #8]
 800c842:	f003 0301 	and.w	r3, r3, #1
 800c846:	2b00      	cmp	r3, #0
 800c848:	bf0c      	ite	eq
 800c84a:	2301      	moveq	r3, #1
 800c84c:	2300      	movne	r3, #0
 800c84e:	b2db      	uxtb	r3, r3
 800c850:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800c852:	69fb      	ldr	r3, [r7, #28]
 800c854:	015a      	lsls	r2, r3, #5
 800c856:	6a3b      	ldr	r3, [r7, #32]
 800c858:	4413      	add	r3, r2
 800c85a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	69fa      	ldr	r2, [r7, #28]
 800c862:	0151      	lsls	r1, r2, #5
 800c864:	6a3a      	ldr	r2, [r7, #32]
 800c866:	440a      	add	r2, r1
 800c868:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c86c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800c870:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800c872:	69fb      	ldr	r3, [r7, #28]
 800c874:	015a      	lsls	r2, r3, #5
 800c876:	6a3b      	ldr	r3, [r7, #32]
 800c878:	4413      	add	r3, r2
 800c87a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c87e:	681a      	ldr	r2, [r3, #0]
 800c880:	7e7b      	ldrb	r3, [r7, #25]
 800c882:	075b      	lsls	r3, r3, #29
 800c884:	69f9      	ldr	r1, [r7, #28]
 800c886:	0148      	lsls	r0, r1, #5
 800c888:	6a39      	ldr	r1, [r7, #32]
 800c88a:	4401      	add	r1, r0
 800c88c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800c890:	4313      	orrs	r3, r2
 800c892:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 800c894:	68bb      	ldr	r3, [r7, #8]
 800c896:	799b      	ldrb	r3, [r3, #6]
 800c898:	2b01      	cmp	r3, #1
 800c89a:	f040 80c3 	bne.w	800ca24 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800c89e:	68bb      	ldr	r3, [r7, #8]
 800c8a0:	7c5b      	ldrb	r3, [r3, #17]
 800c8a2:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800c8a4:	68ba      	ldr	r2, [r7, #8]
 800c8a6:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800c8a8:	4313      	orrs	r3, r2
 800c8aa:	69fa      	ldr	r2, [r7, #28]
 800c8ac:	0151      	lsls	r1, r2, #5
 800c8ae:	6a3a      	ldr	r2, [r7, #32]
 800c8b0:	440a      	add	r2, r1
 800c8b2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800c8b6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800c8ba:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 800c8bc:	69fb      	ldr	r3, [r7, #28]
 800c8be:	015a      	lsls	r2, r3, #5
 800c8c0:	6a3b      	ldr	r3, [r7, #32]
 800c8c2:	4413      	add	r3, r2
 800c8c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c8c8:	68db      	ldr	r3, [r3, #12]
 800c8ca:	69fa      	ldr	r2, [r7, #28]
 800c8cc:	0151      	lsls	r1, r2, #5
 800c8ce:	6a3a      	ldr	r2, [r7, #32]
 800c8d0:	440a      	add	r2, r1
 800c8d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c8d6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800c8da:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 800c8dc:	68bb      	ldr	r3, [r7, #8]
 800c8de:	79db      	ldrb	r3, [r3, #7]
 800c8e0:	2b01      	cmp	r3, #1
 800c8e2:	d123      	bne.n	800c92c <USB_HC_StartXfer+0x2dc>
 800c8e4:	68bb      	ldr	r3, [r7, #8]
 800c8e6:	78db      	ldrb	r3, [r3, #3]
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d11f      	bne.n	800c92c <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800c8ec:	69fb      	ldr	r3, [r7, #28]
 800c8ee:	015a      	lsls	r2, r3, #5
 800c8f0:	6a3b      	ldr	r3, [r7, #32]
 800c8f2:	4413      	add	r3, r2
 800c8f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c8f8:	685b      	ldr	r3, [r3, #4]
 800c8fa:	69fa      	ldr	r2, [r7, #28]
 800c8fc:	0151      	lsls	r1, r2, #5
 800c8fe:	6a3a      	ldr	r2, [r7, #32]
 800c900:	440a      	add	r2, r1
 800c902:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c906:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c90a:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 800c90c:	69fb      	ldr	r3, [r7, #28]
 800c90e:	015a      	lsls	r2, r3, #5
 800c910:	6a3b      	ldr	r3, [r7, #32]
 800c912:	4413      	add	r3, r2
 800c914:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c918:	68db      	ldr	r3, [r3, #12]
 800c91a:	69fa      	ldr	r2, [r7, #28]
 800c91c:	0151      	lsls	r1, r2, #5
 800c91e:	6a3a      	ldr	r2, [r7, #32]
 800c920:	440a      	add	r2, r1
 800c922:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c926:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c92a:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800c92c:	68bb      	ldr	r3, [r7, #8]
 800c92e:	7c9b      	ldrb	r3, [r3, #18]
 800c930:	2b01      	cmp	r3, #1
 800c932:	d003      	beq.n	800c93c <USB_HC_StartXfer+0x2ec>
 800c934:	68bb      	ldr	r3, [r7, #8]
 800c936:	7c9b      	ldrb	r3, [r3, #18]
 800c938:	2b03      	cmp	r3, #3
 800c93a:	d117      	bne.n	800c96c <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800c93c:	68bb      	ldr	r3, [r7, #8]
 800c93e:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800c940:	2b01      	cmp	r3, #1
 800c942:	d113      	bne.n	800c96c <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800c944:	68bb      	ldr	r3, [r7, #8]
 800c946:	78db      	ldrb	r3, [r3, #3]
 800c948:	2b01      	cmp	r3, #1
 800c94a:	d10f      	bne.n	800c96c <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800c94c:	69fb      	ldr	r3, [r7, #28]
 800c94e:	015a      	lsls	r2, r3, #5
 800c950:	6a3b      	ldr	r3, [r7, #32]
 800c952:	4413      	add	r3, r2
 800c954:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c958:	685b      	ldr	r3, [r3, #4]
 800c95a:	69fa      	ldr	r2, [r7, #28]
 800c95c:	0151      	lsls	r1, r2, #5
 800c95e:	6a3a      	ldr	r2, [r7, #32]
 800c960:	440a      	add	r2, r1
 800c962:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c966:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c96a:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 800c96c:	68bb      	ldr	r3, [r7, #8]
 800c96e:	7c9b      	ldrb	r3, [r3, #18]
 800c970:	2b01      	cmp	r3, #1
 800c972:	d162      	bne.n	800ca3a <USB_HC_StartXfer+0x3ea>
 800c974:	68bb      	ldr	r3, [r7, #8]
 800c976:	78db      	ldrb	r3, [r3, #3]
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d15e      	bne.n	800ca3a <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 800c97c:	68bb      	ldr	r3, [r7, #8]
 800c97e:	68db      	ldr	r3, [r3, #12]
 800c980:	3b01      	subs	r3, #1
 800c982:	2b03      	cmp	r3, #3
 800c984:	d858      	bhi.n	800ca38 <USB_HC_StartXfer+0x3e8>
 800c986:	a201      	add	r2, pc, #4	; (adr r2, 800c98c <USB_HC_StartXfer+0x33c>)
 800c988:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c98c:	0800c99d 	.word	0x0800c99d
 800c990:	0800c9bf 	.word	0x0800c9bf
 800c994:	0800c9e1 	.word	0x0800c9e1
 800c998:	0800ca03 	.word	0x0800ca03
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 800c99c:	69fb      	ldr	r3, [r7, #28]
 800c99e:	015a      	lsls	r2, r3, #5
 800c9a0:	6a3b      	ldr	r3, [r7, #32]
 800c9a2:	4413      	add	r3, r2
 800c9a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c9a8:	685b      	ldr	r3, [r3, #4]
 800c9aa:	69fa      	ldr	r2, [r7, #28]
 800c9ac:	0151      	lsls	r1, r2, #5
 800c9ae:	6a3a      	ldr	r2, [r7, #32]
 800c9b0:	440a      	add	r2, r1
 800c9b2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c9b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c9ba:	6053      	str	r3, [r2, #4]
          break;
 800c9bc:	e03d      	b.n	800ca3a <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 800c9be:	69fb      	ldr	r3, [r7, #28]
 800c9c0:	015a      	lsls	r2, r3, #5
 800c9c2:	6a3b      	ldr	r3, [r7, #32]
 800c9c4:	4413      	add	r3, r2
 800c9c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c9ca:	685b      	ldr	r3, [r3, #4]
 800c9cc:	69fa      	ldr	r2, [r7, #28]
 800c9ce:	0151      	lsls	r1, r2, #5
 800c9d0:	6a3a      	ldr	r2, [r7, #32]
 800c9d2:	440a      	add	r2, r1
 800c9d4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c9d8:	f043 030e 	orr.w	r3, r3, #14
 800c9dc:	6053      	str	r3, [r2, #4]
          break;
 800c9de:	e02c      	b.n	800ca3a <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 800c9e0:	69fb      	ldr	r3, [r7, #28]
 800c9e2:	015a      	lsls	r2, r3, #5
 800c9e4:	6a3b      	ldr	r3, [r7, #32]
 800c9e6:	4413      	add	r3, r2
 800c9e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c9ec:	685b      	ldr	r3, [r3, #4]
 800c9ee:	69fa      	ldr	r2, [r7, #28]
 800c9f0:	0151      	lsls	r1, r2, #5
 800c9f2:	6a3a      	ldr	r2, [r7, #32]
 800c9f4:	440a      	add	r2, r1
 800c9f6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c9fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c9fe:	6053      	str	r3, [r2, #4]
          break;
 800ca00:	e01b      	b.n	800ca3a <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 800ca02:	69fb      	ldr	r3, [r7, #28]
 800ca04:	015a      	lsls	r2, r3, #5
 800ca06:	6a3b      	ldr	r3, [r7, #32]
 800ca08:	4413      	add	r3, r2
 800ca0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ca0e:	685b      	ldr	r3, [r3, #4]
 800ca10:	69fa      	ldr	r2, [r7, #28]
 800ca12:	0151      	lsls	r1, r2, #5
 800ca14:	6a3a      	ldr	r2, [r7, #32]
 800ca16:	440a      	add	r2, r1
 800ca18:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ca1c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ca20:	6053      	str	r3, [r2, #4]
          break;
 800ca22:	e00a      	b.n	800ca3a <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800ca24:	69fb      	ldr	r3, [r7, #28]
 800ca26:	015a      	lsls	r2, r3, #5
 800ca28:	6a3b      	ldr	r3, [r7, #32]
 800ca2a:	4413      	add	r3, r2
 800ca2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ca30:	461a      	mov	r2, r3
 800ca32:	2300      	movs	r3, #0
 800ca34:	6053      	str	r3, [r2, #4]
 800ca36:	e000      	b.n	800ca3a <USB_HC_StartXfer+0x3ea>
          break;
 800ca38:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800ca3a:	69fb      	ldr	r3, [r7, #28]
 800ca3c:	015a      	lsls	r2, r3, #5
 800ca3e:	6a3b      	ldr	r3, [r7, #32]
 800ca40:	4413      	add	r3, r2
 800ca42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800ca4a:	693b      	ldr	r3, [r7, #16]
 800ca4c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800ca50:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800ca52:	68bb      	ldr	r3, [r7, #8]
 800ca54:	78db      	ldrb	r3, [r3, #3]
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d004      	beq.n	800ca64 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800ca5a:	693b      	ldr	r3, [r7, #16]
 800ca5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ca60:	613b      	str	r3, [r7, #16]
 800ca62:	e003      	b.n	800ca6c <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800ca64:	693b      	ldr	r3, [r7, #16]
 800ca66:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800ca6a:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800ca6c:	693b      	ldr	r3, [r7, #16]
 800ca6e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ca72:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800ca74:	69fb      	ldr	r3, [r7, #28]
 800ca76:	015a      	lsls	r2, r3, #5
 800ca78:	6a3b      	ldr	r3, [r7, #32]
 800ca7a:	4413      	add	r3, r2
 800ca7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ca80:	461a      	mov	r2, r3
 800ca82:	693b      	ldr	r3, [r7, #16]
 800ca84:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800ca86:	79fb      	ldrb	r3, [r7, #7]
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	d003      	beq.n	800ca94 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 800ca8c:	2300      	movs	r3, #0
 800ca8e:	e055      	b.n	800cb3c <USB_HC_StartXfer+0x4ec>
 800ca90:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 800ca94:	68bb      	ldr	r3, [r7, #8]
 800ca96:	78db      	ldrb	r3, [r3, #3]
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d14e      	bne.n	800cb3a <USB_HC_StartXfer+0x4ea>
 800ca9c:	68bb      	ldr	r3, [r7, #8]
 800ca9e:	6a1b      	ldr	r3, [r3, #32]
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	d04a      	beq.n	800cb3a <USB_HC_StartXfer+0x4ea>
 800caa4:	68bb      	ldr	r3, [r7, #8]
 800caa6:	79db      	ldrb	r3, [r3, #7]
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d146      	bne.n	800cb3a <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 800caac:	68bb      	ldr	r3, [r7, #8]
 800caae:	7c9b      	ldrb	r3, [r3, #18]
 800cab0:	2b03      	cmp	r3, #3
 800cab2:	d831      	bhi.n	800cb18 <USB_HC_StartXfer+0x4c8>
 800cab4:	a201      	add	r2, pc, #4	; (adr r2, 800cabc <USB_HC_StartXfer+0x46c>)
 800cab6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800caba:	bf00      	nop
 800cabc:	0800cacd 	.word	0x0800cacd
 800cac0:	0800caf1 	.word	0x0800caf1
 800cac4:	0800cacd 	.word	0x0800cacd
 800cac8:	0800caf1 	.word	0x0800caf1
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800cacc:	68bb      	ldr	r3, [r7, #8]
 800cace:	6a1b      	ldr	r3, [r3, #32]
 800cad0:	3303      	adds	r3, #3
 800cad2:	089b      	lsrs	r3, r3, #2
 800cad4:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800cad6:	8afa      	ldrh	r2, [r7, #22]
 800cad8:	68fb      	ldr	r3, [r7, #12]
 800cada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cadc:	b29b      	uxth	r3, r3
 800cade:	429a      	cmp	r2, r3
 800cae0:	d91c      	bls.n	800cb1c <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800cae2:	68fb      	ldr	r3, [r7, #12]
 800cae4:	699b      	ldr	r3, [r3, #24]
 800cae6:	f043 0220 	orr.w	r2, r3, #32
 800caea:	68fb      	ldr	r3, [r7, #12]
 800caec:	619a      	str	r2, [r3, #24]
        }
        break;
 800caee:	e015      	b.n	800cb1c <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800caf0:	68bb      	ldr	r3, [r7, #8]
 800caf2:	6a1b      	ldr	r3, [r3, #32]
 800caf4:	3303      	adds	r3, #3
 800caf6:	089b      	lsrs	r3, r3, #2
 800caf8:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800cafa:	8afa      	ldrh	r2, [r7, #22]
 800cafc:	6a3b      	ldr	r3, [r7, #32]
 800cafe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cb02:	691b      	ldr	r3, [r3, #16]
 800cb04:	b29b      	uxth	r3, r3
 800cb06:	429a      	cmp	r2, r3
 800cb08:	d90a      	bls.n	800cb20 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800cb0a:	68fb      	ldr	r3, [r7, #12]
 800cb0c:	699b      	ldr	r3, [r3, #24]
 800cb0e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800cb12:	68fb      	ldr	r3, [r7, #12]
 800cb14:	619a      	str	r2, [r3, #24]
        }
        break;
 800cb16:	e003      	b.n	800cb20 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 800cb18:	bf00      	nop
 800cb1a:	e002      	b.n	800cb22 <USB_HC_StartXfer+0x4d2>
        break;
 800cb1c:	bf00      	nop
 800cb1e:	e000      	b.n	800cb22 <USB_HC_StartXfer+0x4d2>
        break;
 800cb20:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800cb22:	68bb      	ldr	r3, [r7, #8]
 800cb24:	6999      	ldr	r1, [r3, #24]
 800cb26:	68bb      	ldr	r3, [r7, #8]
 800cb28:	785a      	ldrb	r2, [r3, #1]
 800cb2a:	68bb      	ldr	r3, [r7, #8]
 800cb2c:	6a1b      	ldr	r3, [r3, #32]
 800cb2e:	b29b      	uxth	r3, r3
 800cb30:	2000      	movs	r0, #0
 800cb32:	9000      	str	r0, [sp, #0]
 800cb34:	68f8      	ldr	r0, [r7, #12]
 800cb36:	f7ff f9d5 	bl	800bee4 <USB_WritePacket>
  }

  return HAL_OK;
 800cb3a:	2300      	movs	r3, #0
}
 800cb3c:	4618      	mov	r0, r3
 800cb3e:	3728      	adds	r7, #40	; 0x28
 800cb40:	46bd      	mov	sp, r7
 800cb42:	bd80      	pop	{r7, pc}

0800cb44 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800cb44:	b480      	push	{r7}
 800cb46:	b085      	sub	sp, #20
 800cb48:	af00      	add	r7, sp, #0
 800cb4a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800cb50:	68fb      	ldr	r3, [r7, #12]
 800cb52:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cb56:	695b      	ldr	r3, [r3, #20]
 800cb58:	b29b      	uxth	r3, r3
}
 800cb5a:	4618      	mov	r0, r3
 800cb5c:	3714      	adds	r7, #20
 800cb5e:	46bd      	mov	sp, r7
 800cb60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb64:	4770      	bx	lr

0800cb66 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800cb66:	b480      	push	{r7}
 800cb68:	b089      	sub	sp, #36	; 0x24
 800cb6a:	af00      	add	r7, sp, #0
 800cb6c:	6078      	str	r0, [r7, #4]
 800cb6e:	460b      	mov	r3, r1
 800cb70:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800cb76:	78fb      	ldrb	r3, [r7, #3]
 800cb78:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800cb7a:	2300      	movs	r3, #0
 800cb7c:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800cb7e:	69bb      	ldr	r3, [r7, #24]
 800cb80:	015a      	lsls	r2, r3, #5
 800cb82:	69fb      	ldr	r3, [r7, #28]
 800cb84:	4413      	add	r3, r2
 800cb86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	0c9b      	lsrs	r3, r3, #18
 800cb8e:	f003 0303 	and.w	r3, r3, #3
 800cb92:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800cb94:	69bb      	ldr	r3, [r7, #24]
 800cb96:	015a      	lsls	r2, r3, #5
 800cb98:	69fb      	ldr	r3, [r7, #28]
 800cb9a:	4413      	add	r3, r2
 800cb9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	0fdb      	lsrs	r3, r3, #31
 800cba4:	f003 0301 	and.w	r3, r3, #1
 800cba8:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 800cbaa:	69bb      	ldr	r3, [r7, #24]
 800cbac:	015a      	lsls	r2, r3, #5
 800cbae:	69fb      	ldr	r3, [r7, #28]
 800cbb0:	4413      	add	r3, r2
 800cbb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cbb6:	685b      	ldr	r3, [r3, #4]
 800cbb8:	0fdb      	lsrs	r3, r3, #31
 800cbba:	f003 0301 	and.w	r3, r3, #1
 800cbbe:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	689b      	ldr	r3, [r3, #8]
 800cbc4:	f003 0320 	and.w	r3, r3, #32
 800cbc8:	2b20      	cmp	r3, #32
 800cbca:	d10d      	bne.n	800cbe8 <USB_HC_Halt+0x82>
 800cbcc:	68fb      	ldr	r3, [r7, #12]
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d10a      	bne.n	800cbe8 <USB_HC_Halt+0x82>
 800cbd2:	693b      	ldr	r3, [r7, #16]
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	d005      	beq.n	800cbe4 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 800cbd8:	697b      	ldr	r3, [r7, #20]
 800cbda:	2b01      	cmp	r3, #1
 800cbdc:	d002      	beq.n	800cbe4 <USB_HC_Halt+0x7e>
 800cbde:	697b      	ldr	r3, [r7, #20]
 800cbe0:	2b03      	cmp	r3, #3
 800cbe2:	d101      	bne.n	800cbe8 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 800cbe4:	2300      	movs	r3, #0
 800cbe6:	e0d8      	b.n	800cd9a <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800cbe8:	697b      	ldr	r3, [r7, #20]
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	d002      	beq.n	800cbf4 <USB_HC_Halt+0x8e>
 800cbee:	697b      	ldr	r3, [r7, #20]
 800cbf0:	2b02      	cmp	r3, #2
 800cbf2:	d173      	bne.n	800ccdc <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800cbf4:	69bb      	ldr	r3, [r7, #24]
 800cbf6:	015a      	lsls	r2, r3, #5
 800cbf8:	69fb      	ldr	r3, [r7, #28]
 800cbfa:	4413      	add	r3, r2
 800cbfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	69ba      	ldr	r2, [r7, #24]
 800cc04:	0151      	lsls	r1, r2, #5
 800cc06:	69fa      	ldr	r2, [r7, #28]
 800cc08:	440a      	add	r2, r1
 800cc0a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800cc0e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800cc12:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	689b      	ldr	r3, [r3, #8]
 800cc18:	f003 0320 	and.w	r3, r3, #32
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d14a      	bne.n	800ccb6 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc24:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d133      	bne.n	800cc94 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800cc2c:	69bb      	ldr	r3, [r7, #24]
 800cc2e:	015a      	lsls	r2, r3, #5
 800cc30:	69fb      	ldr	r3, [r7, #28]
 800cc32:	4413      	add	r3, r2
 800cc34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	69ba      	ldr	r2, [r7, #24]
 800cc3c:	0151      	lsls	r1, r2, #5
 800cc3e:	69fa      	ldr	r2, [r7, #28]
 800cc40:	440a      	add	r2, r1
 800cc42:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800cc46:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cc4a:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800cc4c:	69bb      	ldr	r3, [r7, #24]
 800cc4e:	015a      	lsls	r2, r3, #5
 800cc50:	69fb      	ldr	r3, [r7, #28]
 800cc52:	4413      	add	r3, r2
 800cc54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	69ba      	ldr	r2, [r7, #24]
 800cc5c:	0151      	lsls	r1, r2, #5
 800cc5e:	69fa      	ldr	r2, [r7, #28]
 800cc60:	440a      	add	r2, r1
 800cc62:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800cc66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800cc6a:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800cc6c:	68bb      	ldr	r3, [r7, #8]
 800cc6e:	3301      	adds	r3, #1
 800cc70:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 800cc72:	68bb      	ldr	r3, [r7, #8]
 800cc74:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800cc78:	d82e      	bhi.n	800ccd8 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800cc7a:	69bb      	ldr	r3, [r7, #24]
 800cc7c:	015a      	lsls	r2, r3, #5
 800cc7e:	69fb      	ldr	r3, [r7, #28]
 800cc80:	4413      	add	r3, r2
 800cc82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cc8c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cc90:	d0ec      	beq.n	800cc6c <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800cc92:	e081      	b.n	800cd98 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800cc94:	69bb      	ldr	r3, [r7, #24]
 800cc96:	015a      	lsls	r2, r3, #5
 800cc98:	69fb      	ldr	r3, [r7, #28]
 800cc9a:	4413      	add	r3, r2
 800cc9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	69ba      	ldr	r2, [r7, #24]
 800cca4:	0151      	lsls	r1, r2, #5
 800cca6:	69fa      	ldr	r2, [r7, #28]
 800cca8:	440a      	add	r2, r1
 800ccaa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ccae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ccb2:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800ccb4:	e070      	b.n	800cd98 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800ccb6:	69bb      	ldr	r3, [r7, #24]
 800ccb8:	015a      	lsls	r2, r3, #5
 800ccba:	69fb      	ldr	r3, [r7, #28]
 800ccbc:	4413      	add	r3, r2
 800ccbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	69ba      	ldr	r2, [r7, #24]
 800ccc6:	0151      	lsls	r1, r2, #5
 800ccc8:	69fa      	ldr	r2, [r7, #28]
 800ccca:	440a      	add	r2, r1
 800cccc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ccd0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ccd4:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800ccd6:	e05f      	b.n	800cd98 <USB_HC_Halt+0x232>
            break;
 800ccd8:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800ccda:	e05d      	b.n	800cd98 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800ccdc:	69bb      	ldr	r3, [r7, #24]
 800ccde:	015a      	lsls	r2, r3, #5
 800cce0:	69fb      	ldr	r3, [r7, #28]
 800cce2:	4413      	add	r3, r2
 800cce4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	69ba      	ldr	r2, [r7, #24]
 800ccec:	0151      	lsls	r1, r2, #5
 800ccee:	69fa      	ldr	r2, [r7, #28]
 800ccf0:	440a      	add	r2, r1
 800ccf2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ccf6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ccfa:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800ccfc:	69fb      	ldr	r3, [r7, #28]
 800ccfe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cd02:	691b      	ldr	r3, [r3, #16]
 800cd04:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d133      	bne.n	800cd74 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800cd0c:	69bb      	ldr	r3, [r7, #24]
 800cd0e:	015a      	lsls	r2, r3, #5
 800cd10:	69fb      	ldr	r3, [r7, #28]
 800cd12:	4413      	add	r3, r2
 800cd14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	69ba      	ldr	r2, [r7, #24]
 800cd1c:	0151      	lsls	r1, r2, #5
 800cd1e:	69fa      	ldr	r2, [r7, #28]
 800cd20:	440a      	add	r2, r1
 800cd22:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800cd26:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cd2a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800cd2c:	69bb      	ldr	r3, [r7, #24]
 800cd2e:	015a      	lsls	r2, r3, #5
 800cd30:	69fb      	ldr	r3, [r7, #28]
 800cd32:	4413      	add	r3, r2
 800cd34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cd38:	681b      	ldr	r3, [r3, #0]
 800cd3a:	69ba      	ldr	r2, [r7, #24]
 800cd3c:	0151      	lsls	r1, r2, #5
 800cd3e:	69fa      	ldr	r2, [r7, #28]
 800cd40:	440a      	add	r2, r1
 800cd42:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800cd46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800cd4a:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800cd4c:	68bb      	ldr	r3, [r7, #8]
 800cd4e:	3301      	adds	r3, #1
 800cd50:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 800cd52:	68bb      	ldr	r3, [r7, #8]
 800cd54:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800cd58:	d81d      	bhi.n	800cd96 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800cd5a:	69bb      	ldr	r3, [r7, #24]
 800cd5c:	015a      	lsls	r2, r3, #5
 800cd5e:	69fb      	ldr	r3, [r7, #28]
 800cd60:	4413      	add	r3, r2
 800cd62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cd6c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cd70:	d0ec      	beq.n	800cd4c <USB_HC_Halt+0x1e6>
 800cd72:	e011      	b.n	800cd98 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800cd74:	69bb      	ldr	r3, [r7, #24]
 800cd76:	015a      	lsls	r2, r3, #5
 800cd78:	69fb      	ldr	r3, [r7, #28]
 800cd7a:	4413      	add	r3, r2
 800cd7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	69ba      	ldr	r2, [r7, #24]
 800cd84:	0151      	lsls	r1, r2, #5
 800cd86:	69fa      	ldr	r2, [r7, #28]
 800cd88:	440a      	add	r2, r1
 800cd8a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800cd8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800cd92:	6013      	str	r3, [r2, #0]
 800cd94:	e000      	b.n	800cd98 <USB_HC_Halt+0x232>
          break;
 800cd96:	bf00      	nop
    }
  }

  return HAL_OK;
 800cd98:	2300      	movs	r3, #0
}
 800cd9a:	4618      	mov	r0, r3
 800cd9c:	3724      	adds	r7, #36	; 0x24
 800cd9e:	46bd      	mov	sp, r7
 800cda0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cda4:	4770      	bx	lr
	...

0800cda8 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800cda8:	b480      	push	{r7}
 800cdaa:	b087      	sub	sp, #28
 800cdac:	af00      	add	r7, sp, #0
 800cdae:	6078      	str	r0, [r7, #4]
 800cdb0:	460b      	mov	r3, r1
 800cdb2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800cdb8:	78fb      	ldrb	r3, [r7, #3]
 800cdba:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800cdbc:	2301      	movs	r3, #1
 800cdbe:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800cdc0:	68fb      	ldr	r3, [r7, #12]
 800cdc2:	04da      	lsls	r2, r3, #19
 800cdc4:	4b15      	ldr	r3, [pc, #84]	; (800ce1c <USB_DoPing+0x74>)
 800cdc6:	4013      	ands	r3, r2
 800cdc8:	693a      	ldr	r2, [r7, #16]
 800cdca:	0151      	lsls	r1, r2, #5
 800cdcc:	697a      	ldr	r2, [r7, #20]
 800cdce:	440a      	add	r2, r1
 800cdd0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800cdd4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800cdd8:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800cdda:	693b      	ldr	r3, [r7, #16]
 800cddc:	015a      	lsls	r2, r3, #5
 800cdde:	697b      	ldr	r3, [r7, #20]
 800cde0:	4413      	add	r3, r2
 800cde2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cde6:	681b      	ldr	r3, [r3, #0]
 800cde8:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800cdea:	68bb      	ldr	r3, [r7, #8]
 800cdec:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800cdf0:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800cdf2:	68bb      	ldr	r3, [r7, #8]
 800cdf4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800cdf8:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800cdfa:	693b      	ldr	r3, [r7, #16]
 800cdfc:	015a      	lsls	r2, r3, #5
 800cdfe:	697b      	ldr	r3, [r7, #20]
 800ce00:	4413      	add	r3, r2
 800ce02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ce06:	461a      	mov	r2, r3
 800ce08:	68bb      	ldr	r3, [r7, #8]
 800ce0a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800ce0c:	2300      	movs	r3, #0
}
 800ce0e:	4618      	mov	r0, r3
 800ce10:	371c      	adds	r7, #28
 800ce12:	46bd      	mov	sp, r7
 800ce14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce18:	4770      	bx	lr
 800ce1a:	bf00      	nop
 800ce1c:	1ff80000 	.word	0x1ff80000

0800ce20 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800ce20:	b580      	push	{r7, lr}
 800ce22:	b088      	sub	sp, #32
 800ce24:	af00      	add	r7, sp, #0
 800ce26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800ce28:	2300      	movs	r3, #0
 800ce2a:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800ce30:	2300      	movs	r3, #0
 800ce32:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800ce34:	6878      	ldr	r0, [r7, #4]
 800ce36:	f7fe ff98 	bl	800bd6a <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800ce3a:	2110      	movs	r1, #16
 800ce3c:	6878      	ldr	r0, [r7, #4]
 800ce3e:	f7fe fff1 	bl	800be24 <USB_FlushTxFifo>
 800ce42:	4603      	mov	r3, r0
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d001      	beq.n	800ce4c <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800ce48:	2301      	movs	r3, #1
 800ce4a:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800ce4c:	6878      	ldr	r0, [r7, #4]
 800ce4e:	f7ff f81b 	bl	800be88 <USB_FlushRxFifo>
 800ce52:	4603      	mov	r3, r0
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	d001      	beq.n	800ce5c <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800ce58:	2301      	movs	r3, #1
 800ce5a:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800ce5c:	2300      	movs	r3, #0
 800ce5e:	61bb      	str	r3, [r7, #24]
 800ce60:	e01f      	b.n	800cea2 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800ce62:	69bb      	ldr	r3, [r7, #24]
 800ce64:	015a      	lsls	r2, r3, #5
 800ce66:	697b      	ldr	r3, [r7, #20]
 800ce68:	4413      	add	r3, r2
 800ce6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ce6e:	681b      	ldr	r3, [r3, #0]
 800ce70:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800ce72:	693b      	ldr	r3, [r7, #16]
 800ce74:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ce78:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800ce7a:	693b      	ldr	r3, [r7, #16]
 800ce7c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ce80:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800ce82:	693b      	ldr	r3, [r7, #16]
 800ce84:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800ce88:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800ce8a:	69bb      	ldr	r3, [r7, #24]
 800ce8c:	015a      	lsls	r2, r3, #5
 800ce8e:	697b      	ldr	r3, [r7, #20]
 800ce90:	4413      	add	r3, r2
 800ce92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ce96:	461a      	mov	r2, r3
 800ce98:	693b      	ldr	r3, [r7, #16]
 800ce9a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800ce9c:	69bb      	ldr	r3, [r7, #24]
 800ce9e:	3301      	adds	r3, #1
 800cea0:	61bb      	str	r3, [r7, #24]
 800cea2:	69bb      	ldr	r3, [r7, #24]
 800cea4:	2b0f      	cmp	r3, #15
 800cea6:	d9dc      	bls.n	800ce62 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800cea8:	2300      	movs	r3, #0
 800ceaa:	61bb      	str	r3, [r7, #24]
 800ceac:	e034      	b.n	800cf18 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800ceae:	69bb      	ldr	r3, [r7, #24]
 800ceb0:	015a      	lsls	r2, r3, #5
 800ceb2:	697b      	ldr	r3, [r7, #20]
 800ceb4:	4413      	add	r3, r2
 800ceb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800cebe:	693b      	ldr	r3, [r7, #16]
 800cec0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800cec4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800cec6:	693b      	ldr	r3, [r7, #16]
 800cec8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800cecc:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800cece:	693b      	ldr	r3, [r7, #16]
 800ced0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800ced4:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800ced6:	69bb      	ldr	r3, [r7, #24]
 800ced8:	015a      	lsls	r2, r3, #5
 800ceda:	697b      	ldr	r3, [r7, #20]
 800cedc:	4413      	add	r3, r2
 800cede:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cee2:	461a      	mov	r2, r3
 800cee4:	693b      	ldr	r3, [r7, #16]
 800cee6:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800cee8:	68fb      	ldr	r3, [r7, #12]
 800ceea:	3301      	adds	r3, #1
 800ceec:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800ceee:	68fb      	ldr	r3, [r7, #12]
 800cef0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800cef4:	d80c      	bhi.n	800cf10 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800cef6:	69bb      	ldr	r3, [r7, #24]
 800cef8:	015a      	lsls	r2, r3, #5
 800cefa:	697b      	ldr	r3, [r7, #20]
 800cefc:	4413      	add	r3, r2
 800cefe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cf02:	681b      	ldr	r3, [r3, #0]
 800cf04:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cf08:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cf0c:	d0ec      	beq.n	800cee8 <USB_StopHost+0xc8>
 800cf0e:	e000      	b.n	800cf12 <USB_StopHost+0xf2>
        break;
 800cf10:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800cf12:	69bb      	ldr	r3, [r7, #24]
 800cf14:	3301      	adds	r3, #1
 800cf16:	61bb      	str	r3, [r7, #24]
 800cf18:	69bb      	ldr	r3, [r7, #24]
 800cf1a:	2b0f      	cmp	r3, #15
 800cf1c:	d9c7      	bls.n	800ceae <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 800cf1e:	697b      	ldr	r3, [r7, #20]
 800cf20:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cf24:	461a      	mov	r2, r3
 800cf26:	f04f 33ff 	mov.w	r3, #4294967295
 800cf2a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	f04f 32ff 	mov.w	r2, #4294967295
 800cf32:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800cf34:	6878      	ldr	r0, [r7, #4]
 800cf36:	f7fe ff07 	bl	800bd48 <USB_EnableGlobalInt>

  return ret;
 800cf3a:	7ffb      	ldrb	r3, [r7, #31]
}
 800cf3c:	4618      	mov	r0, r3
 800cf3e:	3720      	adds	r7, #32
 800cf40:	46bd      	mov	sp, r7
 800cf42:	bd80      	pop	{r7, pc}

0800cf44 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800cf44:	b590      	push	{r4, r7, lr}
 800cf46:	b089      	sub	sp, #36	; 0x24
 800cf48:	af04      	add	r7, sp, #16
 800cf4a:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800cf4c:	2301      	movs	r3, #1
 800cf4e:	2202      	movs	r2, #2
 800cf50:	2102      	movs	r1, #2
 800cf52:	6878      	ldr	r0, [r7, #4]
 800cf54:	f000 fc7b 	bl	800d84e <USBH_FindInterface>
 800cf58:	4603      	mov	r3, r0
 800cf5a:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800cf5c:	7bfb      	ldrb	r3, [r7, #15]
 800cf5e:	2bff      	cmp	r3, #255	; 0xff
 800cf60:	d002      	beq.n	800cf68 <USBH_CDC_InterfaceInit+0x24>
 800cf62:	7bfb      	ldrb	r3, [r7, #15]
 800cf64:	2b01      	cmp	r3, #1
 800cf66:	d901      	bls.n	800cf6c <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800cf68:	2302      	movs	r3, #2
 800cf6a:	e13d      	b.n	800d1e8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800cf6c:	7bfb      	ldrb	r3, [r7, #15]
 800cf6e:	4619      	mov	r1, r3
 800cf70:	6878      	ldr	r0, [r7, #4]
 800cf72:	f000 fc50 	bl	800d816 <USBH_SelectInterface>
 800cf76:	4603      	mov	r3, r0
 800cf78:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800cf7a:	7bbb      	ldrb	r3, [r7, #14]
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	d001      	beq.n	800cf84 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800cf80:	2302      	movs	r3, #2
 800cf82:	e131      	b.n	800d1e8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800cf8a:	2050      	movs	r0, #80	; 0x50
 800cf8c:	f002 fb4e 	bl	800f62c <malloc>
 800cf90:	4603      	mov	r3, r0
 800cf92:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cf9a:	69db      	ldr	r3, [r3, #28]
 800cf9c:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800cf9e:	68bb      	ldr	r3, [r7, #8]
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d101      	bne.n	800cfa8 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800cfa4:	2302      	movs	r3, #2
 800cfa6:	e11f      	b.n	800d1e8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800cfa8:	2250      	movs	r2, #80	; 0x50
 800cfaa:	2100      	movs	r1, #0
 800cfac:	68b8      	ldr	r0, [r7, #8]
 800cfae:	f003 fc1b 	bl	80107e8 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800cfb2:	7bfb      	ldrb	r3, [r7, #15]
 800cfb4:	687a      	ldr	r2, [r7, #4]
 800cfb6:	211a      	movs	r1, #26
 800cfb8:	fb01 f303 	mul.w	r3, r1, r3
 800cfbc:	4413      	add	r3, r2
 800cfbe:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800cfc2:	781b      	ldrb	r3, [r3, #0]
 800cfc4:	b25b      	sxtb	r3, r3
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	da15      	bge.n	800cff6 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800cfca:	7bfb      	ldrb	r3, [r7, #15]
 800cfcc:	687a      	ldr	r2, [r7, #4]
 800cfce:	211a      	movs	r1, #26
 800cfd0:	fb01 f303 	mul.w	r3, r1, r3
 800cfd4:	4413      	add	r3, r2
 800cfd6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800cfda:	781a      	ldrb	r2, [r3, #0]
 800cfdc:	68bb      	ldr	r3, [r7, #8]
 800cfde:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800cfe0:	7bfb      	ldrb	r3, [r7, #15]
 800cfe2:	687a      	ldr	r2, [r7, #4]
 800cfe4:	211a      	movs	r1, #26
 800cfe6:	fb01 f303 	mul.w	r3, r1, r3
 800cfea:	4413      	add	r3, r2
 800cfec:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800cff0:	881a      	ldrh	r2, [r3, #0]
 800cff2:	68bb      	ldr	r3, [r7, #8]
 800cff4:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800cff6:	68bb      	ldr	r3, [r7, #8]
 800cff8:	785b      	ldrb	r3, [r3, #1]
 800cffa:	4619      	mov	r1, r3
 800cffc:	6878      	ldr	r0, [r7, #4]
 800cffe:	f001 ffc4 	bl	800ef8a <USBH_AllocPipe>
 800d002:	4603      	mov	r3, r0
 800d004:	461a      	mov	r2, r3
 800d006:	68bb      	ldr	r3, [r7, #8]
 800d008:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800d00a:	68bb      	ldr	r3, [r7, #8]
 800d00c:	7819      	ldrb	r1, [r3, #0]
 800d00e:	68bb      	ldr	r3, [r7, #8]
 800d010:	7858      	ldrb	r0, [r3, #1]
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800d01e:	68ba      	ldr	r2, [r7, #8]
 800d020:	8952      	ldrh	r2, [r2, #10]
 800d022:	9202      	str	r2, [sp, #8]
 800d024:	2203      	movs	r2, #3
 800d026:	9201      	str	r2, [sp, #4]
 800d028:	9300      	str	r3, [sp, #0]
 800d02a:	4623      	mov	r3, r4
 800d02c:	4602      	mov	r2, r0
 800d02e:	6878      	ldr	r0, [r7, #4]
 800d030:	f001 ff7c 	bl	800ef2c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800d034:	68bb      	ldr	r3, [r7, #8]
 800d036:	781b      	ldrb	r3, [r3, #0]
 800d038:	2200      	movs	r2, #0
 800d03a:	4619      	mov	r1, r3
 800d03c:	6878      	ldr	r0, [r7, #4]
 800d03e:	f002 fa8a 	bl	800f556 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800d042:	2300      	movs	r3, #0
 800d044:	2200      	movs	r2, #0
 800d046:	210a      	movs	r1, #10
 800d048:	6878      	ldr	r0, [r7, #4]
 800d04a:	f000 fc00 	bl	800d84e <USBH_FindInterface>
 800d04e:	4603      	mov	r3, r0
 800d050:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800d052:	7bfb      	ldrb	r3, [r7, #15]
 800d054:	2bff      	cmp	r3, #255	; 0xff
 800d056:	d002      	beq.n	800d05e <USBH_CDC_InterfaceInit+0x11a>
 800d058:	7bfb      	ldrb	r3, [r7, #15]
 800d05a:	2b01      	cmp	r3, #1
 800d05c:	d901      	bls.n	800d062 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800d05e:	2302      	movs	r3, #2
 800d060:	e0c2      	b.n	800d1e8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800d062:	7bfb      	ldrb	r3, [r7, #15]
 800d064:	687a      	ldr	r2, [r7, #4]
 800d066:	211a      	movs	r1, #26
 800d068:	fb01 f303 	mul.w	r3, r1, r3
 800d06c:	4413      	add	r3, r2
 800d06e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800d072:	781b      	ldrb	r3, [r3, #0]
 800d074:	b25b      	sxtb	r3, r3
 800d076:	2b00      	cmp	r3, #0
 800d078:	da16      	bge.n	800d0a8 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800d07a:	7bfb      	ldrb	r3, [r7, #15]
 800d07c:	687a      	ldr	r2, [r7, #4]
 800d07e:	211a      	movs	r1, #26
 800d080:	fb01 f303 	mul.w	r3, r1, r3
 800d084:	4413      	add	r3, r2
 800d086:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800d08a:	781a      	ldrb	r2, [r3, #0]
 800d08c:	68bb      	ldr	r3, [r7, #8]
 800d08e:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800d090:	7bfb      	ldrb	r3, [r7, #15]
 800d092:	687a      	ldr	r2, [r7, #4]
 800d094:	211a      	movs	r1, #26
 800d096:	fb01 f303 	mul.w	r3, r1, r3
 800d09a:	4413      	add	r3, r2
 800d09c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800d0a0:	881a      	ldrh	r2, [r3, #0]
 800d0a2:	68bb      	ldr	r3, [r7, #8]
 800d0a4:	835a      	strh	r2, [r3, #26]
 800d0a6:	e015      	b.n	800d0d4 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800d0a8:	7bfb      	ldrb	r3, [r7, #15]
 800d0aa:	687a      	ldr	r2, [r7, #4]
 800d0ac:	211a      	movs	r1, #26
 800d0ae:	fb01 f303 	mul.w	r3, r1, r3
 800d0b2:	4413      	add	r3, r2
 800d0b4:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800d0b8:	781a      	ldrb	r2, [r3, #0]
 800d0ba:	68bb      	ldr	r3, [r7, #8]
 800d0bc:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800d0be:	7bfb      	ldrb	r3, [r7, #15]
 800d0c0:	687a      	ldr	r2, [r7, #4]
 800d0c2:	211a      	movs	r1, #26
 800d0c4:	fb01 f303 	mul.w	r3, r1, r3
 800d0c8:	4413      	add	r3, r2
 800d0ca:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800d0ce:	881a      	ldrh	r2, [r3, #0]
 800d0d0:	68bb      	ldr	r3, [r7, #8]
 800d0d2:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800d0d4:	7bfb      	ldrb	r3, [r7, #15]
 800d0d6:	687a      	ldr	r2, [r7, #4]
 800d0d8:	211a      	movs	r1, #26
 800d0da:	fb01 f303 	mul.w	r3, r1, r3
 800d0de:	4413      	add	r3, r2
 800d0e0:	f203 3356 	addw	r3, r3, #854	; 0x356
 800d0e4:	781b      	ldrb	r3, [r3, #0]
 800d0e6:	b25b      	sxtb	r3, r3
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	da16      	bge.n	800d11a <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800d0ec:	7bfb      	ldrb	r3, [r7, #15]
 800d0ee:	687a      	ldr	r2, [r7, #4]
 800d0f0:	211a      	movs	r1, #26
 800d0f2:	fb01 f303 	mul.w	r3, r1, r3
 800d0f6:	4413      	add	r3, r2
 800d0f8:	f203 3356 	addw	r3, r3, #854	; 0x356
 800d0fc:	781a      	ldrb	r2, [r3, #0]
 800d0fe:	68bb      	ldr	r3, [r7, #8]
 800d100:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800d102:	7bfb      	ldrb	r3, [r7, #15]
 800d104:	687a      	ldr	r2, [r7, #4]
 800d106:	211a      	movs	r1, #26
 800d108:	fb01 f303 	mul.w	r3, r1, r3
 800d10c:	4413      	add	r3, r2
 800d10e:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800d112:	881a      	ldrh	r2, [r3, #0]
 800d114:	68bb      	ldr	r3, [r7, #8]
 800d116:	835a      	strh	r2, [r3, #26]
 800d118:	e015      	b.n	800d146 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800d11a:	7bfb      	ldrb	r3, [r7, #15]
 800d11c:	687a      	ldr	r2, [r7, #4]
 800d11e:	211a      	movs	r1, #26
 800d120:	fb01 f303 	mul.w	r3, r1, r3
 800d124:	4413      	add	r3, r2
 800d126:	f203 3356 	addw	r3, r3, #854	; 0x356
 800d12a:	781a      	ldrb	r2, [r3, #0]
 800d12c:	68bb      	ldr	r3, [r7, #8]
 800d12e:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800d130:	7bfb      	ldrb	r3, [r7, #15]
 800d132:	687a      	ldr	r2, [r7, #4]
 800d134:	211a      	movs	r1, #26
 800d136:	fb01 f303 	mul.w	r3, r1, r3
 800d13a:	4413      	add	r3, r2
 800d13c:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800d140:	881a      	ldrh	r2, [r3, #0]
 800d142:	68bb      	ldr	r3, [r7, #8]
 800d144:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800d146:	68bb      	ldr	r3, [r7, #8]
 800d148:	7b9b      	ldrb	r3, [r3, #14]
 800d14a:	4619      	mov	r1, r3
 800d14c:	6878      	ldr	r0, [r7, #4]
 800d14e:	f001 ff1c 	bl	800ef8a <USBH_AllocPipe>
 800d152:	4603      	mov	r3, r0
 800d154:	461a      	mov	r2, r3
 800d156:	68bb      	ldr	r3, [r7, #8]
 800d158:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800d15a:	68bb      	ldr	r3, [r7, #8]
 800d15c:	7bdb      	ldrb	r3, [r3, #15]
 800d15e:	4619      	mov	r1, r3
 800d160:	6878      	ldr	r0, [r7, #4]
 800d162:	f001 ff12 	bl	800ef8a <USBH_AllocPipe>
 800d166:	4603      	mov	r3, r0
 800d168:	461a      	mov	r2, r3
 800d16a:	68bb      	ldr	r3, [r7, #8]
 800d16c:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800d16e:	68bb      	ldr	r3, [r7, #8]
 800d170:	7b59      	ldrb	r1, [r3, #13]
 800d172:	68bb      	ldr	r3, [r7, #8]
 800d174:	7b98      	ldrb	r0, [r3, #14]
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800d182:	68ba      	ldr	r2, [r7, #8]
 800d184:	8b12      	ldrh	r2, [r2, #24]
 800d186:	9202      	str	r2, [sp, #8]
 800d188:	2202      	movs	r2, #2
 800d18a:	9201      	str	r2, [sp, #4]
 800d18c:	9300      	str	r3, [sp, #0]
 800d18e:	4623      	mov	r3, r4
 800d190:	4602      	mov	r2, r0
 800d192:	6878      	ldr	r0, [r7, #4]
 800d194:	f001 feca 	bl	800ef2c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800d198:	68bb      	ldr	r3, [r7, #8]
 800d19a:	7b19      	ldrb	r1, [r3, #12]
 800d19c:	68bb      	ldr	r3, [r7, #8]
 800d19e:	7bd8      	ldrb	r0, [r3, #15]
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800d1ac:	68ba      	ldr	r2, [r7, #8]
 800d1ae:	8b52      	ldrh	r2, [r2, #26]
 800d1b0:	9202      	str	r2, [sp, #8]
 800d1b2:	2202      	movs	r2, #2
 800d1b4:	9201      	str	r2, [sp, #4]
 800d1b6:	9300      	str	r3, [sp, #0]
 800d1b8:	4623      	mov	r3, r4
 800d1ba:	4602      	mov	r2, r0
 800d1bc:	6878      	ldr	r0, [r7, #4]
 800d1be:	f001 feb5 	bl	800ef2c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800d1c2:	68bb      	ldr	r3, [r7, #8]
 800d1c4:	2200      	movs	r2, #0
 800d1c6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800d1ca:	68bb      	ldr	r3, [r7, #8]
 800d1cc:	7b5b      	ldrb	r3, [r3, #13]
 800d1ce:	2200      	movs	r2, #0
 800d1d0:	4619      	mov	r1, r3
 800d1d2:	6878      	ldr	r0, [r7, #4]
 800d1d4:	f002 f9bf 	bl	800f556 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800d1d8:	68bb      	ldr	r3, [r7, #8]
 800d1da:	7b1b      	ldrb	r3, [r3, #12]
 800d1dc:	2200      	movs	r2, #0
 800d1de:	4619      	mov	r1, r3
 800d1e0:	6878      	ldr	r0, [r7, #4]
 800d1e2:	f002 f9b8 	bl	800f556 <USBH_LL_SetToggle>

  return USBH_OK;
 800d1e6:	2300      	movs	r3, #0
}
 800d1e8:	4618      	mov	r0, r3
 800d1ea:	3714      	adds	r7, #20
 800d1ec:	46bd      	mov	sp, r7
 800d1ee:	bd90      	pop	{r4, r7, pc}

0800d1f0 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800d1f0:	b580      	push	{r7, lr}
 800d1f2:	b084      	sub	sp, #16
 800d1f4:	af00      	add	r7, sp, #0
 800d1f6:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d1fe:	69db      	ldr	r3, [r3, #28]
 800d200:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800d202:	68fb      	ldr	r3, [r7, #12]
 800d204:	781b      	ldrb	r3, [r3, #0]
 800d206:	2b00      	cmp	r3, #0
 800d208:	d00e      	beq.n	800d228 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800d20a:	68fb      	ldr	r3, [r7, #12]
 800d20c:	781b      	ldrb	r3, [r3, #0]
 800d20e:	4619      	mov	r1, r3
 800d210:	6878      	ldr	r0, [r7, #4]
 800d212:	f001 feaa 	bl	800ef6a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800d216:	68fb      	ldr	r3, [r7, #12]
 800d218:	781b      	ldrb	r3, [r3, #0]
 800d21a:	4619      	mov	r1, r3
 800d21c:	6878      	ldr	r0, [r7, #4]
 800d21e:	f001 fed5 	bl	800efcc <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800d222:	68fb      	ldr	r3, [r7, #12]
 800d224:	2200      	movs	r2, #0
 800d226:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 800d228:	68fb      	ldr	r3, [r7, #12]
 800d22a:	7b1b      	ldrb	r3, [r3, #12]
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	d00e      	beq.n	800d24e <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800d230:	68fb      	ldr	r3, [r7, #12]
 800d232:	7b1b      	ldrb	r3, [r3, #12]
 800d234:	4619      	mov	r1, r3
 800d236:	6878      	ldr	r0, [r7, #4]
 800d238:	f001 fe97 	bl	800ef6a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800d23c:	68fb      	ldr	r3, [r7, #12]
 800d23e:	7b1b      	ldrb	r3, [r3, #12]
 800d240:	4619      	mov	r1, r3
 800d242:	6878      	ldr	r0, [r7, #4]
 800d244:	f001 fec2 	bl	800efcc <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800d248:	68fb      	ldr	r3, [r7, #12]
 800d24a:	2200      	movs	r2, #0
 800d24c:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800d24e:	68fb      	ldr	r3, [r7, #12]
 800d250:	7b5b      	ldrb	r3, [r3, #13]
 800d252:	2b00      	cmp	r3, #0
 800d254:	d00e      	beq.n	800d274 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800d256:	68fb      	ldr	r3, [r7, #12]
 800d258:	7b5b      	ldrb	r3, [r3, #13]
 800d25a:	4619      	mov	r1, r3
 800d25c:	6878      	ldr	r0, [r7, #4]
 800d25e:	f001 fe84 	bl	800ef6a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800d262:	68fb      	ldr	r3, [r7, #12]
 800d264:	7b5b      	ldrb	r3, [r3, #13]
 800d266:	4619      	mov	r1, r3
 800d268:	6878      	ldr	r0, [r7, #4]
 800d26a:	f001 feaf 	bl	800efcc <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800d26e:	68fb      	ldr	r3, [r7, #12]
 800d270:	2200      	movs	r2, #0
 800d272:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d27a:	69db      	ldr	r3, [r3, #28]
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	d00b      	beq.n	800d298 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d286:	69db      	ldr	r3, [r3, #28]
 800d288:	4618      	mov	r0, r3
 800d28a:	f002 f9d7 	bl	800f63c <free>
    phost->pActiveClass->pData = 0U;
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d294:	2200      	movs	r2, #0
 800d296:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800d298:	2300      	movs	r3, #0
}
 800d29a:	4618      	mov	r0, r3
 800d29c:	3710      	adds	r7, #16
 800d29e:	46bd      	mov	sp, r7
 800d2a0:	bd80      	pop	{r7, pc}

0800d2a2 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800d2a2:	b580      	push	{r7, lr}
 800d2a4:	b084      	sub	sp, #16
 800d2a6:	af00      	add	r7, sp, #0
 800d2a8:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d2b0:	69db      	ldr	r3, [r3, #28]
 800d2b2:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800d2b4:	68fb      	ldr	r3, [r7, #12]
 800d2b6:	3340      	adds	r3, #64	; 0x40
 800d2b8:	4619      	mov	r1, r3
 800d2ba:	6878      	ldr	r0, [r7, #4]
 800d2bc:	f000 f8b1 	bl	800d422 <GetLineCoding>
 800d2c0:	4603      	mov	r3, r0
 800d2c2:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800d2c4:	7afb      	ldrb	r3, [r7, #11]
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	d105      	bne.n	800d2d6 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d2d0:	2102      	movs	r1, #2
 800d2d2:	6878      	ldr	r0, [r7, #4]
 800d2d4:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800d2d6:	7afb      	ldrb	r3, [r7, #11]
}
 800d2d8:	4618      	mov	r0, r3
 800d2da:	3710      	adds	r7, #16
 800d2dc:	46bd      	mov	sp, r7
 800d2de:	bd80      	pop	{r7, pc}

0800d2e0 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800d2e0:	b580      	push	{r7, lr}
 800d2e2:	b084      	sub	sp, #16
 800d2e4:	af00      	add	r7, sp, #0
 800d2e6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800d2e8:	2301      	movs	r3, #1
 800d2ea:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800d2ec:	2300      	movs	r3, #0
 800d2ee:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d2f6:	69db      	ldr	r3, [r3, #28]
 800d2f8:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800d2fa:	68bb      	ldr	r3, [r7, #8]
 800d2fc:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800d300:	2b04      	cmp	r3, #4
 800d302:	d877      	bhi.n	800d3f4 <USBH_CDC_Process+0x114>
 800d304:	a201      	add	r2, pc, #4	; (adr r2, 800d30c <USBH_CDC_Process+0x2c>)
 800d306:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d30a:	bf00      	nop
 800d30c:	0800d321 	.word	0x0800d321
 800d310:	0800d327 	.word	0x0800d327
 800d314:	0800d357 	.word	0x0800d357
 800d318:	0800d3cb 	.word	0x0800d3cb
 800d31c:	0800d3d9 	.word	0x0800d3d9
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800d320:	2300      	movs	r3, #0
 800d322:	73fb      	strb	r3, [r7, #15]
      break;
 800d324:	e06d      	b.n	800d402 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800d326:	68bb      	ldr	r3, [r7, #8]
 800d328:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d32a:	4619      	mov	r1, r3
 800d32c:	6878      	ldr	r0, [r7, #4]
 800d32e:	f000 f897 	bl	800d460 <SetLineCoding>
 800d332:	4603      	mov	r3, r0
 800d334:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800d336:	7bbb      	ldrb	r3, [r7, #14]
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d104      	bne.n	800d346 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800d33c:	68bb      	ldr	r3, [r7, #8]
 800d33e:	2202      	movs	r2, #2
 800d340:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800d344:	e058      	b.n	800d3f8 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800d346:	7bbb      	ldrb	r3, [r7, #14]
 800d348:	2b01      	cmp	r3, #1
 800d34a:	d055      	beq.n	800d3f8 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800d34c:	68bb      	ldr	r3, [r7, #8]
 800d34e:	2204      	movs	r2, #4
 800d350:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800d354:	e050      	b.n	800d3f8 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800d356:	68bb      	ldr	r3, [r7, #8]
 800d358:	3340      	adds	r3, #64	; 0x40
 800d35a:	4619      	mov	r1, r3
 800d35c:	6878      	ldr	r0, [r7, #4]
 800d35e:	f000 f860 	bl	800d422 <GetLineCoding>
 800d362:	4603      	mov	r3, r0
 800d364:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800d366:	7bbb      	ldrb	r3, [r7, #14]
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d126      	bne.n	800d3ba <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800d36c:	68bb      	ldr	r3, [r7, #8]
 800d36e:	2200      	movs	r2, #0
 800d370:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800d374:	68bb      	ldr	r3, [r7, #8]
 800d376:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800d37a:	68bb      	ldr	r3, [r7, #8]
 800d37c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d37e:	791b      	ldrb	r3, [r3, #4]
 800d380:	429a      	cmp	r2, r3
 800d382:	d13b      	bne.n	800d3fc <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800d384:	68bb      	ldr	r3, [r7, #8]
 800d386:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800d38a:	68bb      	ldr	r3, [r7, #8]
 800d38c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d38e:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800d390:	429a      	cmp	r2, r3
 800d392:	d133      	bne.n	800d3fc <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800d394:	68bb      	ldr	r3, [r7, #8]
 800d396:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800d39a:	68bb      	ldr	r3, [r7, #8]
 800d39c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d39e:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800d3a0:	429a      	cmp	r2, r3
 800d3a2:	d12b      	bne.n	800d3fc <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800d3a4:	68bb      	ldr	r3, [r7, #8]
 800d3a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d3a8:	68bb      	ldr	r3, [r7, #8]
 800d3aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d3ac:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800d3ae:	429a      	cmp	r2, r3
 800d3b0:	d124      	bne.n	800d3fc <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800d3b2:	6878      	ldr	r0, [r7, #4]
 800d3b4:	f000 f94e 	bl	800d654 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800d3b8:	e020      	b.n	800d3fc <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800d3ba:	7bbb      	ldrb	r3, [r7, #14]
 800d3bc:	2b01      	cmp	r3, #1
 800d3be:	d01d      	beq.n	800d3fc <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800d3c0:	68bb      	ldr	r3, [r7, #8]
 800d3c2:	2204      	movs	r2, #4
 800d3c4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800d3c8:	e018      	b.n	800d3fc <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800d3ca:	6878      	ldr	r0, [r7, #4]
 800d3cc:	f000 f867 	bl	800d49e <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800d3d0:	6878      	ldr	r0, [r7, #4]
 800d3d2:	f000 f8da 	bl	800d58a <CDC_ProcessReception>
      break;
 800d3d6:	e014      	b.n	800d402 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800d3d8:	2100      	movs	r1, #0
 800d3da:	6878      	ldr	r0, [r7, #4]
 800d3dc:	f001 f818 	bl	800e410 <USBH_ClrFeature>
 800d3e0:	4603      	mov	r3, r0
 800d3e2:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800d3e4:	7bbb      	ldrb	r3, [r7, #14]
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	d10a      	bne.n	800d400 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800d3ea:	68bb      	ldr	r3, [r7, #8]
 800d3ec:	2200      	movs	r2, #0
 800d3ee:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800d3f2:	e005      	b.n	800d400 <USBH_CDC_Process+0x120>

    default:
      break;
 800d3f4:	bf00      	nop
 800d3f6:	e004      	b.n	800d402 <USBH_CDC_Process+0x122>
      break;
 800d3f8:	bf00      	nop
 800d3fa:	e002      	b.n	800d402 <USBH_CDC_Process+0x122>
      break;
 800d3fc:	bf00      	nop
 800d3fe:	e000      	b.n	800d402 <USBH_CDC_Process+0x122>
      break;
 800d400:	bf00      	nop

  }

  return status;
 800d402:	7bfb      	ldrb	r3, [r7, #15]
}
 800d404:	4618      	mov	r0, r3
 800d406:	3710      	adds	r7, #16
 800d408:	46bd      	mov	sp, r7
 800d40a:	bd80      	pop	{r7, pc}

0800d40c <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800d40c:	b480      	push	{r7}
 800d40e:	b083      	sub	sp, #12
 800d410:	af00      	add	r7, sp, #0
 800d412:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800d414:	2300      	movs	r3, #0
}
 800d416:	4618      	mov	r0, r3
 800d418:	370c      	adds	r7, #12
 800d41a:	46bd      	mov	sp, r7
 800d41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d420:	4770      	bx	lr

0800d422 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800d422:	b580      	push	{r7, lr}
 800d424:	b082      	sub	sp, #8
 800d426:	af00      	add	r7, sp, #0
 800d428:	6078      	str	r0, [r7, #4]
 800d42a:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	22a1      	movs	r2, #161	; 0xa1
 800d430:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	2221      	movs	r2, #33	; 0x21
 800d436:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	2200      	movs	r2, #0
 800d43c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	2200      	movs	r2, #0
 800d442:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	2207      	movs	r2, #7
 800d448:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800d44a:	683b      	ldr	r3, [r7, #0]
 800d44c:	2207      	movs	r2, #7
 800d44e:	4619      	mov	r1, r3
 800d450:	6878      	ldr	r0, [r7, #4]
 800d452:	f001 fb19 	bl	800ea88 <USBH_CtlReq>
 800d456:	4603      	mov	r3, r0
}
 800d458:	4618      	mov	r0, r3
 800d45a:	3708      	adds	r7, #8
 800d45c:	46bd      	mov	sp, r7
 800d45e:	bd80      	pop	{r7, pc}

0800d460 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800d460:	b580      	push	{r7, lr}
 800d462:	b082      	sub	sp, #8
 800d464:	af00      	add	r7, sp, #0
 800d466:	6078      	str	r0, [r7, #4]
 800d468:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	2221      	movs	r2, #33	; 0x21
 800d46e:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	2220      	movs	r2, #32
 800d474:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	2200      	movs	r2, #0
 800d47a:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	2200      	movs	r2, #0
 800d480:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	2207      	movs	r2, #7
 800d486:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800d488:	683b      	ldr	r3, [r7, #0]
 800d48a:	2207      	movs	r2, #7
 800d48c:	4619      	mov	r1, r3
 800d48e:	6878      	ldr	r0, [r7, #4]
 800d490:	f001 fafa 	bl	800ea88 <USBH_CtlReq>
 800d494:	4603      	mov	r3, r0
}
 800d496:	4618      	mov	r0, r3
 800d498:	3708      	adds	r7, #8
 800d49a:	46bd      	mov	sp, r7
 800d49c:	bd80      	pop	{r7, pc}

0800d49e <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800d49e:	b580      	push	{r7, lr}
 800d4a0:	b086      	sub	sp, #24
 800d4a2:	af02      	add	r7, sp, #8
 800d4a4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d4ac:	69db      	ldr	r3, [r3, #28]
 800d4ae:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800d4b0:	2300      	movs	r3, #0
 800d4b2:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800d4b4:	68fb      	ldr	r3, [r7, #12]
 800d4b6:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800d4ba:	2b01      	cmp	r3, #1
 800d4bc:	d002      	beq.n	800d4c4 <CDC_ProcessTransmission+0x26>
 800d4be:	2b02      	cmp	r3, #2
 800d4c0:	d023      	beq.n	800d50a <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800d4c2:	e05e      	b.n	800d582 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800d4c4:	68fb      	ldr	r3, [r7, #12]
 800d4c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4c8:	68fa      	ldr	r2, [r7, #12]
 800d4ca:	8b12      	ldrh	r2, [r2, #24]
 800d4cc:	4293      	cmp	r3, r2
 800d4ce:	d90b      	bls.n	800d4e8 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 800d4d0:	68fb      	ldr	r3, [r7, #12]
 800d4d2:	69d9      	ldr	r1, [r3, #28]
 800d4d4:	68fb      	ldr	r3, [r7, #12]
 800d4d6:	8b1a      	ldrh	r2, [r3, #24]
 800d4d8:	68fb      	ldr	r3, [r7, #12]
 800d4da:	7b5b      	ldrb	r3, [r3, #13]
 800d4dc:	2001      	movs	r0, #1
 800d4de:	9000      	str	r0, [sp, #0]
 800d4e0:	6878      	ldr	r0, [r7, #4]
 800d4e2:	f001 fce0 	bl	800eea6 <USBH_BulkSendData>
 800d4e6:	e00b      	b.n	800d500 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 800d4e8:	68fb      	ldr	r3, [r7, #12]
 800d4ea:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 800d4ec:	68fb      	ldr	r3, [r7, #12]
 800d4ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 800d4f0:	b29a      	uxth	r2, r3
 800d4f2:	68fb      	ldr	r3, [r7, #12]
 800d4f4:	7b5b      	ldrb	r3, [r3, #13]
 800d4f6:	2001      	movs	r0, #1
 800d4f8:	9000      	str	r0, [sp, #0]
 800d4fa:	6878      	ldr	r0, [r7, #4]
 800d4fc:	f001 fcd3 	bl	800eea6 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800d500:	68fb      	ldr	r3, [r7, #12]
 800d502:	2202      	movs	r2, #2
 800d504:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800d508:	e03b      	b.n	800d582 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800d50a:	68fb      	ldr	r3, [r7, #12]
 800d50c:	7b5b      	ldrb	r3, [r3, #13]
 800d50e:	4619      	mov	r1, r3
 800d510:	6878      	ldr	r0, [r7, #4]
 800d512:	f001 ffff 	bl	800f514 <USBH_LL_GetURBState>
 800d516:	4603      	mov	r3, r0
 800d518:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800d51a:	7afb      	ldrb	r3, [r7, #11]
 800d51c:	2b01      	cmp	r3, #1
 800d51e:	d128      	bne.n	800d572 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800d520:	68fb      	ldr	r3, [r7, #12]
 800d522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d524:	68fa      	ldr	r2, [r7, #12]
 800d526:	8b12      	ldrh	r2, [r2, #24]
 800d528:	4293      	cmp	r3, r2
 800d52a:	d90e      	bls.n	800d54a <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800d52c:	68fb      	ldr	r3, [r7, #12]
 800d52e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d530:	68fa      	ldr	r2, [r7, #12]
 800d532:	8b12      	ldrh	r2, [r2, #24]
 800d534:	1a9a      	subs	r2, r3, r2
 800d536:	68fb      	ldr	r3, [r7, #12]
 800d538:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800d53a:	68fb      	ldr	r3, [r7, #12]
 800d53c:	69db      	ldr	r3, [r3, #28]
 800d53e:	68fa      	ldr	r2, [r7, #12]
 800d540:	8b12      	ldrh	r2, [r2, #24]
 800d542:	441a      	add	r2, r3
 800d544:	68fb      	ldr	r3, [r7, #12]
 800d546:	61da      	str	r2, [r3, #28]
 800d548:	e002      	b.n	800d550 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800d54a:	68fb      	ldr	r3, [r7, #12]
 800d54c:	2200      	movs	r2, #0
 800d54e:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800d550:	68fb      	ldr	r3, [r7, #12]
 800d552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d554:	2b00      	cmp	r3, #0
 800d556:	d004      	beq.n	800d562 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800d558:	68fb      	ldr	r3, [r7, #12]
 800d55a:	2201      	movs	r2, #1
 800d55c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800d560:	e00e      	b.n	800d580 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800d562:	68fb      	ldr	r3, [r7, #12]
 800d564:	2200      	movs	r2, #0
 800d566:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800d56a:	6878      	ldr	r0, [r7, #4]
 800d56c:	f000 f868 	bl	800d640 <USBH_CDC_TransmitCallback>
      break;
 800d570:	e006      	b.n	800d580 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800d572:	7afb      	ldrb	r3, [r7, #11]
 800d574:	2b02      	cmp	r3, #2
 800d576:	d103      	bne.n	800d580 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800d578:	68fb      	ldr	r3, [r7, #12]
 800d57a:	2201      	movs	r2, #1
 800d57c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800d580:	bf00      	nop
  }
}
 800d582:	bf00      	nop
 800d584:	3710      	adds	r7, #16
 800d586:	46bd      	mov	sp, r7
 800d588:	bd80      	pop	{r7, pc}

0800d58a <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800d58a:	b580      	push	{r7, lr}
 800d58c:	b086      	sub	sp, #24
 800d58e:	af00      	add	r7, sp, #0
 800d590:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d598:	69db      	ldr	r3, [r3, #28]
 800d59a:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800d59c:	2300      	movs	r3, #0
 800d59e:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800d5a0:	697b      	ldr	r3, [r7, #20]
 800d5a2:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800d5a6:	2b03      	cmp	r3, #3
 800d5a8:	d002      	beq.n	800d5b0 <CDC_ProcessReception+0x26>
 800d5aa:	2b04      	cmp	r3, #4
 800d5ac:	d00e      	beq.n	800d5cc <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800d5ae:	e043      	b.n	800d638 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 800d5b0:	697b      	ldr	r3, [r7, #20]
 800d5b2:	6a19      	ldr	r1, [r3, #32]
 800d5b4:	697b      	ldr	r3, [r7, #20]
 800d5b6:	8b5a      	ldrh	r2, [r3, #26]
 800d5b8:	697b      	ldr	r3, [r7, #20]
 800d5ba:	7b1b      	ldrb	r3, [r3, #12]
 800d5bc:	6878      	ldr	r0, [r7, #4]
 800d5be:	f001 fc97 	bl	800eef0 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800d5c2:	697b      	ldr	r3, [r7, #20]
 800d5c4:	2204      	movs	r2, #4
 800d5c6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800d5ca:	e035      	b.n	800d638 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800d5cc:	697b      	ldr	r3, [r7, #20]
 800d5ce:	7b1b      	ldrb	r3, [r3, #12]
 800d5d0:	4619      	mov	r1, r3
 800d5d2:	6878      	ldr	r0, [r7, #4]
 800d5d4:	f001 ff9e 	bl	800f514 <USBH_LL_GetURBState>
 800d5d8:	4603      	mov	r3, r0
 800d5da:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800d5dc:	7cfb      	ldrb	r3, [r7, #19]
 800d5de:	2b01      	cmp	r3, #1
 800d5e0:	d129      	bne.n	800d636 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800d5e2:	697b      	ldr	r3, [r7, #20]
 800d5e4:	7b1b      	ldrb	r3, [r3, #12]
 800d5e6:	4619      	mov	r1, r3
 800d5e8:	6878      	ldr	r0, [r7, #4]
 800d5ea:	f001 ff01 	bl	800f3f0 <USBH_LL_GetLastXferSize>
 800d5ee:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800d5f0:	697b      	ldr	r3, [r7, #20]
 800d5f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d5f4:	68fa      	ldr	r2, [r7, #12]
 800d5f6:	429a      	cmp	r2, r3
 800d5f8:	d016      	beq.n	800d628 <CDC_ProcessReception+0x9e>
 800d5fa:	697b      	ldr	r3, [r7, #20]
 800d5fc:	8b5b      	ldrh	r3, [r3, #26]
 800d5fe:	461a      	mov	r2, r3
 800d600:	68fb      	ldr	r3, [r7, #12]
 800d602:	4293      	cmp	r3, r2
 800d604:	d910      	bls.n	800d628 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 800d606:	697b      	ldr	r3, [r7, #20]
 800d608:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d60a:	68fb      	ldr	r3, [r7, #12]
 800d60c:	1ad2      	subs	r2, r2, r3
 800d60e:	697b      	ldr	r3, [r7, #20]
 800d610:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800d612:	697b      	ldr	r3, [r7, #20]
 800d614:	6a1a      	ldr	r2, [r3, #32]
 800d616:	68fb      	ldr	r3, [r7, #12]
 800d618:	441a      	add	r2, r3
 800d61a:	697b      	ldr	r3, [r7, #20]
 800d61c:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800d61e:	697b      	ldr	r3, [r7, #20]
 800d620:	2203      	movs	r2, #3
 800d622:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800d626:	e006      	b.n	800d636 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800d628:	697b      	ldr	r3, [r7, #20]
 800d62a:	2200      	movs	r2, #0
 800d62c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800d630:	6878      	ldr	r0, [r7, #4]
 800d632:	f7f5 fd91 	bl	8003158 <USBH_CDC_ReceiveCallback>
      break;
 800d636:	bf00      	nop
  }
}
 800d638:	bf00      	nop
 800d63a:	3718      	adds	r7, #24
 800d63c:	46bd      	mov	sp, r7
 800d63e:	bd80      	pop	{r7, pc}

0800d640 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800d640:	b480      	push	{r7}
 800d642:	b083      	sub	sp, #12
 800d644:	af00      	add	r7, sp, #0
 800d646:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800d648:	bf00      	nop
 800d64a:	370c      	adds	r7, #12
 800d64c:	46bd      	mov	sp, r7
 800d64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d652:	4770      	bx	lr

0800d654 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800d654:	b480      	push	{r7}
 800d656:	b083      	sub	sp, #12
 800d658:	af00      	add	r7, sp, #0
 800d65a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800d65c:	bf00      	nop
 800d65e:	370c      	adds	r7, #12
 800d660:	46bd      	mov	sp, r7
 800d662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d666:	4770      	bx	lr

0800d668 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 800d668:	b580      	push	{r7, lr}
 800d66a:	b084      	sub	sp, #16
 800d66c:	af00      	add	r7, sp, #0
 800d66e:	60f8      	str	r0, [r7, #12]
 800d670:	60b9      	str	r1, [r7, #8]
 800d672:	4613      	mov	r3, r2
 800d674:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800d676:	68fb      	ldr	r3, [r7, #12]
 800d678:	2b00      	cmp	r3, #0
 800d67a:	d101      	bne.n	800d680 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800d67c:	2302      	movs	r3, #2
 800d67e:	e029      	b.n	800d6d4 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800d680:	68fb      	ldr	r3, [r7, #12]
 800d682:	79fa      	ldrb	r2, [r7, #7]
 800d684:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800d688:	68fb      	ldr	r3, [r7, #12]
 800d68a:	2200      	movs	r2, #0
 800d68c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800d690:	68fb      	ldr	r3, [r7, #12]
 800d692:	2200      	movs	r2, #0
 800d694:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800d698:	68f8      	ldr	r0, [r7, #12]
 800d69a:	f000 f81f 	bl	800d6dc <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800d69e:	68fb      	ldr	r3, [r7, #12]
 800d6a0:	2200      	movs	r2, #0
 800d6a2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800d6a6:	68fb      	ldr	r3, [r7, #12]
 800d6a8:	2200      	movs	r2, #0
 800d6aa:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800d6ae:	68fb      	ldr	r3, [r7, #12]
 800d6b0:	2200      	movs	r2, #0
 800d6b2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800d6b6:	68fb      	ldr	r3, [r7, #12]
 800d6b8:	2200      	movs	r2, #0
 800d6ba:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800d6be:	68bb      	ldr	r3, [r7, #8]
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	d003      	beq.n	800d6cc <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800d6c4:	68fb      	ldr	r3, [r7, #12]
 800d6c6:	68ba      	ldr	r2, [r7, #8]
 800d6c8:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800d6cc:	68f8      	ldr	r0, [r7, #12]
 800d6ce:	f001 fddb 	bl	800f288 <USBH_LL_Init>

  return USBH_OK;
 800d6d2:	2300      	movs	r3, #0
}
 800d6d4:	4618      	mov	r0, r3
 800d6d6:	3710      	adds	r7, #16
 800d6d8:	46bd      	mov	sp, r7
 800d6da:	bd80      	pop	{r7, pc}

0800d6dc <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800d6dc:	b580      	push	{r7, lr}
 800d6de:	b084      	sub	sp, #16
 800d6e0:	af00      	add	r7, sp, #0
 800d6e2:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800d6e4:	2300      	movs	r3, #0
 800d6e6:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800d6e8:	2300      	movs	r3, #0
 800d6ea:	60fb      	str	r3, [r7, #12]
 800d6ec:	e009      	b.n	800d702 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800d6ee:	687a      	ldr	r2, [r7, #4]
 800d6f0:	68fb      	ldr	r3, [r7, #12]
 800d6f2:	33e0      	adds	r3, #224	; 0xe0
 800d6f4:	009b      	lsls	r3, r3, #2
 800d6f6:	4413      	add	r3, r2
 800d6f8:	2200      	movs	r2, #0
 800d6fa:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800d6fc:	68fb      	ldr	r3, [r7, #12]
 800d6fe:	3301      	adds	r3, #1
 800d700:	60fb      	str	r3, [r7, #12]
 800d702:	68fb      	ldr	r3, [r7, #12]
 800d704:	2b0f      	cmp	r3, #15
 800d706:	d9f2      	bls.n	800d6ee <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800d708:	2300      	movs	r3, #0
 800d70a:	60fb      	str	r3, [r7, #12]
 800d70c:	e009      	b.n	800d722 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800d70e:	687a      	ldr	r2, [r7, #4]
 800d710:	68fb      	ldr	r3, [r7, #12]
 800d712:	4413      	add	r3, r2
 800d714:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800d718:	2200      	movs	r2, #0
 800d71a:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800d71c:	68fb      	ldr	r3, [r7, #12]
 800d71e:	3301      	adds	r3, #1
 800d720:	60fb      	str	r3, [r7, #12]
 800d722:	68fb      	ldr	r3, [r7, #12]
 800d724:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d728:	d3f1      	bcc.n	800d70e <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	2200      	movs	r2, #0
 800d72e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	2200      	movs	r2, #0
 800d734:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	2201      	movs	r2, #1
 800d73a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	2200      	movs	r2, #0
 800d740:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	2201      	movs	r2, #1
 800d748:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	2240      	movs	r2, #64	; 0x40
 800d74e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	2200      	movs	r2, #0
 800d754:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	2200      	movs	r2, #0
 800d75a:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	2201      	movs	r2, #1
 800d762:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	2200      	movs	r2, #0
 800d76a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	2200      	movs	r2, #0
 800d772:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	331c      	adds	r3, #28
 800d77a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d77e:	2100      	movs	r1, #0
 800d780:	4618      	mov	r0, r3
 800d782:	f003 f831 	bl	80107e8 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800d78c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d790:	2100      	movs	r1, #0
 800d792:	4618      	mov	r0, r3
 800d794:	f003 f828 	bl	80107e8 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	f203 3326 	addw	r3, r3, #806	; 0x326
 800d79e:	2212      	movs	r2, #18
 800d7a0:	2100      	movs	r1, #0
 800d7a2:	4618      	mov	r0, r3
 800d7a4:	f003 f820 	bl	80107e8 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800d7ae:	223e      	movs	r2, #62	; 0x3e
 800d7b0:	2100      	movs	r1, #0
 800d7b2:	4618      	mov	r0, r3
 800d7b4:	f003 f818 	bl	80107e8 <memset>

  return USBH_OK;
 800d7b8:	2300      	movs	r3, #0
}
 800d7ba:	4618      	mov	r0, r3
 800d7bc:	3710      	adds	r7, #16
 800d7be:	46bd      	mov	sp, r7
 800d7c0:	bd80      	pop	{r7, pc}

0800d7c2 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800d7c2:	b480      	push	{r7}
 800d7c4:	b085      	sub	sp, #20
 800d7c6:	af00      	add	r7, sp, #0
 800d7c8:	6078      	str	r0, [r7, #4]
 800d7ca:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800d7cc:	2300      	movs	r3, #0
 800d7ce:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800d7d0:	683b      	ldr	r3, [r7, #0]
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	d016      	beq.n	800d804 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	d10e      	bne.n	800d7fe <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800d7e6:	1c59      	adds	r1, r3, #1
 800d7e8:	687a      	ldr	r2, [r7, #4]
 800d7ea:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800d7ee:	687a      	ldr	r2, [r7, #4]
 800d7f0:	33de      	adds	r3, #222	; 0xde
 800d7f2:	6839      	ldr	r1, [r7, #0]
 800d7f4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800d7f8:	2300      	movs	r3, #0
 800d7fa:	73fb      	strb	r3, [r7, #15]
 800d7fc:	e004      	b.n	800d808 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800d7fe:	2302      	movs	r3, #2
 800d800:	73fb      	strb	r3, [r7, #15]
 800d802:	e001      	b.n	800d808 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800d804:	2302      	movs	r3, #2
 800d806:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800d808:	7bfb      	ldrb	r3, [r7, #15]
}
 800d80a:	4618      	mov	r0, r3
 800d80c:	3714      	adds	r7, #20
 800d80e:	46bd      	mov	sp, r7
 800d810:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d814:	4770      	bx	lr

0800d816 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800d816:	b480      	push	{r7}
 800d818:	b085      	sub	sp, #20
 800d81a:	af00      	add	r7, sp, #0
 800d81c:	6078      	str	r0, [r7, #4]
 800d81e:	460b      	mov	r3, r1
 800d820:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800d822:	2300      	movs	r3, #0
 800d824:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800d82c:	78fa      	ldrb	r2, [r7, #3]
 800d82e:	429a      	cmp	r2, r3
 800d830:	d204      	bcs.n	800d83c <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	78fa      	ldrb	r2, [r7, #3]
 800d836:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800d83a:	e001      	b.n	800d840 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800d83c:	2302      	movs	r3, #2
 800d83e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800d840:	7bfb      	ldrb	r3, [r7, #15]
}
 800d842:	4618      	mov	r0, r3
 800d844:	3714      	adds	r7, #20
 800d846:	46bd      	mov	sp, r7
 800d848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d84c:	4770      	bx	lr

0800d84e <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800d84e:	b480      	push	{r7}
 800d850:	b087      	sub	sp, #28
 800d852:	af00      	add	r7, sp, #0
 800d854:	6078      	str	r0, [r7, #4]
 800d856:	4608      	mov	r0, r1
 800d858:	4611      	mov	r1, r2
 800d85a:	461a      	mov	r2, r3
 800d85c:	4603      	mov	r3, r0
 800d85e:	70fb      	strb	r3, [r7, #3]
 800d860:	460b      	mov	r3, r1
 800d862:	70bb      	strb	r3, [r7, #2]
 800d864:	4613      	mov	r3, r2
 800d866:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800d868:	2300      	movs	r3, #0
 800d86a:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800d86c:	2300      	movs	r3, #0
 800d86e:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800d876:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800d878:	e025      	b.n	800d8c6 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800d87a:	7dfb      	ldrb	r3, [r7, #23]
 800d87c:	221a      	movs	r2, #26
 800d87e:	fb02 f303 	mul.w	r3, r2, r3
 800d882:	3308      	adds	r3, #8
 800d884:	68fa      	ldr	r2, [r7, #12]
 800d886:	4413      	add	r3, r2
 800d888:	3302      	adds	r3, #2
 800d88a:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800d88c:	693b      	ldr	r3, [r7, #16]
 800d88e:	795b      	ldrb	r3, [r3, #5]
 800d890:	78fa      	ldrb	r2, [r7, #3]
 800d892:	429a      	cmp	r2, r3
 800d894:	d002      	beq.n	800d89c <USBH_FindInterface+0x4e>
 800d896:	78fb      	ldrb	r3, [r7, #3]
 800d898:	2bff      	cmp	r3, #255	; 0xff
 800d89a:	d111      	bne.n	800d8c0 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800d89c:	693b      	ldr	r3, [r7, #16]
 800d89e:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800d8a0:	78ba      	ldrb	r2, [r7, #2]
 800d8a2:	429a      	cmp	r2, r3
 800d8a4:	d002      	beq.n	800d8ac <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800d8a6:	78bb      	ldrb	r3, [r7, #2]
 800d8a8:	2bff      	cmp	r3, #255	; 0xff
 800d8aa:	d109      	bne.n	800d8c0 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800d8ac:	693b      	ldr	r3, [r7, #16]
 800d8ae:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800d8b0:	787a      	ldrb	r2, [r7, #1]
 800d8b2:	429a      	cmp	r2, r3
 800d8b4:	d002      	beq.n	800d8bc <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800d8b6:	787b      	ldrb	r3, [r7, #1]
 800d8b8:	2bff      	cmp	r3, #255	; 0xff
 800d8ba:	d101      	bne.n	800d8c0 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800d8bc:	7dfb      	ldrb	r3, [r7, #23]
 800d8be:	e006      	b.n	800d8ce <USBH_FindInterface+0x80>
    }
    if_ix++;
 800d8c0:	7dfb      	ldrb	r3, [r7, #23]
 800d8c2:	3301      	adds	r3, #1
 800d8c4:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800d8c6:	7dfb      	ldrb	r3, [r7, #23]
 800d8c8:	2b01      	cmp	r3, #1
 800d8ca:	d9d6      	bls.n	800d87a <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800d8cc:	23ff      	movs	r3, #255	; 0xff
}
 800d8ce:	4618      	mov	r0, r3
 800d8d0:	371c      	adds	r7, #28
 800d8d2:	46bd      	mov	sp, r7
 800d8d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8d8:	4770      	bx	lr

0800d8da <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 800d8da:	b580      	push	{r7, lr}
 800d8dc:	b082      	sub	sp, #8
 800d8de:	af00      	add	r7, sp, #0
 800d8e0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800d8e2:	6878      	ldr	r0, [r7, #4]
 800d8e4:	f001 fd0c 	bl	800f300 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800d8e8:	2101      	movs	r1, #1
 800d8ea:	6878      	ldr	r0, [r7, #4]
 800d8ec:	f001 fe25 	bl	800f53a <USBH_LL_DriverVBUS>

  return USBH_OK;
 800d8f0:	2300      	movs	r3, #0
}
 800d8f2:	4618      	mov	r0, r3
 800d8f4:	3708      	adds	r7, #8
 800d8f6:	46bd      	mov	sp, r7
 800d8f8:	bd80      	pop	{r7, pc}
	...

0800d8fc <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 800d8fc:	b580      	push	{r7, lr}
 800d8fe:	b088      	sub	sp, #32
 800d900:	af04      	add	r7, sp, #16
 800d902:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800d904:	2302      	movs	r3, #2
 800d906:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800d908:	2300      	movs	r3, #0
 800d90a:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800d912:	b2db      	uxtb	r3, r3
 800d914:	2b01      	cmp	r3, #1
 800d916:	d102      	bne.n	800d91e <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	2203      	movs	r2, #3
 800d91c:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	781b      	ldrb	r3, [r3, #0]
 800d922:	b2db      	uxtb	r3, r3
 800d924:	2b0b      	cmp	r3, #11
 800d926:	f200 81be 	bhi.w	800dca6 <USBH_Process+0x3aa>
 800d92a:	a201      	add	r2, pc, #4	; (adr r2, 800d930 <USBH_Process+0x34>)
 800d92c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d930:	0800d961 	.word	0x0800d961
 800d934:	0800d993 	.word	0x0800d993
 800d938:	0800d9fb 	.word	0x0800d9fb
 800d93c:	0800dc41 	.word	0x0800dc41
 800d940:	0800dca7 	.word	0x0800dca7
 800d944:	0800da9f 	.word	0x0800da9f
 800d948:	0800dbe7 	.word	0x0800dbe7
 800d94c:	0800dad5 	.word	0x0800dad5
 800d950:	0800daf5 	.word	0x0800daf5
 800d954:	0800db15 	.word	0x0800db15
 800d958:	0800db59 	.word	0x0800db59
 800d95c:	0800dc29 	.word	0x0800dc29
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800d966:	b2db      	uxtb	r3, r3
 800d968:	2b00      	cmp	r3, #0
 800d96a:	f000 819e 	beq.w	800dcaa <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	2201      	movs	r2, #1
 800d972:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800d974:	20c8      	movs	r0, #200	; 0xc8
 800d976:	f001 fe21 	bl	800f5bc <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800d97a:	6878      	ldr	r0, [r7, #4]
 800d97c:	f001 fd1d 	bl	800f3ba <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	2200      	movs	r2, #0
 800d984:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	2200      	movs	r2, #0
 800d98c:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800d990:	e18b      	b.n	800dcaa <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800d998:	2b01      	cmp	r3, #1
 800d99a:	d107      	bne.n	800d9ac <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	2200      	movs	r2, #0
 800d9a0:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	2202      	movs	r2, #2
 800d9a8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800d9aa:	e18d      	b.n	800dcc8 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800d9b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d9b6:	d914      	bls.n	800d9e2 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800d9be:	3301      	adds	r3, #1
 800d9c0:	b2da      	uxtb	r2, r3
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800d9ce:	2b03      	cmp	r3, #3
 800d9d0:	d903      	bls.n	800d9da <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	220d      	movs	r2, #13
 800d9d6:	701a      	strb	r2, [r3, #0]
      break;
 800d9d8:	e176      	b.n	800dcc8 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	2200      	movs	r2, #0
 800d9de:	701a      	strb	r2, [r3, #0]
      break;
 800d9e0:	e172      	b.n	800dcc8 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800d9e8:	f103 020a 	add.w	r2, r3, #10
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800d9f2:	200a      	movs	r0, #10
 800d9f4:	f001 fde2 	bl	800f5bc <USBH_Delay>
      break;
 800d9f8:	e166      	b.n	800dcc8 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800da00:	2b00      	cmp	r3, #0
 800da02:	d005      	beq.n	800da10 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800da0a:	2104      	movs	r1, #4
 800da0c:	6878      	ldr	r0, [r7, #4]
 800da0e:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800da10:	2064      	movs	r0, #100	; 0x64
 800da12:	f001 fdd3 	bl	800f5bc <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800da16:	6878      	ldr	r0, [r7, #4]
 800da18:	f001 fca8 	bl	800f36c <USBH_LL_GetSpeed>
 800da1c:	4603      	mov	r3, r0
 800da1e:	461a      	mov	r2, r3
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	2205      	movs	r2, #5
 800da2a:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800da2c:	2100      	movs	r1, #0
 800da2e:	6878      	ldr	r0, [r7, #4]
 800da30:	f001 faab 	bl	800ef8a <USBH_AllocPipe>
 800da34:	4603      	mov	r3, r0
 800da36:	461a      	mov	r2, r3
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800da3c:	2180      	movs	r1, #128	; 0x80
 800da3e:	6878      	ldr	r0, [r7, #4]
 800da40:	f001 faa3 	bl	800ef8a <USBH_AllocPipe>
 800da44:	4603      	mov	r3, r0
 800da46:	461a      	mov	r2, r3
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	7919      	ldrb	r1, [r3, #4]
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800da5c:	687a      	ldr	r2, [r7, #4]
 800da5e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800da60:	b292      	uxth	r2, r2
 800da62:	9202      	str	r2, [sp, #8]
 800da64:	2200      	movs	r2, #0
 800da66:	9201      	str	r2, [sp, #4]
 800da68:	9300      	str	r3, [sp, #0]
 800da6a:	4603      	mov	r3, r0
 800da6c:	2280      	movs	r2, #128	; 0x80
 800da6e:	6878      	ldr	r0, [r7, #4]
 800da70:	f001 fa5c 	bl	800ef2c <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	7959      	ldrb	r1, [r3, #5]
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800da84:	687a      	ldr	r2, [r7, #4]
 800da86:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800da88:	b292      	uxth	r2, r2
 800da8a:	9202      	str	r2, [sp, #8]
 800da8c:	2200      	movs	r2, #0
 800da8e:	9201      	str	r2, [sp, #4]
 800da90:	9300      	str	r3, [sp, #0]
 800da92:	4603      	mov	r3, r0
 800da94:	2200      	movs	r2, #0
 800da96:	6878      	ldr	r0, [r7, #4]
 800da98:	f001 fa48 	bl	800ef2c <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800da9c:	e114      	b.n	800dcc8 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800da9e:	6878      	ldr	r0, [r7, #4]
 800daa0:	f000 f918 	bl	800dcd4 <USBH_HandleEnum>
 800daa4:	4603      	mov	r3, r0
 800daa6:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800daa8:	7bbb      	ldrb	r3, [r7, #14]
 800daaa:	b2db      	uxtb	r3, r3
 800daac:	2b00      	cmp	r3, #0
 800daae:	f040 80fe 	bne.w	800dcae <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	2200      	movs	r2, #0
 800dab6:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800dac0:	2b01      	cmp	r3, #1
 800dac2:	d103      	bne.n	800dacc <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	2208      	movs	r2, #8
 800dac8:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800daca:	e0f0      	b.n	800dcae <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	2207      	movs	r2, #7
 800dad0:	701a      	strb	r2, [r3, #0]
      break;
 800dad2:	e0ec      	b.n	800dcae <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800dada:	2b00      	cmp	r3, #0
 800dadc:	f000 80e9 	beq.w	800dcb2 <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800dae6:	2101      	movs	r1, #1
 800dae8:	6878      	ldr	r0, [r7, #4]
 800daea:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	2208      	movs	r2, #8
 800daf0:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800daf2:	e0de      	b.n	800dcb2 <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800dafa:	b29b      	uxth	r3, r3
 800dafc:	4619      	mov	r1, r3
 800dafe:	6878      	ldr	r0, [r7, #4]
 800db00:	f000 fc3f 	bl	800e382 <USBH_SetCfg>
 800db04:	4603      	mov	r3, r0
 800db06:	2b00      	cmp	r3, #0
 800db08:	f040 80d5 	bne.w	800dcb6 <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	2209      	movs	r2, #9
 800db10:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800db12:	e0d0      	b.n	800dcb6 <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800db1a:	f003 0320 	and.w	r3, r3, #32
 800db1e:	2b00      	cmp	r3, #0
 800db20:	d016      	beq.n	800db50 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800db22:	2101      	movs	r1, #1
 800db24:	6878      	ldr	r0, [r7, #4]
 800db26:	f000 fc4f 	bl	800e3c8 <USBH_SetFeature>
 800db2a:	4603      	mov	r3, r0
 800db2c:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800db2e:	7bbb      	ldrb	r3, [r7, #14]
 800db30:	b2db      	uxtb	r3, r3
 800db32:	2b00      	cmp	r3, #0
 800db34:	d103      	bne.n	800db3e <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	220a      	movs	r2, #10
 800db3a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800db3c:	e0bd      	b.n	800dcba <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 800db3e:	7bbb      	ldrb	r3, [r7, #14]
 800db40:	b2db      	uxtb	r3, r3
 800db42:	2b03      	cmp	r3, #3
 800db44:	f040 80b9 	bne.w	800dcba <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	220a      	movs	r2, #10
 800db4c:	701a      	strb	r2, [r3, #0]
      break;
 800db4e:	e0b4      	b.n	800dcba <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	220a      	movs	r2, #10
 800db54:	701a      	strb	r2, [r3, #0]
      break;
 800db56:	e0b0      	b.n	800dcba <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800db5e:	2b00      	cmp	r3, #0
 800db60:	f000 80ad 	beq.w	800dcbe <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	2200      	movs	r2, #0
 800db68:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800db6c:	2300      	movs	r3, #0
 800db6e:	73fb      	strb	r3, [r7, #15]
 800db70:	e016      	b.n	800dba0 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800db72:	7bfa      	ldrb	r2, [r7, #15]
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	32de      	adds	r2, #222	; 0xde
 800db78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800db7c:	791a      	ldrb	r2, [r3, #4]
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800db84:	429a      	cmp	r2, r3
 800db86:	d108      	bne.n	800db9a <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 800db88:	7bfa      	ldrb	r2, [r7, #15]
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	32de      	adds	r2, #222	; 0xde
 800db8e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800db98:	e005      	b.n	800dba6 <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800db9a:	7bfb      	ldrb	r3, [r7, #15]
 800db9c:	3301      	adds	r3, #1
 800db9e:	73fb      	strb	r3, [r7, #15]
 800dba0:	7bfb      	ldrb	r3, [r7, #15]
 800dba2:	2b00      	cmp	r3, #0
 800dba4:	d0e5      	beq.n	800db72 <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	d016      	beq.n	800dbde <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800dbb6:	689b      	ldr	r3, [r3, #8]
 800dbb8:	6878      	ldr	r0, [r7, #4]
 800dbba:	4798      	blx	r3
 800dbbc:	4603      	mov	r3, r0
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	d109      	bne.n	800dbd6 <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	2206      	movs	r2, #6
 800dbc6:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800dbce:	2103      	movs	r1, #3
 800dbd0:	6878      	ldr	r0, [r7, #4]
 800dbd2:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800dbd4:	e073      	b.n	800dcbe <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	220d      	movs	r2, #13
 800dbda:	701a      	strb	r2, [r3, #0]
      break;
 800dbdc:	e06f      	b.n	800dcbe <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	220d      	movs	r2, #13
 800dbe2:	701a      	strb	r2, [r3, #0]
      break;
 800dbe4:	e06b      	b.n	800dcbe <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800dbec:	2b00      	cmp	r3, #0
 800dbee:	d017      	beq.n	800dc20 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800dbf6:	691b      	ldr	r3, [r3, #16]
 800dbf8:	6878      	ldr	r0, [r7, #4]
 800dbfa:	4798      	blx	r3
 800dbfc:	4603      	mov	r3, r0
 800dbfe:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800dc00:	7bbb      	ldrb	r3, [r7, #14]
 800dc02:	b2db      	uxtb	r3, r3
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	d103      	bne.n	800dc10 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	220b      	movs	r2, #11
 800dc0c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800dc0e:	e058      	b.n	800dcc2 <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 800dc10:	7bbb      	ldrb	r3, [r7, #14]
 800dc12:	b2db      	uxtb	r3, r3
 800dc14:	2b02      	cmp	r3, #2
 800dc16:	d154      	bne.n	800dcc2 <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	220d      	movs	r2, #13
 800dc1c:	701a      	strb	r2, [r3, #0]
      break;
 800dc1e:	e050      	b.n	800dcc2 <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	220d      	movs	r2, #13
 800dc24:	701a      	strb	r2, [r3, #0]
      break;
 800dc26:	e04c      	b.n	800dcc2 <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	d049      	beq.n	800dcc6 <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800dc38:	695b      	ldr	r3, [r3, #20]
 800dc3a:	6878      	ldr	r0, [r7, #4]
 800dc3c:	4798      	blx	r3
      }
      break;
 800dc3e:	e042      	b.n	800dcc6 <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	2200      	movs	r2, #0
 800dc44:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 800dc48:	6878      	ldr	r0, [r7, #4]
 800dc4a:	f7ff fd47 	bl	800d6dc <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800dc54:	2b00      	cmp	r3, #0
 800dc56:	d009      	beq.n	800dc6c <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800dc5e:	68db      	ldr	r3, [r3, #12]
 800dc60:	6878      	ldr	r0, [r7, #4]
 800dc62:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	2200      	movs	r2, #0
 800dc68:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800dc72:	2b00      	cmp	r3, #0
 800dc74:	d005      	beq.n	800dc82 <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800dc7c:	2105      	movs	r1, #5
 800dc7e:	6878      	ldr	r0, [r7, #4]
 800dc80:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800dc88:	b2db      	uxtb	r3, r3
 800dc8a:	2b01      	cmp	r3, #1
 800dc8c:	d107      	bne.n	800dc9e <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	2200      	movs	r2, #0
 800dc92:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800dc96:	6878      	ldr	r0, [r7, #4]
 800dc98:	f7ff fe1f 	bl	800d8da <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800dc9c:	e014      	b.n	800dcc8 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 800dc9e:	6878      	ldr	r0, [r7, #4]
 800dca0:	f001 fb2e 	bl	800f300 <USBH_LL_Start>
      break;
 800dca4:	e010      	b.n	800dcc8 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 800dca6:	bf00      	nop
 800dca8:	e00e      	b.n	800dcc8 <USBH_Process+0x3cc>
      break;
 800dcaa:	bf00      	nop
 800dcac:	e00c      	b.n	800dcc8 <USBH_Process+0x3cc>
      break;
 800dcae:	bf00      	nop
 800dcb0:	e00a      	b.n	800dcc8 <USBH_Process+0x3cc>
    break;
 800dcb2:	bf00      	nop
 800dcb4:	e008      	b.n	800dcc8 <USBH_Process+0x3cc>
      break;
 800dcb6:	bf00      	nop
 800dcb8:	e006      	b.n	800dcc8 <USBH_Process+0x3cc>
      break;
 800dcba:	bf00      	nop
 800dcbc:	e004      	b.n	800dcc8 <USBH_Process+0x3cc>
      break;
 800dcbe:	bf00      	nop
 800dcc0:	e002      	b.n	800dcc8 <USBH_Process+0x3cc>
      break;
 800dcc2:	bf00      	nop
 800dcc4:	e000      	b.n	800dcc8 <USBH_Process+0x3cc>
      break;
 800dcc6:	bf00      	nop
  }
  return USBH_OK;
 800dcc8:	2300      	movs	r3, #0
}
 800dcca:	4618      	mov	r0, r3
 800dccc:	3710      	adds	r7, #16
 800dcce:	46bd      	mov	sp, r7
 800dcd0:	bd80      	pop	{r7, pc}
 800dcd2:	bf00      	nop

0800dcd4 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800dcd4:	b580      	push	{r7, lr}
 800dcd6:	b088      	sub	sp, #32
 800dcd8:	af04      	add	r7, sp, #16
 800dcda:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800dcdc:	2301      	movs	r3, #1
 800dcde:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800dce0:	2301      	movs	r3, #1
 800dce2:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	785b      	ldrb	r3, [r3, #1]
 800dce8:	2b07      	cmp	r3, #7
 800dcea:	f200 81c1 	bhi.w	800e070 <USBH_HandleEnum+0x39c>
 800dcee:	a201      	add	r2, pc, #4	; (adr r2, 800dcf4 <USBH_HandleEnum+0x20>)
 800dcf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dcf4:	0800dd15 	.word	0x0800dd15
 800dcf8:	0800ddd3 	.word	0x0800ddd3
 800dcfc:	0800de3d 	.word	0x0800de3d
 800dd00:	0800decb 	.word	0x0800decb
 800dd04:	0800df35 	.word	0x0800df35
 800dd08:	0800dfa5 	.word	0x0800dfa5
 800dd0c:	0800dfeb 	.word	0x0800dfeb
 800dd10:	0800e031 	.word	0x0800e031
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800dd14:	2108      	movs	r1, #8
 800dd16:	6878      	ldr	r0, [r7, #4]
 800dd18:	f000 fa50 	bl	800e1bc <USBH_Get_DevDesc>
 800dd1c:	4603      	mov	r3, r0
 800dd1e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800dd20:	7bbb      	ldrb	r3, [r7, #14]
 800dd22:	2b00      	cmp	r3, #0
 800dd24:	d130      	bne.n	800dd88 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	2201      	movs	r2, #1
 800dd34:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	7919      	ldrb	r1, [r3, #4]
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800dd46:	687a      	ldr	r2, [r7, #4]
 800dd48:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800dd4a:	b292      	uxth	r2, r2
 800dd4c:	9202      	str	r2, [sp, #8]
 800dd4e:	2200      	movs	r2, #0
 800dd50:	9201      	str	r2, [sp, #4]
 800dd52:	9300      	str	r3, [sp, #0]
 800dd54:	4603      	mov	r3, r0
 800dd56:	2280      	movs	r2, #128	; 0x80
 800dd58:	6878      	ldr	r0, [r7, #4]
 800dd5a:	f001 f8e7 	bl	800ef2c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	7959      	ldrb	r1, [r3, #5]
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800dd6e:	687a      	ldr	r2, [r7, #4]
 800dd70:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800dd72:	b292      	uxth	r2, r2
 800dd74:	9202      	str	r2, [sp, #8]
 800dd76:	2200      	movs	r2, #0
 800dd78:	9201      	str	r2, [sp, #4]
 800dd7a:	9300      	str	r3, [sp, #0]
 800dd7c:	4603      	mov	r3, r0
 800dd7e:	2200      	movs	r2, #0
 800dd80:	6878      	ldr	r0, [r7, #4]
 800dd82:	f001 f8d3 	bl	800ef2c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800dd86:	e175      	b.n	800e074 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800dd88:	7bbb      	ldrb	r3, [r7, #14]
 800dd8a:	2b03      	cmp	r3, #3
 800dd8c:	f040 8172 	bne.w	800e074 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800dd96:	3301      	adds	r3, #1
 800dd98:	b2da      	uxtb	r2, r3
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800dda6:	2b03      	cmp	r3, #3
 800dda8:	d903      	bls.n	800ddb2 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	220d      	movs	r2, #13
 800ddae:	701a      	strb	r2, [r3, #0]
      break;
 800ddb0:	e160      	b.n	800e074 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	795b      	ldrb	r3, [r3, #5]
 800ddb6:	4619      	mov	r1, r3
 800ddb8:	6878      	ldr	r0, [r7, #4]
 800ddba:	f001 f907 	bl	800efcc <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	791b      	ldrb	r3, [r3, #4]
 800ddc2:	4619      	mov	r1, r3
 800ddc4:	6878      	ldr	r0, [r7, #4]
 800ddc6:	f001 f901 	bl	800efcc <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	2200      	movs	r2, #0
 800ddce:	701a      	strb	r2, [r3, #0]
      break;
 800ddd0:	e150      	b.n	800e074 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800ddd2:	2112      	movs	r1, #18
 800ddd4:	6878      	ldr	r0, [r7, #4]
 800ddd6:	f000 f9f1 	bl	800e1bc <USBH_Get_DevDesc>
 800ddda:	4603      	mov	r3, r0
 800dddc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ddde:	7bbb      	ldrb	r3, [r7, #14]
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	d103      	bne.n	800ddec <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	2202      	movs	r2, #2
 800dde8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800ddea:	e145      	b.n	800e078 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ddec:	7bbb      	ldrb	r3, [r7, #14]
 800ddee:	2b03      	cmp	r3, #3
 800ddf0:	f040 8142 	bne.w	800e078 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ddfa:	3301      	adds	r3, #1
 800ddfc:	b2da      	uxtb	r2, r3
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800de0a:	2b03      	cmp	r3, #3
 800de0c:	d903      	bls.n	800de16 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	220d      	movs	r2, #13
 800de12:	701a      	strb	r2, [r3, #0]
      break;
 800de14:	e130      	b.n	800e078 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	795b      	ldrb	r3, [r3, #5]
 800de1a:	4619      	mov	r1, r3
 800de1c:	6878      	ldr	r0, [r7, #4]
 800de1e:	f001 f8d5 	bl	800efcc <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	791b      	ldrb	r3, [r3, #4]
 800de26:	4619      	mov	r1, r3
 800de28:	6878      	ldr	r0, [r7, #4]
 800de2a:	f001 f8cf 	bl	800efcc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	2200      	movs	r2, #0
 800de32:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	2200      	movs	r2, #0
 800de38:	701a      	strb	r2, [r3, #0]
      break;
 800de3a:	e11d      	b.n	800e078 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800de3c:	2101      	movs	r1, #1
 800de3e:	6878      	ldr	r0, [r7, #4]
 800de40:	f000 fa7b 	bl	800e33a <USBH_SetAddress>
 800de44:	4603      	mov	r3, r0
 800de46:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800de48:	7bbb      	ldrb	r3, [r7, #14]
 800de4a:	2b00      	cmp	r3, #0
 800de4c:	d132      	bne.n	800deb4 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800de4e:	2002      	movs	r0, #2
 800de50:	f001 fbb4 	bl	800f5bc <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	2201      	movs	r2, #1
 800de58:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	2203      	movs	r2, #3
 800de60:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	7919      	ldrb	r1, [r3, #4]
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800de72:	687a      	ldr	r2, [r7, #4]
 800de74:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800de76:	b292      	uxth	r2, r2
 800de78:	9202      	str	r2, [sp, #8]
 800de7a:	2200      	movs	r2, #0
 800de7c:	9201      	str	r2, [sp, #4]
 800de7e:	9300      	str	r3, [sp, #0]
 800de80:	4603      	mov	r3, r0
 800de82:	2280      	movs	r2, #128	; 0x80
 800de84:	6878      	ldr	r0, [r7, #4]
 800de86:	f001 f851 	bl	800ef2c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	7959      	ldrb	r1, [r3, #5]
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800de9a:	687a      	ldr	r2, [r7, #4]
 800de9c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800de9e:	b292      	uxth	r2, r2
 800dea0:	9202      	str	r2, [sp, #8]
 800dea2:	2200      	movs	r2, #0
 800dea4:	9201      	str	r2, [sp, #4]
 800dea6:	9300      	str	r3, [sp, #0]
 800dea8:	4603      	mov	r3, r0
 800deaa:	2200      	movs	r2, #0
 800deac:	6878      	ldr	r0, [r7, #4]
 800deae:	f001 f83d 	bl	800ef2c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800deb2:	e0e3      	b.n	800e07c <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800deb4:	7bbb      	ldrb	r3, [r7, #14]
 800deb6:	2b03      	cmp	r3, #3
 800deb8:	f040 80e0 	bne.w	800e07c <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	220d      	movs	r2, #13
 800dec0:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	2200      	movs	r2, #0
 800dec6:	705a      	strb	r2, [r3, #1]
      break;
 800dec8:	e0d8      	b.n	800e07c <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800deca:	2109      	movs	r1, #9
 800decc:	6878      	ldr	r0, [r7, #4]
 800dece:	f000 f9a1 	bl	800e214 <USBH_Get_CfgDesc>
 800ded2:	4603      	mov	r3, r0
 800ded4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ded6:	7bbb      	ldrb	r3, [r7, #14]
 800ded8:	2b00      	cmp	r3, #0
 800deda:	d103      	bne.n	800dee4 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	2204      	movs	r2, #4
 800dee0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800dee2:	e0cd      	b.n	800e080 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800dee4:	7bbb      	ldrb	r3, [r7, #14]
 800dee6:	2b03      	cmp	r3, #3
 800dee8:	f040 80ca 	bne.w	800e080 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800def2:	3301      	adds	r3, #1
 800def4:	b2da      	uxtb	r2, r3
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800df02:	2b03      	cmp	r3, #3
 800df04:	d903      	bls.n	800df0e <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	220d      	movs	r2, #13
 800df0a:	701a      	strb	r2, [r3, #0]
      break;
 800df0c:	e0b8      	b.n	800e080 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	795b      	ldrb	r3, [r3, #5]
 800df12:	4619      	mov	r1, r3
 800df14:	6878      	ldr	r0, [r7, #4]
 800df16:	f001 f859 	bl	800efcc <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	791b      	ldrb	r3, [r3, #4]
 800df1e:	4619      	mov	r1, r3
 800df20:	6878      	ldr	r0, [r7, #4]
 800df22:	f001 f853 	bl	800efcc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	2200      	movs	r2, #0
 800df2a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	2200      	movs	r2, #0
 800df30:	701a      	strb	r2, [r3, #0]
      break;
 800df32:	e0a5      	b.n	800e080 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800df3a:	4619      	mov	r1, r3
 800df3c:	6878      	ldr	r0, [r7, #4]
 800df3e:	f000 f969 	bl	800e214 <USBH_Get_CfgDesc>
 800df42:	4603      	mov	r3, r0
 800df44:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800df46:	7bbb      	ldrb	r3, [r7, #14]
 800df48:	2b00      	cmp	r3, #0
 800df4a:	d103      	bne.n	800df54 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	2205      	movs	r2, #5
 800df50:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800df52:	e097      	b.n	800e084 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800df54:	7bbb      	ldrb	r3, [r7, #14]
 800df56:	2b03      	cmp	r3, #3
 800df58:	f040 8094 	bne.w	800e084 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800df62:	3301      	adds	r3, #1
 800df64:	b2da      	uxtb	r2, r3
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800df72:	2b03      	cmp	r3, #3
 800df74:	d903      	bls.n	800df7e <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	220d      	movs	r2, #13
 800df7a:	701a      	strb	r2, [r3, #0]
      break;
 800df7c:	e082      	b.n	800e084 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	795b      	ldrb	r3, [r3, #5]
 800df82:	4619      	mov	r1, r3
 800df84:	6878      	ldr	r0, [r7, #4]
 800df86:	f001 f821 	bl	800efcc <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	791b      	ldrb	r3, [r3, #4]
 800df8e:	4619      	mov	r1, r3
 800df90:	6878      	ldr	r0, [r7, #4]
 800df92:	f001 f81b 	bl	800efcc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	2200      	movs	r2, #0
 800df9a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	2200      	movs	r2, #0
 800dfa0:	701a      	strb	r2, [r3, #0]
      break;
 800dfa2:	e06f      	b.n	800e084 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800dfaa:	2b00      	cmp	r3, #0
 800dfac:	d019      	beq.n	800dfe2 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800dfba:	23ff      	movs	r3, #255	; 0xff
 800dfbc:	6878      	ldr	r0, [r7, #4]
 800dfbe:	f000 f953 	bl	800e268 <USBH_Get_StringDesc>
 800dfc2:	4603      	mov	r3, r0
 800dfc4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800dfc6:	7bbb      	ldrb	r3, [r7, #14]
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	d103      	bne.n	800dfd4 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	2206      	movs	r2, #6
 800dfd0:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800dfd2:	e059      	b.n	800e088 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800dfd4:	7bbb      	ldrb	r3, [r7, #14]
 800dfd6:	2b03      	cmp	r3, #3
 800dfd8:	d156      	bne.n	800e088 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	2206      	movs	r2, #6
 800dfde:	705a      	strb	r2, [r3, #1]
      break;
 800dfe0:	e052      	b.n	800e088 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	2206      	movs	r2, #6
 800dfe6:	705a      	strb	r2, [r3, #1]
      break;
 800dfe8:	e04e      	b.n	800e088 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	d019      	beq.n	800e028 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800e000:	23ff      	movs	r3, #255	; 0xff
 800e002:	6878      	ldr	r0, [r7, #4]
 800e004:	f000 f930 	bl	800e268 <USBH_Get_StringDesc>
 800e008:	4603      	mov	r3, r0
 800e00a:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800e00c:	7bbb      	ldrb	r3, [r7, #14]
 800e00e:	2b00      	cmp	r3, #0
 800e010:	d103      	bne.n	800e01a <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	2207      	movs	r2, #7
 800e016:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800e018:	e038      	b.n	800e08c <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800e01a:	7bbb      	ldrb	r3, [r7, #14]
 800e01c:	2b03      	cmp	r3, #3
 800e01e:	d135      	bne.n	800e08c <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	2207      	movs	r2, #7
 800e024:	705a      	strb	r2, [r3, #1]
      break;
 800e026:	e031      	b.n	800e08c <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	2207      	movs	r2, #7
 800e02c:	705a      	strb	r2, [r3, #1]
      break;
 800e02e:	e02d      	b.n	800e08c <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800e036:	2b00      	cmp	r3, #0
 800e038:	d017      	beq.n	800e06a <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800e046:	23ff      	movs	r3, #255	; 0xff
 800e048:	6878      	ldr	r0, [r7, #4]
 800e04a:	f000 f90d 	bl	800e268 <USBH_Get_StringDesc>
 800e04e:	4603      	mov	r3, r0
 800e050:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800e052:	7bbb      	ldrb	r3, [r7, #14]
 800e054:	2b00      	cmp	r3, #0
 800e056:	d102      	bne.n	800e05e <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800e058:	2300      	movs	r3, #0
 800e05a:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800e05c:	e018      	b.n	800e090 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800e05e:	7bbb      	ldrb	r3, [r7, #14]
 800e060:	2b03      	cmp	r3, #3
 800e062:	d115      	bne.n	800e090 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800e064:	2300      	movs	r3, #0
 800e066:	73fb      	strb	r3, [r7, #15]
      break;
 800e068:	e012      	b.n	800e090 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800e06a:	2300      	movs	r3, #0
 800e06c:	73fb      	strb	r3, [r7, #15]
      break;
 800e06e:	e00f      	b.n	800e090 <USBH_HandleEnum+0x3bc>

    default:
      break;
 800e070:	bf00      	nop
 800e072:	e00e      	b.n	800e092 <USBH_HandleEnum+0x3be>
      break;
 800e074:	bf00      	nop
 800e076:	e00c      	b.n	800e092 <USBH_HandleEnum+0x3be>
      break;
 800e078:	bf00      	nop
 800e07a:	e00a      	b.n	800e092 <USBH_HandleEnum+0x3be>
      break;
 800e07c:	bf00      	nop
 800e07e:	e008      	b.n	800e092 <USBH_HandleEnum+0x3be>
      break;
 800e080:	bf00      	nop
 800e082:	e006      	b.n	800e092 <USBH_HandleEnum+0x3be>
      break;
 800e084:	bf00      	nop
 800e086:	e004      	b.n	800e092 <USBH_HandleEnum+0x3be>
      break;
 800e088:	bf00      	nop
 800e08a:	e002      	b.n	800e092 <USBH_HandleEnum+0x3be>
      break;
 800e08c:	bf00      	nop
 800e08e:	e000      	b.n	800e092 <USBH_HandleEnum+0x3be>
      break;
 800e090:	bf00      	nop
  }
  return Status;
 800e092:	7bfb      	ldrb	r3, [r7, #15]
}
 800e094:	4618      	mov	r0, r3
 800e096:	3710      	adds	r7, #16
 800e098:	46bd      	mov	sp, r7
 800e09a:	bd80      	pop	{r7, pc}

0800e09c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800e09c:	b480      	push	{r7}
 800e09e:	b083      	sub	sp, #12
 800e0a0:	af00      	add	r7, sp, #0
 800e0a2:	6078      	str	r0, [r7, #4]
 800e0a4:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	683a      	ldr	r2, [r7, #0]
 800e0aa:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800e0ae:	bf00      	nop
 800e0b0:	370c      	adds	r7, #12
 800e0b2:	46bd      	mov	sp, r7
 800e0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0b8:	4770      	bx	lr

0800e0ba <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800e0ba:	b580      	push	{r7, lr}
 800e0bc:	b082      	sub	sp, #8
 800e0be:	af00      	add	r7, sp, #0
 800e0c0:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800e0c8:	1c5a      	adds	r2, r3, #1
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800e0d0:	6878      	ldr	r0, [r7, #4]
 800e0d2:	f000 f804 	bl	800e0de <USBH_HandleSof>
}
 800e0d6:	bf00      	nop
 800e0d8:	3708      	adds	r7, #8
 800e0da:	46bd      	mov	sp, r7
 800e0dc:	bd80      	pop	{r7, pc}

0800e0de <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800e0de:	b580      	push	{r7, lr}
 800e0e0:	b082      	sub	sp, #8
 800e0e2:	af00      	add	r7, sp, #0
 800e0e4:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	781b      	ldrb	r3, [r3, #0]
 800e0ea:	b2db      	uxtb	r3, r3
 800e0ec:	2b0b      	cmp	r3, #11
 800e0ee:	d10a      	bne.n	800e106 <USBH_HandleSof+0x28>
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e0f6:	2b00      	cmp	r3, #0
 800e0f8:	d005      	beq.n	800e106 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e100:	699b      	ldr	r3, [r3, #24]
 800e102:	6878      	ldr	r0, [r7, #4]
 800e104:	4798      	blx	r3
  }
}
 800e106:	bf00      	nop
 800e108:	3708      	adds	r7, #8
 800e10a:	46bd      	mov	sp, r7
 800e10c:	bd80      	pop	{r7, pc}

0800e10e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800e10e:	b480      	push	{r7}
 800e110:	b083      	sub	sp, #12
 800e112:	af00      	add	r7, sp, #0
 800e114:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	2201      	movs	r2, #1
 800e11a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800e11e:	bf00      	nop
}
 800e120:	370c      	adds	r7, #12
 800e122:	46bd      	mov	sp, r7
 800e124:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e128:	4770      	bx	lr

0800e12a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800e12a:	b480      	push	{r7}
 800e12c:	b083      	sub	sp, #12
 800e12e:	af00      	add	r7, sp, #0
 800e130:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	2200      	movs	r2, #0
 800e136:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800e13a:	bf00      	nop
}
 800e13c:	370c      	adds	r7, #12
 800e13e:	46bd      	mov	sp, r7
 800e140:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e144:	4770      	bx	lr

0800e146 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800e146:	b480      	push	{r7}
 800e148:	b083      	sub	sp, #12
 800e14a:	af00      	add	r7, sp, #0
 800e14c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	2201      	movs	r2, #1
 800e152:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	2200      	movs	r2, #0
 800e15a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	2200      	movs	r2, #0
 800e162:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800e166:	2300      	movs	r3, #0
}
 800e168:	4618      	mov	r0, r3
 800e16a:	370c      	adds	r7, #12
 800e16c:	46bd      	mov	sp, r7
 800e16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e172:	4770      	bx	lr

0800e174 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800e174:	b580      	push	{r7, lr}
 800e176:	b082      	sub	sp, #8
 800e178:	af00      	add	r7, sp, #0
 800e17a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	2201      	movs	r2, #1
 800e180:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	2200      	movs	r2, #0
 800e188:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	2200      	movs	r2, #0
 800e190:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800e194:	6878      	ldr	r0, [r7, #4]
 800e196:	f001 f8ce 	bl	800f336 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	791b      	ldrb	r3, [r3, #4]
 800e19e:	4619      	mov	r1, r3
 800e1a0:	6878      	ldr	r0, [r7, #4]
 800e1a2:	f000 ff13 	bl	800efcc <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	795b      	ldrb	r3, [r3, #5]
 800e1aa:	4619      	mov	r1, r3
 800e1ac:	6878      	ldr	r0, [r7, #4]
 800e1ae:	f000 ff0d 	bl	800efcc <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800e1b2:	2300      	movs	r3, #0
}
 800e1b4:	4618      	mov	r0, r3
 800e1b6:	3708      	adds	r7, #8
 800e1b8:	46bd      	mov	sp, r7
 800e1ba:	bd80      	pop	{r7, pc}

0800e1bc <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800e1bc:	b580      	push	{r7, lr}
 800e1be:	b086      	sub	sp, #24
 800e1c0:	af02      	add	r7, sp, #8
 800e1c2:	6078      	str	r0, [r7, #4]
 800e1c4:	460b      	mov	r3, r1
 800e1c6:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 800e1c8:	887b      	ldrh	r3, [r7, #2]
 800e1ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e1ce:	d901      	bls.n	800e1d4 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800e1d0:	2303      	movs	r3, #3
 800e1d2:	e01b      	b.n	800e20c <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800e1da:	887b      	ldrh	r3, [r7, #2]
 800e1dc:	9300      	str	r3, [sp, #0]
 800e1de:	4613      	mov	r3, r2
 800e1e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e1e4:	2100      	movs	r1, #0
 800e1e6:	6878      	ldr	r0, [r7, #4]
 800e1e8:	f000 f872 	bl	800e2d0 <USBH_GetDescriptor>
 800e1ec:	4603      	mov	r3, r0
 800e1ee:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 800e1f0:	7bfb      	ldrb	r3, [r7, #15]
 800e1f2:	2b00      	cmp	r3, #0
 800e1f4:	d109      	bne.n	800e20a <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800e1fc:	887a      	ldrh	r2, [r7, #2]
 800e1fe:	4619      	mov	r1, r3
 800e200:	6878      	ldr	r0, [r7, #4]
 800e202:	f000 f929 	bl	800e458 <USBH_ParseDevDesc>
 800e206:	4603      	mov	r3, r0
 800e208:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800e20a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e20c:	4618      	mov	r0, r3
 800e20e:	3710      	adds	r7, #16
 800e210:	46bd      	mov	sp, r7
 800e212:	bd80      	pop	{r7, pc}

0800e214 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800e214:	b580      	push	{r7, lr}
 800e216:	b086      	sub	sp, #24
 800e218:	af02      	add	r7, sp, #8
 800e21a:	6078      	str	r0, [r7, #4]
 800e21c:	460b      	mov	r3, r1
 800e21e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	331c      	adds	r3, #28
 800e224:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 800e226:	887b      	ldrh	r3, [r7, #2]
 800e228:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e22c:	d901      	bls.n	800e232 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800e22e:	2303      	movs	r3, #3
 800e230:	e016      	b.n	800e260 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800e232:	887b      	ldrh	r3, [r7, #2]
 800e234:	9300      	str	r3, [sp, #0]
 800e236:	68bb      	ldr	r3, [r7, #8]
 800e238:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e23c:	2100      	movs	r1, #0
 800e23e:	6878      	ldr	r0, [r7, #4]
 800e240:	f000 f846 	bl	800e2d0 <USBH_GetDescriptor>
 800e244:	4603      	mov	r3, r0
 800e246:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800e248:	7bfb      	ldrb	r3, [r7, #15]
 800e24a:	2b00      	cmp	r3, #0
 800e24c:	d107      	bne.n	800e25e <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800e24e:	887b      	ldrh	r3, [r7, #2]
 800e250:	461a      	mov	r2, r3
 800e252:	68b9      	ldr	r1, [r7, #8]
 800e254:	6878      	ldr	r0, [r7, #4]
 800e256:	f000 f9b3 	bl	800e5c0 <USBH_ParseCfgDesc>
 800e25a:	4603      	mov	r3, r0
 800e25c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800e25e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e260:	4618      	mov	r0, r3
 800e262:	3710      	adds	r7, #16
 800e264:	46bd      	mov	sp, r7
 800e266:	bd80      	pop	{r7, pc}

0800e268 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 800e268:	b580      	push	{r7, lr}
 800e26a:	b088      	sub	sp, #32
 800e26c:	af02      	add	r7, sp, #8
 800e26e:	60f8      	str	r0, [r7, #12]
 800e270:	607a      	str	r2, [r7, #4]
 800e272:	461a      	mov	r2, r3
 800e274:	460b      	mov	r3, r1
 800e276:	72fb      	strb	r3, [r7, #11]
 800e278:	4613      	mov	r3, r2
 800e27a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 800e27c:	893b      	ldrh	r3, [r7, #8]
 800e27e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e282:	d802      	bhi.n	800e28a <USBH_Get_StringDesc+0x22>
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	2b00      	cmp	r3, #0
 800e288:	d101      	bne.n	800e28e <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800e28a:	2303      	movs	r3, #3
 800e28c:	e01c      	b.n	800e2c8 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 800e28e:	7afb      	ldrb	r3, [r7, #11]
 800e290:	b29b      	uxth	r3, r3
 800e292:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800e296:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800e298:	68fb      	ldr	r3, [r7, #12]
 800e29a:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800e29e:	893b      	ldrh	r3, [r7, #8]
 800e2a0:	9300      	str	r3, [sp, #0]
 800e2a2:	460b      	mov	r3, r1
 800e2a4:	2100      	movs	r1, #0
 800e2a6:	68f8      	ldr	r0, [r7, #12]
 800e2a8:	f000 f812 	bl	800e2d0 <USBH_GetDescriptor>
 800e2ac:	4603      	mov	r3, r0
 800e2ae:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800e2b0:	7dfb      	ldrb	r3, [r7, #23]
 800e2b2:	2b00      	cmp	r3, #0
 800e2b4:	d107      	bne.n	800e2c6 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800e2b6:	68fb      	ldr	r3, [r7, #12]
 800e2b8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800e2bc:	893a      	ldrh	r2, [r7, #8]
 800e2be:	6879      	ldr	r1, [r7, #4]
 800e2c0:	4618      	mov	r0, r3
 800e2c2:	f000 fb93 	bl	800e9ec <USBH_ParseStringDesc>
  }

  return status;
 800e2c6:	7dfb      	ldrb	r3, [r7, #23]
}
 800e2c8:	4618      	mov	r0, r3
 800e2ca:	3718      	adds	r7, #24
 800e2cc:	46bd      	mov	sp, r7
 800e2ce:	bd80      	pop	{r7, pc}

0800e2d0 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 800e2d0:	b580      	push	{r7, lr}
 800e2d2:	b084      	sub	sp, #16
 800e2d4:	af00      	add	r7, sp, #0
 800e2d6:	60f8      	str	r0, [r7, #12]
 800e2d8:	607b      	str	r3, [r7, #4]
 800e2da:	460b      	mov	r3, r1
 800e2dc:	72fb      	strb	r3, [r7, #11]
 800e2de:	4613      	mov	r3, r2
 800e2e0:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800e2e2:	68fb      	ldr	r3, [r7, #12]
 800e2e4:	789b      	ldrb	r3, [r3, #2]
 800e2e6:	2b01      	cmp	r3, #1
 800e2e8:	d11c      	bne.n	800e324 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800e2ea:	7afb      	ldrb	r3, [r7, #11]
 800e2ec:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800e2f0:	b2da      	uxtb	r2, r3
 800e2f2:	68fb      	ldr	r3, [r7, #12]
 800e2f4:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800e2f6:	68fb      	ldr	r3, [r7, #12]
 800e2f8:	2206      	movs	r2, #6
 800e2fa:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800e2fc:	68fb      	ldr	r3, [r7, #12]
 800e2fe:	893a      	ldrh	r2, [r7, #8]
 800e300:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800e302:	893b      	ldrh	r3, [r7, #8]
 800e304:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800e308:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e30c:	d104      	bne.n	800e318 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800e30e:	68fb      	ldr	r3, [r7, #12]
 800e310:	f240 4209 	movw	r2, #1033	; 0x409
 800e314:	829a      	strh	r2, [r3, #20]
 800e316:	e002      	b.n	800e31e <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800e318:	68fb      	ldr	r3, [r7, #12]
 800e31a:	2200      	movs	r2, #0
 800e31c:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800e31e:	68fb      	ldr	r3, [r7, #12]
 800e320:	8b3a      	ldrh	r2, [r7, #24]
 800e322:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800e324:	8b3b      	ldrh	r3, [r7, #24]
 800e326:	461a      	mov	r2, r3
 800e328:	6879      	ldr	r1, [r7, #4]
 800e32a:	68f8      	ldr	r0, [r7, #12]
 800e32c:	f000 fbac 	bl	800ea88 <USBH_CtlReq>
 800e330:	4603      	mov	r3, r0
}
 800e332:	4618      	mov	r0, r3
 800e334:	3710      	adds	r7, #16
 800e336:	46bd      	mov	sp, r7
 800e338:	bd80      	pop	{r7, pc}

0800e33a <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800e33a:	b580      	push	{r7, lr}
 800e33c:	b082      	sub	sp, #8
 800e33e:	af00      	add	r7, sp, #0
 800e340:	6078      	str	r0, [r7, #4]
 800e342:	460b      	mov	r3, r1
 800e344:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	789b      	ldrb	r3, [r3, #2]
 800e34a:	2b01      	cmp	r3, #1
 800e34c:	d10f      	bne.n	800e36e <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	2200      	movs	r2, #0
 800e352:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	2205      	movs	r2, #5
 800e358:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800e35a:	78fb      	ldrb	r3, [r7, #3]
 800e35c:	b29a      	uxth	r2, r3
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	2200      	movs	r2, #0
 800e366:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	2200      	movs	r2, #0
 800e36c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800e36e:	2200      	movs	r2, #0
 800e370:	2100      	movs	r1, #0
 800e372:	6878      	ldr	r0, [r7, #4]
 800e374:	f000 fb88 	bl	800ea88 <USBH_CtlReq>
 800e378:	4603      	mov	r3, r0
}
 800e37a:	4618      	mov	r0, r3
 800e37c:	3708      	adds	r7, #8
 800e37e:	46bd      	mov	sp, r7
 800e380:	bd80      	pop	{r7, pc}

0800e382 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800e382:	b580      	push	{r7, lr}
 800e384:	b082      	sub	sp, #8
 800e386:	af00      	add	r7, sp, #0
 800e388:	6078      	str	r0, [r7, #4]
 800e38a:	460b      	mov	r3, r1
 800e38c:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	789b      	ldrb	r3, [r3, #2]
 800e392:	2b01      	cmp	r3, #1
 800e394:	d10e      	bne.n	800e3b4 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	2200      	movs	r2, #0
 800e39a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	2209      	movs	r2, #9
 800e3a0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	887a      	ldrh	r2, [r7, #2]
 800e3a6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	2200      	movs	r2, #0
 800e3ac:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	2200      	movs	r2, #0
 800e3b2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800e3b4:	2200      	movs	r2, #0
 800e3b6:	2100      	movs	r1, #0
 800e3b8:	6878      	ldr	r0, [r7, #4]
 800e3ba:	f000 fb65 	bl	800ea88 <USBH_CtlReq>
 800e3be:	4603      	mov	r3, r0
}
 800e3c0:	4618      	mov	r0, r3
 800e3c2:	3708      	adds	r7, #8
 800e3c4:	46bd      	mov	sp, r7
 800e3c6:	bd80      	pop	{r7, pc}

0800e3c8 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800e3c8:	b580      	push	{r7, lr}
 800e3ca:	b082      	sub	sp, #8
 800e3cc:	af00      	add	r7, sp, #0
 800e3ce:	6078      	str	r0, [r7, #4]
 800e3d0:	460b      	mov	r3, r1
 800e3d2:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	789b      	ldrb	r3, [r3, #2]
 800e3d8:	2b01      	cmp	r3, #1
 800e3da:	d10f      	bne.n	800e3fc <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	2200      	movs	r2, #0
 800e3e0:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	2203      	movs	r2, #3
 800e3e6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800e3e8:	78fb      	ldrb	r3, [r7, #3]
 800e3ea:	b29a      	uxth	r2, r3
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	2200      	movs	r2, #0
 800e3f4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	2200      	movs	r2, #0
 800e3fa:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800e3fc:	2200      	movs	r2, #0
 800e3fe:	2100      	movs	r1, #0
 800e400:	6878      	ldr	r0, [r7, #4]
 800e402:	f000 fb41 	bl	800ea88 <USBH_CtlReq>
 800e406:	4603      	mov	r3, r0
}
 800e408:	4618      	mov	r0, r3
 800e40a:	3708      	adds	r7, #8
 800e40c:	46bd      	mov	sp, r7
 800e40e:	bd80      	pop	{r7, pc}

0800e410 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800e410:	b580      	push	{r7, lr}
 800e412:	b082      	sub	sp, #8
 800e414:	af00      	add	r7, sp, #0
 800e416:	6078      	str	r0, [r7, #4]
 800e418:	460b      	mov	r3, r1
 800e41a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	789b      	ldrb	r3, [r3, #2]
 800e420:	2b01      	cmp	r3, #1
 800e422:	d10f      	bne.n	800e444 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	2202      	movs	r2, #2
 800e428:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	2201      	movs	r2, #1
 800e42e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	2200      	movs	r2, #0
 800e434:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800e436:	78fb      	ldrb	r3, [r7, #3]
 800e438:	b29a      	uxth	r2, r3
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	2200      	movs	r2, #0
 800e442:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800e444:	2200      	movs	r2, #0
 800e446:	2100      	movs	r1, #0
 800e448:	6878      	ldr	r0, [r7, #4]
 800e44a:	f000 fb1d 	bl	800ea88 <USBH_CtlReq>
 800e44e:	4603      	mov	r3, r0
}
 800e450:	4618      	mov	r0, r3
 800e452:	3708      	adds	r7, #8
 800e454:	46bd      	mov	sp, r7
 800e456:	bd80      	pop	{r7, pc}

0800e458 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800e458:	b480      	push	{r7}
 800e45a:	b087      	sub	sp, #28
 800e45c:	af00      	add	r7, sp, #0
 800e45e:	60f8      	str	r0, [r7, #12]
 800e460:	60b9      	str	r1, [r7, #8]
 800e462:	4613      	mov	r3, r2
 800e464:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800e466:	68fb      	ldr	r3, [r7, #12]
 800e468:	f203 3326 	addw	r3, r3, #806	; 0x326
 800e46c:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 800e46e:	2300      	movs	r3, #0
 800e470:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 800e472:	68bb      	ldr	r3, [r7, #8]
 800e474:	2b00      	cmp	r3, #0
 800e476:	d101      	bne.n	800e47c <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 800e478:	2302      	movs	r3, #2
 800e47a:	e098      	b.n	800e5ae <USBH_ParseDevDesc+0x156>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 800e47c:	68bb      	ldr	r3, [r7, #8]
 800e47e:	781a      	ldrb	r2, [r3, #0]
 800e480:	693b      	ldr	r3, [r7, #16]
 800e482:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 800e484:	68bb      	ldr	r3, [r7, #8]
 800e486:	785a      	ldrb	r2, [r3, #1]
 800e488:	693b      	ldr	r3, [r7, #16]
 800e48a:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 800e48c:	68bb      	ldr	r3, [r7, #8]
 800e48e:	3302      	adds	r3, #2
 800e490:	781b      	ldrb	r3, [r3, #0]
 800e492:	b29a      	uxth	r2, r3
 800e494:	68bb      	ldr	r3, [r7, #8]
 800e496:	3303      	adds	r3, #3
 800e498:	781b      	ldrb	r3, [r3, #0]
 800e49a:	b29b      	uxth	r3, r3
 800e49c:	021b      	lsls	r3, r3, #8
 800e49e:	b29b      	uxth	r3, r3
 800e4a0:	4313      	orrs	r3, r2
 800e4a2:	b29a      	uxth	r2, r3
 800e4a4:	693b      	ldr	r3, [r7, #16]
 800e4a6:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 800e4a8:	68bb      	ldr	r3, [r7, #8]
 800e4aa:	791a      	ldrb	r2, [r3, #4]
 800e4ac:	693b      	ldr	r3, [r7, #16]
 800e4ae:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 800e4b0:	68bb      	ldr	r3, [r7, #8]
 800e4b2:	795a      	ldrb	r2, [r3, #5]
 800e4b4:	693b      	ldr	r3, [r7, #16]
 800e4b6:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 800e4b8:	68bb      	ldr	r3, [r7, #8]
 800e4ba:	799a      	ldrb	r2, [r3, #6]
 800e4bc:	693b      	ldr	r3, [r7, #16]
 800e4be:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 800e4c0:	68bb      	ldr	r3, [r7, #8]
 800e4c2:	79da      	ldrb	r2, [r3, #7]
 800e4c4:	693b      	ldr	r3, [r7, #16]
 800e4c6:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800e4c8:	68fb      	ldr	r3, [r7, #12]
 800e4ca:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	d004      	beq.n	800e4dc <USBH_ParseDevDesc+0x84>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 800e4d2:	68fb      	ldr	r3, [r7, #12]
 800e4d4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800e4d8:	2b01      	cmp	r3, #1
 800e4da:	d11b      	bne.n	800e514 <USBH_ParseDevDesc+0xbc>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 800e4dc:	693b      	ldr	r3, [r7, #16]
 800e4de:	79db      	ldrb	r3, [r3, #7]
 800e4e0:	2b20      	cmp	r3, #32
 800e4e2:	dc0f      	bgt.n	800e504 <USBH_ParseDevDesc+0xac>
 800e4e4:	2b08      	cmp	r3, #8
 800e4e6:	db0f      	blt.n	800e508 <USBH_ParseDevDesc+0xb0>
 800e4e8:	3b08      	subs	r3, #8
 800e4ea:	4a34      	ldr	r2, [pc, #208]	; (800e5bc <USBH_ParseDevDesc+0x164>)
 800e4ec:	fa22 f303 	lsr.w	r3, r2, r3
 800e4f0:	f003 0301 	and.w	r3, r3, #1
 800e4f4:	2b00      	cmp	r3, #0
 800e4f6:	bf14      	ite	ne
 800e4f8:	2301      	movne	r3, #1
 800e4fa:	2300      	moveq	r3, #0
 800e4fc:	b2db      	uxtb	r3, r3
 800e4fe:	2b00      	cmp	r3, #0
 800e500:	d106      	bne.n	800e510 <USBH_ParseDevDesc+0xb8>
 800e502:	e001      	b.n	800e508 <USBH_ParseDevDesc+0xb0>
 800e504:	2b40      	cmp	r3, #64	; 0x40
 800e506:	d003      	beq.n	800e510 <USBH_ParseDevDesc+0xb8>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 800e508:	693b      	ldr	r3, [r7, #16]
 800e50a:	2208      	movs	r2, #8
 800e50c:	71da      	strb	r2, [r3, #7]
        break;
 800e50e:	e000      	b.n	800e512 <USBH_ParseDevDesc+0xba>
        break;
 800e510:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 800e512:	e00e      	b.n	800e532 <USBH_ParseDevDesc+0xda>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800e514:	68fb      	ldr	r3, [r7, #12]
 800e516:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800e51a:	2b02      	cmp	r3, #2
 800e51c:	d107      	bne.n	800e52e <USBH_ParseDevDesc+0xd6>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 800e51e:	693b      	ldr	r3, [r7, #16]
 800e520:	79db      	ldrb	r3, [r3, #7]
 800e522:	2b08      	cmp	r3, #8
 800e524:	d005      	beq.n	800e532 <USBH_ParseDevDesc+0xda>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 800e526:	693b      	ldr	r3, [r7, #16]
 800e528:	2208      	movs	r2, #8
 800e52a:	71da      	strb	r2, [r3, #7]
 800e52c:	e001      	b.n	800e532 <USBH_ParseDevDesc+0xda>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800e52e:	2303      	movs	r3, #3
 800e530:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 800e532:	88fb      	ldrh	r3, [r7, #6]
 800e534:	2b08      	cmp	r3, #8
 800e536:	d939      	bls.n	800e5ac <USBH_ParseDevDesc+0x154>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800e538:	68bb      	ldr	r3, [r7, #8]
 800e53a:	3308      	adds	r3, #8
 800e53c:	781b      	ldrb	r3, [r3, #0]
 800e53e:	b29a      	uxth	r2, r3
 800e540:	68bb      	ldr	r3, [r7, #8]
 800e542:	3309      	adds	r3, #9
 800e544:	781b      	ldrb	r3, [r3, #0]
 800e546:	b29b      	uxth	r3, r3
 800e548:	021b      	lsls	r3, r3, #8
 800e54a:	b29b      	uxth	r3, r3
 800e54c:	4313      	orrs	r3, r2
 800e54e:	b29a      	uxth	r2, r3
 800e550:	693b      	ldr	r3, [r7, #16]
 800e552:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 800e554:	68bb      	ldr	r3, [r7, #8]
 800e556:	330a      	adds	r3, #10
 800e558:	781b      	ldrb	r3, [r3, #0]
 800e55a:	b29a      	uxth	r2, r3
 800e55c:	68bb      	ldr	r3, [r7, #8]
 800e55e:	330b      	adds	r3, #11
 800e560:	781b      	ldrb	r3, [r3, #0]
 800e562:	b29b      	uxth	r3, r3
 800e564:	021b      	lsls	r3, r3, #8
 800e566:	b29b      	uxth	r3, r3
 800e568:	4313      	orrs	r3, r2
 800e56a:	b29a      	uxth	r2, r3
 800e56c:	693b      	ldr	r3, [r7, #16]
 800e56e:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800e570:	68bb      	ldr	r3, [r7, #8]
 800e572:	330c      	adds	r3, #12
 800e574:	781b      	ldrb	r3, [r3, #0]
 800e576:	b29a      	uxth	r2, r3
 800e578:	68bb      	ldr	r3, [r7, #8]
 800e57a:	330d      	adds	r3, #13
 800e57c:	781b      	ldrb	r3, [r3, #0]
 800e57e:	b29b      	uxth	r3, r3
 800e580:	021b      	lsls	r3, r3, #8
 800e582:	b29b      	uxth	r3, r3
 800e584:	4313      	orrs	r3, r2
 800e586:	b29a      	uxth	r2, r3
 800e588:	693b      	ldr	r3, [r7, #16]
 800e58a:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 800e58c:	68bb      	ldr	r3, [r7, #8]
 800e58e:	7b9a      	ldrb	r2, [r3, #14]
 800e590:	693b      	ldr	r3, [r7, #16]
 800e592:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 800e594:	68bb      	ldr	r3, [r7, #8]
 800e596:	7bda      	ldrb	r2, [r3, #15]
 800e598:	693b      	ldr	r3, [r7, #16]
 800e59a:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 800e59c:	68bb      	ldr	r3, [r7, #8]
 800e59e:	7c1a      	ldrb	r2, [r3, #16]
 800e5a0:	693b      	ldr	r3, [r7, #16]
 800e5a2:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 800e5a4:	68bb      	ldr	r3, [r7, #8]
 800e5a6:	7c5a      	ldrb	r2, [r3, #17]
 800e5a8:	693b      	ldr	r3, [r7, #16]
 800e5aa:	745a      	strb	r2, [r3, #17]
  }

  return status;
 800e5ac:	7dfb      	ldrb	r3, [r7, #23]
}
 800e5ae:	4618      	mov	r0, r3
 800e5b0:	371c      	adds	r7, #28
 800e5b2:	46bd      	mov	sp, r7
 800e5b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5b8:	4770      	bx	lr
 800e5ba:	bf00      	nop
 800e5bc:	01000101 	.word	0x01000101

0800e5c0 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800e5c0:	b580      	push	{r7, lr}
 800e5c2:	b08c      	sub	sp, #48	; 0x30
 800e5c4:	af00      	add	r7, sp, #0
 800e5c6:	60f8      	str	r0, [r7, #12]
 800e5c8:	60b9      	str	r1, [r7, #8]
 800e5ca:	4613      	mov	r3, r2
 800e5cc:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800e5ce:	68fb      	ldr	r3, [r7, #12]
 800e5d0:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800e5d4:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800e5d6:	2300      	movs	r3, #0
 800e5d8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800e5dc:	2300      	movs	r3, #0
 800e5de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 800e5e2:	2300      	movs	r3, #0
 800e5e4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  if (buf == NULL)
 800e5e8:	68bb      	ldr	r3, [r7, #8]
 800e5ea:	2b00      	cmp	r3, #0
 800e5ec:	d101      	bne.n	800e5f2 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 800e5ee:	2302      	movs	r3, #2
 800e5f0:	e0db      	b.n	800e7aa <USBH_ParseCfgDesc+0x1ea>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800e5f2:	68bb      	ldr	r3, [r7, #8]
 800e5f4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 800e5f6:	68bb      	ldr	r3, [r7, #8]
 800e5f8:	781a      	ldrb	r2, [r3, #0]
 800e5fa:	6a3b      	ldr	r3, [r7, #32]
 800e5fc:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 800e5fe:	68bb      	ldr	r3, [r7, #8]
 800e600:	785a      	ldrb	r2, [r3, #1]
 800e602:	6a3b      	ldr	r3, [r7, #32]
 800e604:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800e606:	68bb      	ldr	r3, [r7, #8]
 800e608:	3302      	adds	r3, #2
 800e60a:	781b      	ldrb	r3, [r3, #0]
 800e60c:	b29a      	uxth	r2, r3
 800e60e:	68bb      	ldr	r3, [r7, #8]
 800e610:	3303      	adds	r3, #3
 800e612:	781b      	ldrb	r3, [r3, #0]
 800e614:	b29b      	uxth	r3, r3
 800e616:	021b      	lsls	r3, r3, #8
 800e618:	b29b      	uxth	r3, r3
 800e61a:	4313      	orrs	r3, r2
 800e61c:	b29b      	uxth	r3, r3
 800e61e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e622:	bf28      	it	cs
 800e624:	f44f 7380 	movcs.w	r3, #256	; 0x100
 800e628:	b29a      	uxth	r2, r3
 800e62a:	6a3b      	ldr	r3, [r7, #32]
 800e62c:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 800e62e:	68bb      	ldr	r3, [r7, #8]
 800e630:	791a      	ldrb	r2, [r3, #4]
 800e632:	6a3b      	ldr	r3, [r7, #32]
 800e634:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 800e636:	68bb      	ldr	r3, [r7, #8]
 800e638:	795a      	ldrb	r2, [r3, #5]
 800e63a:	6a3b      	ldr	r3, [r7, #32]
 800e63c:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 800e63e:	68bb      	ldr	r3, [r7, #8]
 800e640:	799a      	ldrb	r2, [r3, #6]
 800e642:	6a3b      	ldr	r3, [r7, #32]
 800e644:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 800e646:	68bb      	ldr	r3, [r7, #8]
 800e648:	79da      	ldrb	r2, [r3, #7]
 800e64a:	6a3b      	ldr	r3, [r7, #32]
 800e64c:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 800e64e:	68bb      	ldr	r3, [r7, #8]
 800e650:	7a1a      	ldrb	r2, [r3, #8]
 800e652:	6a3b      	ldr	r3, [r7, #32]
 800e654:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength != USB_CONFIGURATION_DESC_SIZE)
 800e656:	6a3b      	ldr	r3, [r7, #32]
 800e658:	781b      	ldrb	r3, [r3, #0]
 800e65a:	2b09      	cmp	r3, #9
 800e65c:	d002      	beq.n	800e664 <USBH_ParseCfgDesc+0xa4>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800e65e:	6a3b      	ldr	r3, [r7, #32]
 800e660:	2209      	movs	r2, #9
 800e662:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800e664:	88fb      	ldrh	r3, [r7, #6]
 800e666:	2b09      	cmp	r3, #9
 800e668:	f240 809d 	bls.w	800e7a6 <USBH_ParseCfgDesc+0x1e6>
  {
    ptr = USB_LEN_CFG_DESC;
 800e66c:	2309      	movs	r3, #9
 800e66e:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800e670:	2300      	movs	r3, #0
 800e672:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800e674:	e081      	b.n	800e77a <USBH_ParseCfgDesc+0x1ba>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800e676:	f107 0316 	add.w	r3, r7, #22
 800e67a:	4619      	mov	r1, r3
 800e67c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e67e:	f000 f9e8 	bl	800ea52 <USBH_GetNextDesc>
 800e682:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800e684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e686:	785b      	ldrb	r3, [r3, #1]
 800e688:	2b04      	cmp	r3, #4
 800e68a:	d176      	bne.n	800e77a <USBH_ParseCfgDesc+0x1ba>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800e68c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e68e:	781b      	ldrb	r3, [r3, #0]
 800e690:	2b09      	cmp	r3, #9
 800e692:	d002      	beq.n	800e69a <USBH_ParseCfgDesc+0xda>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800e694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e696:	2209      	movs	r2, #9
 800e698:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800e69a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e69e:	221a      	movs	r2, #26
 800e6a0:	fb02 f303 	mul.w	r3, r2, r3
 800e6a4:	3308      	adds	r3, #8
 800e6a6:	6a3a      	ldr	r2, [r7, #32]
 800e6a8:	4413      	add	r3, r2
 800e6aa:	3302      	adds	r3, #2
 800e6ac:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800e6ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e6b0:	69f8      	ldr	r0, [r7, #28]
 800e6b2:	f000 f87e 	bl	800e7b2 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800e6b6:	2300      	movs	r3, #0
 800e6b8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800e6bc:	2300      	movs	r3, #0
 800e6be:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800e6c0:	e043      	b.n	800e74a <USBH_ParseCfgDesc+0x18a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800e6c2:	f107 0316 	add.w	r3, r7, #22
 800e6c6:	4619      	mov	r1, r3
 800e6c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e6ca:	f000 f9c2 	bl	800ea52 <USBH_GetNextDesc>
 800e6ce:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800e6d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6d2:	785b      	ldrb	r3, [r3, #1]
 800e6d4:	2b05      	cmp	r3, #5
 800e6d6:	d138      	bne.n	800e74a <USBH_ParseCfgDesc+0x18a>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 800e6d8:	69fb      	ldr	r3, [r7, #28]
 800e6da:	795b      	ldrb	r3, [r3, #5]
 800e6dc:	2b01      	cmp	r3, #1
 800e6de:	d113      	bne.n	800e708 <USBH_ParseCfgDesc+0x148>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800e6e0:	69fb      	ldr	r3, [r7, #28]
 800e6e2:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 800e6e4:	2b02      	cmp	r3, #2
 800e6e6:	d003      	beq.n	800e6f0 <USBH_ParseCfgDesc+0x130>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800e6e8:	69fb      	ldr	r3, [r7, #28]
 800e6ea:	799b      	ldrb	r3, [r3, #6]
 800e6ec:	2b03      	cmp	r3, #3
 800e6ee:	d10b      	bne.n	800e708 <USBH_ParseCfgDesc+0x148>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800e6f0:	69fb      	ldr	r3, [r7, #28]
 800e6f2:	79db      	ldrb	r3, [r3, #7]
 800e6f4:	2b00      	cmp	r3, #0
 800e6f6:	d10b      	bne.n	800e710 <USBH_ParseCfgDesc+0x150>
 800e6f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6fa:	781b      	ldrb	r3, [r3, #0]
 800e6fc:	2b09      	cmp	r3, #9
 800e6fe:	d007      	beq.n	800e710 <USBH_ParseCfgDesc+0x150>
              {
                pdesc->bLength = 0x09U;
 800e700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e702:	2209      	movs	r2, #9
 800e704:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800e706:	e003      	b.n	800e710 <USBH_ParseCfgDesc+0x150>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800e708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e70a:	2207      	movs	r2, #7
 800e70c:	701a      	strb	r2, [r3, #0]
 800e70e:	e000      	b.n	800e712 <USBH_ParseCfgDesc+0x152>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800e710:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800e712:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e716:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800e71a:	3201      	adds	r2, #1
 800e71c:	00d2      	lsls	r2, r2, #3
 800e71e:	211a      	movs	r1, #26
 800e720:	fb01 f303 	mul.w	r3, r1, r3
 800e724:	4413      	add	r3, r2
 800e726:	3308      	adds	r3, #8
 800e728:	6a3a      	ldr	r2, [r7, #32]
 800e72a:	4413      	add	r3, r2
 800e72c:	3304      	adds	r3, #4
 800e72e:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800e730:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e732:	69b9      	ldr	r1, [r7, #24]
 800e734:	68f8      	ldr	r0, [r7, #12]
 800e736:	f000 f870 	bl	800e81a <USBH_ParseEPDesc>
 800e73a:	4603      	mov	r3, r0
 800e73c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 800e740:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e744:	3301      	adds	r3, #1
 800e746:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800e74a:	69fb      	ldr	r3, [r7, #28]
 800e74c:	791b      	ldrb	r3, [r3, #4]
 800e74e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800e752:	429a      	cmp	r2, r3
 800e754:	d204      	bcs.n	800e760 <USBH_ParseCfgDesc+0x1a0>
 800e756:	6a3b      	ldr	r3, [r7, #32]
 800e758:	885a      	ldrh	r2, [r3, #2]
 800e75a:	8afb      	ldrh	r3, [r7, #22]
 800e75c:	429a      	cmp	r2, r3
 800e75e:	d8b0      	bhi.n	800e6c2 <USBH_ParseCfgDesc+0x102>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800e760:	69fb      	ldr	r3, [r7, #28]
 800e762:	791b      	ldrb	r3, [r3, #4]
 800e764:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800e768:	429a      	cmp	r2, r3
 800e76a:	d201      	bcs.n	800e770 <USBH_ParseCfgDesc+0x1b0>
        {
          return USBH_NOT_SUPPORTED;
 800e76c:	2303      	movs	r3, #3
 800e76e:	e01c      	b.n	800e7aa <USBH_ParseCfgDesc+0x1ea>
        }

        if_ix++;
 800e770:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e774:	3301      	adds	r3, #1
 800e776:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800e77a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e77e:	2b01      	cmp	r3, #1
 800e780:	d805      	bhi.n	800e78e <USBH_ParseCfgDesc+0x1ce>
 800e782:	6a3b      	ldr	r3, [r7, #32]
 800e784:	885a      	ldrh	r2, [r3, #2]
 800e786:	8afb      	ldrh	r3, [r7, #22]
 800e788:	429a      	cmp	r2, r3
 800e78a:	f63f af74 	bhi.w	800e676 <USBH_ParseCfgDesc+0xb6>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800e78e:	6a3b      	ldr	r3, [r7, #32]
 800e790:	791b      	ldrb	r3, [r3, #4]
 800e792:	2b02      	cmp	r3, #2
 800e794:	bf28      	it	cs
 800e796:	2302      	movcs	r3, #2
 800e798:	b2db      	uxtb	r3, r3
 800e79a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800e79e:	429a      	cmp	r2, r3
 800e7a0:	d201      	bcs.n	800e7a6 <USBH_ParseCfgDesc+0x1e6>
    {
      return USBH_NOT_SUPPORTED;
 800e7a2:	2303      	movs	r3, #3
 800e7a4:	e001      	b.n	800e7aa <USBH_ParseCfgDesc+0x1ea>
    }
  }

  return status;
 800e7a6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800e7aa:	4618      	mov	r0, r3
 800e7ac:	3730      	adds	r7, #48	; 0x30
 800e7ae:	46bd      	mov	sp, r7
 800e7b0:	bd80      	pop	{r7, pc}

0800e7b2 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 800e7b2:	b480      	push	{r7}
 800e7b4:	b083      	sub	sp, #12
 800e7b6:	af00      	add	r7, sp, #0
 800e7b8:	6078      	str	r0, [r7, #4]
 800e7ba:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 800e7bc:	683b      	ldr	r3, [r7, #0]
 800e7be:	781a      	ldrb	r2, [r3, #0]
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 800e7c4:	683b      	ldr	r3, [r7, #0]
 800e7c6:	785a      	ldrb	r2, [r3, #1]
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 800e7cc:	683b      	ldr	r3, [r7, #0]
 800e7ce:	789a      	ldrb	r2, [r3, #2]
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 800e7d4:	683b      	ldr	r3, [r7, #0]
 800e7d6:	78da      	ldrb	r2, [r3, #3]
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 800e7dc:	683b      	ldr	r3, [r7, #0]
 800e7de:	3304      	adds	r3, #4
 800e7e0:	781b      	ldrb	r3, [r3, #0]
 800e7e2:	2b02      	cmp	r3, #2
 800e7e4:	bf28      	it	cs
 800e7e6:	2302      	movcs	r3, #2
 800e7e8:	b2da      	uxtb	r2, r3
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 800e7ee:	683b      	ldr	r3, [r7, #0]
 800e7f0:	795a      	ldrb	r2, [r3, #5]
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 800e7f6:	683b      	ldr	r3, [r7, #0]
 800e7f8:	799a      	ldrb	r2, [r3, #6]
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 800e7fe:	683b      	ldr	r3, [r7, #0]
 800e800:	79da      	ldrb	r2, [r3, #7]
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 800e806:	683b      	ldr	r3, [r7, #0]
 800e808:	7a1a      	ldrb	r2, [r3, #8]
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	721a      	strb	r2, [r3, #8]
}
 800e80e:	bf00      	nop
 800e810:	370c      	adds	r7, #12
 800e812:	46bd      	mov	sp, r7
 800e814:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e818:	4770      	bx	lr

0800e81a <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 800e81a:	b480      	push	{r7}
 800e81c:	b087      	sub	sp, #28
 800e81e:	af00      	add	r7, sp, #0
 800e820:	60f8      	str	r0, [r7, #12]
 800e822:	60b9      	str	r1, [r7, #8]
 800e824:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800e826:	2300      	movs	r3, #0
 800e828:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	781a      	ldrb	r2, [r3, #0]
 800e82e:	68bb      	ldr	r3, [r7, #8]
 800e830:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	785a      	ldrb	r2, [r3, #1]
 800e836:	68bb      	ldr	r3, [r7, #8]
 800e838:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	789a      	ldrb	r2, [r3, #2]
 800e83e:	68bb      	ldr	r3, [r7, #8]
 800e840:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	78da      	ldrb	r2, [r3, #3]
 800e846:	68bb      	ldr	r3, [r7, #8]
 800e848:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	3304      	adds	r3, #4
 800e84e:	781b      	ldrb	r3, [r3, #0]
 800e850:	b29a      	uxth	r2, r3
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	3305      	adds	r3, #5
 800e856:	781b      	ldrb	r3, [r3, #0]
 800e858:	b29b      	uxth	r3, r3
 800e85a:	021b      	lsls	r3, r3, #8
 800e85c:	b29b      	uxth	r3, r3
 800e85e:	4313      	orrs	r3, r2
 800e860:	b29a      	uxth	r2, r3
 800e862:	68bb      	ldr	r3, [r7, #8]
 800e864:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	799a      	ldrb	r2, [r3, #6]
 800e86a:	68bb      	ldr	r3, [r7, #8]
 800e86c:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800e86e:	68bb      	ldr	r3, [r7, #8]
 800e870:	889b      	ldrh	r3, [r3, #4]
 800e872:	2b00      	cmp	r3, #0
 800e874:	d009      	beq.n	800e88a <USBH_ParseEPDesc+0x70>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800e876:	68bb      	ldr	r3, [r7, #8]
 800e878:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800e87a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e87e:	d804      	bhi.n	800e88a <USBH_ParseEPDesc+0x70>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 800e880:	68bb      	ldr	r3, [r7, #8]
 800e882:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800e884:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e888:	d901      	bls.n	800e88e <USBH_ParseEPDesc+0x74>
  {
    status = USBH_NOT_SUPPORTED;
 800e88a:	2303      	movs	r3, #3
 800e88c:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800e88e:	68fb      	ldr	r3, [r7, #12]
 800e890:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800e894:	2b00      	cmp	r3, #0
 800e896:	d136      	bne.n	800e906 <USBH_ParseEPDesc+0xec>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 800e898:	68bb      	ldr	r3, [r7, #8]
 800e89a:	78db      	ldrb	r3, [r3, #3]
 800e89c:	f003 0303 	and.w	r3, r3, #3
 800e8a0:	2b02      	cmp	r3, #2
 800e8a2:	d108      	bne.n	800e8b6 <USBH_ParseEPDesc+0x9c>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 800e8a4:	68bb      	ldr	r3, [r7, #8]
 800e8a6:	889b      	ldrh	r3, [r3, #4]
 800e8a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e8ac:	f240 8097 	bls.w	800e9de <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800e8b0:	2303      	movs	r3, #3
 800e8b2:	75fb      	strb	r3, [r7, #23]
 800e8b4:	e093      	b.n	800e9de <USBH_ParseEPDesc+0x1c4>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800e8b6:	68bb      	ldr	r3, [r7, #8]
 800e8b8:	78db      	ldrb	r3, [r3, #3]
 800e8ba:	f003 0303 	and.w	r3, r3, #3
 800e8be:	2b00      	cmp	r3, #0
 800e8c0:	d107      	bne.n	800e8d2 <USBH_ParseEPDesc+0xb8>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800e8c2:	68bb      	ldr	r3, [r7, #8]
 800e8c4:	889b      	ldrh	r3, [r3, #4]
 800e8c6:	2b40      	cmp	r3, #64	; 0x40
 800e8c8:	f240 8089 	bls.w	800e9de <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800e8cc:	2303      	movs	r3, #3
 800e8ce:	75fb      	strb	r3, [r7, #23]
 800e8d0:	e085      	b.n	800e9de <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800e8d2:	68bb      	ldr	r3, [r7, #8]
 800e8d4:	78db      	ldrb	r3, [r3, #3]
 800e8d6:	f003 0303 	and.w	r3, r3, #3
 800e8da:	2b01      	cmp	r3, #1
 800e8dc:	d005      	beq.n	800e8ea <USBH_ParseEPDesc+0xd0>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800e8de:	68bb      	ldr	r3, [r7, #8]
 800e8e0:	78db      	ldrb	r3, [r3, #3]
 800e8e2:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800e8e6:	2b03      	cmp	r3, #3
 800e8e8:	d10a      	bne.n	800e900 <USBH_ParseEPDesc+0xe6>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800e8ea:	68bb      	ldr	r3, [r7, #8]
 800e8ec:	799b      	ldrb	r3, [r3, #6]
 800e8ee:	2b00      	cmp	r3, #0
 800e8f0:	d003      	beq.n	800e8fa <USBH_ParseEPDesc+0xe0>
 800e8f2:	68bb      	ldr	r3, [r7, #8]
 800e8f4:	799b      	ldrb	r3, [r3, #6]
 800e8f6:	2b10      	cmp	r3, #16
 800e8f8:	d970      	bls.n	800e9dc <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800e8fa:	2303      	movs	r3, #3
 800e8fc:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800e8fe:	e06d      	b.n	800e9dc <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800e900:	2303      	movs	r3, #3
 800e902:	75fb      	strb	r3, [r7, #23]
 800e904:	e06b      	b.n	800e9de <USBH_ParseEPDesc+0x1c4>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 800e906:	68fb      	ldr	r3, [r7, #12]
 800e908:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800e90c:	2b01      	cmp	r3, #1
 800e90e:	d13c      	bne.n	800e98a <USBH_ParseEPDesc+0x170>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800e910:	68bb      	ldr	r3, [r7, #8]
 800e912:	78db      	ldrb	r3, [r3, #3]
 800e914:	f003 0303 	and.w	r3, r3, #3
 800e918:	2b02      	cmp	r3, #2
 800e91a:	d005      	beq.n	800e928 <USBH_ParseEPDesc+0x10e>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 800e91c:	68bb      	ldr	r3, [r7, #8]
 800e91e:	78db      	ldrb	r3, [r3, #3]
 800e920:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800e924:	2b00      	cmp	r3, #0
 800e926:	d106      	bne.n	800e936 <USBH_ParseEPDesc+0x11c>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800e928:	68bb      	ldr	r3, [r7, #8]
 800e92a:	889b      	ldrh	r3, [r3, #4]
 800e92c:	2b40      	cmp	r3, #64	; 0x40
 800e92e:	d956      	bls.n	800e9de <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800e930:	2303      	movs	r3, #3
 800e932:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 800e934:	e053      	b.n	800e9de <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800e936:	68bb      	ldr	r3, [r7, #8]
 800e938:	78db      	ldrb	r3, [r3, #3]
 800e93a:	f003 0303 	and.w	r3, r3, #3
 800e93e:	2b01      	cmp	r3, #1
 800e940:	d10e      	bne.n	800e960 <USBH_ParseEPDesc+0x146>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800e942:	68bb      	ldr	r3, [r7, #8]
 800e944:	799b      	ldrb	r3, [r3, #6]
 800e946:	2b00      	cmp	r3, #0
 800e948:	d007      	beq.n	800e95a <USBH_ParseEPDesc+0x140>
          (ep_descriptor->bInterval > 0x10U) ||
 800e94a:	68bb      	ldr	r3, [r7, #8]
 800e94c:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 800e94e:	2b10      	cmp	r3, #16
 800e950:	d803      	bhi.n	800e95a <USBH_ParseEPDesc+0x140>
          (ep_descriptor->wMaxPacketSize > 64U))
 800e952:	68bb      	ldr	r3, [r7, #8]
 800e954:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 800e956:	2b40      	cmp	r3, #64	; 0x40
 800e958:	d941      	bls.n	800e9de <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800e95a:	2303      	movs	r3, #3
 800e95c:	75fb      	strb	r3, [r7, #23]
 800e95e:	e03e      	b.n	800e9de <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800e960:	68bb      	ldr	r3, [r7, #8]
 800e962:	78db      	ldrb	r3, [r3, #3]
 800e964:	f003 0303 	and.w	r3, r3, #3
 800e968:	2b03      	cmp	r3, #3
 800e96a:	d10b      	bne.n	800e984 <USBH_ParseEPDesc+0x16a>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 800e96c:	68bb      	ldr	r3, [r7, #8]
 800e96e:	799b      	ldrb	r3, [r3, #6]
 800e970:	2b00      	cmp	r3, #0
 800e972:	d004      	beq.n	800e97e <USBH_ParseEPDesc+0x164>
 800e974:	68bb      	ldr	r3, [r7, #8]
 800e976:	889b      	ldrh	r3, [r3, #4]
 800e978:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e97c:	d32f      	bcc.n	800e9de <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800e97e:	2303      	movs	r3, #3
 800e980:	75fb      	strb	r3, [r7, #23]
 800e982:	e02c      	b.n	800e9de <USBH_ParseEPDesc+0x1c4>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800e984:	2303      	movs	r3, #3
 800e986:	75fb      	strb	r3, [r7, #23]
 800e988:	e029      	b.n	800e9de <USBH_ParseEPDesc+0x1c4>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800e98a:	68fb      	ldr	r3, [r7, #12]
 800e98c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800e990:	2b02      	cmp	r3, #2
 800e992:	d120      	bne.n	800e9d6 <USBH_ParseEPDesc+0x1bc>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800e994:	68bb      	ldr	r3, [r7, #8]
 800e996:	78db      	ldrb	r3, [r3, #3]
 800e998:	f003 0303 	and.w	r3, r3, #3
 800e99c:	2b00      	cmp	r3, #0
 800e99e:	d106      	bne.n	800e9ae <USBH_ParseEPDesc+0x194>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 800e9a0:	68bb      	ldr	r3, [r7, #8]
 800e9a2:	889b      	ldrh	r3, [r3, #4]
 800e9a4:	2b08      	cmp	r3, #8
 800e9a6:	d01a      	beq.n	800e9de <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800e9a8:	2303      	movs	r3, #3
 800e9aa:	75fb      	strb	r3, [r7, #23]
 800e9ac:	e017      	b.n	800e9de <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800e9ae:	68bb      	ldr	r3, [r7, #8]
 800e9b0:	78db      	ldrb	r3, [r3, #3]
 800e9b2:	f003 0303 	and.w	r3, r3, #3
 800e9b6:	2b03      	cmp	r3, #3
 800e9b8:	d10a      	bne.n	800e9d0 <USBH_ParseEPDesc+0x1b6>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 800e9ba:	68bb      	ldr	r3, [r7, #8]
 800e9bc:	799b      	ldrb	r3, [r3, #6]
 800e9be:	2b00      	cmp	r3, #0
 800e9c0:	d003      	beq.n	800e9ca <USBH_ParseEPDesc+0x1b0>
 800e9c2:	68bb      	ldr	r3, [r7, #8]
 800e9c4:	889b      	ldrh	r3, [r3, #4]
 800e9c6:	2b08      	cmp	r3, #8
 800e9c8:	d909      	bls.n	800e9de <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800e9ca:	2303      	movs	r3, #3
 800e9cc:	75fb      	strb	r3, [r7, #23]
 800e9ce:	e006      	b.n	800e9de <USBH_ParseEPDesc+0x1c4>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800e9d0:	2303      	movs	r3, #3
 800e9d2:	75fb      	strb	r3, [r7, #23]
 800e9d4:	e003      	b.n	800e9de <USBH_ParseEPDesc+0x1c4>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800e9d6:	2303      	movs	r3, #3
 800e9d8:	75fb      	strb	r3, [r7, #23]
 800e9da:	e000      	b.n	800e9de <USBH_ParseEPDesc+0x1c4>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800e9dc:	bf00      	nop
  }

  return status;
 800e9de:	7dfb      	ldrb	r3, [r7, #23]
}
 800e9e0:	4618      	mov	r0, r3
 800e9e2:	371c      	adds	r7, #28
 800e9e4:	46bd      	mov	sp, r7
 800e9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9ea:	4770      	bx	lr

0800e9ec <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800e9ec:	b480      	push	{r7}
 800e9ee:	b087      	sub	sp, #28
 800e9f0:	af00      	add	r7, sp, #0
 800e9f2:	60f8      	str	r0, [r7, #12]
 800e9f4:	60b9      	str	r1, [r7, #8]
 800e9f6:	4613      	mov	r3, r2
 800e9f8:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800e9fa:	68fb      	ldr	r3, [r7, #12]
 800e9fc:	3301      	adds	r3, #1
 800e9fe:	781b      	ldrb	r3, [r3, #0]
 800ea00:	2b03      	cmp	r3, #3
 800ea02:	d120      	bne.n	800ea46 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800ea04:	68fb      	ldr	r3, [r7, #12]
 800ea06:	781b      	ldrb	r3, [r3, #0]
 800ea08:	1e9a      	subs	r2, r3, #2
 800ea0a:	88fb      	ldrh	r3, [r7, #6]
 800ea0c:	4293      	cmp	r3, r2
 800ea0e:	bf28      	it	cs
 800ea10:	4613      	movcs	r3, r2
 800ea12:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800ea14:	68fb      	ldr	r3, [r7, #12]
 800ea16:	3302      	adds	r3, #2
 800ea18:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800ea1a:	2300      	movs	r3, #0
 800ea1c:	82fb      	strh	r3, [r7, #22]
 800ea1e:	e00b      	b.n	800ea38 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800ea20:	8afb      	ldrh	r3, [r7, #22]
 800ea22:	68fa      	ldr	r2, [r7, #12]
 800ea24:	4413      	add	r3, r2
 800ea26:	781a      	ldrb	r2, [r3, #0]
 800ea28:	68bb      	ldr	r3, [r7, #8]
 800ea2a:	701a      	strb	r2, [r3, #0]
      pdest++;
 800ea2c:	68bb      	ldr	r3, [r7, #8]
 800ea2e:	3301      	adds	r3, #1
 800ea30:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800ea32:	8afb      	ldrh	r3, [r7, #22]
 800ea34:	3302      	adds	r3, #2
 800ea36:	82fb      	strh	r3, [r7, #22]
 800ea38:	8afa      	ldrh	r2, [r7, #22]
 800ea3a:	8abb      	ldrh	r3, [r7, #20]
 800ea3c:	429a      	cmp	r2, r3
 800ea3e:	d3ef      	bcc.n	800ea20 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800ea40:	68bb      	ldr	r3, [r7, #8]
 800ea42:	2200      	movs	r2, #0
 800ea44:	701a      	strb	r2, [r3, #0]
  }
}
 800ea46:	bf00      	nop
 800ea48:	371c      	adds	r7, #28
 800ea4a:	46bd      	mov	sp, r7
 800ea4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea50:	4770      	bx	lr

0800ea52 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800ea52:	b480      	push	{r7}
 800ea54:	b085      	sub	sp, #20
 800ea56:	af00      	add	r7, sp, #0
 800ea58:	6078      	str	r0, [r7, #4]
 800ea5a:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800ea5c:	683b      	ldr	r3, [r7, #0]
 800ea5e:	881a      	ldrh	r2, [r3, #0]
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	781b      	ldrb	r3, [r3, #0]
 800ea64:	b29b      	uxth	r3, r3
 800ea66:	4413      	add	r3, r2
 800ea68:	b29a      	uxth	r2, r3
 800ea6a:	683b      	ldr	r3, [r7, #0]
 800ea6c:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	781b      	ldrb	r3, [r3, #0]
 800ea72:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	4413      	add	r3, r2
 800ea78:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800ea7a:	68fb      	ldr	r3, [r7, #12]
}
 800ea7c:	4618      	mov	r0, r3
 800ea7e:	3714      	adds	r7, #20
 800ea80:	46bd      	mov	sp, r7
 800ea82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea86:	4770      	bx	lr

0800ea88 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800ea88:	b580      	push	{r7, lr}
 800ea8a:	b086      	sub	sp, #24
 800ea8c:	af00      	add	r7, sp, #0
 800ea8e:	60f8      	str	r0, [r7, #12]
 800ea90:	60b9      	str	r1, [r7, #8]
 800ea92:	4613      	mov	r3, r2
 800ea94:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800ea96:	2301      	movs	r3, #1
 800ea98:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800ea9a:	68fb      	ldr	r3, [r7, #12]
 800ea9c:	789b      	ldrb	r3, [r3, #2]
 800ea9e:	2b01      	cmp	r3, #1
 800eaa0:	d002      	beq.n	800eaa8 <USBH_CtlReq+0x20>
 800eaa2:	2b02      	cmp	r3, #2
 800eaa4:	d00f      	beq.n	800eac6 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800eaa6:	e027      	b.n	800eaf8 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800eaa8:	68fb      	ldr	r3, [r7, #12]
 800eaaa:	68ba      	ldr	r2, [r7, #8]
 800eaac:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800eaae:	68fb      	ldr	r3, [r7, #12]
 800eab0:	88fa      	ldrh	r2, [r7, #6]
 800eab2:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800eab4:	68fb      	ldr	r3, [r7, #12]
 800eab6:	2201      	movs	r2, #1
 800eab8:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800eaba:	68fb      	ldr	r3, [r7, #12]
 800eabc:	2202      	movs	r2, #2
 800eabe:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800eac0:	2301      	movs	r3, #1
 800eac2:	75fb      	strb	r3, [r7, #23]
      break;
 800eac4:	e018      	b.n	800eaf8 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800eac6:	68f8      	ldr	r0, [r7, #12]
 800eac8:	f000 f81c 	bl	800eb04 <USBH_HandleControl>
 800eacc:	4603      	mov	r3, r0
 800eace:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800ead0:	7dfb      	ldrb	r3, [r7, #23]
 800ead2:	2b00      	cmp	r3, #0
 800ead4:	d002      	beq.n	800eadc <USBH_CtlReq+0x54>
 800ead6:	7dfb      	ldrb	r3, [r7, #23]
 800ead8:	2b03      	cmp	r3, #3
 800eada:	d106      	bne.n	800eaea <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800eadc:	68fb      	ldr	r3, [r7, #12]
 800eade:	2201      	movs	r2, #1
 800eae0:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800eae2:	68fb      	ldr	r3, [r7, #12]
 800eae4:	2200      	movs	r2, #0
 800eae6:	761a      	strb	r2, [r3, #24]
      break;
 800eae8:	e005      	b.n	800eaf6 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800eaea:	7dfb      	ldrb	r3, [r7, #23]
 800eaec:	2b02      	cmp	r3, #2
 800eaee:	d102      	bne.n	800eaf6 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800eaf0:	68fb      	ldr	r3, [r7, #12]
 800eaf2:	2201      	movs	r2, #1
 800eaf4:	709a      	strb	r2, [r3, #2]
      break;
 800eaf6:	bf00      	nop
  }
  return status;
 800eaf8:	7dfb      	ldrb	r3, [r7, #23]
}
 800eafa:	4618      	mov	r0, r3
 800eafc:	3718      	adds	r7, #24
 800eafe:	46bd      	mov	sp, r7
 800eb00:	bd80      	pop	{r7, pc}
	...

0800eb04 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800eb04:	b580      	push	{r7, lr}
 800eb06:	b086      	sub	sp, #24
 800eb08:	af02      	add	r7, sp, #8
 800eb0a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800eb0c:	2301      	movs	r3, #1
 800eb0e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800eb10:	2300      	movs	r3, #0
 800eb12:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	7e1b      	ldrb	r3, [r3, #24]
 800eb18:	3b01      	subs	r3, #1
 800eb1a:	2b0a      	cmp	r3, #10
 800eb1c:	f200 8156 	bhi.w	800edcc <USBH_HandleControl+0x2c8>
 800eb20:	a201      	add	r2, pc, #4	; (adr r2, 800eb28 <USBH_HandleControl+0x24>)
 800eb22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb26:	bf00      	nop
 800eb28:	0800eb55 	.word	0x0800eb55
 800eb2c:	0800eb6f 	.word	0x0800eb6f
 800eb30:	0800ebd9 	.word	0x0800ebd9
 800eb34:	0800ebff 	.word	0x0800ebff
 800eb38:	0800ec37 	.word	0x0800ec37
 800eb3c:	0800ec61 	.word	0x0800ec61
 800eb40:	0800ecb3 	.word	0x0800ecb3
 800eb44:	0800ecd5 	.word	0x0800ecd5
 800eb48:	0800ed11 	.word	0x0800ed11
 800eb4c:	0800ed37 	.word	0x0800ed37
 800eb50:	0800ed75 	.word	0x0800ed75
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	f103 0110 	add.w	r1, r3, #16
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	795b      	ldrb	r3, [r3, #5]
 800eb5e:	461a      	mov	r2, r3
 800eb60:	6878      	ldr	r0, [r7, #4]
 800eb62:	f000 f943 	bl	800edec <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	2202      	movs	r2, #2
 800eb6a:	761a      	strb	r2, [r3, #24]
      break;
 800eb6c:	e139      	b.n	800ede2 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	795b      	ldrb	r3, [r3, #5]
 800eb72:	4619      	mov	r1, r3
 800eb74:	6878      	ldr	r0, [r7, #4]
 800eb76:	f000 fccd 	bl	800f514 <USBH_LL_GetURBState>
 800eb7a:	4603      	mov	r3, r0
 800eb7c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800eb7e:	7bbb      	ldrb	r3, [r7, #14]
 800eb80:	2b01      	cmp	r3, #1
 800eb82:	d11e      	bne.n	800ebc2 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	7c1b      	ldrb	r3, [r3, #16]
 800eb88:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800eb8c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	8adb      	ldrh	r3, [r3, #22]
 800eb92:	2b00      	cmp	r3, #0
 800eb94:	d00a      	beq.n	800ebac <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800eb96:	7b7b      	ldrb	r3, [r7, #13]
 800eb98:	2b80      	cmp	r3, #128	; 0x80
 800eb9a:	d103      	bne.n	800eba4 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	2203      	movs	r2, #3
 800eba0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800eba2:	e115      	b.n	800edd0 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	2205      	movs	r2, #5
 800eba8:	761a      	strb	r2, [r3, #24]
      break;
 800ebaa:	e111      	b.n	800edd0 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800ebac:	7b7b      	ldrb	r3, [r7, #13]
 800ebae:	2b80      	cmp	r3, #128	; 0x80
 800ebb0:	d103      	bne.n	800ebba <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	2209      	movs	r2, #9
 800ebb6:	761a      	strb	r2, [r3, #24]
      break;
 800ebb8:	e10a      	b.n	800edd0 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	2207      	movs	r2, #7
 800ebbe:	761a      	strb	r2, [r3, #24]
      break;
 800ebc0:	e106      	b.n	800edd0 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800ebc2:	7bbb      	ldrb	r3, [r7, #14]
 800ebc4:	2b04      	cmp	r3, #4
 800ebc6:	d003      	beq.n	800ebd0 <USBH_HandleControl+0xcc>
 800ebc8:	7bbb      	ldrb	r3, [r7, #14]
 800ebca:	2b02      	cmp	r3, #2
 800ebcc:	f040 8100 	bne.w	800edd0 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	220b      	movs	r2, #11
 800ebd4:	761a      	strb	r2, [r3, #24]
      break;
 800ebd6:	e0fb      	b.n	800edd0 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ebde:	b29a      	uxth	r2, r3
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	6899      	ldr	r1, [r3, #8]
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	899a      	ldrh	r2, [r3, #12]
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	791b      	ldrb	r3, [r3, #4]
 800ebf0:	6878      	ldr	r0, [r7, #4]
 800ebf2:	f000 f93a 	bl	800ee6a <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	2204      	movs	r2, #4
 800ebfa:	761a      	strb	r2, [r3, #24]
      break;
 800ebfc:	e0f1      	b.n	800ede2 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	791b      	ldrb	r3, [r3, #4]
 800ec02:	4619      	mov	r1, r3
 800ec04:	6878      	ldr	r0, [r7, #4]
 800ec06:	f000 fc85 	bl	800f514 <USBH_LL_GetURBState>
 800ec0a:	4603      	mov	r3, r0
 800ec0c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800ec0e:	7bbb      	ldrb	r3, [r7, #14]
 800ec10:	2b01      	cmp	r3, #1
 800ec12:	d102      	bne.n	800ec1a <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	2209      	movs	r2, #9
 800ec18:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800ec1a:	7bbb      	ldrb	r3, [r7, #14]
 800ec1c:	2b05      	cmp	r3, #5
 800ec1e:	d102      	bne.n	800ec26 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800ec20:	2303      	movs	r3, #3
 800ec22:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800ec24:	e0d6      	b.n	800edd4 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800ec26:	7bbb      	ldrb	r3, [r7, #14]
 800ec28:	2b04      	cmp	r3, #4
 800ec2a:	f040 80d3 	bne.w	800edd4 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	220b      	movs	r2, #11
 800ec32:	761a      	strb	r2, [r3, #24]
      break;
 800ec34:	e0ce      	b.n	800edd4 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	6899      	ldr	r1, [r3, #8]
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	899a      	ldrh	r2, [r3, #12]
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	795b      	ldrb	r3, [r3, #5]
 800ec42:	2001      	movs	r0, #1
 800ec44:	9000      	str	r0, [sp, #0]
 800ec46:	6878      	ldr	r0, [r7, #4]
 800ec48:	f000 f8ea 	bl	800ee20 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ec52:	b29a      	uxth	r2, r3
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	2206      	movs	r2, #6
 800ec5c:	761a      	strb	r2, [r3, #24]
      break;
 800ec5e:	e0c0      	b.n	800ede2 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	795b      	ldrb	r3, [r3, #5]
 800ec64:	4619      	mov	r1, r3
 800ec66:	6878      	ldr	r0, [r7, #4]
 800ec68:	f000 fc54 	bl	800f514 <USBH_LL_GetURBState>
 800ec6c:	4603      	mov	r3, r0
 800ec6e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800ec70:	7bbb      	ldrb	r3, [r7, #14]
 800ec72:	2b01      	cmp	r3, #1
 800ec74:	d103      	bne.n	800ec7e <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	2207      	movs	r2, #7
 800ec7a:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800ec7c:	e0ac      	b.n	800edd8 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800ec7e:	7bbb      	ldrb	r3, [r7, #14]
 800ec80:	2b05      	cmp	r3, #5
 800ec82:	d105      	bne.n	800ec90 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	220c      	movs	r2, #12
 800ec88:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800ec8a:	2303      	movs	r3, #3
 800ec8c:	73fb      	strb	r3, [r7, #15]
      break;
 800ec8e:	e0a3      	b.n	800edd8 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800ec90:	7bbb      	ldrb	r3, [r7, #14]
 800ec92:	2b02      	cmp	r3, #2
 800ec94:	d103      	bne.n	800ec9e <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	2205      	movs	r2, #5
 800ec9a:	761a      	strb	r2, [r3, #24]
      break;
 800ec9c:	e09c      	b.n	800edd8 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800ec9e:	7bbb      	ldrb	r3, [r7, #14]
 800eca0:	2b04      	cmp	r3, #4
 800eca2:	f040 8099 	bne.w	800edd8 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	220b      	movs	r2, #11
 800ecaa:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800ecac:	2302      	movs	r3, #2
 800ecae:	73fb      	strb	r3, [r7, #15]
      break;
 800ecb0:	e092      	b.n	800edd8 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	791b      	ldrb	r3, [r3, #4]
 800ecb6:	2200      	movs	r2, #0
 800ecb8:	2100      	movs	r1, #0
 800ecba:	6878      	ldr	r0, [r7, #4]
 800ecbc:	f000 f8d5 	bl	800ee6a <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ecc6:	b29a      	uxth	r2, r3
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	2208      	movs	r2, #8
 800ecd0:	761a      	strb	r2, [r3, #24]

      break;
 800ecd2:	e086      	b.n	800ede2 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	791b      	ldrb	r3, [r3, #4]
 800ecd8:	4619      	mov	r1, r3
 800ecda:	6878      	ldr	r0, [r7, #4]
 800ecdc:	f000 fc1a 	bl	800f514 <USBH_LL_GetURBState>
 800ece0:	4603      	mov	r3, r0
 800ece2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800ece4:	7bbb      	ldrb	r3, [r7, #14]
 800ece6:	2b01      	cmp	r3, #1
 800ece8:	d105      	bne.n	800ecf6 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	220d      	movs	r2, #13
 800ecee:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800ecf0:	2300      	movs	r3, #0
 800ecf2:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800ecf4:	e072      	b.n	800eddc <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800ecf6:	7bbb      	ldrb	r3, [r7, #14]
 800ecf8:	2b04      	cmp	r3, #4
 800ecfa:	d103      	bne.n	800ed04 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	220b      	movs	r2, #11
 800ed00:	761a      	strb	r2, [r3, #24]
      break;
 800ed02:	e06b      	b.n	800eddc <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800ed04:	7bbb      	ldrb	r3, [r7, #14]
 800ed06:	2b05      	cmp	r3, #5
 800ed08:	d168      	bne.n	800eddc <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800ed0a:	2303      	movs	r3, #3
 800ed0c:	73fb      	strb	r3, [r7, #15]
      break;
 800ed0e:	e065      	b.n	800eddc <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	795b      	ldrb	r3, [r3, #5]
 800ed14:	2201      	movs	r2, #1
 800ed16:	9200      	str	r2, [sp, #0]
 800ed18:	2200      	movs	r2, #0
 800ed1a:	2100      	movs	r1, #0
 800ed1c:	6878      	ldr	r0, [r7, #4]
 800ed1e:	f000 f87f 	bl	800ee20 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ed28:	b29a      	uxth	r2, r3
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	220a      	movs	r2, #10
 800ed32:	761a      	strb	r2, [r3, #24]
      break;
 800ed34:	e055      	b.n	800ede2 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	795b      	ldrb	r3, [r3, #5]
 800ed3a:	4619      	mov	r1, r3
 800ed3c:	6878      	ldr	r0, [r7, #4]
 800ed3e:	f000 fbe9 	bl	800f514 <USBH_LL_GetURBState>
 800ed42:	4603      	mov	r3, r0
 800ed44:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800ed46:	7bbb      	ldrb	r3, [r7, #14]
 800ed48:	2b01      	cmp	r3, #1
 800ed4a:	d105      	bne.n	800ed58 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800ed4c:	2300      	movs	r3, #0
 800ed4e:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	220d      	movs	r2, #13
 800ed54:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800ed56:	e043      	b.n	800ede0 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800ed58:	7bbb      	ldrb	r3, [r7, #14]
 800ed5a:	2b02      	cmp	r3, #2
 800ed5c:	d103      	bne.n	800ed66 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	2209      	movs	r2, #9
 800ed62:	761a      	strb	r2, [r3, #24]
      break;
 800ed64:	e03c      	b.n	800ede0 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800ed66:	7bbb      	ldrb	r3, [r7, #14]
 800ed68:	2b04      	cmp	r3, #4
 800ed6a:	d139      	bne.n	800ede0 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	220b      	movs	r2, #11
 800ed70:	761a      	strb	r2, [r3, #24]
      break;
 800ed72:	e035      	b.n	800ede0 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	7e5b      	ldrb	r3, [r3, #25]
 800ed78:	3301      	adds	r3, #1
 800ed7a:	b2da      	uxtb	r2, r3
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	765a      	strb	r2, [r3, #25]
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	7e5b      	ldrb	r3, [r3, #25]
 800ed84:	2b02      	cmp	r3, #2
 800ed86:	d806      	bhi.n	800ed96 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	2201      	movs	r2, #1
 800ed8c:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	2201      	movs	r2, #1
 800ed92:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800ed94:	e025      	b.n	800ede2 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ed9c:	2106      	movs	r1, #6
 800ed9e:	6878      	ldr	r0, [r7, #4]
 800eda0:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	2200      	movs	r2, #0
 800eda6:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	795b      	ldrb	r3, [r3, #5]
 800edac:	4619      	mov	r1, r3
 800edae:	6878      	ldr	r0, [r7, #4]
 800edb0:	f000 f90c 	bl	800efcc <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	791b      	ldrb	r3, [r3, #4]
 800edb8:	4619      	mov	r1, r3
 800edba:	6878      	ldr	r0, [r7, #4]
 800edbc:	f000 f906 	bl	800efcc <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	2200      	movs	r2, #0
 800edc4:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800edc6:	2302      	movs	r3, #2
 800edc8:	73fb      	strb	r3, [r7, #15]
      break;
 800edca:	e00a      	b.n	800ede2 <USBH_HandleControl+0x2de>

    default:
      break;
 800edcc:	bf00      	nop
 800edce:	e008      	b.n	800ede2 <USBH_HandleControl+0x2de>
      break;
 800edd0:	bf00      	nop
 800edd2:	e006      	b.n	800ede2 <USBH_HandleControl+0x2de>
      break;
 800edd4:	bf00      	nop
 800edd6:	e004      	b.n	800ede2 <USBH_HandleControl+0x2de>
      break;
 800edd8:	bf00      	nop
 800edda:	e002      	b.n	800ede2 <USBH_HandleControl+0x2de>
      break;
 800eddc:	bf00      	nop
 800edde:	e000      	b.n	800ede2 <USBH_HandleControl+0x2de>
      break;
 800ede0:	bf00      	nop
  }

  return status;
 800ede2:	7bfb      	ldrb	r3, [r7, #15]
}
 800ede4:	4618      	mov	r0, r3
 800ede6:	3710      	adds	r7, #16
 800ede8:	46bd      	mov	sp, r7
 800edea:	bd80      	pop	{r7, pc}

0800edec <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800edec:	b580      	push	{r7, lr}
 800edee:	b088      	sub	sp, #32
 800edf0:	af04      	add	r7, sp, #16
 800edf2:	60f8      	str	r0, [r7, #12]
 800edf4:	60b9      	str	r1, [r7, #8]
 800edf6:	4613      	mov	r3, r2
 800edf8:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800edfa:	79f9      	ldrb	r1, [r7, #7]
 800edfc:	2300      	movs	r3, #0
 800edfe:	9303      	str	r3, [sp, #12]
 800ee00:	2308      	movs	r3, #8
 800ee02:	9302      	str	r3, [sp, #8]
 800ee04:	68bb      	ldr	r3, [r7, #8]
 800ee06:	9301      	str	r3, [sp, #4]
 800ee08:	2300      	movs	r3, #0
 800ee0a:	9300      	str	r3, [sp, #0]
 800ee0c:	2300      	movs	r3, #0
 800ee0e:	2200      	movs	r2, #0
 800ee10:	68f8      	ldr	r0, [r7, #12]
 800ee12:	f000 fb4e 	bl	800f4b2 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800ee16:	2300      	movs	r3, #0
}
 800ee18:	4618      	mov	r0, r3
 800ee1a:	3710      	adds	r7, #16
 800ee1c:	46bd      	mov	sp, r7
 800ee1e:	bd80      	pop	{r7, pc}

0800ee20 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800ee20:	b580      	push	{r7, lr}
 800ee22:	b088      	sub	sp, #32
 800ee24:	af04      	add	r7, sp, #16
 800ee26:	60f8      	str	r0, [r7, #12]
 800ee28:	60b9      	str	r1, [r7, #8]
 800ee2a:	4611      	mov	r1, r2
 800ee2c:	461a      	mov	r2, r3
 800ee2e:	460b      	mov	r3, r1
 800ee30:	80fb      	strh	r3, [r7, #6]
 800ee32:	4613      	mov	r3, r2
 800ee34:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800ee36:	68fb      	ldr	r3, [r7, #12]
 800ee38:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800ee3c:	2b00      	cmp	r3, #0
 800ee3e:	d001      	beq.n	800ee44 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800ee40:	2300      	movs	r3, #0
 800ee42:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800ee44:	7979      	ldrb	r1, [r7, #5]
 800ee46:	7e3b      	ldrb	r3, [r7, #24]
 800ee48:	9303      	str	r3, [sp, #12]
 800ee4a:	88fb      	ldrh	r3, [r7, #6]
 800ee4c:	9302      	str	r3, [sp, #8]
 800ee4e:	68bb      	ldr	r3, [r7, #8]
 800ee50:	9301      	str	r3, [sp, #4]
 800ee52:	2301      	movs	r3, #1
 800ee54:	9300      	str	r3, [sp, #0]
 800ee56:	2300      	movs	r3, #0
 800ee58:	2200      	movs	r2, #0
 800ee5a:	68f8      	ldr	r0, [r7, #12]
 800ee5c:	f000 fb29 	bl	800f4b2 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800ee60:	2300      	movs	r3, #0
}
 800ee62:	4618      	mov	r0, r3
 800ee64:	3710      	adds	r7, #16
 800ee66:	46bd      	mov	sp, r7
 800ee68:	bd80      	pop	{r7, pc}

0800ee6a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800ee6a:	b580      	push	{r7, lr}
 800ee6c:	b088      	sub	sp, #32
 800ee6e:	af04      	add	r7, sp, #16
 800ee70:	60f8      	str	r0, [r7, #12]
 800ee72:	60b9      	str	r1, [r7, #8]
 800ee74:	4611      	mov	r1, r2
 800ee76:	461a      	mov	r2, r3
 800ee78:	460b      	mov	r3, r1
 800ee7a:	80fb      	strh	r3, [r7, #6]
 800ee7c:	4613      	mov	r3, r2
 800ee7e:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800ee80:	7979      	ldrb	r1, [r7, #5]
 800ee82:	2300      	movs	r3, #0
 800ee84:	9303      	str	r3, [sp, #12]
 800ee86:	88fb      	ldrh	r3, [r7, #6]
 800ee88:	9302      	str	r3, [sp, #8]
 800ee8a:	68bb      	ldr	r3, [r7, #8]
 800ee8c:	9301      	str	r3, [sp, #4]
 800ee8e:	2301      	movs	r3, #1
 800ee90:	9300      	str	r3, [sp, #0]
 800ee92:	2300      	movs	r3, #0
 800ee94:	2201      	movs	r2, #1
 800ee96:	68f8      	ldr	r0, [r7, #12]
 800ee98:	f000 fb0b 	bl	800f4b2 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800ee9c:	2300      	movs	r3, #0

}
 800ee9e:	4618      	mov	r0, r3
 800eea0:	3710      	adds	r7, #16
 800eea2:	46bd      	mov	sp, r7
 800eea4:	bd80      	pop	{r7, pc}

0800eea6 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800eea6:	b580      	push	{r7, lr}
 800eea8:	b088      	sub	sp, #32
 800eeaa:	af04      	add	r7, sp, #16
 800eeac:	60f8      	str	r0, [r7, #12]
 800eeae:	60b9      	str	r1, [r7, #8]
 800eeb0:	4611      	mov	r1, r2
 800eeb2:	461a      	mov	r2, r3
 800eeb4:	460b      	mov	r3, r1
 800eeb6:	80fb      	strh	r3, [r7, #6]
 800eeb8:	4613      	mov	r3, r2
 800eeba:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800eebc:	68fb      	ldr	r3, [r7, #12]
 800eebe:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800eec2:	2b00      	cmp	r3, #0
 800eec4:	d001      	beq.n	800eeca <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800eec6:	2300      	movs	r3, #0
 800eec8:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800eeca:	7979      	ldrb	r1, [r7, #5]
 800eecc:	7e3b      	ldrb	r3, [r7, #24]
 800eece:	9303      	str	r3, [sp, #12]
 800eed0:	88fb      	ldrh	r3, [r7, #6]
 800eed2:	9302      	str	r3, [sp, #8]
 800eed4:	68bb      	ldr	r3, [r7, #8]
 800eed6:	9301      	str	r3, [sp, #4]
 800eed8:	2301      	movs	r3, #1
 800eeda:	9300      	str	r3, [sp, #0]
 800eedc:	2302      	movs	r3, #2
 800eede:	2200      	movs	r2, #0
 800eee0:	68f8      	ldr	r0, [r7, #12]
 800eee2:	f000 fae6 	bl	800f4b2 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800eee6:	2300      	movs	r3, #0
}
 800eee8:	4618      	mov	r0, r3
 800eeea:	3710      	adds	r7, #16
 800eeec:	46bd      	mov	sp, r7
 800eeee:	bd80      	pop	{r7, pc}

0800eef0 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800eef0:	b580      	push	{r7, lr}
 800eef2:	b088      	sub	sp, #32
 800eef4:	af04      	add	r7, sp, #16
 800eef6:	60f8      	str	r0, [r7, #12]
 800eef8:	60b9      	str	r1, [r7, #8]
 800eefa:	4611      	mov	r1, r2
 800eefc:	461a      	mov	r2, r3
 800eefe:	460b      	mov	r3, r1
 800ef00:	80fb      	strh	r3, [r7, #6]
 800ef02:	4613      	mov	r3, r2
 800ef04:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800ef06:	7979      	ldrb	r1, [r7, #5]
 800ef08:	2300      	movs	r3, #0
 800ef0a:	9303      	str	r3, [sp, #12]
 800ef0c:	88fb      	ldrh	r3, [r7, #6]
 800ef0e:	9302      	str	r3, [sp, #8]
 800ef10:	68bb      	ldr	r3, [r7, #8]
 800ef12:	9301      	str	r3, [sp, #4]
 800ef14:	2301      	movs	r3, #1
 800ef16:	9300      	str	r3, [sp, #0]
 800ef18:	2302      	movs	r3, #2
 800ef1a:	2201      	movs	r2, #1
 800ef1c:	68f8      	ldr	r0, [r7, #12]
 800ef1e:	f000 fac8 	bl	800f4b2 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800ef22:	2300      	movs	r3, #0
}
 800ef24:	4618      	mov	r0, r3
 800ef26:	3710      	adds	r7, #16
 800ef28:	46bd      	mov	sp, r7
 800ef2a:	bd80      	pop	{r7, pc}

0800ef2c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800ef2c:	b580      	push	{r7, lr}
 800ef2e:	b086      	sub	sp, #24
 800ef30:	af04      	add	r7, sp, #16
 800ef32:	6078      	str	r0, [r7, #4]
 800ef34:	4608      	mov	r0, r1
 800ef36:	4611      	mov	r1, r2
 800ef38:	461a      	mov	r2, r3
 800ef3a:	4603      	mov	r3, r0
 800ef3c:	70fb      	strb	r3, [r7, #3]
 800ef3e:	460b      	mov	r3, r1
 800ef40:	70bb      	strb	r3, [r7, #2]
 800ef42:	4613      	mov	r3, r2
 800ef44:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800ef46:	7878      	ldrb	r0, [r7, #1]
 800ef48:	78ba      	ldrb	r2, [r7, #2]
 800ef4a:	78f9      	ldrb	r1, [r7, #3]
 800ef4c:	8b3b      	ldrh	r3, [r7, #24]
 800ef4e:	9302      	str	r3, [sp, #8]
 800ef50:	7d3b      	ldrb	r3, [r7, #20]
 800ef52:	9301      	str	r3, [sp, #4]
 800ef54:	7c3b      	ldrb	r3, [r7, #16]
 800ef56:	9300      	str	r3, [sp, #0]
 800ef58:	4603      	mov	r3, r0
 800ef5a:	6878      	ldr	r0, [r7, #4]
 800ef5c:	f000 fa5b 	bl	800f416 <USBH_LL_OpenPipe>

  return USBH_OK;
 800ef60:	2300      	movs	r3, #0
}
 800ef62:	4618      	mov	r0, r3
 800ef64:	3708      	adds	r7, #8
 800ef66:	46bd      	mov	sp, r7
 800ef68:	bd80      	pop	{r7, pc}

0800ef6a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800ef6a:	b580      	push	{r7, lr}
 800ef6c:	b082      	sub	sp, #8
 800ef6e:	af00      	add	r7, sp, #0
 800ef70:	6078      	str	r0, [r7, #4]
 800ef72:	460b      	mov	r3, r1
 800ef74:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800ef76:	78fb      	ldrb	r3, [r7, #3]
 800ef78:	4619      	mov	r1, r3
 800ef7a:	6878      	ldr	r0, [r7, #4]
 800ef7c:	f000 fa7a 	bl	800f474 <USBH_LL_ClosePipe>

  return USBH_OK;
 800ef80:	2300      	movs	r3, #0
}
 800ef82:	4618      	mov	r0, r3
 800ef84:	3708      	adds	r7, #8
 800ef86:	46bd      	mov	sp, r7
 800ef88:	bd80      	pop	{r7, pc}

0800ef8a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800ef8a:	b580      	push	{r7, lr}
 800ef8c:	b084      	sub	sp, #16
 800ef8e:	af00      	add	r7, sp, #0
 800ef90:	6078      	str	r0, [r7, #4]
 800ef92:	460b      	mov	r3, r1
 800ef94:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800ef96:	6878      	ldr	r0, [r7, #4]
 800ef98:	f000 f836 	bl	800f008 <USBH_GetFreePipe>
 800ef9c:	4603      	mov	r3, r0
 800ef9e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800efa0:	89fb      	ldrh	r3, [r7, #14]
 800efa2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800efa6:	4293      	cmp	r3, r2
 800efa8:	d00a      	beq.n	800efc0 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800efaa:	78fa      	ldrb	r2, [r7, #3]
 800efac:	89fb      	ldrh	r3, [r7, #14]
 800efae:	f003 030f 	and.w	r3, r3, #15
 800efb2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800efb6:	6879      	ldr	r1, [r7, #4]
 800efb8:	33e0      	adds	r3, #224	; 0xe0
 800efba:	009b      	lsls	r3, r3, #2
 800efbc:	440b      	add	r3, r1
 800efbe:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800efc0:	89fb      	ldrh	r3, [r7, #14]
 800efc2:	b2db      	uxtb	r3, r3
}
 800efc4:	4618      	mov	r0, r3
 800efc6:	3710      	adds	r7, #16
 800efc8:	46bd      	mov	sp, r7
 800efca:	bd80      	pop	{r7, pc}

0800efcc <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800efcc:	b480      	push	{r7}
 800efce:	b083      	sub	sp, #12
 800efd0:	af00      	add	r7, sp, #0
 800efd2:	6078      	str	r0, [r7, #4]
 800efd4:	460b      	mov	r3, r1
 800efd6:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800efd8:	78fb      	ldrb	r3, [r7, #3]
 800efda:	2b0f      	cmp	r3, #15
 800efdc:	d80d      	bhi.n	800effa <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800efde:	78fb      	ldrb	r3, [r7, #3]
 800efe0:	687a      	ldr	r2, [r7, #4]
 800efe2:	33e0      	adds	r3, #224	; 0xe0
 800efe4:	009b      	lsls	r3, r3, #2
 800efe6:	4413      	add	r3, r2
 800efe8:	685a      	ldr	r2, [r3, #4]
 800efea:	78fb      	ldrb	r3, [r7, #3]
 800efec:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800eff0:	6879      	ldr	r1, [r7, #4]
 800eff2:	33e0      	adds	r3, #224	; 0xe0
 800eff4:	009b      	lsls	r3, r3, #2
 800eff6:	440b      	add	r3, r1
 800eff8:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800effa:	2300      	movs	r3, #0
}
 800effc:	4618      	mov	r0, r3
 800effe:	370c      	adds	r7, #12
 800f000:	46bd      	mov	sp, r7
 800f002:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f006:	4770      	bx	lr

0800f008 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800f008:	b480      	push	{r7}
 800f00a:	b085      	sub	sp, #20
 800f00c:	af00      	add	r7, sp, #0
 800f00e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800f010:	2300      	movs	r3, #0
 800f012:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800f014:	2300      	movs	r3, #0
 800f016:	73fb      	strb	r3, [r7, #15]
 800f018:	e00f      	b.n	800f03a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800f01a:	7bfb      	ldrb	r3, [r7, #15]
 800f01c:	687a      	ldr	r2, [r7, #4]
 800f01e:	33e0      	adds	r3, #224	; 0xe0
 800f020:	009b      	lsls	r3, r3, #2
 800f022:	4413      	add	r3, r2
 800f024:	685b      	ldr	r3, [r3, #4]
 800f026:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f02a:	2b00      	cmp	r3, #0
 800f02c:	d102      	bne.n	800f034 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800f02e:	7bfb      	ldrb	r3, [r7, #15]
 800f030:	b29b      	uxth	r3, r3
 800f032:	e007      	b.n	800f044 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800f034:	7bfb      	ldrb	r3, [r7, #15]
 800f036:	3301      	adds	r3, #1
 800f038:	73fb      	strb	r3, [r7, #15]
 800f03a:	7bfb      	ldrb	r3, [r7, #15]
 800f03c:	2b0f      	cmp	r3, #15
 800f03e:	d9ec      	bls.n	800f01a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800f040:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800f044:	4618      	mov	r0, r3
 800f046:	3714      	adds	r7, #20
 800f048:	46bd      	mov	sp, r7
 800f04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f04e:	4770      	bx	lr

0800f050 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800f050:	b580      	push	{r7, lr}
 800f052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800f054:	2201      	movs	r2, #1
 800f056:	490e      	ldr	r1, [pc, #56]	; (800f090 <MX_USB_HOST_Init+0x40>)
 800f058:	480e      	ldr	r0, [pc, #56]	; (800f094 <MX_USB_HOST_Init+0x44>)
 800f05a:	f7fe fb05 	bl	800d668 <USBH_Init>
 800f05e:	4603      	mov	r3, r0
 800f060:	2b00      	cmp	r3, #0
 800f062:	d001      	beq.n	800f068 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800f064:	f7f4 fcce 	bl	8003a04 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800f068:	490b      	ldr	r1, [pc, #44]	; (800f098 <MX_USB_HOST_Init+0x48>)
 800f06a:	480a      	ldr	r0, [pc, #40]	; (800f094 <MX_USB_HOST_Init+0x44>)
 800f06c:	f7fe fba9 	bl	800d7c2 <USBH_RegisterClass>
 800f070:	4603      	mov	r3, r0
 800f072:	2b00      	cmp	r3, #0
 800f074:	d001      	beq.n	800f07a <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800f076:	f7f4 fcc5 	bl	8003a04 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800f07a:	4806      	ldr	r0, [pc, #24]	; (800f094 <MX_USB_HOST_Init+0x44>)
 800f07c:	f7fe fc2d 	bl	800d8da <USBH_Start>
 800f080:	4603      	mov	r3, r0
 800f082:	2b00      	cmp	r3, #0
 800f084:	d001      	beq.n	800f08a <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800f086:	f7f4 fcbd 	bl	8003a04 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800f08a:	bf00      	nop
 800f08c:	bd80      	pop	{r7, pc}
 800f08e:	bf00      	nop
 800f090:	0800f0b1 	.word	0x0800f0b1
 800f094:	20000d28 	.word	0x20000d28
 800f098:	20000018 	.word	0x20000018

0800f09c <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800f09c:	b580      	push	{r7, lr}
 800f09e:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800f0a0:	4802      	ldr	r0, [pc, #8]	; (800f0ac <MX_USB_HOST_Process+0x10>)
 800f0a2:	f7fe fc2b 	bl	800d8fc <USBH_Process>
}
 800f0a6:	bf00      	nop
 800f0a8:	bd80      	pop	{r7, pc}
 800f0aa:	bf00      	nop
 800f0ac:	20000d28 	.word	0x20000d28

0800f0b0 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800f0b0:	b480      	push	{r7}
 800f0b2:	b083      	sub	sp, #12
 800f0b4:	af00      	add	r7, sp, #0
 800f0b6:	6078      	str	r0, [r7, #4]
 800f0b8:	460b      	mov	r3, r1
 800f0ba:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800f0bc:	78fb      	ldrb	r3, [r7, #3]
 800f0be:	3b01      	subs	r3, #1
 800f0c0:	2b04      	cmp	r3, #4
 800f0c2:	d819      	bhi.n	800f0f8 <USBH_UserProcess+0x48>
 800f0c4:	a201      	add	r2, pc, #4	; (adr r2, 800f0cc <USBH_UserProcess+0x1c>)
 800f0c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f0ca:	bf00      	nop
 800f0cc:	0800f0f9 	.word	0x0800f0f9
 800f0d0:	0800f0e9 	.word	0x0800f0e9
 800f0d4:	0800f0f9 	.word	0x0800f0f9
 800f0d8:	0800f0f1 	.word	0x0800f0f1
 800f0dc:	0800f0e1 	.word	0x0800f0e1
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800f0e0:	4b09      	ldr	r3, [pc, #36]	; (800f108 <USBH_UserProcess+0x58>)
 800f0e2:	2203      	movs	r2, #3
 800f0e4:	701a      	strb	r2, [r3, #0]
  break;
 800f0e6:	e008      	b.n	800f0fa <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800f0e8:	4b07      	ldr	r3, [pc, #28]	; (800f108 <USBH_UserProcess+0x58>)
 800f0ea:	2202      	movs	r2, #2
 800f0ec:	701a      	strb	r2, [r3, #0]
  break;
 800f0ee:	e004      	b.n	800f0fa <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800f0f0:	4b05      	ldr	r3, [pc, #20]	; (800f108 <USBH_UserProcess+0x58>)
 800f0f2:	2201      	movs	r2, #1
 800f0f4:	701a      	strb	r2, [r3, #0]
  break;
 800f0f6:	e000      	b.n	800f0fa <USBH_UserProcess+0x4a>

  default:
  break;
 800f0f8:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800f0fa:	bf00      	nop
 800f0fc:	370c      	adds	r7, #12
 800f0fe:	46bd      	mov	sp, r7
 800f100:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f104:	4770      	bx	lr
 800f106:	bf00      	nop
 800f108:	20001100 	.word	0x20001100

0800f10c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800f10c:	b580      	push	{r7, lr}
 800f10e:	b0a0      	sub	sp, #128	; 0x80
 800f110:	af00      	add	r7, sp, #0
 800f112:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f114:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800f118:	2200      	movs	r2, #0
 800f11a:	601a      	str	r2, [r3, #0]
 800f11c:	605a      	str	r2, [r3, #4]
 800f11e:	609a      	str	r2, [r3, #8]
 800f120:	60da      	str	r2, [r3, #12]
 800f122:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800f124:	f107 0310 	add.w	r3, r7, #16
 800f128:	225c      	movs	r2, #92	; 0x5c
 800f12a:	2100      	movs	r1, #0
 800f12c:	4618      	mov	r0, r3
 800f12e:	f001 fb5b 	bl	80107e8 <memset>
  if(hcdHandle->Instance==USB_OTG_FS)
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	681b      	ldr	r3, [r3, #0]
 800f136:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f13a:	d149      	bne.n	800f1d0 <HAL_HCD_MspInit+0xc4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800f13c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f140:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 800f142:	2300      	movs	r3, #0
 800f144:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800f146:	f107 0310 	add.w	r3, r7, #16
 800f14a:	4618      	mov	r0, r3
 800f14c:	f7f9 fe98 	bl	8008e80 <HAL_RCCEx_PeriphCLKConfig>
 800f150:	4603      	mov	r3, r0
 800f152:	2b00      	cmp	r3, #0
 800f154:	d001      	beq.n	800f15a <HAL_HCD_MspInit+0x4e>
    {
      Error_Handler();
 800f156:	f7f4 fc55 	bl	8003a04 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f15a:	2300      	movs	r3, #0
 800f15c:	60fb      	str	r3, [r7, #12]
 800f15e:	4b1e      	ldr	r3, [pc, #120]	; (800f1d8 <HAL_HCD_MspInit+0xcc>)
 800f160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f162:	4a1d      	ldr	r2, [pc, #116]	; (800f1d8 <HAL_HCD_MspInit+0xcc>)
 800f164:	f043 0301 	orr.w	r3, r3, #1
 800f168:	6313      	str	r3, [r2, #48]	; 0x30
 800f16a:	4b1b      	ldr	r3, [pc, #108]	; (800f1d8 <HAL_HCD_MspInit+0xcc>)
 800f16c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f16e:	f003 0301 	and.w	r3, r3, #1
 800f172:	60fb      	str	r3, [r7, #12]
 800f174:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800f176:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800f17a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f17c:	2302      	movs	r3, #2
 800f17e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f180:	2300      	movs	r3, #0
 800f182:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f184:	2303      	movs	r3, #3
 800f186:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800f188:	230a      	movs	r3, #10
 800f18a:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f18c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800f190:	4619      	mov	r1, r3
 800f192:	4812      	ldr	r0, [pc, #72]	; (800f1dc <HAL_HCD_MspInit+0xd0>)
 800f194:	f7f5 fdba 	bl	8004d0c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800f198:	4b0f      	ldr	r3, [pc, #60]	; (800f1d8 <HAL_HCD_MspInit+0xcc>)
 800f19a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f19c:	4a0e      	ldr	r2, [pc, #56]	; (800f1d8 <HAL_HCD_MspInit+0xcc>)
 800f19e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f1a2:	6353      	str	r3, [r2, #52]	; 0x34
 800f1a4:	2300      	movs	r3, #0
 800f1a6:	60bb      	str	r3, [r7, #8]
 800f1a8:	4b0b      	ldr	r3, [pc, #44]	; (800f1d8 <HAL_HCD_MspInit+0xcc>)
 800f1aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f1ac:	4a0a      	ldr	r2, [pc, #40]	; (800f1d8 <HAL_HCD_MspInit+0xcc>)
 800f1ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800f1b2:	6453      	str	r3, [r2, #68]	; 0x44
 800f1b4:	4b08      	ldr	r3, [pc, #32]	; (800f1d8 <HAL_HCD_MspInit+0xcc>)
 800f1b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f1b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f1bc:	60bb      	str	r3, [r7, #8]
 800f1be:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800f1c0:	2200      	movs	r2, #0
 800f1c2:	2100      	movs	r1, #0
 800f1c4:	2043      	movs	r0, #67	; 0x43
 800f1c6:	f7f5 f968 	bl	800449a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800f1ca:	2043      	movs	r0, #67	; 0x43
 800f1cc:	f7f5 f981 	bl	80044d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800f1d0:	bf00      	nop
 800f1d2:	3780      	adds	r7, #128	; 0x80
 800f1d4:	46bd      	mov	sp, r7
 800f1d6:	bd80      	pop	{r7, pc}
 800f1d8:	40023800 	.word	0x40023800
 800f1dc:	40020000 	.word	0x40020000

0800f1e0 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800f1e0:	b580      	push	{r7, lr}
 800f1e2:	b082      	sub	sp, #8
 800f1e4:	af00      	add	r7, sp, #0
 800f1e6:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800f1ee:	4618      	mov	r0, r3
 800f1f0:	f7fe ff63 	bl	800e0ba <USBH_LL_IncTimer>
}
 800f1f4:	bf00      	nop
 800f1f6:	3708      	adds	r7, #8
 800f1f8:	46bd      	mov	sp, r7
 800f1fa:	bd80      	pop	{r7, pc}

0800f1fc <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800f1fc:	b580      	push	{r7, lr}
 800f1fe:	b082      	sub	sp, #8
 800f200:	af00      	add	r7, sp, #0
 800f202:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800f20a:	4618      	mov	r0, r3
 800f20c:	f7fe ff9b 	bl	800e146 <USBH_LL_Connect>
}
 800f210:	bf00      	nop
 800f212:	3708      	adds	r7, #8
 800f214:	46bd      	mov	sp, r7
 800f216:	bd80      	pop	{r7, pc}

0800f218 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800f218:	b580      	push	{r7, lr}
 800f21a:	b082      	sub	sp, #8
 800f21c:	af00      	add	r7, sp, #0
 800f21e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800f226:	4618      	mov	r0, r3
 800f228:	f7fe ffa4 	bl	800e174 <USBH_LL_Disconnect>
}
 800f22c:	bf00      	nop
 800f22e:	3708      	adds	r7, #8
 800f230:	46bd      	mov	sp, r7
 800f232:	bd80      	pop	{r7, pc}

0800f234 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800f234:	b480      	push	{r7}
 800f236:	b083      	sub	sp, #12
 800f238:	af00      	add	r7, sp, #0
 800f23a:	6078      	str	r0, [r7, #4]
 800f23c:	460b      	mov	r3, r1
 800f23e:	70fb      	strb	r3, [r7, #3]
 800f240:	4613      	mov	r3, r2
 800f242:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800f244:	bf00      	nop
 800f246:	370c      	adds	r7, #12
 800f248:	46bd      	mov	sp, r7
 800f24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f24e:	4770      	bx	lr

0800f250 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800f250:	b580      	push	{r7, lr}
 800f252:	b082      	sub	sp, #8
 800f254:	af00      	add	r7, sp, #0
 800f256:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800f25e:	4618      	mov	r0, r3
 800f260:	f7fe ff55 	bl	800e10e <USBH_LL_PortEnabled>
}
 800f264:	bf00      	nop
 800f266:	3708      	adds	r7, #8
 800f268:	46bd      	mov	sp, r7
 800f26a:	bd80      	pop	{r7, pc}

0800f26c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800f26c:	b580      	push	{r7, lr}
 800f26e:	b082      	sub	sp, #8
 800f270:	af00      	add	r7, sp, #0
 800f272:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800f27a:	4618      	mov	r0, r3
 800f27c:	f7fe ff55 	bl	800e12a <USBH_LL_PortDisabled>
}
 800f280:	bf00      	nop
 800f282:	3708      	adds	r7, #8
 800f284:	46bd      	mov	sp, r7
 800f286:	bd80      	pop	{r7, pc}

0800f288 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800f288:	b580      	push	{r7, lr}
 800f28a:	b082      	sub	sp, #8
 800f28c:	af00      	add	r7, sp, #0
 800f28e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800f296:	2b01      	cmp	r3, #1
 800f298:	d12a      	bne.n	800f2f0 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800f29a:	4a18      	ldr	r2, [pc, #96]	; (800f2fc <USBH_LL_Init+0x74>)
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	f8c2 33dc 	str.w	r3, [r2, #988]	; 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	4a15      	ldr	r2, [pc, #84]	; (800f2fc <USBH_LL_Init+0x74>)
 800f2a6:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800f2aa:	4b14      	ldr	r3, [pc, #80]	; (800f2fc <USBH_LL_Init+0x74>)
 800f2ac:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800f2b0:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 12;
 800f2b2:	4b12      	ldr	r3, [pc, #72]	; (800f2fc <USBH_LL_Init+0x74>)
 800f2b4:	220c      	movs	r2, #12
 800f2b6:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800f2b8:	4b10      	ldr	r3, [pc, #64]	; (800f2fc <USBH_LL_Init+0x74>)
 800f2ba:	2201      	movs	r2, #1
 800f2bc:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800f2be:	4b0f      	ldr	r3, [pc, #60]	; (800f2fc <USBH_LL_Init+0x74>)
 800f2c0:	2200      	movs	r2, #0
 800f2c2:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800f2c4:	4b0d      	ldr	r3, [pc, #52]	; (800f2fc <USBH_LL_Init+0x74>)
 800f2c6:	2202      	movs	r2, #2
 800f2c8:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800f2ca:	4b0c      	ldr	r3, [pc, #48]	; (800f2fc <USBH_LL_Init+0x74>)
 800f2cc:	2200      	movs	r2, #0
 800f2ce:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800f2d0:	480a      	ldr	r0, [pc, #40]	; (800f2fc <USBH_LL_Init+0x74>)
 800f2d2:	f7f5 fee2 	bl	800509a <HAL_HCD_Init>
 800f2d6:	4603      	mov	r3, r0
 800f2d8:	2b00      	cmp	r3, #0
 800f2da:	d001      	beq.n	800f2e0 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800f2dc:	f7f4 fb92 	bl	8003a04 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800f2e0:	4806      	ldr	r0, [pc, #24]	; (800f2fc <USBH_LL_Init+0x74>)
 800f2e2:	f7f6 fb43 	bl	800596c <HAL_HCD_GetCurrentFrame>
 800f2e6:	4603      	mov	r3, r0
 800f2e8:	4619      	mov	r1, r3
 800f2ea:	6878      	ldr	r0, [r7, #4]
 800f2ec:	f7fe fed6 	bl	800e09c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800f2f0:	2300      	movs	r3, #0
}
 800f2f2:	4618      	mov	r0, r3
 800f2f4:	3708      	adds	r7, #8
 800f2f6:	46bd      	mov	sp, r7
 800f2f8:	bd80      	pop	{r7, pc}
 800f2fa:	bf00      	nop
 800f2fc:	20001104 	.word	0x20001104

0800f300 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800f300:	b580      	push	{r7, lr}
 800f302:	b084      	sub	sp, #16
 800f304:	af00      	add	r7, sp, #0
 800f306:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f308:	2300      	movs	r3, #0
 800f30a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f30c:	2300      	movs	r3, #0
 800f30e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f316:	4618      	mov	r0, r3
 800f318:	f7f6 fab0 	bl	800587c <HAL_HCD_Start>
 800f31c:	4603      	mov	r3, r0
 800f31e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800f320:	7bfb      	ldrb	r3, [r7, #15]
 800f322:	4618      	mov	r0, r3
 800f324:	f000 f956 	bl	800f5d4 <USBH_Get_USB_Status>
 800f328:	4603      	mov	r3, r0
 800f32a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f32c:	7bbb      	ldrb	r3, [r7, #14]
}
 800f32e:	4618      	mov	r0, r3
 800f330:	3710      	adds	r7, #16
 800f332:	46bd      	mov	sp, r7
 800f334:	bd80      	pop	{r7, pc}

0800f336 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800f336:	b580      	push	{r7, lr}
 800f338:	b084      	sub	sp, #16
 800f33a:	af00      	add	r7, sp, #0
 800f33c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f33e:	2300      	movs	r3, #0
 800f340:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f342:	2300      	movs	r3, #0
 800f344:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f34c:	4618      	mov	r0, r3
 800f34e:	f7f6 fab8 	bl	80058c2 <HAL_HCD_Stop>
 800f352:	4603      	mov	r3, r0
 800f354:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800f356:	7bfb      	ldrb	r3, [r7, #15]
 800f358:	4618      	mov	r0, r3
 800f35a:	f000 f93b 	bl	800f5d4 <USBH_Get_USB_Status>
 800f35e:	4603      	mov	r3, r0
 800f360:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f362:	7bbb      	ldrb	r3, [r7, #14]
}
 800f364:	4618      	mov	r0, r3
 800f366:	3710      	adds	r7, #16
 800f368:	46bd      	mov	sp, r7
 800f36a:	bd80      	pop	{r7, pc}

0800f36c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800f36c:	b580      	push	{r7, lr}
 800f36e:	b084      	sub	sp, #16
 800f370:	af00      	add	r7, sp, #0
 800f372:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800f374:	2301      	movs	r3, #1
 800f376:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f37e:	4618      	mov	r0, r3
 800f380:	f7f6 fb02 	bl	8005988 <HAL_HCD_GetCurrentSpeed>
 800f384:	4603      	mov	r3, r0
 800f386:	2b02      	cmp	r3, #2
 800f388:	d00c      	beq.n	800f3a4 <USBH_LL_GetSpeed+0x38>
 800f38a:	2b02      	cmp	r3, #2
 800f38c:	d80d      	bhi.n	800f3aa <USBH_LL_GetSpeed+0x3e>
 800f38e:	2b00      	cmp	r3, #0
 800f390:	d002      	beq.n	800f398 <USBH_LL_GetSpeed+0x2c>
 800f392:	2b01      	cmp	r3, #1
 800f394:	d003      	beq.n	800f39e <USBH_LL_GetSpeed+0x32>
 800f396:	e008      	b.n	800f3aa <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800f398:	2300      	movs	r3, #0
 800f39a:	73fb      	strb	r3, [r7, #15]
    break;
 800f39c:	e008      	b.n	800f3b0 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800f39e:	2301      	movs	r3, #1
 800f3a0:	73fb      	strb	r3, [r7, #15]
    break;
 800f3a2:	e005      	b.n	800f3b0 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800f3a4:	2302      	movs	r3, #2
 800f3a6:	73fb      	strb	r3, [r7, #15]
    break;
 800f3a8:	e002      	b.n	800f3b0 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800f3aa:	2301      	movs	r3, #1
 800f3ac:	73fb      	strb	r3, [r7, #15]
    break;
 800f3ae:	bf00      	nop
  }
  return  speed;
 800f3b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800f3b2:	4618      	mov	r0, r3
 800f3b4:	3710      	adds	r7, #16
 800f3b6:	46bd      	mov	sp, r7
 800f3b8:	bd80      	pop	{r7, pc}

0800f3ba <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800f3ba:	b580      	push	{r7, lr}
 800f3bc:	b084      	sub	sp, #16
 800f3be:	af00      	add	r7, sp, #0
 800f3c0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f3c2:	2300      	movs	r3, #0
 800f3c4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f3c6:	2300      	movs	r3, #0
 800f3c8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f3d0:	4618      	mov	r0, r3
 800f3d2:	f7f6 fa93 	bl	80058fc <HAL_HCD_ResetPort>
 800f3d6:	4603      	mov	r3, r0
 800f3d8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800f3da:	7bfb      	ldrb	r3, [r7, #15]
 800f3dc:	4618      	mov	r0, r3
 800f3de:	f000 f8f9 	bl	800f5d4 <USBH_Get_USB_Status>
 800f3e2:	4603      	mov	r3, r0
 800f3e4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f3e6:	7bbb      	ldrb	r3, [r7, #14]
}
 800f3e8:	4618      	mov	r0, r3
 800f3ea:	3710      	adds	r7, #16
 800f3ec:	46bd      	mov	sp, r7
 800f3ee:	bd80      	pop	{r7, pc}

0800f3f0 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800f3f0:	b580      	push	{r7, lr}
 800f3f2:	b082      	sub	sp, #8
 800f3f4:	af00      	add	r7, sp, #0
 800f3f6:	6078      	str	r0, [r7, #4]
 800f3f8:	460b      	mov	r3, r1
 800f3fa:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f402:	78fa      	ldrb	r2, [r7, #3]
 800f404:	4611      	mov	r1, r2
 800f406:	4618      	mov	r0, r3
 800f408:	f7f6 fa9b 	bl	8005942 <HAL_HCD_HC_GetXferCount>
 800f40c:	4603      	mov	r3, r0
}
 800f40e:	4618      	mov	r0, r3
 800f410:	3708      	adds	r7, #8
 800f412:	46bd      	mov	sp, r7
 800f414:	bd80      	pop	{r7, pc}

0800f416 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800f416:	b590      	push	{r4, r7, lr}
 800f418:	b089      	sub	sp, #36	; 0x24
 800f41a:	af04      	add	r7, sp, #16
 800f41c:	6078      	str	r0, [r7, #4]
 800f41e:	4608      	mov	r0, r1
 800f420:	4611      	mov	r1, r2
 800f422:	461a      	mov	r2, r3
 800f424:	4603      	mov	r3, r0
 800f426:	70fb      	strb	r3, [r7, #3]
 800f428:	460b      	mov	r3, r1
 800f42a:	70bb      	strb	r3, [r7, #2]
 800f42c:	4613      	mov	r3, r2
 800f42e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f430:	2300      	movs	r3, #0
 800f432:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f434:	2300      	movs	r3, #0
 800f436:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800f43e:	787c      	ldrb	r4, [r7, #1]
 800f440:	78ba      	ldrb	r2, [r7, #2]
 800f442:	78f9      	ldrb	r1, [r7, #3]
 800f444:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800f446:	9302      	str	r3, [sp, #8]
 800f448:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800f44c:	9301      	str	r3, [sp, #4]
 800f44e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f452:	9300      	str	r3, [sp, #0]
 800f454:	4623      	mov	r3, r4
 800f456:	f7f5 fe87 	bl	8005168 <HAL_HCD_HC_Init>
 800f45a:	4603      	mov	r3, r0
 800f45c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800f45e:	7bfb      	ldrb	r3, [r7, #15]
 800f460:	4618      	mov	r0, r3
 800f462:	f000 f8b7 	bl	800f5d4 <USBH_Get_USB_Status>
 800f466:	4603      	mov	r3, r0
 800f468:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f46a:	7bbb      	ldrb	r3, [r7, #14]
}
 800f46c:	4618      	mov	r0, r3
 800f46e:	3714      	adds	r7, #20
 800f470:	46bd      	mov	sp, r7
 800f472:	bd90      	pop	{r4, r7, pc}

0800f474 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800f474:	b580      	push	{r7, lr}
 800f476:	b084      	sub	sp, #16
 800f478:	af00      	add	r7, sp, #0
 800f47a:	6078      	str	r0, [r7, #4]
 800f47c:	460b      	mov	r3, r1
 800f47e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f480:	2300      	movs	r3, #0
 800f482:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f484:	2300      	movs	r3, #0
 800f486:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f48e:	78fa      	ldrb	r2, [r7, #3]
 800f490:	4611      	mov	r1, r2
 800f492:	4618      	mov	r0, r3
 800f494:	f7f5 ff20 	bl	80052d8 <HAL_HCD_HC_Halt>
 800f498:	4603      	mov	r3, r0
 800f49a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800f49c:	7bfb      	ldrb	r3, [r7, #15]
 800f49e:	4618      	mov	r0, r3
 800f4a0:	f000 f898 	bl	800f5d4 <USBH_Get_USB_Status>
 800f4a4:	4603      	mov	r3, r0
 800f4a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f4a8:	7bbb      	ldrb	r3, [r7, #14]
}
 800f4aa:	4618      	mov	r0, r3
 800f4ac:	3710      	adds	r7, #16
 800f4ae:	46bd      	mov	sp, r7
 800f4b0:	bd80      	pop	{r7, pc}

0800f4b2 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800f4b2:	b590      	push	{r4, r7, lr}
 800f4b4:	b089      	sub	sp, #36	; 0x24
 800f4b6:	af04      	add	r7, sp, #16
 800f4b8:	6078      	str	r0, [r7, #4]
 800f4ba:	4608      	mov	r0, r1
 800f4bc:	4611      	mov	r1, r2
 800f4be:	461a      	mov	r2, r3
 800f4c0:	4603      	mov	r3, r0
 800f4c2:	70fb      	strb	r3, [r7, #3]
 800f4c4:	460b      	mov	r3, r1
 800f4c6:	70bb      	strb	r3, [r7, #2]
 800f4c8:	4613      	mov	r3, r2
 800f4ca:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f4cc:	2300      	movs	r3, #0
 800f4ce:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f4d0:	2300      	movs	r3, #0
 800f4d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800f4d4:	687b      	ldr	r3, [r7, #4]
 800f4d6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800f4da:	787c      	ldrb	r4, [r7, #1]
 800f4dc:	78ba      	ldrb	r2, [r7, #2]
 800f4de:	78f9      	ldrb	r1, [r7, #3]
 800f4e0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800f4e4:	9303      	str	r3, [sp, #12]
 800f4e6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800f4e8:	9302      	str	r3, [sp, #8]
 800f4ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4ec:	9301      	str	r3, [sp, #4]
 800f4ee:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f4f2:	9300      	str	r3, [sp, #0]
 800f4f4:	4623      	mov	r3, r4
 800f4f6:	f7f5 ff13 	bl	8005320 <HAL_HCD_HC_SubmitRequest>
 800f4fa:	4603      	mov	r3, r0
 800f4fc:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800f4fe:	7bfb      	ldrb	r3, [r7, #15]
 800f500:	4618      	mov	r0, r3
 800f502:	f000 f867 	bl	800f5d4 <USBH_Get_USB_Status>
 800f506:	4603      	mov	r3, r0
 800f508:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f50a:	7bbb      	ldrb	r3, [r7, #14]
}
 800f50c:	4618      	mov	r0, r3
 800f50e:	3714      	adds	r7, #20
 800f510:	46bd      	mov	sp, r7
 800f512:	bd90      	pop	{r4, r7, pc}

0800f514 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800f514:	b580      	push	{r7, lr}
 800f516:	b082      	sub	sp, #8
 800f518:	af00      	add	r7, sp, #0
 800f51a:	6078      	str	r0, [r7, #4]
 800f51c:	460b      	mov	r3, r1
 800f51e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f526:	78fa      	ldrb	r2, [r7, #3]
 800f528:	4611      	mov	r1, r2
 800f52a:	4618      	mov	r0, r3
 800f52c:	f7f6 f9f4 	bl	8005918 <HAL_HCD_HC_GetURBState>
 800f530:	4603      	mov	r3, r0
}
 800f532:	4618      	mov	r0, r3
 800f534:	3708      	adds	r7, #8
 800f536:	46bd      	mov	sp, r7
 800f538:	bd80      	pop	{r7, pc}

0800f53a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800f53a:	b580      	push	{r7, lr}
 800f53c:	b082      	sub	sp, #8
 800f53e:	af00      	add	r7, sp, #0
 800f540:	6078      	str	r0, [r7, #4]
 800f542:	460b      	mov	r3, r1
 800f544:	70fb      	strb	r3, [r7, #3]
      /* USER CODE BEGIN DRIVE_LOW_CHARGE_FOR_FS */

      /* USER CODE END DRIVE_LOW_CHARGE_FOR_FS */
    }
  }
  HAL_Delay(200);
 800f546:	20c8      	movs	r0, #200	; 0xc8
 800f548:	f7f4 fea8 	bl	800429c <HAL_Delay>
  return USBH_OK;
 800f54c:	2300      	movs	r3, #0
}
 800f54e:	4618      	mov	r0, r3
 800f550:	3708      	adds	r7, #8
 800f552:	46bd      	mov	sp, r7
 800f554:	bd80      	pop	{r7, pc}

0800f556 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800f556:	b480      	push	{r7}
 800f558:	b085      	sub	sp, #20
 800f55a:	af00      	add	r7, sp, #0
 800f55c:	6078      	str	r0, [r7, #4]
 800f55e:	460b      	mov	r3, r1
 800f560:	70fb      	strb	r3, [r7, #3]
 800f562:	4613      	mov	r3, r2
 800f564:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f56c:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800f56e:	78fa      	ldrb	r2, [r7, #3]
 800f570:	68f9      	ldr	r1, [r7, #12]
 800f572:	4613      	mov	r3, r2
 800f574:	011b      	lsls	r3, r3, #4
 800f576:	1a9b      	subs	r3, r3, r2
 800f578:	009b      	lsls	r3, r3, #2
 800f57a:	440b      	add	r3, r1
 800f57c:	3317      	adds	r3, #23
 800f57e:	781b      	ldrb	r3, [r3, #0]
 800f580:	2b00      	cmp	r3, #0
 800f582:	d00a      	beq.n	800f59a <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800f584:	78fa      	ldrb	r2, [r7, #3]
 800f586:	68f9      	ldr	r1, [r7, #12]
 800f588:	4613      	mov	r3, r2
 800f58a:	011b      	lsls	r3, r3, #4
 800f58c:	1a9b      	subs	r3, r3, r2
 800f58e:	009b      	lsls	r3, r3, #2
 800f590:	440b      	add	r3, r1
 800f592:	333c      	adds	r3, #60	; 0x3c
 800f594:	78ba      	ldrb	r2, [r7, #2]
 800f596:	701a      	strb	r2, [r3, #0]
 800f598:	e009      	b.n	800f5ae <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800f59a:	78fa      	ldrb	r2, [r7, #3]
 800f59c:	68f9      	ldr	r1, [r7, #12]
 800f59e:	4613      	mov	r3, r2
 800f5a0:	011b      	lsls	r3, r3, #4
 800f5a2:	1a9b      	subs	r3, r3, r2
 800f5a4:	009b      	lsls	r3, r3, #2
 800f5a6:	440b      	add	r3, r1
 800f5a8:	333d      	adds	r3, #61	; 0x3d
 800f5aa:	78ba      	ldrb	r2, [r7, #2]
 800f5ac:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800f5ae:	2300      	movs	r3, #0
}
 800f5b0:	4618      	mov	r0, r3
 800f5b2:	3714      	adds	r7, #20
 800f5b4:	46bd      	mov	sp, r7
 800f5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5ba:	4770      	bx	lr

0800f5bc <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800f5bc:	b580      	push	{r7, lr}
 800f5be:	b082      	sub	sp, #8
 800f5c0:	af00      	add	r7, sp, #0
 800f5c2:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800f5c4:	6878      	ldr	r0, [r7, #4]
 800f5c6:	f7f4 fe69 	bl	800429c <HAL_Delay>
}
 800f5ca:	bf00      	nop
 800f5cc:	3708      	adds	r7, #8
 800f5ce:	46bd      	mov	sp, r7
 800f5d0:	bd80      	pop	{r7, pc}
	...

0800f5d4 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800f5d4:	b480      	push	{r7}
 800f5d6:	b085      	sub	sp, #20
 800f5d8:	af00      	add	r7, sp, #0
 800f5da:	4603      	mov	r3, r0
 800f5dc:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f5de:	2300      	movs	r3, #0
 800f5e0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800f5e2:	79fb      	ldrb	r3, [r7, #7]
 800f5e4:	2b03      	cmp	r3, #3
 800f5e6:	d817      	bhi.n	800f618 <USBH_Get_USB_Status+0x44>
 800f5e8:	a201      	add	r2, pc, #4	; (adr r2, 800f5f0 <USBH_Get_USB_Status+0x1c>)
 800f5ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f5ee:	bf00      	nop
 800f5f0:	0800f601 	.word	0x0800f601
 800f5f4:	0800f607 	.word	0x0800f607
 800f5f8:	0800f60d 	.word	0x0800f60d
 800f5fc:	0800f613 	.word	0x0800f613
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800f600:	2300      	movs	r3, #0
 800f602:	73fb      	strb	r3, [r7, #15]
    break;
 800f604:	e00b      	b.n	800f61e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800f606:	2302      	movs	r3, #2
 800f608:	73fb      	strb	r3, [r7, #15]
    break;
 800f60a:	e008      	b.n	800f61e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800f60c:	2301      	movs	r3, #1
 800f60e:	73fb      	strb	r3, [r7, #15]
    break;
 800f610:	e005      	b.n	800f61e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800f612:	2302      	movs	r3, #2
 800f614:	73fb      	strb	r3, [r7, #15]
    break;
 800f616:	e002      	b.n	800f61e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800f618:	2302      	movs	r3, #2
 800f61a:	73fb      	strb	r3, [r7, #15]
    break;
 800f61c:	bf00      	nop
  }
  return usb_status;
 800f61e:	7bfb      	ldrb	r3, [r7, #15]
}
 800f620:	4618      	mov	r0, r3
 800f622:	3714      	adds	r7, #20
 800f624:	46bd      	mov	sp, r7
 800f626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f62a:	4770      	bx	lr

0800f62c <malloc>:
 800f62c:	4b02      	ldr	r3, [pc, #8]	; (800f638 <malloc+0xc>)
 800f62e:	4601      	mov	r1, r0
 800f630:	6818      	ldr	r0, [r3, #0]
 800f632:	f000 b82b 	b.w	800f68c <_malloc_r>
 800f636:	bf00      	nop
 800f638:	200001fc 	.word	0x200001fc

0800f63c <free>:
 800f63c:	4b02      	ldr	r3, [pc, #8]	; (800f648 <free+0xc>)
 800f63e:	4601      	mov	r1, r0
 800f640:	6818      	ldr	r0, [r3, #0]
 800f642:	f001 b985 	b.w	8010950 <_free_r>
 800f646:	bf00      	nop
 800f648:	200001fc 	.word	0x200001fc

0800f64c <sbrk_aligned>:
 800f64c:	b570      	push	{r4, r5, r6, lr}
 800f64e:	4e0e      	ldr	r6, [pc, #56]	; (800f688 <sbrk_aligned+0x3c>)
 800f650:	460c      	mov	r4, r1
 800f652:	6831      	ldr	r1, [r6, #0]
 800f654:	4605      	mov	r5, r0
 800f656:	b911      	cbnz	r1, 800f65e <sbrk_aligned+0x12>
 800f658:	f001 f914 	bl	8010884 <_sbrk_r>
 800f65c:	6030      	str	r0, [r6, #0]
 800f65e:	4621      	mov	r1, r4
 800f660:	4628      	mov	r0, r5
 800f662:	f001 f90f 	bl	8010884 <_sbrk_r>
 800f666:	1c43      	adds	r3, r0, #1
 800f668:	d00a      	beq.n	800f680 <sbrk_aligned+0x34>
 800f66a:	1cc4      	adds	r4, r0, #3
 800f66c:	f024 0403 	bic.w	r4, r4, #3
 800f670:	42a0      	cmp	r0, r4
 800f672:	d007      	beq.n	800f684 <sbrk_aligned+0x38>
 800f674:	1a21      	subs	r1, r4, r0
 800f676:	4628      	mov	r0, r5
 800f678:	f001 f904 	bl	8010884 <_sbrk_r>
 800f67c:	3001      	adds	r0, #1
 800f67e:	d101      	bne.n	800f684 <sbrk_aligned+0x38>
 800f680:	f04f 34ff 	mov.w	r4, #4294967295
 800f684:	4620      	mov	r0, r4
 800f686:	bd70      	pop	{r4, r5, r6, pc}
 800f688:	200014e8 	.word	0x200014e8

0800f68c <_malloc_r>:
 800f68c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f690:	1ccd      	adds	r5, r1, #3
 800f692:	f025 0503 	bic.w	r5, r5, #3
 800f696:	3508      	adds	r5, #8
 800f698:	2d0c      	cmp	r5, #12
 800f69a:	bf38      	it	cc
 800f69c:	250c      	movcc	r5, #12
 800f69e:	2d00      	cmp	r5, #0
 800f6a0:	4607      	mov	r7, r0
 800f6a2:	db01      	blt.n	800f6a8 <_malloc_r+0x1c>
 800f6a4:	42a9      	cmp	r1, r5
 800f6a6:	d905      	bls.n	800f6b4 <_malloc_r+0x28>
 800f6a8:	230c      	movs	r3, #12
 800f6aa:	603b      	str	r3, [r7, #0]
 800f6ac:	2600      	movs	r6, #0
 800f6ae:	4630      	mov	r0, r6
 800f6b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f6b4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800f788 <_malloc_r+0xfc>
 800f6b8:	f000 f868 	bl	800f78c <__malloc_lock>
 800f6bc:	f8d8 3000 	ldr.w	r3, [r8]
 800f6c0:	461c      	mov	r4, r3
 800f6c2:	bb5c      	cbnz	r4, 800f71c <_malloc_r+0x90>
 800f6c4:	4629      	mov	r1, r5
 800f6c6:	4638      	mov	r0, r7
 800f6c8:	f7ff ffc0 	bl	800f64c <sbrk_aligned>
 800f6cc:	1c43      	adds	r3, r0, #1
 800f6ce:	4604      	mov	r4, r0
 800f6d0:	d155      	bne.n	800f77e <_malloc_r+0xf2>
 800f6d2:	f8d8 4000 	ldr.w	r4, [r8]
 800f6d6:	4626      	mov	r6, r4
 800f6d8:	2e00      	cmp	r6, #0
 800f6da:	d145      	bne.n	800f768 <_malloc_r+0xdc>
 800f6dc:	2c00      	cmp	r4, #0
 800f6de:	d048      	beq.n	800f772 <_malloc_r+0xe6>
 800f6e0:	6823      	ldr	r3, [r4, #0]
 800f6e2:	4631      	mov	r1, r6
 800f6e4:	4638      	mov	r0, r7
 800f6e6:	eb04 0903 	add.w	r9, r4, r3
 800f6ea:	f001 f8cb 	bl	8010884 <_sbrk_r>
 800f6ee:	4581      	cmp	r9, r0
 800f6f0:	d13f      	bne.n	800f772 <_malloc_r+0xe6>
 800f6f2:	6821      	ldr	r1, [r4, #0]
 800f6f4:	1a6d      	subs	r5, r5, r1
 800f6f6:	4629      	mov	r1, r5
 800f6f8:	4638      	mov	r0, r7
 800f6fa:	f7ff ffa7 	bl	800f64c <sbrk_aligned>
 800f6fe:	3001      	adds	r0, #1
 800f700:	d037      	beq.n	800f772 <_malloc_r+0xe6>
 800f702:	6823      	ldr	r3, [r4, #0]
 800f704:	442b      	add	r3, r5
 800f706:	6023      	str	r3, [r4, #0]
 800f708:	f8d8 3000 	ldr.w	r3, [r8]
 800f70c:	2b00      	cmp	r3, #0
 800f70e:	d038      	beq.n	800f782 <_malloc_r+0xf6>
 800f710:	685a      	ldr	r2, [r3, #4]
 800f712:	42a2      	cmp	r2, r4
 800f714:	d12b      	bne.n	800f76e <_malloc_r+0xe2>
 800f716:	2200      	movs	r2, #0
 800f718:	605a      	str	r2, [r3, #4]
 800f71a:	e00f      	b.n	800f73c <_malloc_r+0xb0>
 800f71c:	6822      	ldr	r2, [r4, #0]
 800f71e:	1b52      	subs	r2, r2, r5
 800f720:	d41f      	bmi.n	800f762 <_malloc_r+0xd6>
 800f722:	2a0b      	cmp	r2, #11
 800f724:	d917      	bls.n	800f756 <_malloc_r+0xca>
 800f726:	1961      	adds	r1, r4, r5
 800f728:	42a3      	cmp	r3, r4
 800f72a:	6025      	str	r5, [r4, #0]
 800f72c:	bf18      	it	ne
 800f72e:	6059      	strne	r1, [r3, #4]
 800f730:	6863      	ldr	r3, [r4, #4]
 800f732:	bf08      	it	eq
 800f734:	f8c8 1000 	streq.w	r1, [r8]
 800f738:	5162      	str	r2, [r4, r5]
 800f73a:	604b      	str	r3, [r1, #4]
 800f73c:	4638      	mov	r0, r7
 800f73e:	f104 060b 	add.w	r6, r4, #11
 800f742:	f000 f829 	bl	800f798 <__malloc_unlock>
 800f746:	f026 0607 	bic.w	r6, r6, #7
 800f74a:	1d23      	adds	r3, r4, #4
 800f74c:	1af2      	subs	r2, r6, r3
 800f74e:	d0ae      	beq.n	800f6ae <_malloc_r+0x22>
 800f750:	1b9b      	subs	r3, r3, r6
 800f752:	50a3      	str	r3, [r4, r2]
 800f754:	e7ab      	b.n	800f6ae <_malloc_r+0x22>
 800f756:	42a3      	cmp	r3, r4
 800f758:	6862      	ldr	r2, [r4, #4]
 800f75a:	d1dd      	bne.n	800f718 <_malloc_r+0x8c>
 800f75c:	f8c8 2000 	str.w	r2, [r8]
 800f760:	e7ec      	b.n	800f73c <_malloc_r+0xb0>
 800f762:	4623      	mov	r3, r4
 800f764:	6864      	ldr	r4, [r4, #4]
 800f766:	e7ac      	b.n	800f6c2 <_malloc_r+0x36>
 800f768:	4634      	mov	r4, r6
 800f76a:	6876      	ldr	r6, [r6, #4]
 800f76c:	e7b4      	b.n	800f6d8 <_malloc_r+0x4c>
 800f76e:	4613      	mov	r3, r2
 800f770:	e7cc      	b.n	800f70c <_malloc_r+0x80>
 800f772:	230c      	movs	r3, #12
 800f774:	603b      	str	r3, [r7, #0]
 800f776:	4638      	mov	r0, r7
 800f778:	f000 f80e 	bl	800f798 <__malloc_unlock>
 800f77c:	e797      	b.n	800f6ae <_malloc_r+0x22>
 800f77e:	6025      	str	r5, [r4, #0]
 800f780:	e7dc      	b.n	800f73c <_malloc_r+0xb0>
 800f782:	605b      	str	r3, [r3, #4]
 800f784:	deff      	udf	#255	; 0xff
 800f786:	bf00      	nop
 800f788:	200014e4 	.word	0x200014e4

0800f78c <__malloc_lock>:
 800f78c:	4801      	ldr	r0, [pc, #4]	; (800f794 <__malloc_lock+0x8>)
 800f78e:	f001 b8c6 	b.w	801091e <__retarget_lock_acquire_recursive>
 800f792:	bf00      	nop
 800f794:	2000162c 	.word	0x2000162c

0800f798 <__malloc_unlock>:
 800f798:	4801      	ldr	r0, [pc, #4]	; (800f7a0 <__malloc_unlock+0x8>)
 800f79a:	f001 b8c1 	b.w	8010920 <__retarget_lock_release_recursive>
 800f79e:	bf00      	nop
 800f7a0:	2000162c 	.word	0x2000162c

0800f7a4 <sulp>:
 800f7a4:	b570      	push	{r4, r5, r6, lr}
 800f7a6:	4604      	mov	r4, r0
 800f7a8:	460d      	mov	r5, r1
 800f7aa:	ec45 4b10 	vmov	d0, r4, r5
 800f7ae:	4616      	mov	r6, r2
 800f7b0:	f001 fff0 	bl	8011794 <__ulp>
 800f7b4:	ec51 0b10 	vmov	r0, r1, d0
 800f7b8:	b17e      	cbz	r6, 800f7da <sulp+0x36>
 800f7ba:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800f7be:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800f7c2:	2b00      	cmp	r3, #0
 800f7c4:	dd09      	ble.n	800f7da <sulp+0x36>
 800f7c6:	051b      	lsls	r3, r3, #20
 800f7c8:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800f7cc:	2400      	movs	r4, #0
 800f7ce:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800f7d2:	4622      	mov	r2, r4
 800f7d4:	462b      	mov	r3, r5
 800f7d6:	f7f0 ff27 	bl	8000628 <__aeabi_dmul>
 800f7da:	bd70      	pop	{r4, r5, r6, pc}
 800f7dc:	0000      	movs	r0, r0
	...

0800f7e0 <_strtod_l>:
 800f7e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f7e4:	ed2d 8b02 	vpush	{d8}
 800f7e8:	b09b      	sub	sp, #108	; 0x6c
 800f7ea:	4604      	mov	r4, r0
 800f7ec:	9213      	str	r2, [sp, #76]	; 0x4c
 800f7ee:	2200      	movs	r2, #0
 800f7f0:	9216      	str	r2, [sp, #88]	; 0x58
 800f7f2:	460d      	mov	r5, r1
 800f7f4:	f04f 0800 	mov.w	r8, #0
 800f7f8:	f04f 0900 	mov.w	r9, #0
 800f7fc:	460a      	mov	r2, r1
 800f7fe:	9215      	str	r2, [sp, #84]	; 0x54
 800f800:	7811      	ldrb	r1, [r2, #0]
 800f802:	292b      	cmp	r1, #43	; 0x2b
 800f804:	d04c      	beq.n	800f8a0 <_strtod_l+0xc0>
 800f806:	d83a      	bhi.n	800f87e <_strtod_l+0x9e>
 800f808:	290d      	cmp	r1, #13
 800f80a:	d834      	bhi.n	800f876 <_strtod_l+0x96>
 800f80c:	2908      	cmp	r1, #8
 800f80e:	d834      	bhi.n	800f87a <_strtod_l+0x9a>
 800f810:	2900      	cmp	r1, #0
 800f812:	d03d      	beq.n	800f890 <_strtod_l+0xb0>
 800f814:	2200      	movs	r2, #0
 800f816:	920a      	str	r2, [sp, #40]	; 0x28
 800f818:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800f81a:	7832      	ldrb	r2, [r6, #0]
 800f81c:	2a30      	cmp	r2, #48	; 0x30
 800f81e:	f040 80b4 	bne.w	800f98a <_strtod_l+0x1aa>
 800f822:	7872      	ldrb	r2, [r6, #1]
 800f824:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800f828:	2a58      	cmp	r2, #88	; 0x58
 800f82a:	d170      	bne.n	800f90e <_strtod_l+0x12e>
 800f82c:	9302      	str	r3, [sp, #8]
 800f82e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f830:	9301      	str	r3, [sp, #4]
 800f832:	ab16      	add	r3, sp, #88	; 0x58
 800f834:	9300      	str	r3, [sp, #0]
 800f836:	4a8e      	ldr	r2, [pc, #568]	; (800fa70 <_strtod_l+0x290>)
 800f838:	ab17      	add	r3, sp, #92	; 0x5c
 800f83a:	a915      	add	r1, sp, #84	; 0x54
 800f83c:	4620      	mov	r0, r4
 800f83e:	f001 f93b 	bl	8010ab8 <__gethex>
 800f842:	f010 070f 	ands.w	r7, r0, #15
 800f846:	4605      	mov	r5, r0
 800f848:	d005      	beq.n	800f856 <_strtod_l+0x76>
 800f84a:	2f06      	cmp	r7, #6
 800f84c:	d12a      	bne.n	800f8a4 <_strtod_l+0xc4>
 800f84e:	3601      	adds	r6, #1
 800f850:	2300      	movs	r3, #0
 800f852:	9615      	str	r6, [sp, #84]	; 0x54
 800f854:	930a      	str	r3, [sp, #40]	; 0x28
 800f856:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800f858:	2b00      	cmp	r3, #0
 800f85a:	f040 857f 	bne.w	801035c <_strtod_l+0xb7c>
 800f85e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f860:	b1db      	cbz	r3, 800f89a <_strtod_l+0xba>
 800f862:	4642      	mov	r2, r8
 800f864:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800f868:	ec43 2b10 	vmov	d0, r2, r3
 800f86c:	b01b      	add	sp, #108	; 0x6c
 800f86e:	ecbd 8b02 	vpop	{d8}
 800f872:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f876:	2920      	cmp	r1, #32
 800f878:	d1cc      	bne.n	800f814 <_strtod_l+0x34>
 800f87a:	3201      	adds	r2, #1
 800f87c:	e7bf      	b.n	800f7fe <_strtod_l+0x1e>
 800f87e:	292d      	cmp	r1, #45	; 0x2d
 800f880:	d1c8      	bne.n	800f814 <_strtod_l+0x34>
 800f882:	2101      	movs	r1, #1
 800f884:	910a      	str	r1, [sp, #40]	; 0x28
 800f886:	1c51      	adds	r1, r2, #1
 800f888:	9115      	str	r1, [sp, #84]	; 0x54
 800f88a:	7852      	ldrb	r2, [r2, #1]
 800f88c:	2a00      	cmp	r2, #0
 800f88e:	d1c3      	bne.n	800f818 <_strtod_l+0x38>
 800f890:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800f892:	9515      	str	r5, [sp, #84]	; 0x54
 800f894:	2b00      	cmp	r3, #0
 800f896:	f040 855f 	bne.w	8010358 <_strtod_l+0xb78>
 800f89a:	4642      	mov	r2, r8
 800f89c:	464b      	mov	r3, r9
 800f89e:	e7e3      	b.n	800f868 <_strtod_l+0x88>
 800f8a0:	2100      	movs	r1, #0
 800f8a2:	e7ef      	b.n	800f884 <_strtod_l+0xa4>
 800f8a4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800f8a6:	b13a      	cbz	r2, 800f8b8 <_strtod_l+0xd8>
 800f8a8:	2135      	movs	r1, #53	; 0x35
 800f8aa:	a818      	add	r0, sp, #96	; 0x60
 800f8ac:	f002 f86f 	bl	801198e <__copybits>
 800f8b0:	9916      	ldr	r1, [sp, #88]	; 0x58
 800f8b2:	4620      	mov	r0, r4
 800f8b4:	f001 fc42 	bl	801113c <_Bfree>
 800f8b8:	3f01      	subs	r7, #1
 800f8ba:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800f8bc:	2f04      	cmp	r7, #4
 800f8be:	d806      	bhi.n	800f8ce <_strtod_l+0xee>
 800f8c0:	e8df f007 	tbb	[pc, r7]
 800f8c4:	201d0314 	.word	0x201d0314
 800f8c8:	14          	.byte	0x14
 800f8c9:	00          	.byte	0x00
 800f8ca:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800f8ce:	05e9      	lsls	r1, r5, #23
 800f8d0:	bf48      	it	mi
 800f8d2:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800f8d6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800f8da:	0d1b      	lsrs	r3, r3, #20
 800f8dc:	051b      	lsls	r3, r3, #20
 800f8de:	2b00      	cmp	r3, #0
 800f8e0:	d1b9      	bne.n	800f856 <_strtod_l+0x76>
 800f8e2:	f000 fff1 	bl	80108c8 <__errno>
 800f8e6:	2322      	movs	r3, #34	; 0x22
 800f8e8:	6003      	str	r3, [r0, #0]
 800f8ea:	e7b4      	b.n	800f856 <_strtod_l+0x76>
 800f8ec:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 800f8f0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800f8f4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800f8f8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800f8fc:	e7e7      	b.n	800f8ce <_strtod_l+0xee>
 800f8fe:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800fa78 <_strtod_l+0x298>
 800f902:	e7e4      	b.n	800f8ce <_strtod_l+0xee>
 800f904:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800f908:	f04f 38ff 	mov.w	r8, #4294967295
 800f90c:	e7df      	b.n	800f8ce <_strtod_l+0xee>
 800f90e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f910:	1c5a      	adds	r2, r3, #1
 800f912:	9215      	str	r2, [sp, #84]	; 0x54
 800f914:	785b      	ldrb	r3, [r3, #1]
 800f916:	2b30      	cmp	r3, #48	; 0x30
 800f918:	d0f9      	beq.n	800f90e <_strtod_l+0x12e>
 800f91a:	2b00      	cmp	r3, #0
 800f91c:	d09b      	beq.n	800f856 <_strtod_l+0x76>
 800f91e:	2301      	movs	r3, #1
 800f920:	f04f 0a00 	mov.w	sl, #0
 800f924:	9304      	str	r3, [sp, #16]
 800f926:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f928:	930b      	str	r3, [sp, #44]	; 0x2c
 800f92a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800f92e:	46d3      	mov	fp, sl
 800f930:	220a      	movs	r2, #10
 800f932:	9815      	ldr	r0, [sp, #84]	; 0x54
 800f934:	7806      	ldrb	r6, [r0, #0]
 800f936:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800f93a:	b2d9      	uxtb	r1, r3
 800f93c:	2909      	cmp	r1, #9
 800f93e:	d926      	bls.n	800f98e <_strtod_l+0x1ae>
 800f940:	494c      	ldr	r1, [pc, #304]	; (800fa74 <_strtod_l+0x294>)
 800f942:	2201      	movs	r2, #1
 800f944:	f000 ff58 	bl	80107f8 <strncmp>
 800f948:	2800      	cmp	r0, #0
 800f94a:	d030      	beq.n	800f9ae <_strtod_l+0x1ce>
 800f94c:	2000      	movs	r0, #0
 800f94e:	4632      	mov	r2, r6
 800f950:	9005      	str	r0, [sp, #20]
 800f952:	465e      	mov	r6, fp
 800f954:	4603      	mov	r3, r0
 800f956:	2a65      	cmp	r2, #101	; 0x65
 800f958:	d001      	beq.n	800f95e <_strtod_l+0x17e>
 800f95a:	2a45      	cmp	r2, #69	; 0x45
 800f95c:	d113      	bne.n	800f986 <_strtod_l+0x1a6>
 800f95e:	b91e      	cbnz	r6, 800f968 <_strtod_l+0x188>
 800f960:	9a04      	ldr	r2, [sp, #16]
 800f962:	4302      	orrs	r2, r0
 800f964:	d094      	beq.n	800f890 <_strtod_l+0xb0>
 800f966:	2600      	movs	r6, #0
 800f968:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800f96a:	1c6a      	adds	r2, r5, #1
 800f96c:	9215      	str	r2, [sp, #84]	; 0x54
 800f96e:	786a      	ldrb	r2, [r5, #1]
 800f970:	2a2b      	cmp	r2, #43	; 0x2b
 800f972:	d074      	beq.n	800fa5e <_strtod_l+0x27e>
 800f974:	2a2d      	cmp	r2, #45	; 0x2d
 800f976:	d078      	beq.n	800fa6a <_strtod_l+0x28a>
 800f978:	f04f 0c00 	mov.w	ip, #0
 800f97c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800f980:	2909      	cmp	r1, #9
 800f982:	d97f      	bls.n	800fa84 <_strtod_l+0x2a4>
 800f984:	9515      	str	r5, [sp, #84]	; 0x54
 800f986:	2700      	movs	r7, #0
 800f988:	e09e      	b.n	800fac8 <_strtod_l+0x2e8>
 800f98a:	2300      	movs	r3, #0
 800f98c:	e7c8      	b.n	800f920 <_strtod_l+0x140>
 800f98e:	f1bb 0f08 	cmp.w	fp, #8
 800f992:	bfd8      	it	le
 800f994:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800f996:	f100 0001 	add.w	r0, r0, #1
 800f99a:	bfda      	itte	le
 800f99c:	fb02 3301 	mlale	r3, r2, r1, r3
 800f9a0:	9309      	strle	r3, [sp, #36]	; 0x24
 800f9a2:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800f9a6:	f10b 0b01 	add.w	fp, fp, #1
 800f9aa:	9015      	str	r0, [sp, #84]	; 0x54
 800f9ac:	e7c1      	b.n	800f932 <_strtod_l+0x152>
 800f9ae:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f9b0:	1c5a      	adds	r2, r3, #1
 800f9b2:	9215      	str	r2, [sp, #84]	; 0x54
 800f9b4:	785a      	ldrb	r2, [r3, #1]
 800f9b6:	f1bb 0f00 	cmp.w	fp, #0
 800f9ba:	d037      	beq.n	800fa2c <_strtod_l+0x24c>
 800f9bc:	9005      	str	r0, [sp, #20]
 800f9be:	465e      	mov	r6, fp
 800f9c0:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800f9c4:	2b09      	cmp	r3, #9
 800f9c6:	d912      	bls.n	800f9ee <_strtod_l+0x20e>
 800f9c8:	2301      	movs	r3, #1
 800f9ca:	e7c4      	b.n	800f956 <_strtod_l+0x176>
 800f9cc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f9ce:	1c5a      	adds	r2, r3, #1
 800f9d0:	9215      	str	r2, [sp, #84]	; 0x54
 800f9d2:	785a      	ldrb	r2, [r3, #1]
 800f9d4:	3001      	adds	r0, #1
 800f9d6:	2a30      	cmp	r2, #48	; 0x30
 800f9d8:	d0f8      	beq.n	800f9cc <_strtod_l+0x1ec>
 800f9da:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800f9de:	2b08      	cmp	r3, #8
 800f9e0:	f200 84c1 	bhi.w	8010366 <_strtod_l+0xb86>
 800f9e4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f9e6:	9005      	str	r0, [sp, #20]
 800f9e8:	2000      	movs	r0, #0
 800f9ea:	930b      	str	r3, [sp, #44]	; 0x2c
 800f9ec:	4606      	mov	r6, r0
 800f9ee:	3a30      	subs	r2, #48	; 0x30
 800f9f0:	f100 0301 	add.w	r3, r0, #1
 800f9f4:	d014      	beq.n	800fa20 <_strtod_l+0x240>
 800f9f6:	9905      	ldr	r1, [sp, #20]
 800f9f8:	4419      	add	r1, r3
 800f9fa:	9105      	str	r1, [sp, #20]
 800f9fc:	4633      	mov	r3, r6
 800f9fe:	eb00 0c06 	add.w	ip, r0, r6
 800fa02:	210a      	movs	r1, #10
 800fa04:	4563      	cmp	r3, ip
 800fa06:	d113      	bne.n	800fa30 <_strtod_l+0x250>
 800fa08:	1833      	adds	r3, r6, r0
 800fa0a:	2b08      	cmp	r3, #8
 800fa0c:	f106 0601 	add.w	r6, r6, #1
 800fa10:	4406      	add	r6, r0
 800fa12:	dc1a      	bgt.n	800fa4a <_strtod_l+0x26a>
 800fa14:	9909      	ldr	r1, [sp, #36]	; 0x24
 800fa16:	230a      	movs	r3, #10
 800fa18:	fb03 2301 	mla	r3, r3, r1, r2
 800fa1c:	9309      	str	r3, [sp, #36]	; 0x24
 800fa1e:	2300      	movs	r3, #0
 800fa20:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800fa22:	1c51      	adds	r1, r2, #1
 800fa24:	9115      	str	r1, [sp, #84]	; 0x54
 800fa26:	7852      	ldrb	r2, [r2, #1]
 800fa28:	4618      	mov	r0, r3
 800fa2a:	e7c9      	b.n	800f9c0 <_strtod_l+0x1e0>
 800fa2c:	4658      	mov	r0, fp
 800fa2e:	e7d2      	b.n	800f9d6 <_strtod_l+0x1f6>
 800fa30:	2b08      	cmp	r3, #8
 800fa32:	f103 0301 	add.w	r3, r3, #1
 800fa36:	dc03      	bgt.n	800fa40 <_strtod_l+0x260>
 800fa38:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800fa3a:	434f      	muls	r7, r1
 800fa3c:	9709      	str	r7, [sp, #36]	; 0x24
 800fa3e:	e7e1      	b.n	800fa04 <_strtod_l+0x224>
 800fa40:	2b10      	cmp	r3, #16
 800fa42:	bfd8      	it	le
 800fa44:	fb01 fa0a 	mulle.w	sl, r1, sl
 800fa48:	e7dc      	b.n	800fa04 <_strtod_l+0x224>
 800fa4a:	2e10      	cmp	r6, #16
 800fa4c:	bfdc      	itt	le
 800fa4e:	230a      	movle	r3, #10
 800fa50:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800fa54:	e7e3      	b.n	800fa1e <_strtod_l+0x23e>
 800fa56:	2300      	movs	r3, #0
 800fa58:	9305      	str	r3, [sp, #20]
 800fa5a:	2301      	movs	r3, #1
 800fa5c:	e780      	b.n	800f960 <_strtod_l+0x180>
 800fa5e:	f04f 0c00 	mov.w	ip, #0
 800fa62:	1caa      	adds	r2, r5, #2
 800fa64:	9215      	str	r2, [sp, #84]	; 0x54
 800fa66:	78aa      	ldrb	r2, [r5, #2]
 800fa68:	e788      	b.n	800f97c <_strtod_l+0x19c>
 800fa6a:	f04f 0c01 	mov.w	ip, #1
 800fa6e:	e7f8      	b.n	800fa62 <_strtod_l+0x282>
 800fa70:	080134c8 	.word	0x080134c8
 800fa74:	080134b8 	.word	0x080134b8
 800fa78:	7ff00000 	.word	0x7ff00000
 800fa7c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800fa7e:	1c51      	adds	r1, r2, #1
 800fa80:	9115      	str	r1, [sp, #84]	; 0x54
 800fa82:	7852      	ldrb	r2, [r2, #1]
 800fa84:	2a30      	cmp	r2, #48	; 0x30
 800fa86:	d0f9      	beq.n	800fa7c <_strtod_l+0x29c>
 800fa88:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800fa8c:	2908      	cmp	r1, #8
 800fa8e:	f63f af7a 	bhi.w	800f986 <_strtod_l+0x1a6>
 800fa92:	3a30      	subs	r2, #48	; 0x30
 800fa94:	9208      	str	r2, [sp, #32]
 800fa96:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800fa98:	920c      	str	r2, [sp, #48]	; 0x30
 800fa9a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800fa9c:	1c57      	adds	r7, r2, #1
 800fa9e:	9715      	str	r7, [sp, #84]	; 0x54
 800faa0:	7852      	ldrb	r2, [r2, #1]
 800faa2:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800faa6:	f1be 0f09 	cmp.w	lr, #9
 800faaa:	d938      	bls.n	800fb1e <_strtod_l+0x33e>
 800faac:	990c      	ldr	r1, [sp, #48]	; 0x30
 800faae:	1a7f      	subs	r7, r7, r1
 800fab0:	2f08      	cmp	r7, #8
 800fab2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800fab6:	dc03      	bgt.n	800fac0 <_strtod_l+0x2e0>
 800fab8:	9908      	ldr	r1, [sp, #32]
 800faba:	428f      	cmp	r7, r1
 800fabc:	bfa8      	it	ge
 800fabe:	460f      	movge	r7, r1
 800fac0:	f1bc 0f00 	cmp.w	ip, #0
 800fac4:	d000      	beq.n	800fac8 <_strtod_l+0x2e8>
 800fac6:	427f      	negs	r7, r7
 800fac8:	2e00      	cmp	r6, #0
 800faca:	d14f      	bne.n	800fb6c <_strtod_l+0x38c>
 800facc:	9904      	ldr	r1, [sp, #16]
 800face:	4301      	orrs	r1, r0
 800fad0:	f47f aec1 	bne.w	800f856 <_strtod_l+0x76>
 800fad4:	2b00      	cmp	r3, #0
 800fad6:	f47f aedb 	bne.w	800f890 <_strtod_l+0xb0>
 800fada:	2a69      	cmp	r2, #105	; 0x69
 800fadc:	d029      	beq.n	800fb32 <_strtod_l+0x352>
 800fade:	dc26      	bgt.n	800fb2e <_strtod_l+0x34e>
 800fae0:	2a49      	cmp	r2, #73	; 0x49
 800fae2:	d026      	beq.n	800fb32 <_strtod_l+0x352>
 800fae4:	2a4e      	cmp	r2, #78	; 0x4e
 800fae6:	f47f aed3 	bne.w	800f890 <_strtod_l+0xb0>
 800faea:	499b      	ldr	r1, [pc, #620]	; (800fd58 <_strtod_l+0x578>)
 800faec:	a815      	add	r0, sp, #84	; 0x54
 800faee:	f001 fa23 	bl	8010f38 <__match>
 800faf2:	2800      	cmp	r0, #0
 800faf4:	f43f aecc 	beq.w	800f890 <_strtod_l+0xb0>
 800faf8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fafa:	781b      	ldrb	r3, [r3, #0]
 800fafc:	2b28      	cmp	r3, #40	; 0x28
 800fafe:	d12f      	bne.n	800fb60 <_strtod_l+0x380>
 800fb00:	4996      	ldr	r1, [pc, #600]	; (800fd5c <_strtod_l+0x57c>)
 800fb02:	aa18      	add	r2, sp, #96	; 0x60
 800fb04:	a815      	add	r0, sp, #84	; 0x54
 800fb06:	f001 fa2b 	bl	8010f60 <__hexnan>
 800fb0a:	2805      	cmp	r0, #5
 800fb0c:	d128      	bne.n	800fb60 <_strtod_l+0x380>
 800fb0e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800fb10:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800fb14:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800fb18:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800fb1c:	e69b      	b.n	800f856 <_strtod_l+0x76>
 800fb1e:	9f08      	ldr	r7, [sp, #32]
 800fb20:	210a      	movs	r1, #10
 800fb22:	fb01 2107 	mla	r1, r1, r7, r2
 800fb26:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800fb2a:	9208      	str	r2, [sp, #32]
 800fb2c:	e7b5      	b.n	800fa9a <_strtod_l+0x2ba>
 800fb2e:	2a6e      	cmp	r2, #110	; 0x6e
 800fb30:	e7d9      	b.n	800fae6 <_strtod_l+0x306>
 800fb32:	498b      	ldr	r1, [pc, #556]	; (800fd60 <_strtod_l+0x580>)
 800fb34:	a815      	add	r0, sp, #84	; 0x54
 800fb36:	f001 f9ff 	bl	8010f38 <__match>
 800fb3a:	2800      	cmp	r0, #0
 800fb3c:	f43f aea8 	beq.w	800f890 <_strtod_l+0xb0>
 800fb40:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fb42:	4988      	ldr	r1, [pc, #544]	; (800fd64 <_strtod_l+0x584>)
 800fb44:	3b01      	subs	r3, #1
 800fb46:	a815      	add	r0, sp, #84	; 0x54
 800fb48:	9315      	str	r3, [sp, #84]	; 0x54
 800fb4a:	f001 f9f5 	bl	8010f38 <__match>
 800fb4e:	b910      	cbnz	r0, 800fb56 <_strtod_l+0x376>
 800fb50:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fb52:	3301      	adds	r3, #1
 800fb54:	9315      	str	r3, [sp, #84]	; 0x54
 800fb56:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800fd74 <_strtod_l+0x594>
 800fb5a:	f04f 0800 	mov.w	r8, #0
 800fb5e:	e67a      	b.n	800f856 <_strtod_l+0x76>
 800fb60:	4881      	ldr	r0, [pc, #516]	; (800fd68 <_strtod_l+0x588>)
 800fb62:	f000 feed 	bl	8010940 <nan>
 800fb66:	ec59 8b10 	vmov	r8, r9, d0
 800fb6a:	e674      	b.n	800f856 <_strtod_l+0x76>
 800fb6c:	9b05      	ldr	r3, [sp, #20]
 800fb6e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fb70:	1afb      	subs	r3, r7, r3
 800fb72:	f1bb 0f00 	cmp.w	fp, #0
 800fb76:	bf08      	it	eq
 800fb78:	46b3      	moveq	fp, r6
 800fb7a:	2e10      	cmp	r6, #16
 800fb7c:	9308      	str	r3, [sp, #32]
 800fb7e:	4635      	mov	r5, r6
 800fb80:	bfa8      	it	ge
 800fb82:	2510      	movge	r5, #16
 800fb84:	f7f0 fcd6 	bl	8000534 <__aeabi_ui2d>
 800fb88:	2e09      	cmp	r6, #9
 800fb8a:	4680      	mov	r8, r0
 800fb8c:	4689      	mov	r9, r1
 800fb8e:	dd13      	ble.n	800fbb8 <_strtod_l+0x3d8>
 800fb90:	4b76      	ldr	r3, [pc, #472]	; (800fd6c <_strtod_l+0x58c>)
 800fb92:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800fb96:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800fb9a:	f7f0 fd45 	bl	8000628 <__aeabi_dmul>
 800fb9e:	4680      	mov	r8, r0
 800fba0:	4650      	mov	r0, sl
 800fba2:	4689      	mov	r9, r1
 800fba4:	f7f0 fcc6 	bl	8000534 <__aeabi_ui2d>
 800fba8:	4602      	mov	r2, r0
 800fbaa:	460b      	mov	r3, r1
 800fbac:	4640      	mov	r0, r8
 800fbae:	4649      	mov	r1, r9
 800fbb0:	f7f0 fb84 	bl	80002bc <__adddf3>
 800fbb4:	4680      	mov	r8, r0
 800fbb6:	4689      	mov	r9, r1
 800fbb8:	2e0f      	cmp	r6, #15
 800fbba:	dc38      	bgt.n	800fc2e <_strtod_l+0x44e>
 800fbbc:	9b08      	ldr	r3, [sp, #32]
 800fbbe:	2b00      	cmp	r3, #0
 800fbc0:	f43f ae49 	beq.w	800f856 <_strtod_l+0x76>
 800fbc4:	dd24      	ble.n	800fc10 <_strtod_l+0x430>
 800fbc6:	2b16      	cmp	r3, #22
 800fbc8:	dc0b      	bgt.n	800fbe2 <_strtod_l+0x402>
 800fbca:	4968      	ldr	r1, [pc, #416]	; (800fd6c <_strtod_l+0x58c>)
 800fbcc:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800fbd0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fbd4:	4642      	mov	r2, r8
 800fbd6:	464b      	mov	r3, r9
 800fbd8:	f7f0 fd26 	bl	8000628 <__aeabi_dmul>
 800fbdc:	4680      	mov	r8, r0
 800fbde:	4689      	mov	r9, r1
 800fbe0:	e639      	b.n	800f856 <_strtod_l+0x76>
 800fbe2:	9a08      	ldr	r2, [sp, #32]
 800fbe4:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800fbe8:	4293      	cmp	r3, r2
 800fbea:	db20      	blt.n	800fc2e <_strtod_l+0x44e>
 800fbec:	4c5f      	ldr	r4, [pc, #380]	; (800fd6c <_strtod_l+0x58c>)
 800fbee:	f1c6 060f 	rsb	r6, r6, #15
 800fbf2:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800fbf6:	4642      	mov	r2, r8
 800fbf8:	464b      	mov	r3, r9
 800fbfa:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fbfe:	f7f0 fd13 	bl	8000628 <__aeabi_dmul>
 800fc02:	9b08      	ldr	r3, [sp, #32]
 800fc04:	1b9e      	subs	r6, r3, r6
 800fc06:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800fc0a:	e9d4 2300 	ldrd	r2, r3, [r4]
 800fc0e:	e7e3      	b.n	800fbd8 <_strtod_l+0x3f8>
 800fc10:	9b08      	ldr	r3, [sp, #32]
 800fc12:	3316      	adds	r3, #22
 800fc14:	db0b      	blt.n	800fc2e <_strtod_l+0x44e>
 800fc16:	9b05      	ldr	r3, [sp, #20]
 800fc18:	1bdf      	subs	r7, r3, r7
 800fc1a:	4b54      	ldr	r3, [pc, #336]	; (800fd6c <_strtod_l+0x58c>)
 800fc1c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800fc20:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fc24:	4640      	mov	r0, r8
 800fc26:	4649      	mov	r1, r9
 800fc28:	f7f0 fe28 	bl	800087c <__aeabi_ddiv>
 800fc2c:	e7d6      	b.n	800fbdc <_strtod_l+0x3fc>
 800fc2e:	9b08      	ldr	r3, [sp, #32]
 800fc30:	1b75      	subs	r5, r6, r5
 800fc32:	441d      	add	r5, r3
 800fc34:	2d00      	cmp	r5, #0
 800fc36:	dd70      	ble.n	800fd1a <_strtod_l+0x53a>
 800fc38:	f015 030f 	ands.w	r3, r5, #15
 800fc3c:	d00a      	beq.n	800fc54 <_strtod_l+0x474>
 800fc3e:	494b      	ldr	r1, [pc, #300]	; (800fd6c <_strtod_l+0x58c>)
 800fc40:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800fc44:	4642      	mov	r2, r8
 800fc46:	464b      	mov	r3, r9
 800fc48:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fc4c:	f7f0 fcec 	bl	8000628 <__aeabi_dmul>
 800fc50:	4680      	mov	r8, r0
 800fc52:	4689      	mov	r9, r1
 800fc54:	f035 050f 	bics.w	r5, r5, #15
 800fc58:	d04d      	beq.n	800fcf6 <_strtod_l+0x516>
 800fc5a:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800fc5e:	dd22      	ble.n	800fca6 <_strtod_l+0x4c6>
 800fc60:	2500      	movs	r5, #0
 800fc62:	46ab      	mov	fp, r5
 800fc64:	9509      	str	r5, [sp, #36]	; 0x24
 800fc66:	9505      	str	r5, [sp, #20]
 800fc68:	2322      	movs	r3, #34	; 0x22
 800fc6a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800fd74 <_strtod_l+0x594>
 800fc6e:	6023      	str	r3, [r4, #0]
 800fc70:	f04f 0800 	mov.w	r8, #0
 800fc74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fc76:	2b00      	cmp	r3, #0
 800fc78:	f43f aded 	beq.w	800f856 <_strtod_l+0x76>
 800fc7c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800fc7e:	4620      	mov	r0, r4
 800fc80:	f001 fa5c 	bl	801113c <_Bfree>
 800fc84:	9905      	ldr	r1, [sp, #20]
 800fc86:	4620      	mov	r0, r4
 800fc88:	f001 fa58 	bl	801113c <_Bfree>
 800fc8c:	4659      	mov	r1, fp
 800fc8e:	4620      	mov	r0, r4
 800fc90:	f001 fa54 	bl	801113c <_Bfree>
 800fc94:	9909      	ldr	r1, [sp, #36]	; 0x24
 800fc96:	4620      	mov	r0, r4
 800fc98:	f001 fa50 	bl	801113c <_Bfree>
 800fc9c:	4629      	mov	r1, r5
 800fc9e:	4620      	mov	r0, r4
 800fca0:	f001 fa4c 	bl	801113c <_Bfree>
 800fca4:	e5d7      	b.n	800f856 <_strtod_l+0x76>
 800fca6:	4b32      	ldr	r3, [pc, #200]	; (800fd70 <_strtod_l+0x590>)
 800fca8:	9304      	str	r3, [sp, #16]
 800fcaa:	2300      	movs	r3, #0
 800fcac:	112d      	asrs	r5, r5, #4
 800fcae:	4640      	mov	r0, r8
 800fcb0:	4649      	mov	r1, r9
 800fcb2:	469a      	mov	sl, r3
 800fcb4:	2d01      	cmp	r5, #1
 800fcb6:	dc21      	bgt.n	800fcfc <_strtod_l+0x51c>
 800fcb8:	b10b      	cbz	r3, 800fcbe <_strtod_l+0x4de>
 800fcba:	4680      	mov	r8, r0
 800fcbc:	4689      	mov	r9, r1
 800fcbe:	492c      	ldr	r1, [pc, #176]	; (800fd70 <_strtod_l+0x590>)
 800fcc0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800fcc4:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800fcc8:	4642      	mov	r2, r8
 800fcca:	464b      	mov	r3, r9
 800fccc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fcd0:	f7f0 fcaa 	bl	8000628 <__aeabi_dmul>
 800fcd4:	4b27      	ldr	r3, [pc, #156]	; (800fd74 <_strtod_l+0x594>)
 800fcd6:	460a      	mov	r2, r1
 800fcd8:	400b      	ands	r3, r1
 800fcda:	4927      	ldr	r1, [pc, #156]	; (800fd78 <_strtod_l+0x598>)
 800fcdc:	428b      	cmp	r3, r1
 800fcde:	4680      	mov	r8, r0
 800fce0:	d8be      	bhi.n	800fc60 <_strtod_l+0x480>
 800fce2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800fce6:	428b      	cmp	r3, r1
 800fce8:	bf86      	itte	hi
 800fcea:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800fd7c <_strtod_l+0x59c>
 800fcee:	f04f 38ff 	movhi.w	r8, #4294967295
 800fcf2:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800fcf6:	2300      	movs	r3, #0
 800fcf8:	9304      	str	r3, [sp, #16]
 800fcfa:	e07b      	b.n	800fdf4 <_strtod_l+0x614>
 800fcfc:	07ea      	lsls	r2, r5, #31
 800fcfe:	d505      	bpl.n	800fd0c <_strtod_l+0x52c>
 800fd00:	9b04      	ldr	r3, [sp, #16]
 800fd02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd06:	f7f0 fc8f 	bl	8000628 <__aeabi_dmul>
 800fd0a:	2301      	movs	r3, #1
 800fd0c:	9a04      	ldr	r2, [sp, #16]
 800fd0e:	3208      	adds	r2, #8
 800fd10:	f10a 0a01 	add.w	sl, sl, #1
 800fd14:	106d      	asrs	r5, r5, #1
 800fd16:	9204      	str	r2, [sp, #16]
 800fd18:	e7cc      	b.n	800fcb4 <_strtod_l+0x4d4>
 800fd1a:	d0ec      	beq.n	800fcf6 <_strtod_l+0x516>
 800fd1c:	426d      	negs	r5, r5
 800fd1e:	f015 020f 	ands.w	r2, r5, #15
 800fd22:	d00a      	beq.n	800fd3a <_strtod_l+0x55a>
 800fd24:	4b11      	ldr	r3, [pc, #68]	; (800fd6c <_strtod_l+0x58c>)
 800fd26:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fd2a:	4640      	mov	r0, r8
 800fd2c:	4649      	mov	r1, r9
 800fd2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd32:	f7f0 fda3 	bl	800087c <__aeabi_ddiv>
 800fd36:	4680      	mov	r8, r0
 800fd38:	4689      	mov	r9, r1
 800fd3a:	112d      	asrs	r5, r5, #4
 800fd3c:	d0db      	beq.n	800fcf6 <_strtod_l+0x516>
 800fd3e:	2d1f      	cmp	r5, #31
 800fd40:	dd1e      	ble.n	800fd80 <_strtod_l+0x5a0>
 800fd42:	2500      	movs	r5, #0
 800fd44:	46ab      	mov	fp, r5
 800fd46:	9509      	str	r5, [sp, #36]	; 0x24
 800fd48:	9505      	str	r5, [sp, #20]
 800fd4a:	2322      	movs	r3, #34	; 0x22
 800fd4c:	f04f 0800 	mov.w	r8, #0
 800fd50:	f04f 0900 	mov.w	r9, #0
 800fd54:	6023      	str	r3, [r4, #0]
 800fd56:	e78d      	b.n	800fc74 <_strtod_l+0x494>
 800fd58:	080134c3 	.word	0x080134c3
 800fd5c:	080134dc 	.word	0x080134dc
 800fd60:	080134ba 	.word	0x080134ba
 800fd64:	080134bd 	.word	0x080134bd
 800fd68:	08013873 	.word	0x08013873
 800fd6c:	08013630 	.word	0x08013630
 800fd70:	08013608 	.word	0x08013608
 800fd74:	7ff00000 	.word	0x7ff00000
 800fd78:	7ca00000 	.word	0x7ca00000
 800fd7c:	7fefffff 	.word	0x7fefffff
 800fd80:	f015 0310 	ands.w	r3, r5, #16
 800fd84:	bf18      	it	ne
 800fd86:	236a      	movne	r3, #106	; 0x6a
 800fd88:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 801012c <_strtod_l+0x94c>
 800fd8c:	9304      	str	r3, [sp, #16]
 800fd8e:	4640      	mov	r0, r8
 800fd90:	4649      	mov	r1, r9
 800fd92:	2300      	movs	r3, #0
 800fd94:	07ea      	lsls	r2, r5, #31
 800fd96:	d504      	bpl.n	800fda2 <_strtod_l+0x5c2>
 800fd98:	e9da 2300 	ldrd	r2, r3, [sl]
 800fd9c:	f7f0 fc44 	bl	8000628 <__aeabi_dmul>
 800fda0:	2301      	movs	r3, #1
 800fda2:	106d      	asrs	r5, r5, #1
 800fda4:	f10a 0a08 	add.w	sl, sl, #8
 800fda8:	d1f4      	bne.n	800fd94 <_strtod_l+0x5b4>
 800fdaa:	b10b      	cbz	r3, 800fdb0 <_strtod_l+0x5d0>
 800fdac:	4680      	mov	r8, r0
 800fdae:	4689      	mov	r9, r1
 800fdb0:	9b04      	ldr	r3, [sp, #16]
 800fdb2:	b1bb      	cbz	r3, 800fde4 <_strtod_l+0x604>
 800fdb4:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800fdb8:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800fdbc:	2b00      	cmp	r3, #0
 800fdbe:	4649      	mov	r1, r9
 800fdc0:	dd10      	ble.n	800fde4 <_strtod_l+0x604>
 800fdc2:	2b1f      	cmp	r3, #31
 800fdc4:	f340 811e 	ble.w	8010004 <_strtod_l+0x824>
 800fdc8:	2b34      	cmp	r3, #52	; 0x34
 800fdca:	bfde      	ittt	le
 800fdcc:	f04f 33ff 	movle.w	r3, #4294967295
 800fdd0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800fdd4:	4093      	lslle	r3, r2
 800fdd6:	f04f 0800 	mov.w	r8, #0
 800fdda:	bfcc      	ite	gt
 800fddc:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800fde0:	ea03 0901 	andle.w	r9, r3, r1
 800fde4:	2200      	movs	r2, #0
 800fde6:	2300      	movs	r3, #0
 800fde8:	4640      	mov	r0, r8
 800fdea:	4649      	mov	r1, r9
 800fdec:	f7f0 fe84 	bl	8000af8 <__aeabi_dcmpeq>
 800fdf0:	2800      	cmp	r0, #0
 800fdf2:	d1a6      	bne.n	800fd42 <_strtod_l+0x562>
 800fdf4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fdf6:	9300      	str	r3, [sp, #0]
 800fdf8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800fdfa:	4633      	mov	r3, r6
 800fdfc:	465a      	mov	r2, fp
 800fdfe:	4620      	mov	r0, r4
 800fe00:	f001 fa04 	bl	801120c <__s2b>
 800fe04:	9009      	str	r0, [sp, #36]	; 0x24
 800fe06:	2800      	cmp	r0, #0
 800fe08:	f43f af2a 	beq.w	800fc60 <_strtod_l+0x480>
 800fe0c:	9a08      	ldr	r2, [sp, #32]
 800fe0e:	9b05      	ldr	r3, [sp, #20]
 800fe10:	2a00      	cmp	r2, #0
 800fe12:	eba3 0307 	sub.w	r3, r3, r7
 800fe16:	bfa8      	it	ge
 800fe18:	2300      	movge	r3, #0
 800fe1a:	930c      	str	r3, [sp, #48]	; 0x30
 800fe1c:	2500      	movs	r5, #0
 800fe1e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800fe22:	9312      	str	r3, [sp, #72]	; 0x48
 800fe24:	46ab      	mov	fp, r5
 800fe26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fe28:	4620      	mov	r0, r4
 800fe2a:	6859      	ldr	r1, [r3, #4]
 800fe2c:	f001 f946 	bl	80110bc <_Balloc>
 800fe30:	9005      	str	r0, [sp, #20]
 800fe32:	2800      	cmp	r0, #0
 800fe34:	f43f af18 	beq.w	800fc68 <_strtod_l+0x488>
 800fe38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fe3a:	691a      	ldr	r2, [r3, #16]
 800fe3c:	3202      	adds	r2, #2
 800fe3e:	f103 010c 	add.w	r1, r3, #12
 800fe42:	0092      	lsls	r2, r2, #2
 800fe44:	300c      	adds	r0, #12
 800fe46:	f000 fd6c 	bl	8010922 <memcpy>
 800fe4a:	ec49 8b10 	vmov	d0, r8, r9
 800fe4e:	aa18      	add	r2, sp, #96	; 0x60
 800fe50:	a917      	add	r1, sp, #92	; 0x5c
 800fe52:	4620      	mov	r0, r4
 800fe54:	f001 fd0e 	bl	8011874 <__d2b>
 800fe58:	ec49 8b18 	vmov	d8, r8, r9
 800fe5c:	9016      	str	r0, [sp, #88]	; 0x58
 800fe5e:	2800      	cmp	r0, #0
 800fe60:	f43f af02 	beq.w	800fc68 <_strtod_l+0x488>
 800fe64:	2101      	movs	r1, #1
 800fe66:	4620      	mov	r0, r4
 800fe68:	f001 fa68 	bl	801133c <__i2b>
 800fe6c:	4683      	mov	fp, r0
 800fe6e:	2800      	cmp	r0, #0
 800fe70:	f43f aefa 	beq.w	800fc68 <_strtod_l+0x488>
 800fe74:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800fe76:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800fe78:	2e00      	cmp	r6, #0
 800fe7a:	bfab      	itete	ge
 800fe7c:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800fe7e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 800fe80:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800fe82:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800fe86:	bfac      	ite	ge
 800fe88:	eb06 0a03 	addge.w	sl, r6, r3
 800fe8c:	1b9f      	sublt	r7, r3, r6
 800fe8e:	9b04      	ldr	r3, [sp, #16]
 800fe90:	1af6      	subs	r6, r6, r3
 800fe92:	4416      	add	r6, r2
 800fe94:	4ba0      	ldr	r3, [pc, #640]	; (8010118 <_strtod_l+0x938>)
 800fe96:	3e01      	subs	r6, #1
 800fe98:	429e      	cmp	r6, r3
 800fe9a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800fe9e:	f280 80c4 	bge.w	801002a <_strtod_l+0x84a>
 800fea2:	1b9b      	subs	r3, r3, r6
 800fea4:	2b1f      	cmp	r3, #31
 800fea6:	eba2 0203 	sub.w	r2, r2, r3
 800feaa:	f04f 0101 	mov.w	r1, #1
 800feae:	f300 80b0 	bgt.w	8010012 <_strtod_l+0x832>
 800feb2:	fa01 f303 	lsl.w	r3, r1, r3
 800feb6:	930e      	str	r3, [sp, #56]	; 0x38
 800feb8:	2300      	movs	r3, #0
 800feba:	930d      	str	r3, [sp, #52]	; 0x34
 800febc:	eb0a 0602 	add.w	r6, sl, r2
 800fec0:	9b04      	ldr	r3, [sp, #16]
 800fec2:	45b2      	cmp	sl, r6
 800fec4:	4417      	add	r7, r2
 800fec6:	441f      	add	r7, r3
 800fec8:	4653      	mov	r3, sl
 800feca:	bfa8      	it	ge
 800fecc:	4633      	movge	r3, r6
 800fece:	42bb      	cmp	r3, r7
 800fed0:	bfa8      	it	ge
 800fed2:	463b      	movge	r3, r7
 800fed4:	2b00      	cmp	r3, #0
 800fed6:	bfc2      	ittt	gt
 800fed8:	1af6      	subgt	r6, r6, r3
 800feda:	1aff      	subgt	r7, r7, r3
 800fedc:	ebaa 0a03 	subgt.w	sl, sl, r3
 800fee0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fee2:	2b00      	cmp	r3, #0
 800fee4:	dd17      	ble.n	800ff16 <_strtod_l+0x736>
 800fee6:	4659      	mov	r1, fp
 800fee8:	461a      	mov	r2, r3
 800feea:	4620      	mov	r0, r4
 800feec:	f001 fae6 	bl	80114bc <__pow5mult>
 800fef0:	4683      	mov	fp, r0
 800fef2:	2800      	cmp	r0, #0
 800fef4:	f43f aeb8 	beq.w	800fc68 <_strtod_l+0x488>
 800fef8:	4601      	mov	r1, r0
 800fefa:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800fefc:	4620      	mov	r0, r4
 800fefe:	f001 fa33 	bl	8011368 <__multiply>
 800ff02:	900b      	str	r0, [sp, #44]	; 0x2c
 800ff04:	2800      	cmp	r0, #0
 800ff06:	f43f aeaf 	beq.w	800fc68 <_strtod_l+0x488>
 800ff0a:	9916      	ldr	r1, [sp, #88]	; 0x58
 800ff0c:	4620      	mov	r0, r4
 800ff0e:	f001 f915 	bl	801113c <_Bfree>
 800ff12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ff14:	9316      	str	r3, [sp, #88]	; 0x58
 800ff16:	2e00      	cmp	r6, #0
 800ff18:	f300 808c 	bgt.w	8010034 <_strtod_l+0x854>
 800ff1c:	9b08      	ldr	r3, [sp, #32]
 800ff1e:	2b00      	cmp	r3, #0
 800ff20:	dd08      	ble.n	800ff34 <_strtod_l+0x754>
 800ff22:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ff24:	9905      	ldr	r1, [sp, #20]
 800ff26:	4620      	mov	r0, r4
 800ff28:	f001 fac8 	bl	80114bc <__pow5mult>
 800ff2c:	9005      	str	r0, [sp, #20]
 800ff2e:	2800      	cmp	r0, #0
 800ff30:	f43f ae9a 	beq.w	800fc68 <_strtod_l+0x488>
 800ff34:	2f00      	cmp	r7, #0
 800ff36:	dd08      	ble.n	800ff4a <_strtod_l+0x76a>
 800ff38:	9905      	ldr	r1, [sp, #20]
 800ff3a:	463a      	mov	r2, r7
 800ff3c:	4620      	mov	r0, r4
 800ff3e:	f001 fb17 	bl	8011570 <__lshift>
 800ff42:	9005      	str	r0, [sp, #20]
 800ff44:	2800      	cmp	r0, #0
 800ff46:	f43f ae8f 	beq.w	800fc68 <_strtod_l+0x488>
 800ff4a:	f1ba 0f00 	cmp.w	sl, #0
 800ff4e:	dd08      	ble.n	800ff62 <_strtod_l+0x782>
 800ff50:	4659      	mov	r1, fp
 800ff52:	4652      	mov	r2, sl
 800ff54:	4620      	mov	r0, r4
 800ff56:	f001 fb0b 	bl	8011570 <__lshift>
 800ff5a:	4683      	mov	fp, r0
 800ff5c:	2800      	cmp	r0, #0
 800ff5e:	f43f ae83 	beq.w	800fc68 <_strtod_l+0x488>
 800ff62:	9a05      	ldr	r2, [sp, #20]
 800ff64:	9916      	ldr	r1, [sp, #88]	; 0x58
 800ff66:	4620      	mov	r0, r4
 800ff68:	f001 fb8a 	bl	8011680 <__mdiff>
 800ff6c:	4605      	mov	r5, r0
 800ff6e:	2800      	cmp	r0, #0
 800ff70:	f43f ae7a 	beq.w	800fc68 <_strtod_l+0x488>
 800ff74:	68c3      	ldr	r3, [r0, #12]
 800ff76:	930b      	str	r3, [sp, #44]	; 0x2c
 800ff78:	2300      	movs	r3, #0
 800ff7a:	60c3      	str	r3, [r0, #12]
 800ff7c:	4659      	mov	r1, fp
 800ff7e:	f001 fb63 	bl	8011648 <__mcmp>
 800ff82:	2800      	cmp	r0, #0
 800ff84:	da60      	bge.n	8010048 <_strtod_l+0x868>
 800ff86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ff88:	ea53 0308 	orrs.w	r3, r3, r8
 800ff8c:	f040 8084 	bne.w	8010098 <_strtod_l+0x8b8>
 800ff90:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ff94:	2b00      	cmp	r3, #0
 800ff96:	d17f      	bne.n	8010098 <_strtod_l+0x8b8>
 800ff98:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ff9c:	0d1b      	lsrs	r3, r3, #20
 800ff9e:	051b      	lsls	r3, r3, #20
 800ffa0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800ffa4:	d978      	bls.n	8010098 <_strtod_l+0x8b8>
 800ffa6:	696b      	ldr	r3, [r5, #20]
 800ffa8:	b913      	cbnz	r3, 800ffb0 <_strtod_l+0x7d0>
 800ffaa:	692b      	ldr	r3, [r5, #16]
 800ffac:	2b01      	cmp	r3, #1
 800ffae:	dd73      	ble.n	8010098 <_strtod_l+0x8b8>
 800ffb0:	4629      	mov	r1, r5
 800ffb2:	2201      	movs	r2, #1
 800ffb4:	4620      	mov	r0, r4
 800ffb6:	f001 fadb 	bl	8011570 <__lshift>
 800ffba:	4659      	mov	r1, fp
 800ffbc:	4605      	mov	r5, r0
 800ffbe:	f001 fb43 	bl	8011648 <__mcmp>
 800ffc2:	2800      	cmp	r0, #0
 800ffc4:	dd68      	ble.n	8010098 <_strtod_l+0x8b8>
 800ffc6:	9904      	ldr	r1, [sp, #16]
 800ffc8:	4a54      	ldr	r2, [pc, #336]	; (801011c <_strtod_l+0x93c>)
 800ffca:	464b      	mov	r3, r9
 800ffcc:	2900      	cmp	r1, #0
 800ffce:	f000 8084 	beq.w	80100da <_strtod_l+0x8fa>
 800ffd2:	ea02 0109 	and.w	r1, r2, r9
 800ffd6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800ffda:	dc7e      	bgt.n	80100da <_strtod_l+0x8fa>
 800ffdc:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800ffe0:	f77f aeb3 	ble.w	800fd4a <_strtod_l+0x56a>
 800ffe4:	4b4e      	ldr	r3, [pc, #312]	; (8010120 <_strtod_l+0x940>)
 800ffe6:	4640      	mov	r0, r8
 800ffe8:	4649      	mov	r1, r9
 800ffea:	2200      	movs	r2, #0
 800ffec:	f7f0 fb1c 	bl	8000628 <__aeabi_dmul>
 800fff0:	4b4a      	ldr	r3, [pc, #296]	; (801011c <_strtod_l+0x93c>)
 800fff2:	400b      	ands	r3, r1
 800fff4:	4680      	mov	r8, r0
 800fff6:	4689      	mov	r9, r1
 800fff8:	2b00      	cmp	r3, #0
 800fffa:	f47f ae3f 	bne.w	800fc7c <_strtod_l+0x49c>
 800fffe:	2322      	movs	r3, #34	; 0x22
 8010000:	6023      	str	r3, [r4, #0]
 8010002:	e63b      	b.n	800fc7c <_strtod_l+0x49c>
 8010004:	f04f 32ff 	mov.w	r2, #4294967295
 8010008:	fa02 f303 	lsl.w	r3, r2, r3
 801000c:	ea03 0808 	and.w	r8, r3, r8
 8010010:	e6e8      	b.n	800fde4 <_strtod_l+0x604>
 8010012:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8010016:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 801001a:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 801001e:	36e2      	adds	r6, #226	; 0xe2
 8010020:	fa01 f306 	lsl.w	r3, r1, r6
 8010024:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8010028:	e748      	b.n	800febc <_strtod_l+0x6dc>
 801002a:	2100      	movs	r1, #0
 801002c:	2301      	movs	r3, #1
 801002e:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 8010032:	e743      	b.n	800febc <_strtod_l+0x6dc>
 8010034:	9916      	ldr	r1, [sp, #88]	; 0x58
 8010036:	4632      	mov	r2, r6
 8010038:	4620      	mov	r0, r4
 801003a:	f001 fa99 	bl	8011570 <__lshift>
 801003e:	9016      	str	r0, [sp, #88]	; 0x58
 8010040:	2800      	cmp	r0, #0
 8010042:	f47f af6b 	bne.w	800ff1c <_strtod_l+0x73c>
 8010046:	e60f      	b.n	800fc68 <_strtod_l+0x488>
 8010048:	46ca      	mov	sl, r9
 801004a:	d171      	bne.n	8010130 <_strtod_l+0x950>
 801004c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801004e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010052:	b352      	cbz	r2, 80100aa <_strtod_l+0x8ca>
 8010054:	4a33      	ldr	r2, [pc, #204]	; (8010124 <_strtod_l+0x944>)
 8010056:	4293      	cmp	r3, r2
 8010058:	d12a      	bne.n	80100b0 <_strtod_l+0x8d0>
 801005a:	9b04      	ldr	r3, [sp, #16]
 801005c:	4641      	mov	r1, r8
 801005e:	b1fb      	cbz	r3, 80100a0 <_strtod_l+0x8c0>
 8010060:	4b2e      	ldr	r3, [pc, #184]	; (801011c <_strtod_l+0x93c>)
 8010062:	ea09 0303 	and.w	r3, r9, r3
 8010066:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801006a:	f04f 32ff 	mov.w	r2, #4294967295
 801006e:	d81a      	bhi.n	80100a6 <_strtod_l+0x8c6>
 8010070:	0d1b      	lsrs	r3, r3, #20
 8010072:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8010076:	fa02 f303 	lsl.w	r3, r2, r3
 801007a:	4299      	cmp	r1, r3
 801007c:	d118      	bne.n	80100b0 <_strtod_l+0x8d0>
 801007e:	4b2a      	ldr	r3, [pc, #168]	; (8010128 <_strtod_l+0x948>)
 8010080:	459a      	cmp	sl, r3
 8010082:	d102      	bne.n	801008a <_strtod_l+0x8aa>
 8010084:	3101      	adds	r1, #1
 8010086:	f43f adef 	beq.w	800fc68 <_strtod_l+0x488>
 801008a:	4b24      	ldr	r3, [pc, #144]	; (801011c <_strtod_l+0x93c>)
 801008c:	ea0a 0303 	and.w	r3, sl, r3
 8010090:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8010094:	f04f 0800 	mov.w	r8, #0
 8010098:	9b04      	ldr	r3, [sp, #16]
 801009a:	2b00      	cmp	r3, #0
 801009c:	d1a2      	bne.n	800ffe4 <_strtod_l+0x804>
 801009e:	e5ed      	b.n	800fc7c <_strtod_l+0x49c>
 80100a0:	f04f 33ff 	mov.w	r3, #4294967295
 80100a4:	e7e9      	b.n	801007a <_strtod_l+0x89a>
 80100a6:	4613      	mov	r3, r2
 80100a8:	e7e7      	b.n	801007a <_strtod_l+0x89a>
 80100aa:	ea53 0308 	orrs.w	r3, r3, r8
 80100ae:	d08a      	beq.n	800ffc6 <_strtod_l+0x7e6>
 80100b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80100b2:	b1e3      	cbz	r3, 80100ee <_strtod_l+0x90e>
 80100b4:	ea13 0f0a 	tst.w	r3, sl
 80100b8:	d0ee      	beq.n	8010098 <_strtod_l+0x8b8>
 80100ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80100bc:	9a04      	ldr	r2, [sp, #16]
 80100be:	4640      	mov	r0, r8
 80100c0:	4649      	mov	r1, r9
 80100c2:	b1c3      	cbz	r3, 80100f6 <_strtod_l+0x916>
 80100c4:	f7ff fb6e 	bl	800f7a4 <sulp>
 80100c8:	4602      	mov	r2, r0
 80100ca:	460b      	mov	r3, r1
 80100cc:	ec51 0b18 	vmov	r0, r1, d8
 80100d0:	f7f0 f8f4 	bl	80002bc <__adddf3>
 80100d4:	4680      	mov	r8, r0
 80100d6:	4689      	mov	r9, r1
 80100d8:	e7de      	b.n	8010098 <_strtod_l+0x8b8>
 80100da:	4013      	ands	r3, r2
 80100dc:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80100e0:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80100e4:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80100e8:	f04f 38ff 	mov.w	r8, #4294967295
 80100ec:	e7d4      	b.n	8010098 <_strtod_l+0x8b8>
 80100ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80100f0:	ea13 0f08 	tst.w	r3, r8
 80100f4:	e7e0      	b.n	80100b8 <_strtod_l+0x8d8>
 80100f6:	f7ff fb55 	bl	800f7a4 <sulp>
 80100fa:	4602      	mov	r2, r0
 80100fc:	460b      	mov	r3, r1
 80100fe:	ec51 0b18 	vmov	r0, r1, d8
 8010102:	f7f0 f8d9 	bl	80002b8 <__aeabi_dsub>
 8010106:	2200      	movs	r2, #0
 8010108:	2300      	movs	r3, #0
 801010a:	4680      	mov	r8, r0
 801010c:	4689      	mov	r9, r1
 801010e:	f7f0 fcf3 	bl	8000af8 <__aeabi_dcmpeq>
 8010112:	2800      	cmp	r0, #0
 8010114:	d0c0      	beq.n	8010098 <_strtod_l+0x8b8>
 8010116:	e618      	b.n	800fd4a <_strtod_l+0x56a>
 8010118:	fffffc02 	.word	0xfffffc02
 801011c:	7ff00000 	.word	0x7ff00000
 8010120:	39500000 	.word	0x39500000
 8010124:	000fffff 	.word	0x000fffff
 8010128:	7fefffff 	.word	0x7fefffff
 801012c:	080134f0 	.word	0x080134f0
 8010130:	4659      	mov	r1, fp
 8010132:	4628      	mov	r0, r5
 8010134:	f001 fbf8 	bl	8011928 <__ratio>
 8010138:	ec57 6b10 	vmov	r6, r7, d0
 801013c:	ee10 0a10 	vmov	r0, s0
 8010140:	2200      	movs	r2, #0
 8010142:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8010146:	4639      	mov	r1, r7
 8010148:	f7f0 fcea 	bl	8000b20 <__aeabi_dcmple>
 801014c:	2800      	cmp	r0, #0
 801014e:	d071      	beq.n	8010234 <_strtod_l+0xa54>
 8010150:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010152:	2b00      	cmp	r3, #0
 8010154:	d17c      	bne.n	8010250 <_strtod_l+0xa70>
 8010156:	f1b8 0f00 	cmp.w	r8, #0
 801015a:	d15a      	bne.n	8010212 <_strtod_l+0xa32>
 801015c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010160:	2b00      	cmp	r3, #0
 8010162:	d15d      	bne.n	8010220 <_strtod_l+0xa40>
 8010164:	4b90      	ldr	r3, [pc, #576]	; (80103a8 <_strtod_l+0xbc8>)
 8010166:	2200      	movs	r2, #0
 8010168:	4630      	mov	r0, r6
 801016a:	4639      	mov	r1, r7
 801016c:	f7f0 fcce 	bl	8000b0c <__aeabi_dcmplt>
 8010170:	2800      	cmp	r0, #0
 8010172:	d15c      	bne.n	801022e <_strtod_l+0xa4e>
 8010174:	4630      	mov	r0, r6
 8010176:	4639      	mov	r1, r7
 8010178:	4b8c      	ldr	r3, [pc, #560]	; (80103ac <_strtod_l+0xbcc>)
 801017a:	2200      	movs	r2, #0
 801017c:	f7f0 fa54 	bl	8000628 <__aeabi_dmul>
 8010180:	4606      	mov	r6, r0
 8010182:	460f      	mov	r7, r1
 8010184:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8010188:	9606      	str	r6, [sp, #24]
 801018a:	9307      	str	r3, [sp, #28]
 801018c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010190:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8010194:	4b86      	ldr	r3, [pc, #536]	; (80103b0 <_strtod_l+0xbd0>)
 8010196:	ea0a 0303 	and.w	r3, sl, r3
 801019a:	930d      	str	r3, [sp, #52]	; 0x34
 801019c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801019e:	4b85      	ldr	r3, [pc, #532]	; (80103b4 <_strtod_l+0xbd4>)
 80101a0:	429a      	cmp	r2, r3
 80101a2:	f040 8090 	bne.w	80102c6 <_strtod_l+0xae6>
 80101a6:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 80101aa:	ec49 8b10 	vmov	d0, r8, r9
 80101ae:	f001 faf1 	bl	8011794 <__ulp>
 80101b2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80101b6:	ec51 0b10 	vmov	r0, r1, d0
 80101ba:	f7f0 fa35 	bl	8000628 <__aeabi_dmul>
 80101be:	4642      	mov	r2, r8
 80101c0:	464b      	mov	r3, r9
 80101c2:	f7f0 f87b 	bl	80002bc <__adddf3>
 80101c6:	460b      	mov	r3, r1
 80101c8:	4979      	ldr	r1, [pc, #484]	; (80103b0 <_strtod_l+0xbd0>)
 80101ca:	4a7b      	ldr	r2, [pc, #492]	; (80103b8 <_strtod_l+0xbd8>)
 80101cc:	4019      	ands	r1, r3
 80101ce:	4291      	cmp	r1, r2
 80101d0:	4680      	mov	r8, r0
 80101d2:	d944      	bls.n	801025e <_strtod_l+0xa7e>
 80101d4:	ee18 2a90 	vmov	r2, s17
 80101d8:	4b78      	ldr	r3, [pc, #480]	; (80103bc <_strtod_l+0xbdc>)
 80101da:	429a      	cmp	r2, r3
 80101dc:	d104      	bne.n	80101e8 <_strtod_l+0xa08>
 80101de:	ee18 3a10 	vmov	r3, s16
 80101e2:	3301      	adds	r3, #1
 80101e4:	f43f ad40 	beq.w	800fc68 <_strtod_l+0x488>
 80101e8:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 80103bc <_strtod_l+0xbdc>
 80101ec:	f04f 38ff 	mov.w	r8, #4294967295
 80101f0:	9916      	ldr	r1, [sp, #88]	; 0x58
 80101f2:	4620      	mov	r0, r4
 80101f4:	f000 ffa2 	bl	801113c <_Bfree>
 80101f8:	9905      	ldr	r1, [sp, #20]
 80101fa:	4620      	mov	r0, r4
 80101fc:	f000 ff9e 	bl	801113c <_Bfree>
 8010200:	4659      	mov	r1, fp
 8010202:	4620      	mov	r0, r4
 8010204:	f000 ff9a 	bl	801113c <_Bfree>
 8010208:	4629      	mov	r1, r5
 801020a:	4620      	mov	r0, r4
 801020c:	f000 ff96 	bl	801113c <_Bfree>
 8010210:	e609      	b.n	800fe26 <_strtod_l+0x646>
 8010212:	f1b8 0f01 	cmp.w	r8, #1
 8010216:	d103      	bne.n	8010220 <_strtod_l+0xa40>
 8010218:	f1b9 0f00 	cmp.w	r9, #0
 801021c:	f43f ad95 	beq.w	800fd4a <_strtod_l+0x56a>
 8010220:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8010378 <_strtod_l+0xb98>
 8010224:	4f60      	ldr	r7, [pc, #384]	; (80103a8 <_strtod_l+0xbc8>)
 8010226:	ed8d 7b06 	vstr	d7, [sp, #24]
 801022a:	2600      	movs	r6, #0
 801022c:	e7ae      	b.n	801018c <_strtod_l+0x9ac>
 801022e:	4f5f      	ldr	r7, [pc, #380]	; (80103ac <_strtod_l+0xbcc>)
 8010230:	2600      	movs	r6, #0
 8010232:	e7a7      	b.n	8010184 <_strtod_l+0x9a4>
 8010234:	4b5d      	ldr	r3, [pc, #372]	; (80103ac <_strtod_l+0xbcc>)
 8010236:	4630      	mov	r0, r6
 8010238:	4639      	mov	r1, r7
 801023a:	2200      	movs	r2, #0
 801023c:	f7f0 f9f4 	bl	8000628 <__aeabi_dmul>
 8010240:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010242:	4606      	mov	r6, r0
 8010244:	460f      	mov	r7, r1
 8010246:	2b00      	cmp	r3, #0
 8010248:	d09c      	beq.n	8010184 <_strtod_l+0x9a4>
 801024a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 801024e:	e79d      	b.n	801018c <_strtod_l+0x9ac>
 8010250:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8010380 <_strtod_l+0xba0>
 8010254:	ed8d 7b06 	vstr	d7, [sp, #24]
 8010258:	ec57 6b17 	vmov	r6, r7, d7
 801025c:	e796      	b.n	801018c <_strtod_l+0x9ac>
 801025e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8010262:	9b04      	ldr	r3, [sp, #16]
 8010264:	46ca      	mov	sl, r9
 8010266:	2b00      	cmp	r3, #0
 8010268:	d1c2      	bne.n	80101f0 <_strtod_l+0xa10>
 801026a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801026e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010270:	0d1b      	lsrs	r3, r3, #20
 8010272:	051b      	lsls	r3, r3, #20
 8010274:	429a      	cmp	r2, r3
 8010276:	d1bb      	bne.n	80101f0 <_strtod_l+0xa10>
 8010278:	4630      	mov	r0, r6
 801027a:	4639      	mov	r1, r7
 801027c:	f7f0 fd84 	bl	8000d88 <__aeabi_d2lz>
 8010280:	f7f0 f9a4 	bl	80005cc <__aeabi_l2d>
 8010284:	4602      	mov	r2, r0
 8010286:	460b      	mov	r3, r1
 8010288:	4630      	mov	r0, r6
 801028a:	4639      	mov	r1, r7
 801028c:	f7f0 f814 	bl	80002b8 <__aeabi_dsub>
 8010290:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010292:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010296:	ea43 0308 	orr.w	r3, r3, r8
 801029a:	4313      	orrs	r3, r2
 801029c:	4606      	mov	r6, r0
 801029e:	460f      	mov	r7, r1
 80102a0:	d054      	beq.n	801034c <_strtod_l+0xb6c>
 80102a2:	a339      	add	r3, pc, #228	; (adr r3, 8010388 <_strtod_l+0xba8>)
 80102a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102a8:	f7f0 fc30 	bl	8000b0c <__aeabi_dcmplt>
 80102ac:	2800      	cmp	r0, #0
 80102ae:	f47f ace5 	bne.w	800fc7c <_strtod_l+0x49c>
 80102b2:	a337      	add	r3, pc, #220	; (adr r3, 8010390 <_strtod_l+0xbb0>)
 80102b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102b8:	4630      	mov	r0, r6
 80102ba:	4639      	mov	r1, r7
 80102bc:	f7f0 fc44 	bl	8000b48 <__aeabi_dcmpgt>
 80102c0:	2800      	cmp	r0, #0
 80102c2:	d095      	beq.n	80101f0 <_strtod_l+0xa10>
 80102c4:	e4da      	b.n	800fc7c <_strtod_l+0x49c>
 80102c6:	9b04      	ldr	r3, [sp, #16]
 80102c8:	b333      	cbz	r3, 8010318 <_strtod_l+0xb38>
 80102ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80102cc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80102d0:	d822      	bhi.n	8010318 <_strtod_l+0xb38>
 80102d2:	a331      	add	r3, pc, #196	; (adr r3, 8010398 <_strtod_l+0xbb8>)
 80102d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102d8:	4630      	mov	r0, r6
 80102da:	4639      	mov	r1, r7
 80102dc:	f7f0 fc20 	bl	8000b20 <__aeabi_dcmple>
 80102e0:	b1a0      	cbz	r0, 801030c <_strtod_l+0xb2c>
 80102e2:	4639      	mov	r1, r7
 80102e4:	4630      	mov	r0, r6
 80102e6:	f7f0 fc77 	bl	8000bd8 <__aeabi_d2uiz>
 80102ea:	2801      	cmp	r0, #1
 80102ec:	bf38      	it	cc
 80102ee:	2001      	movcc	r0, #1
 80102f0:	f7f0 f920 	bl	8000534 <__aeabi_ui2d>
 80102f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80102f6:	4606      	mov	r6, r0
 80102f8:	460f      	mov	r7, r1
 80102fa:	bb23      	cbnz	r3, 8010346 <_strtod_l+0xb66>
 80102fc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010300:	9010      	str	r0, [sp, #64]	; 0x40
 8010302:	9311      	str	r3, [sp, #68]	; 0x44
 8010304:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8010308:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 801030c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801030e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010310:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8010314:	1a9b      	subs	r3, r3, r2
 8010316:	930f      	str	r3, [sp, #60]	; 0x3c
 8010318:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 801031c:	eeb0 0a48 	vmov.f32	s0, s16
 8010320:	eef0 0a68 	vmov.f32	s1, s17
 8010324:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8010328:	f001 fa34 	bl	8011794 <__ulp>
 801032c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8010330:	ec53 2b10 	vmov	r2, r3, d0
 8010334:	f7f0 f978 	bl	8000628 <__aeabi_dmul>
 8010338:	ec53 2b18 	vmov	r2, r3, d8
 801033c:	f7ef ffbe 	bl	80002bc <__adddf3>
 8010340:	4680      	mov	r8, r0
 8010342:	4689      	mov	r9, r1
 8010344:	e78d      	b.n	8010262 <_strtod_l+0xa82>
 8010346:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 801034a:	e7db      	b.n	8010304 <_strtod_l+0xb24>
 801034c:	a314      	add	r3, pc, #80	; (adr r3, 80103a0 <_strtod_l+0xbc0>)
 801034e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010352:	f7f0 fbdb 	bl	8000b0c <__aeabi_dcmplt>
 8010356:	e7b3      	b.n	80102c0 <_strtod_l+0xae0>
 8010358:	2300      	movs	r3, #0
 801035a:	930a      	str	r3, [sp, #40]	; 0x28
 801035c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801035e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010360:	6013      	str	r3, [r2, #0]
 8010362:	f7ff ba7c 	b.w	800f85e <_strtod_l+0x7e>
 8010366:	2a65      	cmp	r2, #101	; 0x65
 8010368:	f43f ab75 	beq.w	800fa56 <_strtod_l+0x276>
 801036c:	2a45      	cmp	r2, #69	; 0x45
 801036e:	f43f ab72 	beq.w	800fa56 <_strtod_l+0x276>
 8010372:	2301      	movs	r3, #1
 8010374:	f7ff bbaa 	b.w	800facc <_strtod_l+0x2ec>
 8010378:	00000000 	.word	0x00000000
 801037c:	bff00000 	.word	0xbff00000
 8010380:	00000000 	.word	0x00000000
 8010384:	3ff00000 	.word	0x3ff00000
 8010388:	94a03595 	.word	0x94a03595
 801038c:	3fdfffff 	.word	0x3fdfffff
 8010390:	35afe535 	.word	0x35afe535
 8010394:	3fe00000 	.word	0x3fe00000
 8010398:	ffc00000 	.word	0xffc00000
 801039c:	41dfffff 	.word	0x41dfffff
 80103a0:	94a03595 	.word	0x94a03595
 80103a4:	3fcfffff 	.word	0x3fcfffff
 80103a8:	3ff00000 	.word	0x3ff00000
 80103ac:	3fe00000 	.word	0x3fe00000
 80103b0:	7ff00000 	.word	0x7ff00000
 80103b4:	7fe00000 	.word	0x7fe00000
 80103b8:	7c9fffff 	.word	0x7c9fffff
 80103bc:	7fefffff 	.word	0x7fefffff

080103c0 <strtod>:
 80103c0:	460a      	mov	r2, r1
 80103c2:	4601      	mov	r1, r0
 80103c4:	4802      	ldr	r0, [pc, #8]	; (80103d0 <strtod+0x10>)
 80103c6:	4b03      	ldr	r3, [pc, #12]	; (80103d4 <strtod+0x14>)
 80103c8:	6800      	ldr	r0, [r0, #0]
 80103ca:	f7ff ba09 	b.w	800f7e0 <_strtod_l>
 80103ce:	bf00      	nop
 80103d0:	200001fc 	.word	0x200001fc
 80103d4:	20000044 	.word	0x20000044

080103d8 <std>:
 80103d8:	2300      	movs	r3, #0
 80103da:	b510      	push	{r4, lr}
 80103dc:	4604      	mov	r4, r0
 80103de:	e9c0 3300 	strd	r3, r3, [r0]
 80103e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80103e6:	6083      	str	r3, [r0, #8]
 80103e8:	8181      	strh	r1, [r0, #12]
 80103ea:	6643      	str	r3, [r0, #100]	; 0x64
 80103ec:	81c2      	strh	r2, [r0, #14]
 80103ee:	6183      	str	r3, [r0, #24]
 80103f0:	4619      	mov	r1, r3
 80103f2:	2208      	movs	r2, #8
 80103f4:	305c      	adds	r0, #92	; 0x5c
 80103f6:	f000 f9f7 	bl	80107e8 <memset>
 80103fa:	4b0d      	ldr	r3, [pc, #52]	; (8010430 <std+0x58>)
 80103fc:	6263      	str	r3, [r4, #36]	; 0x24
 80103fe:	4b0d      	ldr	r3, [pc, #52]	; (8010434 <std+0x5c>)
 8010400:	62a3      	str	r3, [r4, #40]	; 0x28
 8010402:	4b0d      	ldr	r3, [pc, #52]	; (8010438 <std+0x60>)
 8010404:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010406:	4b0d      	ldr	r3, [pc, #52]	; (801043c <std+0x64>)
 8010408:	6323      	str	r3, [r4, #48]	; 0x30
 801040a:	4b0d      	ldr	r3, [pc, #52]	; (8010440 <std+0x68>)
 801040c:	6224      	str	r4, [r4, #32]
 801040e:	429c      	cmp	r4, r3
 8010410:	d006      	beq.n	8010420 <std+0x48>
 8010412:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8010416:	4294      	cmp	r4, r2
 8010418:	d002      	beq.n	8010420 <std+0x48>
 801041a:	33d0      	adds	r3, #208	; 0xd0
 801041c:	429c      	cmp	r4, r3
 801041e:	d105      	bne.n	801042c <std+0x54>
 8010420:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8010424:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010428:	f000 ba78 	b.w	801091c <__retarget_lock_init_recursive>
 801042c:	bd10      	pop	{r4, pc}
 801042e:	bf00      	nop
 8010430:	08010639 	.word	0x08010639
 8010434:	0801065b 	.word	0x0801065b
 8010438:	08010693 	.word	0x08010693
 801043c:	080106b7 	.word	0x080106b7
 8010440:	200014ec 	.word	0x200014ec

08010444 <stdio_exit_handler>:
 8010444:	4a02      	ldr	r2, [pc, #8]	; (8010450 <stdio_exit_handler+0xc>)
 8010446:	4903      	ldr	r1, [pc, #12]	; (8010454 <stdio_exit_handler+0x10>)
 8010448:	4803      	ldr	r0, [pc, #12]	; (8010458 <stdio_exit_handler+0x14>)
 801044a:	f000 b869 	b.w	8010520 <_fwalk_sglue>
 801044e:	bf00      	nop
 8010450:	20000038 	.word	0x20000038
 8010454:	080120e5 	.word	0x080120e5
 8010458:	200001b0 	.word	0x200001b0

0801045c <cleanup_stdio>:
 801045c:	6841      	ldr	r1, [r0, #4]
 801045e:	4b0c      	ldr	r3, [pc, #48]	; (8010490 <cleanup_stdio+0x34>)
 8010460:	4299      	cmp	r1, r3
 8010462:	b510      	push	{r4, lr}
 8010464:	4604      	mov	r4, r0
 8010466:	d001      	beq.n	801046c <cleanup_stdio+0x10>
 8010468:	f001 fe3c 	bl	80120e4 <_fflush_r>
 801046c:	68a1      	ldr	r1, [r4, #8]
 801046e:	4b09      	ldr	r3, [pc, #36]	; (8010494 <cleanup_stdio+0x38>)
 8010470:	4299      	cmp	r1, r3
 8010472:	d002      	beq.n	801047a <cleanup_stdio+0x1e>
 8010474:	4620      	mov	r0, r4
 8010476:	f001 fe35 	bl	80120e4 <_fflush_r>
 801047a:	68e1      	ldr	r1, [r4, #12]
 801047c:	4b06      	ldr	r3, [pc, #24]	; (8010498 <cleanup_stdio+0x3c>)
 801047e:	4299      	cmp	r1, r3
 8010480:	d004      	beq.n	801048c <cleanup_stdio+0x30>
 8010482:	4620      	mov	r0, r4
 8010484:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010488:	f001 be2c 	b.w	80120e4 <_fflush_r>
 801048c:	bd10      	pop	{r4, pc}
 801048e:	bf00      	nop
 8010490:	200014ec 	.word	0x200014ec
 8010494:	20001554 	.word	0x20001554
 8010498:	200015bc 	.word	0x200015bc

0801049c <global_stdio_init.part.0>:
 801049c:	b510      	push	{r4, lr}
 801049e:	4b0b      	ldr	r3, [pc, #44]	; (80104cc <global_stdio_init.part.0+0x30>)
 80104a0:	4c0b      	ldr	r4, [pc, #44]	; (80104d0 <global_stdio_init.part.0+0x34>)
 80104a2:	4a0c      	ldr	r2, [pc, #48]	; (80104d4 <global_stdio_init.part.0+0x38>)
 80104a4:	601a      	str	r2, [r3, #0]
 80104a6:	4620      	mov	r0, r4
 80104a8:	2200      	movs	r2, #0
 80104aa:	2104      	movs	r1, #4
 80104ac:	f7ff ff94 	bl	80103d8 <std>
 80104b0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80104b4:	2201      	movs	r2, #1
 80104b6:	2109      	movs	r1, #9
 80104b8:	f7ff ff8e 	bl	80103d8 <std>
 80104bc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80104c0:	2202      	movs	r2, #2
 80104c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80104c6:	2112      	movs	r1, #18
 80104c8:	f7ff bf86 	b.w	80103d8 <std>
 80104cc:	20001624 	.word	0x20001624
 80104d0:	200014ec 	.word	0x200014ec
 80104d4:	08010445 	.word	0x08010445

080104d8 <__sfp_lock_acquire>:
 80104d8:	4801      	ldr	r0, [pc, #4]	; (80104e0 <__sfp_lock_acquire+0x8>)
 80104da:	f000 ba20 	b.w	801091e <__retarget_lock_acquire_recursive>
 80104de:	bf00      	nop
 80104e0:	2000162d 	.word	0x2000162d

080104e4 <__sfp_lock_release>:
 80104e4:	4801      	ldr	r0, [pc, #4]	; (80104ec <__sfp_lock_release+0x8>)
 80104e6:	f000 ba1b 	b.w	8010920 <__retarget_lock_release_recursive>
 80104ea:	bf00      	nop
 80104ec:	2000162d 	.word	0x2000162d

080104f0 <__sinit>:
 80104f0:	b510      	push	{r4, lr}
 80104f2:	4604      	mov	r4, r0
 80104f4:	f7ff fff0 	bl	80104d8 <__sfp_lock_acquire>
 80104f8:	6a23      	ldr	r3, [r4, #32]
 80104fa:	b11b      	cbz	r3, 8010504 <__sinit+0x14>
 80104fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010500:	f7ff bff0 	b.w	80104e4 <__sfp_lock_release>
 8010504:	4b04      	ldr	r3, [pc, #16]	; (8010518 <__sinit+0x28>)
 8010506:	6223      	str	r3, [r4, #32]
 8010508:	4b04      	ldr	r3, [pc, #16]	; (801051c <__sinit+0x2c>)
 801050a:	681b      	ldr	r3, [r3, #0]
 801050c:	2b00      	cmp	r3, #0
 801050e:	d1f5      	bne.n	80104fc <__sinit+0xc>
 8010510:	f7ff ffc4 	bl	801049c <global_stdio_init.part.0>
 8010514:	e7f2      	b.n	80104fc <__sinit+0xc>
 8010516:	bf00      	nop
 8010518:	0801045d 	.word	0x0801045d
 801051c:	20001624 	.word	0x20001624

08010520 <_fwalk_sglue>:
 8010520:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010524:	4607      	mov	r7, r0
 8010526:	4688      	mov	r8, r1
 8010528:	4614      	mov	r4, r2
 801052a:	2600      	movs	r6, #0
 801052c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010530:	f1b9 0901 	subs.w	r9, r9, #1
 8010534:	d505      	bpl.n	8010542 <_fwalk_sglue+0x22>
 8010536:	6824      	ldr	r4, [r4, #0]
 8010538:	2c00      	cmp	r4, #0
 801053a:	d1f7      	bne.n	801052c <_fwalk_sglue+0xc>
 801053c:	4630      	mov	r0, r6
 801053e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010542:	89ab      	ldrh	r3, [r5, #12]
 8010544:	2b01      	cmp	r3, #1
 8010546:	d907      	bls.n	8010558 <_fwalk_sglue+0x38>
 8010548:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801054c:	3301      	adds	r3, #1
 801054e:	d003      	beq.n	8010558 <_fwalk_sglue+0x38>
 8010550:	4629      	mov	r1, r5
 8010552:	4638      	mov	r0, r7
 8010554:	47c0      	blx	r8
 8010556:	4306      	orrs	r6, r0
 8010558:	3568      	adds	r5, #104	; 0x68
 801055a:	e7e9      	b.n	8010530 <_fwalk_sglue+0x10>

0801055c <iprintf>:
 801055c:	b40f      	push	{r0, r1, r2, r3}
 801055e:	b507      	push	{r0, r1, r2, lr}
 8010560:	4906      	ldr	r1, [pc, #24]	; (801057c <iprintf+0x20>)
 8010562:	ab04      	add	r3, sp, #16
 8010564:	6808      	ldr	r0, [r1, #0]
 8010566:	f853 2b04 	ldr.w	r2, [r3], #4
 801056a:	6881      	ldr	r1, [r0, #8]
 801056c:	9301      	str	r3, [sp, #4]
 801056e:	f001 fa89 	bl	8011a84 <_vfiprintf_r>
 8010572:	b003      	add	sp, #12
 8010574:	f85d eb04 	ldr.w	lr, [sp], #4
 8010578:	b004      	add	sp, #16
 801057a:	4770      	bx	lr
 801057c:	200001fc 	.word	0x200001fc

08010580 <_puts_r>:
 8010580:	6a03      	ldr	r3, [r0, #32]
 8010582:	b570      	push	{r4, r5, r6, lr}
 8010584:	6884      	ldr	r4, [r0, #8]
 8010586:	4605      	mov	r5, r0
 8010588:	460e      	mov	r6, r1
 801058a:	b90b      	cbnz	r3, 8010590 <_puts_r+0x10>
 801058c:	f7ff ffb0 	bl	80104f0 <__sinit>
 8010590:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010592:	07db      	lsls	r3, r3, #31
 8010594:	d405      	bmi.n	80105a2 <_puts_r+0x22>
 8010596:	89a3      	ldrh	r3, [r4, #12]
 8010598:	0598      	lsls	r0, r3, #22
 801059a:	d402      	bmi.n	80105a2 <_puts_r+0x22>
 801059c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801059e:	f000 f9be 	bl	801091e <__retarget_lock_acquire_recursive>
 80105a2:	89a3      	ldrh	r3, [r4, #12]
 80105a4:	0719      	lsls	r1, r3, #28
 80105a6:	d513      	bpl.n	80105d0 <_puts_r+0x50>
 80105a8:	6923      	ldr	r3, [r4, #16]
 80105aa:	b18b      	cbz	r3, 80105d0 <_puts_r+0x50>
 80105ac:	3e01      	subs	r6, #1
 80105ae:	68a3      	ldr	r3, [r4, #8]
 80105b0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80105b4:	3b01      	subs	r3, #1
 80105b6:	60a3      	str	r3, [r4, #8]
 80105b8:	b9e9      	cbnz	r1, 80105f6 <_puts_r+0x76>
 80105ba:	2b00      	cmp	r3, #0
 80105bc:	da2e      	bge.n	801061c <_puts_r+0x9c>
 80105be:	4622      	mov	r2, r4
 80105c0:	210a      	movs	r1, #10
 80105c2:	4628      	mov	r0, r5
 80105c4:	f000 f87b 	bl	80106be <__swbuf_r>
 80105c8:	3001      	adds	r0, #1
 80105ca:	d007      	beq.n	80105dc <_puts_r+0x5c>
 80105cc:	250a      	movs	r5, #10
 80105ce:	e007      	b.n	80105e0 <_puts_r+0x60>
 80105d0:	4621      	mov	r1, r4
 80105d2:	4628      	mov	r0, r5
 80105d4:	f000 f8b0 	bl	8010738 <__swsetup_r>
 80105d8:	2800      	cmp	r0, #0
 80105da:	d0e7      	beq.n	80105ac <_puts_r+0x2c>
 80105dc:	f04f 35ff 	mov.w	r5, #4294967295
 80105e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80105e2:	07da      	lsls	r2, r3, #31
 80105e4:	d405      	bmi.n	80105f2 <_puts_r+0x72>
 80105e6:	89a3      	ldrh	r3, [r4, #12]
 80105e8:	059b      	lsls	r3, r3, #22
 80105ea:	d402      	bmi.n	80105f2 <_puts_r+0x72>
 80105ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80105ee:	f000 f997 	bl	8010920 <__retarget_lock_release_recursive>
 80105f2:	4628      	mov	r0, r5
 80105f4:	bd70      	pop	{r4, r5, r6, pc}
 80105f6:	2b00      	cmp	r3, #0
 80105f8:	da04      	bge.n	8010604 <_puts_r+0x84>
 80105fa:	69a2      	ldr	r2, [r4, #24]
 80105fc:	429a      	cmp	r2, r3
 80105fe:	dc06      	bgt.n	801060e <_puts_r+0x8e>
 8010600:	290a      	cmp	r1, #10
 8010602:	d004      	beq.n	801060e <_puts_r+0x8e>
 8010604:	6823      	ldr	r3, [r4, #0]
 8010606:	1c5a      	adds	r2, r3, #1
 8010608:	6022      	str	r2, [r4, #0]
 801060a:	7019      	strb	r1, [r3, #0]
 801060c:	e7cf      	b.n	80105ae <_puts_r+0x2e>
 801060e:	4622      	mov	r2, r4
 8010610:	4628      	mov	r0, r5
 8010612:	f000 f854 	bl	80106be <__swbuf_r>
 8010616:	3001      	adds	r0, #1
 8010618:	d1c9      	bne.n	80105ae <_puts_r+0x2e>
 801061a:	e7df      	b.n	80105dc <_puts_r+0x5c>
 801061c:	6823      	ldr	r3, [r4, #0]
 801061e:	250a      	movs	r5, #10
 8010620:	1c5a      	adds	r2, r3, #1
 8010622:	6022      	str	r2, [r4, #0]
 8010624:	701d      	strb	r5, [r3, #0]
 8010626:	e7db      	b.n	80105e0 <_puts_r+0x60>

08010628 <puts>:
 8010628:	4b02      	ldr	r3, [pc, #8]	; (8010634 <puts+0xc>)
 801062a:	4601      	mov	r1, r0
 801062c:	6818      	ldr	r0, [r3, #0]
 801062e:	f7ff bfa7 	b.w	8010580 <_puts_r>
 8010632:	bf00      	nop
 8010634:	200001fc 	.word	0x200001fc

08010638 <__sread>:
 8010638:	b510      	push	{r4, lr}
 801063a:	460c      	mov	r4, r1
 801063c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010640:	f000 f90e 	bl	8010860 <_read_r>
 8010644:	2800      	cmp	r0, #0
 8010646:	bfab      	itete	ge
 8010648:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801064a:	89a3      	ldrhlt	r3, [r4, #12]
 801064c:	181b      	addge	r3, r3, r0
 801064e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010652:	bfac      	ite	ge
 8010654:	6563      	strge	r3, [r4, #84]	; 0x54
 8010656:	81a3      	strhlt	r3, [r4, #12]
 8010658:	bd10      	pop	{r4, pc}

0801065a <__swrite>:
 801065a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801065e:	461f      	mov	r7, r3
 8010660:	898b      	ldrh	r3, [r1, #12]
 8010662:	05db      	lsls	r3, r3, #23
 8010664:	4605      	mov	r5, r0
 8010666:	460c      	mov	r4, r1
 8010668:	4616      	mov	r6, r2
 801066a:	d505      	bpl.n	8010678 <__swrite+0x1e>
 801066c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010670:	2302      	movs	r3, #2
 8010672:	2200      	movs	r2, #0
 8010674:	f000 f8e2 	bl	801083c <_lseek_r>
 8010678:	89a3      	ldrh	r3, [r4, #12]
 801067a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801067e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010682:	81a3      	strh	r3, [r4, #12]
 8010684:	4632      	mov	r2, r6
 8010686:	463b      	mov	r3, r7
 8010688:	4628      	mov	r0, r5
 801068a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801068e:	f000 b909 	b.w	80108a4 <_write_r>

08010692 <__sseek>:
 8010692:	b510      	push	{r4, lr}
 8010694:	460c      	mov	r4, r1
 8010696:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801069a:	f000 f8cf 	bl	801083c <_lseek_r>
 801069e:	1c43      	adds	r3, r0, #1
 80106a0:	89a3      	ldrh	r3, [r4, #12]
 80106a2:	bf15      	itete	ne
 80106a4:	6560      	strne	r0, [r4, #84]	; 0x54
 80106a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80106aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80106ae:	81a3      	strheq	r3, [r4, #12]
 80106b0:	bf18      	it	ne
 80106b2:	81a3      	strhne	r3, [r4, #12]
 80106b4:	bd10      	pop	{r4, pc}

080106b6 <__sclose>:
 80106b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80106ba:	f000 b8af 	b.w	801081c <_close_r>

080106be <__swbuf_r>:
 80106be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80106c0:	460e      	mov	r6, r1
 80106c2:	4614      	mov	r4, r2
 80106c4:	4605      	mov	r5, r0
 80106c6:	b118      	cbz	r0, 80106d0 <__swbuf_r+0x12>
 80106c8:	6a03      	ldr	r3, [r0, #32]
 80106ca:	b90b      	cbnz	r3, 80106d0 <__swbuf_r+0x12>
 80106cc:	f7ff ff10 	bl	80104f0 <__sinit>
 80106d0:	69a3      	ldr	r3, [r4, #24]
 80106d2:	60a3      	str	r3, [r4, #8]
 80106d4:	89a3      	ldrh	r3, [r4, #12]
 80106d6:	071a      	lsls	r2, r3, #28
 80106d8:	d525      	bpl.n	8010726 <__swbuf_r+0x68>
 80106da:	6923      	ldr	r3, [r4, #16]
 80106dc:	b31b      	cbz	r3, 8010726 <__swbuf_r+0x68>
 80106de:	6823      	ldr	r3, [r4, #0]
 80106e0:	6922      	ldr	r2, [r4, #16]
 80106e2:	1a98      	subs	r0, r3, r2
 80106e4:	6963      	ldr	r3, [r4, #20]
 80106e6:	b2f6      	uxtb	r6, r6
 80106e8:	4283      	cmp	r3, r0
 80106ea:	4637      	mov	r7, r6
 80106ec:	dc04      	bgt.n	80106f8 <__swbuf_r+0x3a>
 80106ee:	4621      	mov	r1, r4
 80106f0:	4628      	mov	r0, r5
 80106f2:	f001 fcf7 	bl	80120e4 <_fflush_r>
 80106f6:	b9e0      	cbnz	r0, 8010732 <__swbuf_r+0x74>
 80106f8:	68a3      	ldr	r3, [r4, #8]
 80106fa:	3b01      	subs	r3, #1
 80106fc:	60a3      	str	r3, [r4, #8]
 80106fe:	6823      	ldr	r3, [r4, #0]
 8010700:	1c5a      	adds	r2, r3, #1
 8010702:	6022      	str	r2, [r4, #0]
 8010704:	701e      	strb	r6, [r3, #0]
 8010706:	6962      	ldr	r2, [r4, #20]
 8010708:	1c43      	adds	r3, r0, #1
 801070a:	429a      	cmp	r2, r3
 801070c:	d004      	beq.n	8010718 <__swbuf_r+0x5a>
 801070e:	89a3      	ldrh	r3, [r4, #12]
 8010710:	07db      	lsls	r3, r3, #31
 8010712:	d506      	bpl.n	8010722 <__swbuf_r+0x64>
 8010714:	2e0a      	cmp	r6, #10
 8010716:	d104      	bne.n	8010722 <__swbuf_r+0x64>
 8010718:	4621      	mov	r1, r4
 801071a:	4628      	mov	r0, r5
 801071c:	f001 fce2 	bl	80120e4 <_fflush_r>
 8010720:	b938      	cbnz	r0, 8010732 <__swbuf_r+0x74>
 8010722:	4638      	mov	r0, r7
 8010724:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010726:	4621      	mov	r1, r4
 8010728:	4628      	mov	r0, r5
 801072a:	f000 f805 	bl	8010738 <__swsetup_r>
 801072e:	2800      	cmp	r0, #0
 8010730:	d0d5      	beq.n	80106de <__swbuf_r+0x20>
 8010732:	f04f 37ff 	mov.w	r7, #4294967295
 8010736:	e7f4      	b.n	8010722 <__swbuf_r+0x64>

08010738 <__swsetup_r>:
 8010738:	b538      	push	{r3, r4, r5, lr}
 801073a:	4b2a      	ldr	r3, [pc, #168]	; (80107e4 <__swsetup_r+0xac>)
 801073c:	4605      	mov	r5, r0
 801073e:	6818      	ldr	r0, [r3, #0]
 8010740:	460c      	mov	r4, r1
 8010742:	b118      	cbz	r0, 801074c <__swsetup_r+0x14>
 8010744:	6a03      	ldr	r3, [r0, #32]
 8010746:	b90b      	cbnz	r3, 801074c <__swsetup_r+0x14>
 8010748:	f7ff fed2 	bl	80104f0 <__sinit>
 801074c:	89a3      	ldrh	r3, [r4, #12]
 801074e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010752:	0718      	lsls	r0, r3, #28
 8010754:	d422      	bmi.n	801079c <__swsetup_r+0x64>
 8010756:	06d9      	lsls	r1, r3, #27
 8010758:	d407      	bmi.n	801076a <__swsetup_r+0x32>
 801075a:	2309      	movs	r3, #9
 801075c:	602b      	str	r3, [r5, #0]
 801075e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010762:	81a3      	strh	r3, [r4, #12]
 8010764:	f04f 30ff 	mov.w	r0, #4294967295
 8010768:	e034      	b.n	80107d4 <__swsetup_r+0x9c>
 801076a:	0758      	lsls	r0, r3, #29
 801076c:	d512      	bpl.n	8010794 <__swsetup_r+0x5c>
 801076e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010770:	b141      	cbz	r1, 8010784 <__swsetup_r+0x4c>
 8010772:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010776:	4299      	cmp	r1, r3
 8010778:	d002      	beq.n	8010780 <__swsetup_r+0x48>
 801077a:	4628      	mov	r0, r5
 801077c:	f000 f8e8 	bl	8010950 <_free_r>
 8010780:	2300      	movs	r3, #0
 8010782:	6363      	str	r3, [r4, #52]	; 0x34
 8010784:	89a3      	ldrh	r3, [r4, #12]
 8010786:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801078a:	81a3      	strh	r3, [r4, #12]
 801078c:	2300      	movs	r3, #0
 801078e:	6063      	str	r3, [r4, #4]
 8010790:	6923      	ldr	r3, [r4, #16]
 8010792:	6023      	str	r3, [r4, #0]
 8010794:	89a3      	ldrh	r3, [r4, #12]
 8010796:	f043 0308 	orr.w	r3, r3, #8
 801079a:	81a3      	strh	r3, [r4, #12]
 801079c:	6923      	ldr	r3, [r4, #16]
 801079e:	b94b      	cbnz	r3, 80107b4 <__swsetup_r+0x7c>
 80107a0:	89a3      	ldrh	r3, [r4, #12]
 80107a2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80107a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80107aa:	d003      	beq.n	80107b4 <__swsetup_r+0x7c>
 80107ac:	4621      	mov	r1, r4
 80107ae:	4628      	mov	r0, r5
 80107b0:	f001 fce6 	bl	8012180 <__smakebuf_r>
 80107b4:	89a0      	ldrh	r0, [r4, #12]
 80107b6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80107ba:	f010 0301 	ands.w	r3, r0, #1
 80107be:	d00a      	beq.n	80107d6 <__swsetup_r+0x9e>
 80107c0:	2300      	movs	r3, #0
 80107c2:	60a3      	str	r3, [r4, #8]
 80107c4:	6963      	ldr	r3, [r4, #20]
 80107c6:	425b      	negs	r3, r3
 80107c8:	61a3      	str	r3, [r4, #24]
 80107ca:	6923      	ldr	r3, [r4, #16]
 80107cc:	b943      	cbnz	r3, 80107e0 <__swsetup_r+0xa8>
 80107ce:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80107d2:	d1c4      	bne.n	801075e <__swsetup_r+0x26>
 80107d4:	bd38      	pop	{r3, r4, r5, pc}
 80107d6:	0781      	lsls	r1, r0, #30
 80107d8:	bf58      	it	pl
 80107da:	6963      	ldrpl	r3, [r4, #20]
 80107dc:	60a3      	str	r3, [r4, #8]
 80107de:	e7f4      	b.n	80107ca <__swsetup_r+0x92>
 80107e0:	2000      	movs	r0, #0
 80107e2:	e7f7      	b.n	80107d4 <__swsetup_r+0x9c>
 80107e4:	200001fc 	.word	0x200001fc

080107e8 <memset>:
 80107e8:	4402      	add	r2, r0
 80107ea:	4603      	mov	r3, r0
 80107ec:	4293      	cmp	r3, r2
 80107ee:	d100      	bne.n	80107f2 <memset+0xa>
 80107f0:	4770      	bx	lr
 80107f2:	f803 1b01 	strb.w	r1, [r3], #1
 80107f6:	e7f9      	b.n	80107ec <memset+0x4>

080107f8 <strncmp>:
 80107f8:	b510      	push	{r4, lr}
 80107fa:	b16a      	cbz	r2, 8010818 <strncmp+0x20>
 80107fc:	3901      	subs	r1, #1
 80107fe:	1884      	adds	r4, r0, r2
 8010800:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010804:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8010808:	429a      	cmp	r2, r3
 801080a:	d103      	bne.n	8010814 <strncmp+0x1c>
 801080c:	42a0      	cmp	r0, r4
 801080e:	d001      	beq.n	8010814 <strncmp+0x1c>
 8010810:	2a00      	cmp	r2, #0
 8010812:	d1f5      	bne.n	8010800 <strncmp+0x8>
 8010814:	1ad0      	subs	r0, r2, r3
 8010816:	bd10      	pop	{r4, pc}
 8010818:	4610      	mov	r0, r2
 801081a:	e7fc      	b.n	8010816 <strncmp+0x1e>

0801081c <_close_r>:
 801081c:	b538      	push	{r3, r4, r5, lr}
 801081e:	4d06      	ldr	r5, [pc, #24]	; (8010838 <_close_r+0x1c>)
 8010820:	2300      	movs	r3, #0
 8010822:	4604      	mov	r4, r0
 8010824:	4608      	mov	r0, r1
 8010826:	602b      	str	r3, [r5, #0]
 8010828:	f7f3 fc1f 	bl	800406a <_close>
 801082c:	1c43      	adds	r3, r0, #1
 801082e:	d102      	bne.n	8010836 <_close_r+0x1a>
 8010830:	682b      	ldr	r3, [r5, #0]
 8010832:	b103      	cbz	r3, 8010836 <_close_r+0x1a>
 8010834:	6023      	str	r3, [r4, #0]
 8010836:	bd38      	pop	{r3, r4, r5, pc}
 8010838:	20001628 	.word	0x20001628

0801083c <_lseek_r>:
 801083c:	b538      	push	{r3, r4, r5, lr}
 801083e:	4d07      	ldr	r5, [pc, #28]	; (801085c <_lseek_r+0x20>)
 8010840:	4604      	mov	r4, r0
 8010842:	4608      	mov	r0, r1
 8010844:	4611      	mov	r1, r2
 8010846:	2200      	movs	r2, #0
 8010848:	602a      	str	r2, [r5, #0]
 801084a:	461a      	mov	r2, r3
 801084c:	f7f3 fc34 	bl	80040b8 <_lseek>
 8010850:	1c43      	adds	r3, r0, #1
 8010852:	d102      	bne.n	801085a <_lseek_r+0x1e>
 8010854:	682b      	ldr	r3, [r5, #0]
 8010856:	b103      	cbz	r3, 801085a <_lseek_r+0x1e>
 8010858:	6023      	str	r3, [r4, #0]
 801085a:	bd38      	pop	{r3, r4, r5, pc}
 801085c:	20001628 	.word	0x20001628

08010860 <_read_r>:
 8010860:	b538      	push	{r3, r4, r5, lr}
 8010862:	4d07      	ldr	r5, [pc, #28]	; (8010880 <_read_r+0x20>)
 8010864:	4604      	mov	r4, r0
 8010866:	4608      	mov	r0, r1
 8010868:	4611      	mov	r1, r2
 801086a:	2200      	movs	r2, #0
 801086c:	602a      	str	r2, [r5, #0]
 801086e:	461a      	mov	r2, r3
 8010870:	f7f3 fbc2 	bl	8003ff8 <_read>
 8010874:	1c43      	adds	r3, r0, #1
 8010876:	d102      	bne.n	801087e <_read_r+0x1e>
 8010878:	682b      	ldr	r3, [r5, #0]
 801087a:	b103      	cbz	r3, 801087e <_read_r+0x1e>
 801087c:	6023      	str	r3, [r4, #0]
 801087e:	bd38      	pop	{r3, r4, r5, pc}
 8010880:	20001628 	.word	0x20001628

08010884 <_sbrk_r>:
 8010884:	b538      	push	{r3, r4, r5, lr}
 8010886:	4d06      	ldr	r5, [pc, #24]	; (80108a0 <_sbrk_r+0x1c>)
 8010888:	2300      	movs	r3, #0
 801088a:	4604      	mov	r4, r0
 801088c:	4608      	mov	r0, r1
 801088e:	602b      	str	r3, [r5, #0]
 8010890:	f7f3 fc20 	bl	80040d4 <_sbrk>
 8010894:	1c43      	adds	r3, r0, #1
 8010896:	d102      	bne.n	801089e <_sbrk_r+0x1a>
 8010898:	682b      	ldr	r3, [r5, #0]
 801089a:	b103      	cbz	r3, 801089e <_sbrk_r+0x1a>
 801089c:	6023      	str	r3, [r4, #0]
 801089e:	bd38      	pop	{r3, r4, r5, pc}
 80108a0:	20001628 	.word	0x20001628

080108a4 <_write_r>:
 80108a4:	b538      	push	{r3, r4, r5, lr}
 80108a6:	4d07      	ldr	r5, [pc, #28]	; (80108c4 <_write_r+0x20>)
 80108a8:	4604      	mov	r4, r0
 80108aa:	4608      	mov	r0, r1
 80108ac:	4611      	mov	r1, r2
 80108ae:	2200      	movs	r2, #0
 80108b0:	602a      	str	r2, [r5, #0]
 80108b2:	461a      	mov	r2, r3
 80108b4:	f7f3 fbbd 	bl	8004032 <_write>
 80108b8:	1c43      	adds	r3, r0, #1
 80108ba:	d102      	bne.n	80108c2 <_write_r+0x1e>
 80108bc:	682b      	ldr	r3, [r5, #0]
 80108be:	b103      	cbz	r3, 80108c2 <_write_r+0x1e>
 80108c0:	6023      	str	r3, [r4, #0]
 80108c2:	bd38      	pop	{r3, r4, r5, pc}
 80108c4:	20001628 	.word	0x20001628

080108c8 <__errno>:
 80108c8:	4b01      	ldr	r3, [pc, #4]	; (80108d0 <__errno+0x8>)
 80108ca:	6818      	ldr	r0, [r3, #0]
 80108cc:	4770      	bx	lr
 80108ce:	bf00      	nop
 80108d0:	200001fc 	.word	0x200001fc

080108d4 <__libc_init_array>:
 80108d4:	b570      	push	{r4, r5, r6, lr}
 80108d6:	4d0d      	ldr	r5, [pc, #52]	; (801090c <__libc_init_array+0x38>)
 80108d8:	4c0d      	ldr	r4, [pc, #52]	; (8010910 <__libc_init_array+0x3c>)
 80108da:	1b64      	subs	r4, r4, r5
 80108dc:	10a4      	asrs	r4, r4, #2
 80108de:	2600      	movs	r6, #0
 80108e0:	42a6      	cmp	r6, r4
 80108e2:	d109      	bne.n	80108f8 <__libc_init_array+0x24>
 80108e4:	4d0b      	ldr	r5, [pc, #44]	; (8010914 <__libc_init_array+0x40>)
 80108e6:	4c0c      	ldr	r4, [pc, #48]	; (8010918 <__libc_init_array+0x44>)
 80108e8:	f002 fc74 	bl	80131d4 <_init>
 80108ec:	1b64      	subs	r4, r4, r5
 80108ee:	10a4      	asrs	r4, r4, #2
 80108f0:	2600      	movs	r6, #0
 80108f2:	42a6      	cmp	r6, r4
 80108f4:	d105      	bne.n	8010902 <__libc_init_array+0x2e>
 80108f6:	bd70      	pop	{r4, r5, r6, pc}
 80108f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80108fc:	4798      	blx	r3
 80108fe:	3601      	adds	r6, #1
 8010900:	e7ee      	b.n	80108e0 <__libc_init_array+0xc>
 8010902:	f855 3b04 	ldr.w	r3, [r5], #4
 8010906:	4798      	blx	r3
 8010908:	3601      	adds	r6, #1
 801090a:	e7f2      	b.n	80108f2 <__libc_init_array+0x1e>
 801090c:	080138b0 	.word	0x080138b0
 8010910:	080138b0 	.word	0x080138b0
 8010914:	080138b0 	.word	0x080138b0
 8010918:	080138b4 	.word	0x080138b4

0801091c <__retarget_lock_init_recursive>:
 801091c:	4770      	bx	lr

0801091e <__retarget_lock_acquire_recursive>:
 801091e:	4770      	bx	lr

08010920 <__retarget_lock_release_recursive>:
 8010920:	4770      	bx	lr

08010922 <memcpy>:
 8010922:	440a      	add	r2, r1
 8010924:	4291      	cmp	r1, r2
 8010926:	f100 33ff 	add.w	r3, r0, #4294967295
 801092a:	d100      	bne.n	801092e <memcpy+0xc>
 801092c:	4770      	bx	lr
 801092e:	b510      	push	{r4, lr}
 8010930:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010934:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010938:	4291      	cmp	r1, r2
 801093a:	d1f9      	bne.n	8010930 <memcpy+0xe>
 801093c:	bd10      	pop	{r4, pc}
	...

08010940 <nan>:
 8010940:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8010948 <nan+0x8>
 8010944:	4770      	bx	lr
 8010946:	bf00      	nop
 8010948:	00000000 	.word	0x00000000
 801094c:	7ff80000 	.word	0x7ff80000

08010950 <_free_r>:
 8010950:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010952:	2900      	cmp	r1, #0
 8010954:	d044      	beq.n	80109e0 <_free_r+0x90>
 8010956:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801095a:	9001      	str	r0, [sp, #4]
 801095c:	2b00      	cmp	r3, #0
 801095e:	f1a1 0404 	sub.w	r4, r1, #4
 8010962:	bfb8      	it	lt
 8010964:	18e4      	addlt	r4, r4, r3
 8010966:	f7fe ff11 	bl	800f78c <__malloc_lock>
 801096a:	4a1e      	ldr	r2, [pc, #120]	; (80109e4 <_free_r+0x94>)
 801096c:	9801      	ldr	r0, [sp, #4]
 801096e:	6813      	ldr	r3, [r2, #0]
 8010970:	b933      	cbnz	r3, 8010980 <_free_r+0x30>
 8010972:	6063      	str	r3, [r4, #4]
 8010974:	6014      	str	r4, [r2, #0]
 8010976:	b003      	add	sp, #12
 8010978:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801097c:	f7fe bf0c 	b.w	800f798 <__malloc_unlock>
 8010980:	42a3      	cmp	r3, r4
 8010982:	d908      	bls.n	8010996 <_free_r+0x46>
 8010984:	6825      	ldr	r5, [r4, #0]
 8010986:	1961      	adds	r1, r4, r5
 8010988:	428b      	cmp	r3, r1
 801098a:	bf01      	itttt	eq
 801098c:	6819      	ldreq	r1, [r3, #0]
 801098e:	685b      	ldreq	r3, [r3, #4]
 8010990:	1949      	addeq	r1, r1, r5
 8010992:	6021      	streq	r1, [r4, #0]
 8010994:	e7ed      	b.n	8010972 <_free_r+0x22>
 8010996:	461a      	mov	r2, r3
 8010998:	685b      	ldr	r3, [r3, #4]
 801099a:	b10b      	cbz	r3, 80109a0 <_free_r+0x50>
 801099c:	42a3      	cmp	r3, r4
 801099e:	d9fa      	bls.n	8010996 <_free_r+0x46>
 80109a0:	6811      	ldr	r1, [r2, #0]
 80109a2:	1855      	adds	r5, r2, r1
 80109a4:	42a5      	cmp	r5, r4
 80109a6:	d10b      	bne.n	80109c0 <_free_r+0x70>
 80109a8:	6824      	ldr	r4, [r4, #0]
 80109aa:	4421      	add	r1, r4
 80109ac:	1854      	adds	r4, r2, r1
 80109ae:	42a3      	cmp	r3, r4
 80109b0:	6011      	str	r1, [r2, #0]
 80109b2:	d1e0      	bne.n	8010976 <_free_r+0x26>
 80109b4:	681c      	ldr	r4, [r3, #0]
 80109b6:	685b      	ldr	r3, [r3, #4]
 80109b8:	6053      	str	r3, [r2, #4]
 80109ba:	440c      	add	r4, r1
 80109bc:	6014      	str	r4, [r2, #0]
 80109be:	e7da      	b.n	8010976 <_free_r+0x26>
 80109c0:	d902      	bls.n	80109c8 <_free_r+0x78>
 80109c2:	230c      	movs	r3, #12
 80109c4:	6003      	str	r3, [r0, #0]
 80109c6:	e7d6      	b.n	8010976 <_free_r+0x26>
 80109c8:	6825      	ldr	r5, [r4, #0]
 80109ca:	1961      	adds	r1, r4, r5
 80109cc:	428b      	cmp	r3, r1
 80109ce:	bf04      	itt	eq
 80109d0:	6819      	ldreq	r1, [r3, #0]
 80109d2:	685b      	ldreq	r3, [r3, #4]
 80109d4:	6063      	str	r3, [r4, #4]
 80109d6:	bf04      	itt	eq
 80109d8:	1949      	addeq	r1, r1, r5
 80109da:	6021      	streq	r1, [r4, #0]
 80109dc:	6054      	str	r4, [r2, #4]
 80109de:	e7ca      	b.n	8010976 <_free_r+0x26>
 80109e0:	b003      	add	sp, #12
 80109e2:	bd30      	pop	{r4, r5, pc}
 80109e4:	200014e4 	.word	0x200014e4

080109e8 <rshift>:
 80109e8:	6903      	ldr	r3, [r0, #16]
 80109ea:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80109ee:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80109f2:	ea4f 1261 	mov.w	r2, r1, asr #5
 80109f6:	f100 0414 	add.w	r4, r0, #20
 80109fa:	dd45      	ble.n	8010a88 <rshift+0xa0>
 80109fc:	f011 011f 	ands.w	r1, r1, #31
 8010a00:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8010a04:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8010a08:	d10c      	bne.n	8010a24 <rshift+0x3c>
 8010a0a:	f100 0710 	add.w	r7, r0, #16
 8010a0e:	4629      	mov	r1, r5
 8010a10:	42b1      	cmp	r1, r6
 8010a12:	d334      	bcc.n	8010a7e <rshift+0x96>
 8010a14:	1a9b      	subs	r3, r3, r2
 8010a16:	009b      	lsls	r3, r3, #2
 8010a18:	1eea      	subs	r2, r5, #3
 8010a1a:	4296      	cmp	r6, r2
 8010a1c:	bf38      	it	cc
 8010a1e:	2300      	movcc	r3, #0
 8010a20:	4423      	add	r3, r4
 8010a22:	e015      	b.n	8010a50 <rshift+0x68>
 8010a24:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8010a28:	f1c1 0820 	rsb	r8, r1, #32
 8010a2c:	40cf      	lsrs	r7, r1
 8010a2e:	f105 0e04 	add.w	lr, r5, #4
 8010a32:	46a1      	mov	r9, r4
 8010a34:	4576      	cmp	r6, lr
 8010a36:	46f4      	mov	ip, lr
 8010a38:	d815      	bhi.n	8010a66 <rshift+0x7e>
 8010a3a:	1a9a      	subs	r2, r3, r2
 8010a3c:	0092      	lsls	r2, r2, #2
 8010a3e:	3a04      	subs	r2, #4
 8010a40:	3501      	adds	r5, #1
 8010a42:	42ae      	cmp	r6, r5
 8010a44:	bf38      	it	cc
 8010a46:	2200      	movcc	r2, #0
 8010a48:	18a3      	adds	r3, r4, r2
 8010a4a:	50a7      	str	r7, [r4, r2]
 8010a4c:	b107      	cbz	r7, 8010a50 <rshift+0x68>
 8010a4e:	3304      	adds	r3, #4
 8010a50:	1b1a      	subs	r2, r3, r4
 8010a52:	42a3      	cmp	r3, r4
 8010a54:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8010a58:	bf08      	it	eq
 8010a5a:	2300      	moveq	r3, #0
 8010a5c:	6102      	str	r2, [r0, #16]
 8010a5e:	bf08      	it	eq
 8010a60:	6143      	streq	r3, [r0, #20]
 8010a62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010a66:	f8dc c000 	ldr.w	ip, [ip]
 8010a6a:	fa0c fc08 	lsl.w	ip, ip, r8
 8010a6e:	ea4c 0707 	orr.w	r7, ip, r7
 8010a72:	f849 7b04 	str.w	r7, [r9], #4
 8010a76:	f85e 7b04 	ldr.w	r7, [lr], #4
 8010a7a:	40cf      	lsrs	r7, r1
 8010a7c:	e7da      	b.n	8010a34 <rshift+0x4c>
 8010a7e:	f851 cb04 	ldr.w	ip, [r1], #4
 8010a82:	f847 cf04 	str.w	ip, [r7, #4]!
 8010a86:	e7c3      	b.n	8010a10 <rshift+0x28>
 8010a88:	4623      	mov	r3, r4
 8010a8a:	e7e1      	b.n	8010a50 <rshift+0x68>

08010a8c <__hexdig_fun>:
 8010a8c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8010a90:	2b09      	cmp	r3, #9
 8010a92:	d802      	bhi.n	8010a9a <__hexdig_fun+0xe>
 8010a94:	3820      	subs	r0, #32
 8010a96:	b2c0      	uxtb	r0, r0
 8010a98:	4770      	bx	lr
 8010a9a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8010a9e:	2b05      	cmp	r3, #5
 8010aa0:	d801      	bhi.n	8010aa6 <__hexdig_fun+0x1a>
 8010aa2:	3847      	subs	r0, #71	; 0x47
 8010aa4:	e7f7      	b.n	8010a96 <__hexdig_fun+0xa>
 8010aa6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8010aaa:	2b05      	cmp	r3, #5
 8010aac:	d801      	bhi.n	8010ab2 <__hexdig_fun+0x26>
 8010aae:	3827      	subs	r0, #39	; 0x27
 8010ab0:	e7f1      	b.n	8010a96 <__hexdig_fun+0xa>
 8010ab2:	2000      	movs	r0, #0
 8010ab4:	4770      	bx	lr
	...

08010ab8 <__gethex>:
 8010ab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010abc:	4617      	mov	r7, r2
 8010abe:	680a      	ldr	r2, [r1, #0]
 8010ac0:	b085      	sub	sp, #20
 8010ac2:	f102 0b02 	add.w	fp, r2, #2
 8010ac6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8010aca:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8010ace:	4681      	mov	r9, r0
 8010ad0:	468a      	mov	sl, r1
 8010ad2:	9302      	str	r3, [sp, #8]
 8010ad4:	32fe      	adds	r2, #254	; 0xfe
 8010ad6:	eb02 030b 	add.w	r3, r2, fp
 8010ada:	46d8      	mov	r8, fp
 8010adc:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8010ae0:	9301      	str	r3, [sp, #4]
 8010ae2:	2830      	cmp	r0, #48	; 0x30
 8010ae4:	d0f7      	beq.n	8010ad6 <__gethex+0x1e>
 8010ae6:	f7ff ffd1 	bl	8010a8c <__hexdig_fun>
 8010aea:	4604      	mov	r4, r0
 8010aec:	2800      	cmp	r0, #0
 8010aee:	d138      	bne.n	8010b62 <__gethex+0xaa>
 8010af0:	49a7      	ldr	r1, [pc, #668]	; (8010d90 <__gethex+0x2d8>)
 8010af2:	2201      	movs	r2, #1
 8010af4:	4640      	mov	r0, r8
 8010af6:	f7ff fe7f 	bl	80107f8 <strncmp>
 8010afa:	4606      	mov	r6, r0
 8010afc:	2800      	cmp	r0, #0
 8010afe:	d169      	bne.n	8010bd4 <__gethex+0x11c>
 8010b00:	f898 0001 	ldrb.w	r0, [r8, #1]
 8010b04:	465d      	mov	r5, fp
 8010b06:	f7ff ffc1 	bl	8010a8c <__hexdig_fun>
 8010b0a:	2800      	cmp	r0, #0
 8010b0c:	d064      	beq.n	8010bd8 <__gethex+0x120>
 8010b0e:	465a      	mov	r2, fp
 8010b10:	7810      	ldrb	r0, [r2, #0]
 8010b12:	2830      	cmp	r0, #48	; 0x30
 8010b14:	4690      	mov	r8, r2
 8010b16:	f102 0201 	add.w	r2, r2, #1
 8010b1a:	d0f9      	beq.n	8010b10 <__gethex+0x58>
 8010b1c:	f7ff ffb6 	bl	8010a8c <__hexdig_fun>
 8010b20:	2301      	movs	r3, #1
 8010b22:	fab0 f480 	clz	r4, r0
 8010b26:	0964      	lsrs	r4, r4, #5
 8010b28:	465e      	mov	r6, fp
 8010b2a:	9301      	str	r3, [sp, #4]
 8010b2c:	4642      	mov	r2, r8
 8010b2e:	4615      	mov	r5, r2
 8010b30:	3201      	adds	r2, #1
 8010b32:	7828      	ldrb	r0, [r5, #0]
 8010b34:	f7ff ffaa 	bl	8010a8c <__hexdig_fun>
 8010b38:	2800      	cmp	r0, #0
 8010b3a:	d1f8      	bne.n	8010b2e <__gethex+0x76>
 8010b3c:	4994      	ldr	r1, [pc, #592]	; (8010d90 <__gethex+0x2d8>)
 8010b3e:	2201      	movs	r2, #1
 8010b40:	4628      	mov	r0, r5
 8010b42:	f7ff fe59 	bl	80107f8 <strncmp>
 8010b46:	b978      	cbnz	r0, 8010b68 <__gethex+0xb0>
 8010b48:	b946      	cbnz	r6, 8010b5c <__gethex+0xa4>
 8010b4a:	1c6e      	adds	r6, r5, #1
 8010b4c:	4632      	mov	r2, r6
 8010b4e:	4615      	mov	r5, r2
 8010b50:	3201      	adds	r2, #1
 8010b52:	7828      	ldrb	r0, [r5, #0]
 8010b54:	f7ff ff9a 	bl	8010a8c <__hexdig_fun>
 8010b58:	2800      	cmp	r0, #0
 8010b5a:	d1f8      	bne.n	8010b4e <__gethex+0x96>
 8010b5c:	1b73      	subs	r3, r6, r5
 8010b5e:	009e      	lsls	r6, r3, #2
 8010b60:	e004      	b.n	8010b6c <__gethex+0xb4>
 8010b62:	2400      	movs	r4, #0
 8010b64:	4626      	mov	r6, r4
 8010b66:	e7e1      	b.n	8010b2c <__gethex+0x74>
 8010b68:	2e00      	cmp	r6, #0
 8010b6a:	d1f7      	bne.n	8010b5c <__gethex+0xa4>
 8010b6c:	782b      	ldrb	r3, [r5, #0]
 8010b6e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8010b72:	2b50      	cmp	r3, #80	; 0x50
 8010b74:	d13d      	bne.n	8010bf2 <__gethex+0x13a>
 8010b76:	786b      	ldrb	r3, [r5, #1]
 8010b78:	2b2b      	cmp	r3, #43	; 0x2b
 8010b7a:	d02f      	beq.n	8010bdc <__gethex+0x124>
 8010b7c:	2b2d      	cmp	r3, #45	; 0x2d
 8010b7e:	d031      	beq.n	8010be4 <__gethex+0x12c>
 8010b80:	1c69      	adds	r1, r5, #1
 8010b82:	f04f 0b00 	mov.w	fp, #0
 8010b86:	7808      	ldrb	r0, [r1, #0]
 8010b88:	f7ff ff80 	bl	8010a8c <__hexdig_fun>
 8010b8c:	1e42      	subs	r2, r0, #1
 8010b8e:	b2d2      	uxtb	r2, r2
 8010b90:	2a18      	cmp	r2, #24
 8010b92:	d82e      	bhi.n	8010bf2 <__gethex+0x13a>
 8010b94:	f1a0 0210 	sub.w	r2, r0, #16
 8010b98:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8010b9c:	f7ff ff76 	bl	8010a8c <__hexdig_fun>
 8010ba0:	f100 3cff 	add.w	ip, r0, #4294967295
 8010ba4:	fa5f fc8c 	uxtb.w	ip, ip
 8010ba8:	f1bc 0f18 	cmp.w	ip, #24
 8010bac:	d91d      	bls.n	8010bea <__gethex+0x132>
 8010bae:	f1bb 0f00 	cmp.w	fp, #0
 8010bb2:	d000      	beq.n	8010bb6 <__gethex+0xfe>
 8010bb4:	4252      	negs	r2, r2
 8010bb6:	4416      	add	r6, r2
 8010bb8:	f8ca 1000 	str.w	r1, [sl]
 8010bbc:	b1dc      	cbz	r4, 8010bf6 <__gethex+0x13e>
 8010bbe:	9b01      	ldr	r3, [sp, #4]
 8010bc0:	2b00      	cmp	r3, #0
 8010bc2:	bf14      	ite	ne
 8010bc4:	f04f 0800 	movne.w	r8, #0
 8010bc8:	f04f 0806 	moveq.w	r8, #6
 8010bcc:	4640      	mov	r0, r8
 8010bce:	b005      	add	sp, #20
 8010bd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010bd4:	4645      	mov	r5, r8
 8010bd6:	4626      	mov	r6, r4
 8010bd8:	2401      	movs	r4, #1
 8010bda:	e7c7      	b.n	8010b6c <__gethex+0xb4>
 8010bdc:	f04f 0b00 	mov.w	fp, #0
 8010be0:	1ca9      	adds	r1, r5, #2
 8010be2:	e7d0      	b.n	8010b86 <__gethex+0xce>
 8010be4:	f04f 0b01 	mov.w	fp, #1
 8010be8:	e7fa      	b.n	8010be0 <__gethex+0x128>
 8010bea:	230a      	movs	r3, #10
 8010bec:	fb03 0002 	mla	r0, r3, r2, r0
 8010bf0:	e7d0      	b.n	8010b94 <__gethex+0xdc>
 8010bf2:	4629      	mov	r1, r5
 8010bf4:	e7e0      	b.n	8010bb8 <__gethex+0x100>
 8010bf6:	eba5 0308 	sub.w	r3, r5, r8
 8010bfa:	3b01      	subs	r3, #1
 8010bfc:	4621      	mov	r1, r4
 8010bfe:	2b07      	cmp	r3, #7
 8010c00:	dc0a      	bgt.n	8010c18 <__gethex+0x160>
 8010c02:	4648      	mov	r0, r9
 8010c04:	f000 fa5a 	bl	80110bc <_Balloc>
 8010c08:	4604      	mov	r4, r0
 8010c0a:	b940      	cbnz	r0, 8010c1e <__gethex+0x166>
 8010c0c:	4b61      	ldr	r3, [pc, #388]	; (8010d94 <__gethex+0x2dc>)
 8010c0e:	4602      	mov	r2, r0
 8010c10:	21e4      	movs	r1, #228	; 0xe4
 8010c12:	4861      	ldr	r0, [pc, #388]	; (8010d98 <__gethex+0x2e0>)
 8010c14:	f001 fb12 	bl	801223c <__assert_func>
 8010c18:	3101      	adds	r1, #1
 8010c1a:	105b      	asrs	r3, r3, #1
 8010c1c:	e7ef      	b.n	8010bfe <__gethex+0x146>
 8010c1e:	f100 0a14 	add.w	sl, r0, #20
 8010c22:	2300      	movs	r3, #0
 8010c24:	495a      	ldr	r1, [pc, #360]	; (8010d90 <__gethex+0x2d8>)
 8010c26:	f8cd a004 	str.w	sl, [sp, #4]
 8010c2a:	469b      	mov	fp, r3
 8010c2c:	45a8      	cmp	r8, r5
 8010c2e:	d342      	bcc.n	8010cb6 <__gethex+0x1fe>
 8010c30:	9801      	ldr	r0, [sp, #4]
 8010c32:	f840 bb04 	str.w	fp, [r0], #4
 8010c36:	eba0 000a 	sub.w	r0, r0, sl
 8010c3a:	1080      	asrs	r0, r0, #2
 8010c3c:	6120      	str	r0, [r4, #16]
 8010c3e:	ea4f 1840 	mov.w	r8, r0, lsl #5
 8010c42:	4658      	mov	r0, fp
 8010c44:	f000 fb2c 	bl	80112a0 <__hi0bits>
 8010c48:	683d      	ldr	r5, [r7, #0]
 8010c4a:	eba8 0000 	sub.w	r0, r8, r0
 8010c4e:	42a8      	cmp	r0, r5
 8010c50:	dd59      	ble.n	8010d06 <__gethex+0x24e>
 8010c52:	eba0 0805 	sub.w	r8, r0, r5
 8010c56:	4641      	mov	r1, r8
 8010c58:	4620      	mov	r0, r4
 8010c5a:	f000 febb 	bl	80119d4 <__any_on>
 8010c5e:	4683      	mov	fp, r0
 8010c60:	b1b8      	cbz	r0, 8010c92 <__gethex+0x1da>
 8010c62:	f108 33ff 	add.w	r3, r8, #4294967295
 8010c66:	1159      	asrs	r1, r3, #5
 8010c68:	f003 021f 	and.w	r2, r3, #31
 8010c6c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8010c70:	f04f 0b01 	mov.w	fp, #1
 8010c74:	fa0b f202 	lsl.w	r2, fp, r2
 8010c78:	420a      	tst	r2, r1
 8010c7a:	d00a      	beq.n	8010c92 <__gethex+0x1da>
 8010c7c:	455b      	cmp	r3, fp
 8010c7e:	dd06      	ble.n	8010c8e <__gethex+0x1d6>
 8010c80:	f1a8 0102 	sub.w	r1, r8, #2
 8010c84:	4620      	mov	r0, r4
 8010c86:	f000 fea5 	bl	80119d4 <__any_on>
 8010c8a:	2800      	cmp	r0, #0
 8010c8c:	d138      	bne.n	8010d00 <__gethex+0x248>
 8010c8e:	f04f 0b02 	mov.w	fp, #2
 8010c92:	4641      	mov	r1, r8
 8010c94:	4620      	mov	r0, r4
 8010c96:	f7ff fea7 	bl	80109e8 <rshift>
 8010c9a:	4446      	add	r6, r8
 8010c9c:	68bb      	ldr	r3, [r7, #8]
 8010c9e:	42b3      	cmp	r3, r6
 8010ca0:	da41      	bge.n	8010d26 <__gethex+0x26e>
 8010ca2:	4621      	mov	r1, r4
 8010ca4:	4648      	mov	r0, r9
 8010ca6:	f000 fa49 	bl	801113c <_Bfree>
 8010caa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010cac:	2300      	movs	r3, #0
 8010cae:	6013      	str	r3, [r2, #0]
 8010cb0:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8010cb4:	e78a      	b.n	8010bcc <__gethex+0x114>
 8010cb6:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8010cba:	2a2e      	cmp	r2, #46	; 0x2e
 8010cbc:	d014      	beq.n	8010ce8 <__gethex+0x230>
 8010cbe:	2b20      	cmp	r3, #32
 8010cc0:	d106      	bne.n	8010cd0 <__gethex+0x218>
 8010cc2:	9b01      	ldr	r3, [sp, #4]
 8010cc4:	f843 bb04 	str.w	fp, [r3], #4
 8010cc8:	f04f 0b00 	mov.w	fp, #0
 8010ccc:	9301      	str	r3, [sp, #4]
 8010cce:	465b      	mov	r3, fp
 8010cd0:	7828      	ldrb	r0, [r5, #0]
 8010cd2:	9303      	str	r3, [sp, #12]
 8010cd4:	f7ff feda 	bl	8010a8c <__hexdig_fun>
 8010cd8:	9b03      	ldr	r3, [sp, #12]
 8010cda:	f000 000f 	and.w	r0, r0, #15
 8010cde:	4098      	lsls	r0, r3
 8010ce0:	ea4b 0b00 	orr.w	fp, fp, r0
 8010ce4:	3304      	adds	r3, #4
 8010ce6:	e7a1      	b.n	8010c2c <__gethex+0x174>
 8010ce8:	45a8      	cmp	r8, r5
 8010cea:	d8e8      	bhi.n	8010cbe <__gethex+0x206>
 8010cec:	2201      	movs	r2, #1
 8010cee:	4628      	mov	r0, r5
 8010cf0:	9303      	str	r3, [sp, #12]
 8010cf2:	f7ff fd81 	bl	80107f8 <strncmp>
 8010cf6:	4926      	ldr	r1, [pc, #152]	; (8010d90 <__gethex+0x2d8>)
 8010cf8:	9b03      	ldr	r3, [sp, #12]
 8010cfa:	2800      	cmp	r0, #0
 8010cfc:	d1df      	bne.n	8010cbe <__gethex+0x206>
 8010cfe:	e795      	b.n	8010c2c <__gethex+0x174>
 8010d00:	f04f 0b03 	mov.w	fp, #3
 8010d04:	e7c5      	b.n	8010c92 <__gethex+0x1da>
 8010d06:	da0b      	bge.n	8010d20 <__gethex+0x268>
 8010d08:	eba5 0800 	sub.w	r8, r5, r0
 8010d0c:	4621      	mov	r1, r4
 8010d0e:	4642      	mov	r2, r8
 8010d10:	4648      	mov	r0, r9
 8010d12:	f000 fc2d 	bl	8011570 <__lshift>
 8010d16:	eba6 0608 	sub.w	r6, r6, r8
 8010d1a:	4604      	mov	r4, r0
 8010d1c:	f100 0a14 	add.w	sl, r0, #20
 8010d20:	f04f 0b00 	mov.w	fp, #0
 8010d24:	e7ba      	b.n	8010c9c <__gethex+0x1e4>
 8010d26:	687b      	ldr	r3, [r7, #4]
 8010d28:	42b3      	cmp	r3, r6
 8010d2a:	dd73      	ble.n	8010e14 <__gethex+0x35c>
 8010d2c:	1b9e      	subs	r6, r3, r6
 8010d2e:	42b5      	cmp	r5, r6
 8010d30:	dc34      	bgt.n	8010d9c <__gethex+0x2e4>
 8010d32:	68fb      	ldr	r3, [r7, #12]
 8010d34:	2b02      	cmp	r3, #2
 8010d36:	d023      	beq.n	8010d80 <__gethex+0x2c8>
 8010d38:	2b03      	cmp	r3, #3
 8010d3a:	d025      	beq.n	8010d88 <__gethex+0x2d0>
 8010d3c:	2b01      	cmp	r3, #1
 8010d3e:	d115      	bne.n	8010d6c <__gethex+0x2b4>
 8010d40:	42b5      	cmp	r5, r6
 8010d42:	d113      	bne.n	8010d6c <__gethex+0x2b4>
 8010d44:	2d01      	cmp	r5, #1
 8010d46:	d10b      	bne.n	8010d60 <__gethex+0x2a8>
 8010d48:	9a02      	ldr	r2, [sp, #8]
 8010d4a:	687b      	ldr	r3, [r7, #4]
 8010d4c:	6013      	str	r3, [r2, #0]
 8010d4e:	2301      	movs	r3, #1
 8010d50:	6123      	str	r3, [r4, #16]
 8010d52:	f8ca 3000 	str.w	r3, [sl]
 8010d56:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010d58:	f04f 0862 	mov.w	r8, #98	; 0x62
 8010d5c:	601c      	str	r4, [r3, #0]
 8010d5e:	e735      	b.n	8010bcc <__gethex+0x114>
 8010d60:	1e69      	subs	r1, r5, #1
 8010d62:	4620      	mov	r0, r4
 8010d64:	f000 fe36 	bl	80119d4 <__any_on>
 8010d68:	2800      	cmp	r0, #0
 8010d6a:	d1ed      	bne.n	8010d48 <__gethex+0x290>
 8010d6c:	4621      	mov	r1, r4
 8010d6e:	4648      	mov	r0, r9
 8010d70:	f000 f9e4 	bl	801113c <_Bfree>
 8010d74:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010d76:	2300      	movs	r3, #0
 8010d78:	6013      	str	r3, [r2, #0]
 8010d7a:	f04f 0850 	mov.w	r8, #80	; 0x50
 8010d7e:	e725      	b.n	8010bcc <__gethex+0x114>
 8010d80:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010d82:	2b00      	cmp	r3, #0
 8010d84:	d1f2      	bne.n	8010d6c <__gethex+0x2b4>
 8010d86:	e7df      	b.n	8010d48 <__gethex+0x290>
 8010d88:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010d8a:	2b00      	cmp	r3, #0
 8010d8c:	d1dc      	bne.n	8010d48 <__gethex+0x290>
 8010d8e:	e7ed      	b.n	8010d6c <__gethex+0x2b4>
 8010d90:	080134b8 	.word	0x080134b8
 8010d94:	08013520 	.word	0x08013520
 8010d98:	08013531 	.word	0x08013531
 8010d9c:	f106 38ff 	add.w	r8, r6, #4294967295
 8010da0:	f1bb 0f00 	cmp.w	fp, #0
 8010da4:	d133      	bne.n	8010e0e <__gethex+0x356>
 8010da6:	f1b8 0f00 	cmp.w	r8, #0
 8010daa:	d004      	beq.n	8010db6 <__gethex+0x2fe>
 8010dac:	4641      	mov	r1, r8
 8010dae:	4620      	mov	r0, r4
 8010db0:	f000 fe10 	bl	80119d4 <__any_on>
 8010db4:	4683      	mov	fp, r0
 8010db6:	ea4f 1268 	mov.w	r2, r8, asr #5
 8010dba:	2301      	movs	r3, #1
 8010dbc:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8010dc0:	f008 081f 	and.w	r8, r8, #31
 8010dc4:	fa03 f308 	lsl.w	r3, r3, r8
 8010dc8:	4213      	tst	r3, r2
 8010dca:	4631      	mov	r1, r6
 8010dcc:	4620      	mov	r0, r4
 8010dce:	bf18      	it	ne
 8010dd0:	f04b 0b02 	orrne.w	fp, fp, #2
 8010dd4:	1bad      	subs	r5, r5, r6
 8010dd6:	f7ff fe07 	bl	80109e8 <rshift>
 8010dda:	687e      	ldr	r6, [r7, #4]
 8010ddc:	f04f 0802 	mov.w	r8, #2
 8010de0:	f1bb 0f00 	cmp.w	fp, #0
 8010de4:	d04a      	beq.n	8010e7c <__gethex+0x3c4>
 8010de6:	68fb      	ldr	r3, [r7, #12]
 8010de8:	2b02      	cmp	r3, #2
 8010dea:	d016      	beq.n	8010e1a <__gethex+0x362>
 8010dec:	2b03      	cmp	r3, #3
 8010dee:	d018      	beq.n	8010e22 <__gethex+0x36a>
 8010df0:	2b01      	cmp	r3, #1
 8010df2:	d109      	bne.n	8010e08 <__gethex+0x350>
 8010df4:	f01b 0f02 	tst.w	fp, #2
 8010df8:	d006      	beq.n	8010e08 <__gethex+0x350>
 8010dfa:	f8da 3000 	ldr.w	r3, [sl]
 8010dfe:	ea4b 0b03 	orr.w	fp, fp, r3
 8010e02:	f01b 0f01 	tst.w	fp, #1
 8010e06:	d10f      	bne.n	8010e28 <__gethex+0x370>
 8010e08:	f048 0810 	orr.w	r8, r8, #16
 8010e0c:	e036      	b.n	8010e7c <__gethex+0x3c4>
 8010e0e:	f04f 0b01 	mov.w	fp, #1
 8010e12:	e7d0      	b.n	8010db6 <__gethex+0x2fe>
 8010e14:	f04f 0801 	mov.w	r8, #1
 8010e18:	e7e2      	b.n	8010de0 <__gethex+0x328>
 8010e1a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010e1c:	f1c3 0301 	rsb	r3, r3, #1
 8010e20:	930f      	str	r3, [sp, #60]	; 0x3c
 8010e22:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010e24:	2b00      	cmp	r3, #0
 8010e26:	d0ef      	beq.n	8010e08 <__gethex+0x350>
 8010e28:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8010e2c:	f104 0214 	add.w	r2, r4, #20
 8010e30:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8010e34:	9301      	str	r3, [sp, #4]
 8010e36:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8010e3a:	2300      	movs	r3, #0
 8010e3c:	4694      	mov	ip, r2
 8010e3e:	f852 1b04 	ldr.w	r1, [r2], #4
 8010e42:	f1b1 3fff 	cmp.w	r1, #4294967295
 8010e46:	d01e      	beq.n	8010e86 <__gethex+0x3ce>
 8010e48:	3101      	adds	r1, #1
 8010e4a:	f8cc 1000 	str.w	r1, [ip]
 8010e4e:	f1b8 0f02 	cmp.w	r8, #2
 8010e52:	f104 0214 	add.w	r2, r4, #20
 8010e56:	d13d      	bne.n	8010ed4 <__gethex+0x41c>
 8010e58:	683b      	ldr	r3, [r7, #0]
 8010e5a:	3b01      	subs	r3, #1
 8010e5c:	42ab      	cmp	r3, r5
 8010e5e:	d10b      	bne.n	8010e78 <__gethex+0x3c0>
 8010e60:	1169      	asrs	r1, r5, #5
 8010e62:	2301      	movs	r3, #1
 8010e64:	f005 051f 	and.w	r5, r5, #31
 8010e68:	fa03 f505 	lsl.w	r5, r3, r5
 8010e6c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010e70:	421d      	tst	r5, r3
 8010e72:	bf18      	it	ne
 8010e74:	f04f 0801 	movne.w	r8, #1
 8010e78:	f048 0820 	orr.w	r8, r8, #32
 8010e7c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010e7e:	601c      	str	r4, [r3, #0]
 8010e80:	9b02      	ldr	r3, [sp, #8]
 8010e82:	601e      	str	r6, [r3, #0]
 8010e84:	e6a2      	b.n	8010bcc <__gethex+0x114>
 8010e86:	4290      	cmp	r0, r2
 8010e88:	f842 3c04 	str.w	r3, [r2, #-4]
 8010e8c:	d8d6      	bhi.n	8010e3c <__gethex+0x384>
 8010e8e:	68a2      	ldr	r2, [r4, #8]
 8010e90:	4593      	cmp	fp, r2
 8010e92:	db17      	blt.n	8010ec4 <__gethex+0x40c>
 8010e94:	6861      	ldr	r1, [r4, #4]
 8010e96:	4648      	mov	r0, r9
 8010e98:	3101      	adds	r1, #1
 8010e9a:	f000 f90f 	bl	80110bc <_Balloc>
 8010e9e:	4682      	mov	sl, r0
 8010ea0:	b918      	cbnz	r0, 8010eaa <__gethex+0x3f2>
 8010ea2:	4b1b      	ldr	r3, [pc, #108]	; (8010f10 <__gethex+0x458>)
 8010ea4:	4602      	mov	r2, r0
 8010ea6:	2184      	movs	r1, #132	; 0x84
 8010ea8:	e6b3      	b.n	8010c12 <__gethex+0x15a>
 8010eaa:	6922      	ldr	r2, [r4, #16]
 8010eac:	3202      	adds	r2, #2
 8010eae:	f104 010c 	add.w	r1, r4, #12
 8010eb2:	0092      	lsls	r2, r2, #2
 8010eb4:	300c      	adds	r0, #12
 8010eb6:	f7ff fd34 	bl	8010922 <memcpy>
 8010eba:	4621      	mov	r1, r4
 8010ebc:	4648      	mov	r0, r9
 8010ebe:	f000 f93d 	bl	801113c <_Bfree>
 8010ec2:	4654      	mov	r4, sl
 8010ec4:	6922      	ldr	r2, [r4, #16]
 8010ec6:	1c51      	adds	r1, r2, #1
 8010ec8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8010ecc:	6121      	str	r1, [r4, #16]
 8010ece:	2101      	movs	r1, #1
 8010ed0:	6151      	str	r1, [r2, #20]
 8010ed2:	e7bc      	b.n	8010e4e <__gethex+0x396>
 8010ed4:	6921      	ldr	r1, [r4, #16]
 8010ed6:	4559      	cmp	r1, fp
 8010ed8:	dd0b      	ble.n	8010ef2 <__gethex+0x43a>
 8010eda:	2101      	movs	r1, #1
 8010edc:	4620      	mov	r0, r4
 8010ede:	f7ff fd83 	bl	80109e8 <rshift>
 8010ee2:	68bb      	ldr	r3, [r7, #8]
 8010ee4:	3601      	adds	r6, #1
 8010ee6:	42b3      	cmp	r3, r6
 8010ee8:	f6ff aedb 	blt.w	8010ca2 <__gethex+0x1ea>
 8010eec:	f04f 0801 	mov.w	r8, #1
 8010ef0:	e7c2      	b.n	8010e78 <__gethex+0x3c0>
 8010ef2:	f015 051f 	ands.w	r5, r5, #31
 8010ef6:	d0f9      	beq.n	8010eec <__gethex+0x434>
 8010ef8:	9b01      	ldr	r3, [sp, #4]
 8010efa:	441a      	add	r2, r3
 8010efc:	f1c5 0520 	rsb	r5, r5, #32
 8010f00:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8010f04:	f000 f9cc 	bl	80112a0 <__hi0bits>
 8010f08:	42a8      	cmp	r0, r5
 8010f0a:	dbe6      	blt.n	8010eda <__gethex+0x422>
 8010f0c:	e7ee      	b.n	8010eec <__gethex+0x434>
 8010f0e:	bf00      	nop
 8010f10:	08013520 	.word	0x08013520

08010f14 <L_shift>:
 8010f14:	f1c2 0208 	rsb	r2, r2, #8
 8010f18:	0092      	lsls	r2, r2, #2
 8010f1a:	b570      	push	{r4, r5, r6, lr}
 8010f1c:	f1c2 0620 	rsb	r6, r2, #32
 8010f20:	6843      	ldr	r3, [r0, #4]
 8010f22:	6804      	ldr	r4, [r0, #0]
 8010f24:	fa03 f506 	lsl.w	r5, r3, r6
 8010f28:	432c      	orrs	r4, r5
 8010f2a:	40d3      	lsrs	r3, r2
 8010f2c:	6004      	str	r4, [r0, #0]
 8010f2e:	f840 3f04 	str.w	r3, [r0, #4]!
 8010f32:	4288      	cmp	r0, r1
 8010f34:	d3f4      	bcc.n	8010f20 <L_shift+0xc>
 8010f36:	bd70      	pop	{r4, r5, r6, pc}

08010f38 <__match>:
 8010f38:	b530      	push	{r4, r5, lr}
 8010f3a:	6803      	ldr	r3, [r0, #0]
 8010f3c:	3301      	adds	r3, #1
 8010f3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010f42:	b914      	cbnz	r4, 8010f4a <__match+0x12>
 8010f44:	6003      	str	r3, [r0, #0]
 8010f46:	2001      	movs	r0, #1
 8010f48:	bd30      	pop	{r4, r5, pc}
 8010f4a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010f4e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8010f52:	2d19      	cmp	r5, #25
 8010f54:	bf98      	it	ls
 8010f56:	3220      	addls	r2, #32
 8010f58:	42a2      	cmp	r2, r4
 8010f5a:	d0f0      	beq.n	8010f3e <__match+0x6>
 8010f5c:	2000      	movs	r0, #0
 8010f5e:	e7f3      	b.n	8010f48 <__match+0x10>

08010f60 <__hexnan>:
 8010f60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f64:	680b      	ldr	r3, [r1, #0]
 8010f66:	6801      	ldr	r1, [r0, #0]
 8010f68:	115e      	asrs	r6, r3, #5
 8010f6a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8010f6e:	f013 031f 	ands.w	r3, r3, #31
 8010f72:	b087      	sub	sp, #28
 8010f74:	bf18      	it	ne
 8010f76:	3604      	addne	r6, #4
 8010f78:	2500      	movs	r5, #0
 8010f7a:	1f37      	subs	r7, r6, #4
 8010f7c:	4682      	mov	sl, r0
 8010f7e:	4690      	mov	r8, r2
 8010f80:	9301      	str	r3, [sp, #4]
 8010f82:	f846 5c04 	str.w	r5, [r6, #-4]
 8010f86:	46b9      	mov	r9, r7
 8010f88:	463c      	mov	r4, r7
 8010f8a:	9502      	str	r5, [sp, #8]
 8010f8c:	46ab      	mov	fp, r5
 8010f8e:	784a      	ldrb	r2, [r1, #1]
 8010f90:	1c4b      	adds	r3, r1, #1
 8010f92:	9303      	str	r3, [sp, #12]
 8010f94:	b342      	cbz	r2, 8010fe8 <__hexnan+0x88>
 8010f96:	4610      	mov	r0, r2
 8010f98:	9105      	str	r1, [sp, #20]
 8010f9a:	9204      	str	r2, [sp, #16]
 8010f9c:	f7ff fd76 	bl	8010a8c <__hexdig_fun>
 8010fa0:	2800      	cmp	r0, #0
 8010fa2:	d14f      	bne.n	8011044 <__hexnan+0xe4>
 8010fa4:	9a04      	ldr	r2, [sp, #16]
 8010fa6:	9905      	ldr	r1, [sp, #20]
 8010fa8:	2a20      	cmp	r2, #32
 8010faa:	d818      	bhi.n	8010fde <__hexnan+0x7e>
 8010fac:	9b02      	ldr	r3, [sp, #8]
 8010fae:	459b      	cmp	fp, r3
 8010fb0:	dd13      	ble.n	8010fda <__hexnan+0x7a>
 8010fb2:	454c      	cmp	r4, r9
 8010fb4:	d206      	bcs.n	8010fc4 <__hexnan+0x64>
 8010fb6:	2d07      	cmp	r5, #7
 8010fb8:	dc04      	bgt.n	8010fc4 <__hexnan+0x64>
 8010fba:	462a      	mov	r2, r5
 8010fbc:	4649      	mov	r1, r9
 8010fbe:	4620      	mov	r0, r4
 8010fc0:	f7ff ffa8 	bl	8010f14 <L_shift>
 8010fc4:	4544      	cmp	r4, r8
 8010fc6:	d950      	bls.n	801106a <__hexnan+0x10a>
 8010fc8:	2300      	movs	r3, #0
 8010fca:	f1a4 0904 	sub.w	r9, r4, #4
 8010fce:	f844 3c04 	str.w	r3, [r4, #-4]
 8010fd2:	f8cd b008 	str.w	fp, [sp, #8]
 8010fd6:	464c      	mov	r4, r9
 8010fd8:	461d      	mov	r5, r3
 8010fda:	9903      	ldr	r1, [sp, #12]
 8010fdc:	e7d7      	b.n	8010f8e <__hexnan+0x2e>
 8010fde:	2a29      	cmp	r2, #41	; 0x29
 8010fe0:	d155      	bne.n	801108e <__hexnan+0x12e>
 8010fe2:	3102      	adds	r1, #2
 8010fe4:	f8ca 1000 	str.w	r1, [sl]
 8010fe8:	f1bb 0f00 	cmp.w	fp, #0
 8010fec:	d04f      	beq.n	801108e <__hexnan+0x12e>
 8010fee:	454c      	cmp	r4, r9
 8010ff0:	d206      	bcs.n	8011000 <__hexnan+0xa0>
 8010ff2:	2d07      	cmp	r5, #7
 8010ff4:	dc04      	bgt.n	8011000 <__hexnan+0xa0>
 8010ff6:	462a      	mov	r2, r5
 8010ff8:	4649      	mov	r1, r9
 8010ffa:	4620      	mov	r0, r4
 8010ffc:	f7ff ff8a 	bl	8010f14 <L_shift>
 8011000:	4544      	cmp	r4, r8
 8011002:	d934      	bls.n	801106e <__hexnan+0x10e>
 8011004:	f1a8 0204 	sub.w	r2, r8, #4
 8011008:	4623      	mov	r3, r4
 801100a:	f853 1b04 	ldr.w	r1, [r3], #4
 801100e:	f842 1f04 	str.w	r1, [r2, #4]!
 8011012:	429f      	cmp	r7, r3
 8011014:	d2f9      	bcs.n	801100a <__hexnan+0xaa>
 8011016:	1b3b      	subs	r3, r7, r4
 8011018:	f023 0303 	bic.w	r3, r3, #3
 801101c:	3304      	adds	r3, #4
 801101e:	3e03      	subs	r6, #3
 8011020:	3401      	adds	r4, #1
 8011022:	42a6      	cmp	r6, r4
 8011024:	bf38      	it	cc
 8011026:	2304      	movcc	r3, #4
 8011028:	4443      	add	r3, r8
 801102a:	2200      	movs	r2, #0
 801102c:	f843 2b04 	str.w	r2, [r3], #4
 8011030:	429f      	cmp	r7, r3
 8011032:	d2fb      	bcs.n	801102c <__hexnan+0xcc>
 8011034:	683b      	ldr	r3, [r7, #0]
 8011036:	b91b      	cbnz	r3, 8011040 <__hexnan+0xe0>
 8011038:	4547      	cmp	r7, r8
 801103a:	d126      	bne.n	801108a <__hexnan+0x12a>
 801103c:	2301      	movs	r3, #1
 801103e:	603b      	str	r3, [r7, #0]
 8011040:	2005      	movs	r0, #5
 8011042:	e025      	b.n	8011090 <__hexnan+0x130>
 8011044:	3501      	adds	r5, #1
 8011046:	2d08      	cmp	r5, #8
 8011048:	f10b 0b01 	add.w	fp, fp, #1
 801104c:	dd06      	ble.n	801105c <__hexnan+0xfc>
 801104e:	4544      	cmp	r4, r8
 8011050:	d9c3      	bls.n	8010fda <__hexnan+0x7a>
 8011052:	2300      	movs	r3, #0
 8011054:	f844 3c04 	str.w	r3, [r4, #-4]
 8011058:	2501      	movs	r5, #1
 801105a:	3c04      	subs	r4, #4
 801105c:	6822      	ldr	r2, [r4, #0]
 801105e:	f000 000f 	and.w	r0, r0, #15
 8011062:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8011066:	6020      	str	r0, [r4, #0]
 8011068:	e7b7      	b.n	8010fda <__hexnan+0x7a>
 801106a:	2508      	movs	r5, #8
 801106c:	e7b5      	b.n	8010fda <__hexnan+0x7a>
 801106e:	9b01      	ldr	r3, [sp, #4]
 8011070:	2b00      	cmp	r3, #0
 8011072:	d0df      	beq.n	8011034 <__hexnan+0xd4>
 8011074:	f1c3 0320 	rsb	r3, r3, #32
 8011078:	f04f 32ff 	mov.w	r2, #4294967295
 801107c:	40da      	lsrs	r2, r3
 801107e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8011082:	4013      	ands	r3, r2
 8011084:	f846 3c04 	str.w	r3, [r6, #-4]
 8011088:	e7d4      	b.n	8011034 <__hexnan+0xd4>
 801108a:	3f04      	subs	r7, #4
 801108c:	e7d2      	b.n	8011034 <__hexnan+0xd4>
 801108e:	2004      	movs	r0, #4
 8011090:	b007      	add	sp, #28
 8011092:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011096 <__ascii_mbtowc>:
 8011096:	b082      	sub	sp, #8
 8011098:	b901      	cbnz	r1, 801109c <__ascii_mbtowc+0x6>
 801109a:	a901      	add	r1, sp, #4
 801109c:	b142      	cbz	r2, 80110b0 <__ascii_mbtowc+0x1a>
 801109e:	b14b      	cbz	r3, 80110b4 <__ascii_mbtowc+0x1e>
 80110a0:	7813      	ldrb	r3, [r2, #0]
 80110a2:	600b      	str	r3, [r1, #0]
 80110a4:	7812      	ldrb	r2, [r2, #0]
 80110a6:	1e10      	subs	r0, r2, #0
 80110a8:	bf18      	it	ne
 80110aa:	2001      	movne	r0, #1
 80110ac:	b002      	add	sp, #8
 80110ae:	4770      	bx	lr
 80110b0:	4610      	mov	r0, r2
 80110b2:	e7fb      	b.n	80110ac <__ascii_mbtowc+0x16>
 80110b4:	f06f 0001 	mvn.w	r0, #1
 80110b8:	e7f8      	b.n	80110ac <__ascii_mbtowc+0x16>
	...

080110bc <_Balloc>:
 80110bc:	b570      	push	{r4, r5, r6, lr}
 80110be:	69c6      	ldr	r6, [r0, #28]
 80110c0:	4604      	mov	r4, r0
 80110c2:	460d      	mov	r5, r1
 80110c4:	b976      	cbnz	r6, 80110e4 <_Balloc+0x28>
 80110c6:	2010      	movs	r0, #16
 80110c8:	f7fe fab0 	bl	800f62c <malloc>
 80110cc:	4602      	mov	r2, r0
 80110ce:	61e0      	str	r0, [r4, #28]
 80110d0:	b920      	cbnz	r0, 80110dc <_Balloc+0x20>
 80110d2:	4b18      	ldr	r3, [pc, #96]	; (8011134 <_Balloc+0x78>)
 80110d4:	4818      	ldr	r0, [pc, #96]	; (8011138 <_Balloc+0x7c>)
 80110d6:	216b      	movs	r1, #107	; 0x6b
 80110d8:	f001 f8b0 	bl	801223c <__assert_func>
 80110dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80110e0:	6006      	str	r6, [r0, #0]
 80110e2:	60c6      	str	r6, [r0, #12]
 80110e4:	69e6      	ldr	r6, [r4, #28]
 80110e6:	68f3      	ldr	r3, [r6, #12]
 80110e8:	b183      	cbz	r3, 801110c <_Balloc+0x50>
 80110ea:	69e3      	ldr	r3, [r4, #28]
 80110ec:	68db      	ldr	r3, [r3, #12]
 80110ee:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80110f2:	b9b8      	cbnz	r0, 8011124 <_Balloc+0x68>
 80110f4:	2101      	movs	r1, #1
 80110f6:	fa01 f605 	lsl.w	r6, r1, r5
 80110fa:	1d72      	adds	r2, r6, #5
 80110fc:	0092      	lsls	r2, r2, #2
 80110fe:	4620      	mov	r0, r4
 8011100:	f001 f8ba 	bl	8012278 <_calloc_r>
 8011104:	b160      	cbz	r0, 8011120 <_Balloc+0x64>
 8011106:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801110a:	e00e      	b.n	801112a <_Balloc+0x6e>
 801110c:	2221      	movs	r2, #33	; 0x21
 801110e:	2104      	movs	r1, #4
 8011110:	4620      	mov	r0, r4
 8011112:	f001 f8b1 	bl	8012278 <_calloc_r>
 8011116:	69e3      	ldr	r3, [r4, #28]
 8011118:	60f0      	str	r0, [r6, #12]
 801111a:	68db      	ldr	r3, [r3, #12]
 801111c:	2b00      	cmp	r3, #0
 801111e:	d1e4      	bne.n	80110ea <_Balloc+0x2e>
 8011120:	2000      	movs	r0, #0
 8011122:	bd70      	pop	{r4, r5, r6, pc}
 8011124:	6802      	ldr	r2, [r0, #0]
 8011126:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801112a:	2300      	movs	r3, #0
 801112c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011130:	e7f7      	b.n	8011122 <_Balloc+0x66>
 8011132:	bf00      	nop
 8011134:	08013591 	.word	0x08013591
 8011138:	080135a8 	.word	0x080135a8

0801113c <_Bfree>:
 801113c:	b570      	push	{r4, r5, r6, lr}
 801113e:	69c6      	ldr	r6, [r0, #28]
 8011140:	4605      	mov	r5, r0
 8011142:	460c      	mov	r4, r1
 8011144:	b976      	cbnz	r6, 8011164 <_Bfree+0x28>
 8011146:	2010      	movs	r0, #16
 8011148:	f7fe fa70 	bl	800f62c <malloc>
 801114c:	4602      	mov	r2, r0
 801114e:	61e8      	str	r0, [r5, #28]
 8011150:	b920      	cbnz	r0, 801115c <_Bfree+0x20>
 8011152:	4b09      	ldr	r3, [pc, #36]	; (8011178 <_Bfree+0x3c>)
 8011154:	4809      	ldr	r0, [pc, #36]	; (801117c <_Bfree+0x40>)
 8011156:	218f      	movs	r1, #143	; 0x8f
 8011158:	f001 f870 	bl	801223c <__assert_func>
 801115c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011160:	6006      	str	r6, [r0, #0]
 8011162:	60c6      	str	r6, [r0, #12]
 8011164:	b13c      	cbz	r4, 8011176 <_Bfree+0x3a>
 8011166:	69eb      	ldr	r3, [r5, #28]
 8011168:	6862      	ldr	r2, [r4, #4]
 801116a:	68db      	ldr	r3, [r3, #12]
 801116c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011170:	6021      	str	r1, [r4, #0]
 8011172:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8011176:	bd70      	pop	{r4, r5, r6, pc}
 8011178:	08013591 	.word	0x08013591
 801117c:	080135a8 	.word	0x080135a8

08011180 <__multadd>:
 8011180:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011184:	690d      	ldr	r5, [r1, #16]
 8011186:	4607      	mov	r7, r0
 8011188:	460c      	mov	r4, r1
 801118a:	461e      	mov	r6, r3
 801118c:	f101 0c14 	add.w	ip, r1, #20
 8011190:	2000      	movs	r0, #0
 8011192:	f8dc 3000 	ldr.w	r3, [ip]
 8011196:	b299      	uxth	r1, r3
 8011198:	fb02 6101 	mla	r1, r2, r1, r6
 801119c:	0c1e      	lsrs	r6, r3, #16
 801119e:	0c0b      	lsrs	r3, r1, #16
 80111a0:	fb02 3306 	mla	r3, r2, r6, r3
 80111a4:	b289      	uxth	r1, r1
 80111a6:	3001      	adds	r0, #1
 80111a8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80111ac:	4285      	cmp	r5, r0
 80111ae:	f84c 1b04 	str.w	r1, [ip], #4
 80111b2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80111b6:	dcec      	bgt.n	8011192 <__multadd+0x12>
 80111b8:	b30e      	cbz	r6, 80111fe <__multadd+0x7e>
 80111ba:	68a3      	ldr	r3, [r4, #8]
 80111bc:	42ab      	cmp	r3, r5
 80111be:	dc19      	bgt.n	80111f4 <__multadd+0x74>
 80111c0:	6861      	ldr	r1, [r4, #4]
 80111c2:	4638      	mov	r0, r7
 80111c4:	3101      	adds	r1, #1
 80111c6:	f7ff ff79 	bl	80110bc <_Balloc>
 80111ca:	4680      	mov	r8, r0
 80111cc:	b928      	cbnz	r0, 80111da <__multadd+0x5a>
 80111ce:	4602      	mov	r2, r0
 80111d0:	4b0c      	ldr	r3, [pc, #48]	; (8011204 <__multadd+0x84>)
 80111d2:	480d      	ldr	r0, [pc, #52]	; (8011208 <__multadd+0x88>)
 80111d4:	21ba      	movs	r1, #186	; 0xba
 80111d6:	f001 f831 	bl	801223c <__assert_func>
 80111da:	6922      	ldr	r2, [r4, #16]
 80111dc:	3202      	adds	r2, #2
 80111de:	f104 010c 	add.w	r1, r4, #12
 80111e2:	0092      	lsls	r2, r2, #2
 80111e4:	300c      	adds	r0, #12
 80111e6:	f7ff fb9c 	bl	8010922 <memcpy>
 80111ea:	4621      	mov	r1, r4
 80111ec:	4638      	mov	r0, r7
 80111ee:	f7ff ffa5 	bl	801113c <_Bfree>
 80111f2:	4644      	mov	r4, r8
 80111f4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80111f8:	3501      	adds	r5, #1
 80111fa:	615e      	str	r6, [r3, #20]
 80111fc:	6125      	str	r5, [r4, #16]
 80111fe:	4620      	mov	r0, r4
 8011200:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011204:	08013520 	.word	0x08013520
 8011208:	080135a8 	.word	0x080135a8

0801120c <__s2b>:
 801120c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011210:	460c      	mov	r4, r1
 8011212:	4615      	mov	r5, r2
 8011214:	461f      	mov	r7, r3
 8011216:	2209      	movs	r2, #9
 8011218:	3308      	adds	r3, #8
 801121a:	4606      	mov	r6, r0
 801121c:	fb93 f3f2 	sdiv	r3, r3, r2
 8011220:	2100      	movs	r1, #0
 8011222:	2201      	movs	r2, #1
 8011224:	429a      	cmp	r2, r3
 8011226:	db09      	blt.n	801123c <__s2b+0x30>
 8011228:	4630      	mov	r0, r6
 801122a:	f7ff ff47 	bl	80110bc <_Balloc>
 801122e:	b940      	cbnz	r0, 8011242 <__s2b+0x36>
 8011230:	4602      	mov	r2, r0
 8011232:	4b19      	ldr	r3, [pc, #100]	; (8011298 <__s2b+0x8c>)
 8011234:	4819      	ldr	r0, [pc, #100]	; (801129c <__s2b+0x90>)
 8011236:	21d3      	movs	r1, #211	; 0xd3
 8011238:	f001 f800 	bl	801223c <__assert_func>
 801123c:	0052      	lsls	r2, r2, #1
 801123e:	3101      	adds	r1, #1
 8011240:	e7f0      	b.n	8011224 <__s2b+0x18>
 8011242:	9b08      	ldr	r3, [sp, #32]
 8011244:	6143      	str	r3, [r0, #20]
 8011246:	2d09      	cmp	r5, #9
 8011248:	f04f 0301 	mov.w	r3, #1
 801124c:	6103      	str	r3, [r0, #16]
 801124e:	dd16      	ble.n	801127e <__s2b+0x72>
 8011250:	f104 0909 	add.w	r9, r4, #9
 8011254:	46c8      	mov	r8, r9
 8011256:	442c      	add	r4, r5
 8011258:	f818 3b01 	ldrb.w	r3, [r8], #1
 801125c:	4601      	mov	r1, r0
 801125e:	3b30      	subs	r3, #48	; 0x30
 8011260:	220a      	movs	r2, #10
 8011262:	4630      	mov	r0, r6
 8011264:	f7ff ff8c 	bl	8011180 <__multadd>
 8011268:	45a0      	cmp	r8, r4
 801126a:	d1f5      	bne.n	8011258 <__s2b+0x4c>
 801126c:	f1a5 0408 	sub.w	r4, r5, #8
 8011270:	444c      	add	r4, r9
 8011272:	1b2d      	subs	r5, r5, r4
 8011274:	1963      	adds	r3, r4, r5
 8011276:	42bb      	cmp	r3, r7
 8011278:	db04      	blt.n	8011284 <__s2b+0x78>
 801127a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801127e:	340a      	adds	r4, #10
 8011280:	2509      	movs	r5, #9
 8011282:	e7f6      	b.n	8011272 <__s2b+0x66>
 8011284:	f814 3b01 	ldrb.w	r3, [r4], #1
 8011288:	4601      	mov	r1, r0
 801128a:	3b30      	subs	r3, #48	; 0x30
 801128c:	220a      	movs	r2, #10
 801128e:	4630      	mov	r0, r6
 8011290:	f7ff ff76 	bl	8011180 <__multadd>
 8011294:	e7ee      	b.n	8011274 <__s2b+0x68>
 8011296:	bf00      	nop
 8011298:	08013520 	.word	0x08013520
 801129c:	080135a8 	.word	0x080135a8

080112a0 <__hi0bits>:
 80112a0:	0c03      	lsrs	r3, r0, #16
 80112a2:	041b      	lsls	r3, r3, #16
 80112a4:	b9d3      	cbnz	r3, 80112dc <__hi0bits+0x3c>
 80112a6:	0400      	lsls	r0, r0, #16
 80112a8:	2310      	movs	r3, #16
 80112aa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80112ae:	bf04      	itt	eq
 80112b0:	0200      	lsleq	r0, r0, #8
 80112b2:	3308      	addeq	r3, #8
 80112b4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80112b8:	bf04      	itt	eq
 80112ba:	0100      	lsleq	r0, r0, #4
 80112bc:	3304      	addeq	r3, #4
 80112be:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80112c2:	bf04      	itt	eq
 80112c4:	0080      	lsleq	r0, r0, #2
 80112c6:	3302      	addeq	r3, #2
 80112c8:	2800      	cmp	r0, #0
 80112ca:	db05      	blt.n	80112d8 <__hi0bits+0x38>
 80112cc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80112d0:	f103 0301 	add.w	r3, r3, #1
 80112d4:	bf08      	it	eq
 80112d6:	2320      	moveq	r3, #32
 80112d8:	4618      	mov	r0, r3
 80112da:	4770      	bx	lr
 80112dc:	2300      	movs	r3, #0
 80112de:	e7e4      	b.n	80112aa <__hi0bits+0xa>

080112e0 <__lo0bits>:
 80112e0:	6803      	ldr	r3, [r0, #0]
 80112e2:	f013 0207 	ands.w	r2, r3, #7
 80112e6:	d00c      	beq.n	8011302 <__lo0bits+0x22>
 80112e8:	07d9      	lsls	r1, r3, #31
 80112ea:	d422      	bmi.n	8011332 <__lo0bits+0x52>
 80112ec:	079a      	lsls	r2, r3, #30
 80112ee:	bf49      	itett	mi
 80112f0:	085b      	lsrmi	r3, r3, #1
 80112f2:	089b      	lsrpl	r3, r3, #2
 80112f4:	6003      	strmi	r3, [r0, #0]
 80112f6:	2201      	movmi	r2, #1
 80112f8:	bf5c      	itt	pl
 80112fa:	6003      	strpl	r3, [r0, #0]
 80112fc:	2202      	movpl	r2, #2
 80112fe:	4610      	mov	r0, r2
 8011300:	4770      	bx	lr
 8011302:	b299      	uxth	r1, r3
 8011304:	b909      	cbnz	r1, 801130a <__lo0bits+0x2a>
 8011306:	0c1b      	lsrs	r3, r3, #16
 8011308:	2210      	movs	r2, #16
 801130a:	b2d9      	uxtb	r1, r3
 801130c:	b909      	cbnz	r1, 8011312 <__lo0bits+0x32>
 801130e:	3208      	adds	r2, #8
 8011310:	0a1b      	lsrs	r3, r3, #8
 8011312:	0719      	lsls	r1, r3, #28
 8011314:	bf04      	itt	eq
 8011316:	091b      	lsreq	r3, r3, #4
 8011318:	3204      	addeq	r2, #4
 801131a:	0799      	lsls	r1, r3, #30
 801131c:	bf04      	itt	eq
 801131e:	089b      	lsreq	r3, r3, #2
 8011320:	3202      	addeq	r2, #2
 8011322:	07d9      	lsls	r1, r3, #31
 8011324:	d403      	bmi.n	801132e <__lo0bits+0x4e>
 8011326:	085b      	lsrs	r3, r3, #1
 8011328:	f102 0201 	add.w	r2, r2, #1
 801132c:	d003      	beq.n	8011336 <__lo0bits+0x56>
 801132e:	6003      	str	r3, [r0, #0]
 8011330:	e7e5      	b.n	80112fe <__lo0bits+0x1e>
 8011332:	2200      	movs	r2, #0
 8011334:	e7e3      	b.n	80112fe <__lo0bits+0x1e>
 8011336:	2220      	movs	r2, #32
 8011338:	e7e1      	b.n	80112fe <__lo0bits+0x1e>
	...

0801133c <__i2b>:
 801133c:	b510      	push	{r4, lr}
 801133e:	460c      	mov	r4, r1
 8011340:	2101      	movs	r1, #1
 8011342:	f7ff febb 	bl	80110bc <_Balloc>
 8011346:	4602      	mov	r2, r0
 8011348:	b928      	cbnz	r0, 8011356 <__i2b+0x1a>
 801134a:	4b05      	ldr	r3, [pc, #20]	; (8011360 <__i2b+0x24>)
 801134c:	4805      	ldr	r0, [pc, #20]	; (8011364 <__i2b+0x28>)
 801134e:	f240 1145 	movw	r1, #325	; 0x145
 8011352:	f000 ff73 	bl	801223c <__assert_func>
 8011356:	2301      	movs	r3, #1
 8011358:	6144      	str	r4, [r0, #20]
 801135a:	6103      	str	r3, [r0, #16]
 801135c:	bd10      	pop	{r4, pc}
 801135e:	bf00      	nop
 8011360:	08013520 	.word	0x08013520
 8011364:	080135a8 	.word	0x080135a8

08011368 <__multiply>:
 8011368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801136c:	4691      	mov	r9, r2
 801136e:	690a      	ldr	r2, [r1, #16]
 8011370:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8011374:	429a      	cmp	r2, r3
 8011376:	bfb8      	it	lt
 8011378:	460b      	movlt	r3, r1
 801137a:	460c      	mov	r4, r1
 801137c:	bfbc      	itt	lt
 801137e:	464c      	movlt	r4, r9
 8011380:	4699      	movlt	r9, r3
 8011382:	6927      	ldr	r7, [r4, #16]
 8011384:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8011388:	68a3      	ldr	r3, [r4, #8]
 801138a:	6861      	ldr	r1, [r4, #4]
 801138c:	eb07 060a 	add.w	r6, r7, sl
 8011390:	42b3      	cmp	r3, r6
 8011392:	b085      	sub	sp, #20
 8011394:	bfb8      	it	lt
 8011396:	3101      	addlt	r1, #1
 8011398:	f7ff fe90 	bl	80110bc <_Balloc>
 801139c:	b930      	cbnz	r0, 80113ac <__multiply+0x44>
 801139e:	4602      	mov	r2, r0
 80113a0:	4b44      	ldr	r3, [pc, #272]	; (80114b4 <__multiply+0x14c>)
 80113a2:	4845      	ldr	r0, [pc, #276]	; (80114b8 <__multiply+0x150>)
 80113a4:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80113a8:	f000 ff48 	bl	801223c <__assert_func>
 80113ac:	f100 0514 	add.w	r5, r0, #20
 80113b0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80113b4:	462b      	mov	r3, r5
 80113b6:	2200      	movs	r2, #0
 80113b8:	4543      	cmp	r3, r8
 80113ba:	d321      	bcc.n	8011400 <__multiply+0x98>
 80113bc:	f104 0314 	add.w	r3, r4, #20
 80113c0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80113c4:	f109 0314 	add.w	r3, r9, #20
 80113c8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80113cc:	9202      	str	r2, [sp, #8]
 80113ce:	1b3a      	subs	r2, r7, r4
 80113d0:	3a15      	subs	r2, #21
 80113d2:	f022 0203 	bic.w	r2, r2, #3
 80113d6:	3204      	adds	r2, #4
 80113d8:	f104 0115 	add.w	r1, r4, #21
 80113dc:	428f      	cmp	r7, r1
 80113de:	bf38      	it	cc
 80113e0:	2204      	movcc	r2, #4
 80113e2:	9201      	str	r2, [sp, #4]
 80113e4:	9a02      	ldr	r2, [sp, #8]
 80113e6:	9303      	str	r3, [sp, #12]
 80113e8:	429a      	cmp	r2, r3
 80113ea:	d80c      	bhi.n	8011406 <__multiply+0x9e>
 80113ec:	2e00      	cmp	r6, #0
 80113ee:	dd03      	ble.n	80113f8 <__multiply+0x90>
 80113f0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80113f4:	2b00      	cmp	r3, #0
 80113f6:	d05b      	beq.n	80114b0 <__multiply+0x148>
 80113f8:	6106      	str	r6, [r0, #16]
 80113fa:	b005      	add	sp, #20
 80113fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011400:	f843 2b04 	str.w	r2, [r3], #4
 8011404:	e7d8      	b.n	80113b8 <__multiply+0x50>
 8011406:	f8b3 a000 	ldrh.w	sl, [r3]
 801140a:	f1ba 0f00 	cmp.w	sl, #0
 801140e:	d024      	beq.n	801145a <__multiply+0xf2>
 8011410:	f104 0e14 	add.w	lr, r4, #20
 8011414:	46a9      	mov	r9, r5
 8011416:	f04f 0c00 	mov.w	ip, #0
 801141a:	f85e 2b04 	ldr.w	r2, [lr], #4
 801141e:	f8d9 1000 	ldr.w	r1, [r9]
 8011422:	fa1f fb82 	uxth.w	fp, r2
 8011426:	b289      	uxth	r1, r1
 8011428:	fb0a 110b 	mla	r1, sl, fp, r1
 801142c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8011430:	f8d9 2000 	ldr.w	r2, [r9]
 8011434:	4461      	add	r1, ip
 8011436:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801143a:	fb0a c20b 	mla	r2, sl, fp, ip
 801143e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8011442:	b289      	uxth	r1, r1
 8011444:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8011448:	4577      	cmp	r7, lr
 801144a:	f849 1b04 	str.w	r1, [r9], #4
 801144e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8011452:	d8e2      	bhi.n	801141a <__multiply+0xb2>
 8011454:	9a01      	ldr	r2, [sp, #4]
 8011456:	f845 c002 	str.w	ip, [r5, r2]
 801145a:	9a03      	ldr	r2, [sp, #12]
 801145c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8011460:	3304      	adds	r3, #4
 8011462:	f1b9 0f00 	cmp.w	r9, #0
 8011466:	d021      	beq.n	80114ac <__multiply+0x144>
 8011468:	6829      	ldr	r1, [r5, #0]
 801146a:	f104 0c14 	add.w	ip, r4, #20
 801146e:	46ae      	mov	lr, r5
 8011470:	f04f 0a00 	mov.w	sl, #0
 8011474:	f8bc b000 	ldrh.w	fp, [ip]
 8011478:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801147c:	fb09 220b 	mla	r2, r9, fp, r2
 8011480:	4452      	add	r2, sl
 8011482:	b289      	uxth	r1, r1
 8011484:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8011488:	f84e 1b04 	str.w	r1, [lr], #4
 801148c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8011490:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8011494:	f8be 1000 	ldrh.w	r1, [lr]
 8011498:	fb09 110a 	mla	r1, r9, sl, r1
 801149c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80114a0:	4567      	cmp	r7, ip
 80114a2:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80114a6:	d8e5      	bhi.n	8011474 <__multiply+0x10c>
 80114a8:	9a01      	ldr	r2, [sp, #4]
 80114aa:	50a9      	str	r1, [r5, r2]
 80114ac:	3504      	adds	r5, #4
 80114ae:	e799      	b.n	80113e4 <__multiply+0x7c>
 80114b0:	3e01      	subs	r6, #1
 80114b2:	e79b      	b.n	80113ec <__multiply+0x84>
 80114b4:	08013520 	.word	0x08013520
 80114b8:	080135a8 	.word	0x080135a8

080114bc <__pow5mult>:
 80114bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80114c0:	4615      	mov	r5, r2
 80114c2:	f012 0203 	ands.w	r2, r2, #3
 80114c6:	4606      	mov	r6, r0
 80114c8:	460f      	mov	r7, r1
 80114ca:	d007      	beq.n	80114dc <__pow5mult+0x20>
 80114cc:	4c25      	ldr	r4, [pc, #148]	; (8011564 <__pow5mult+0xa8>)
 80114ce:	3a01      	subs	r2, #1
 80114d0:	2300      	movs	r3, #0
 80114d2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80114d6:	f7ff fe53 	bl	8011180 <__multadd>
 80114da:	4607      	mov	r7, r0
 80114dc:	10ad      	asrs	r5, r5, #2
 80114de:	d03d      	beq.n	801155c <__pow5mult+0xa0>
 80114e0:	69f4      	ldr	r4, [r6, #28]
 80114e2:	b97c      	cbnz	r4, 8011504 <__pow5mult+0x48>
 80114e4:	2010      	movs	r0, #16
 80114e6:	f7fe f8a1 	bl	800f62c <malloc>
 80114ea:	4602      	mov	r2, r0
 80114ec:	61f0      	str	r0, [r6, #28]
 80114ee:	b928      	cbnz	r0, 80114fc <__pow5mult+0x40>
 80114f0:	4b1d      	ldr	r3, [pc, #116]	; (8011568 <__pow5mult+0xac>)
 80114f2:	481e      	ldr	r0, [pc, #120]	; (801156c <__pow5mult+0xb0>)
 80114f4:	f240 11b3 	movw	r1, #435	; 0x1b3
 80114f8:	f000 fea0 	bl	801223c <__assert_func>
 80114fc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011500:	6004      	str	r4, [r0, #0]
 8011502:	60c4      	str	r4, [r0, #12]
 8011504:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8011508:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801150c:	b94c      	cbnz	r4, 8011522 <__pow5mult+0x66>
 801150e:	f240 2171 	movw	r1, #625	; 0x271
 8011512:	4630      	mov	r0, r6
 8011514:	f7ff ff12 	bl	801133c <__i2b>
 8011518:	2300      	movs	r3, #0
 801151a:	f8c8 0008 	str.w	r0, [r8, #8]
 801151e:	4604      	mov	r4, r0
 8011520:	6003      	str	r3, [r0, #0]
 8011522:	f04f 0900 	mov.w	r9, #0
 8011526:	07eb      	lsls	r3, r5, #31
 8011528:	d50a      	bpl.n	8011540 <__pow5mult+0x84>
 801152a:	4639      	mov	r1, r7
 801152c:	4622      	mov	r2, r4
 801152e:	4630      	mov	r0, r6
 8011530:	f7ff ff1a 	bl	8011368 <__multiply>
 8011534:	4639      	mov	r1, r7
 8011536:	4680      	mov	r8, r0
 8011538:	4630      	mov	r0, r6
 801153a:	f7ff fdff 	bl	801113c <_Bfree>
 801153e:	4647      	mov	r7, r8
 8011540:	106d      	asrs	r5, r5, #1
 8011542:	d00b      	beq.n	801155c <__pow5mult+0xa0>
 8011544:	6820      	ldr	r0, [r4, #0]
 8011546:	b938      	cbnz	r0, 8011558 <__pow5mult+0x9c>
 8011548:	4622      	mov	r2, r4
 801154a:	4621      	mov	r1, r4
 801154c:	4630      	mov	r0, r6
 801154e:	f7ff ff0b 	bl	8011368 <__multiply>
 8011552:	6020      	str	r0, [r4, #0]
 8011554:	f8c0 9000 	str.w	r9, [r0]
 8011558:	4604      	mov	r4, r0
 801155a:	e7e4      	b.n	8011526 <__pow5mult+0x6a>
 801155c:	4638      	mov	r0, r7
 801155e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011562:	bf00      	nop
 8011564:	080136f8 	.word	0x080136f8
 8011568:	08013591 	.word	0x08013591
 801156c:	080135a8 	.word	0x080135a8

08011570 <__lshift>:
 8011570:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011574:	460c      	mov	r4, r1
 8011576:	6849      	ldr	r1, [r1, #4]
 8011578:	6923      	ldr	r3, [r4, #16]
 801157a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801157e:	68a3      	ldr	r3, [r4, #8]
 8011580:	4607      	mov	r7, r0
 8011582:	4691      	mov	r9, r2
 8011584:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011588:	f108 0601 	add.w	r6, r8, #1
 801158c:	42b3      	cmp	r3, r6
 801158e:	db0b      	blt.n	80115a8 <__lshift+0x38>
 8011590:	4638      	mov	r0, r7
 8011592:	f7ff fd93 	bl	80110bc <_Balloc>
 8011596:	4605      	mov	r5, r0
 8011598:	b948      	cbnz	r0, 80115ae <__lshift+0x3e>
 801159a:	4602      	mov	r2, r0
 801159c:	4b28      	ldr	r3, [pc, #160]	; (8011640 <__lshift+0xd0>)
 801159e:	4829      	ldr	r0, [pc, #164]	; (8011644 <__lshift+0xd4>)
 80115a0:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80115a4:	f000 fe4a 	bl	801223c <__assert_func>
 80115a8:	3101      	adds	r1, #1
 80115aa:	005b      	lsls	r3, r3, #1
 80115ac:	e7ee      	b.n	801158c <__lshift+0x1c>
 80115ae:	2300      	movs	r3, #0
 80115b0:	f100 0114 	add.w	r1, r0, #20
 80115b4:	f100 0210 	add.w	r2, r0, #16
 80115b8:	4618      	mov	r0, r3
 80115ba:	4553      	cmp	r3, sl
 80115bc:	db33      	blt.n	8011626 <__lshift+0xb6>
 80115be:	6920      	ldr	r0, [r4, #16]
 80115c0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80115c4:	f104 0314 	add.w	r3, r4, #20
 80115c8:	f019 091f 	ands.w	r9, r9, #31
 80115cc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80115d0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80115d4:	d02b      	beq.n	801162e <__lshift+0xbe>
 80115d6:	f1c9 0e20 	rsb	lr, r9, #32
 80115da:	468a      	mov	sl, r1
 80115dc:	2200      	movs	r2, #0
 80115de:	6818      	ldr	r0, [r3, #0]
 80115e0:	fa00 f009 	lsl.w	r0, r0, r9
 80115e4:	4310      	orrs	r0, r2
 80115e6:	f84a 0b04 	str.w	r0, [sl], #4
 80115ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80115ee:	459c      	cmp	ip, r3
 80115f0:	fa22 f20e 	lsr.w	r2, r2, lr
 80115f4:	d8f3      	bhi.n	80115de <__lshift+0x6e>
 80115f6:	ebac 0304 	sub.w	r3, ip, r4
 80115fa:	3b15      	subs	r3, #21
 80115fc:	f023 0303 	bic.w	r3, r3, #3
 8011600:	3304      	adds	r3, #4
 8011602:	f104 0015 	add.w	r0, r4, #21
 8011606:	4584      	cmp	ip, r0
 8011608:	bf38      	it	cc
 801160a:	2304      	movcc	r3, #4
 801160c:	50ca      	str	r2, [r1, r3]
 801160e:	b10a      	cbz	r2, 8011614 <__lshift+0xa4>
 8011610:	f108 0602 	add.w	r6, r8, #2
 8011614:	3e01      	subs	r6, #1
 8011616:	4638      	mov	r0, r7
 8011618:	612e      	str	r6, [r5, #16]
 801161a:	4621      	mov	r1, r4
 801161c:	f7ff fd8e 	bl	801113c <_Bfree>
 8011620:	4628      	mov	r0, r5
 8011622:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011626:	f842 0f04 	str.w	r0, [r2, #4]!
 801162a:	3301      	adds	r3, #1
 801162c:	e7c5      	b.n	80115ba <__lshift+0x4a>
 801162e:	3904      	subs	r1, #4
 8011630:	f853 2b04 	ldr.w	r2, [r3], #4
 8011634:	f841 2f04 	str.w	r2, [r1, #4]!
 8011638:	459c      	cmp	ip, r3
 801163a:	d8f9      	bhi.n	8011630 <__lshift+0xc0>
 801163c:	e7ea      	b.n	8011614 <__lshift+0xa4>
 801163e:	bf00      	nop
 8011640:	08013520 	.word	0x08013520
 8011644:	080135a8 	.word	0x080135a8

08011648 <__mcmp>:
 8011648:	b530      	push	{r4, r5, lr}
 801164a:	6902      	ldr	r2, [r0, #16]
 801164c:	690c      	ldr	r4, [r1, #16]
 801164e:	1b12      	subs	r2, r2, r4
 8011650:	d10e      	bne.n	8011670 <__mcmp+0x28>
 8011652:	f100 0314 	add.w	r3, r0, #20
 8011656:	3114      	adds	r1, #20
 8011658:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801165c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8011660:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8011664:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8011668:	42a5      	cmp	r5, r4
 801166a:	d003      	beq.n	8011674 <__mcmp+0x2c>
 801166c:	d305      	bcc.n	801167a <__mcmp+0x32>
 801166e:	2201      	movs	r2, #1
 8011670:	4610      	mov	r0, r2
 8011672:	bd30      	pop	{r4, r5, pc}
 8011674:	4283      	cmp	r3, r0
 8011676:	d3f3      	bcc.n	8011660 <__mcmp+0x18>
 8011678:	e7fa      	b.n	8011670 <__mcmp+0x28>
 801167a:	f04f 32ff 	mov.w	r2, #4294967295
 801167e:	e7f7      	b.n	8011670 <__mcmp+0x28>

08011680 <__mdiff>:
 8011680:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011684:	460c      	mov	r4, r1
 8011686:	4606      	mov	r6, r0
 8011688:	4611      	mov	r1, r2
 801168a:	4620      	mov	r0, r4
 801168c:	4690      	mov	r8, r2
 801168e:	f7ff ffdb 	bl	8011648 <__mcmp>
 8011692:	1e05      	subs	r5, r0, #0
 8011694:	d110      	bne.n	80116b8 <__mdiff+0x38>
 8011696:	4629      	mov	r1, r5
 8011698:	4630      	mov	r0, r6
 801169a:	f7ff fd0f 	bl	80110bc <_Balloc>
 801169e:	b930      	cbnz	r0, 80116ae <__mdiff+0x2e>
 80116a0:	4b3a      	ldr	r3, [pc, #232]	; (801178c <__mdiff+0x10c>)
 80116a2:	4602      	mov	r2, r0
 80116a4:	f240 2137 	movw	r1, #567	; 0x237
 80116a8:	4839      	ldr	r0, [pc, #228]	; (8011790 <__mdiff+0x110>)
 80116aa:	f000 fdc7 	bl	801223c <__assert_func>
 80116ae:	2301      	movs	r3, #1
 80116b0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80116b4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80116b8:	bfa4      	itt	ge
 80116ba:	4643      	movge	r3, r8
 80116bc:	46a0      	movge	r8, r4
 80116be:	4630      	mov	r0, r6
 80116c0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80116c4:	bfa6      	itte	ge
 80116c6:	461c      	movge	r4, r3
 80116c8:	2500      	movge	r5, #0
 80116ca:	2501      	movlt	r5, #1
 80116cc:	f7ff fcf6 	bl	80110bc <_Balloc>
 80116d0:	b920      	cbnz	r0, 80116dc <__mdiff+0x5c>
 80116d2:	4b2e      	ldr	r3, [pc, #184]	; (801178c <__mdiff+0x10c>)
 80116d4:	4602      	mov	r2, r0
 80116d6:	f240 2145 	movw	r1, #581	; 0x245
 80116da:	e7e5      	b.n	80116a8 <__mdiff+0x28>
 80116dc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80116e0:	6926      	ldr	r6, [r4, #16]
 80116e2:	60c5      	str	r5, [r0, #12]
 80116e4:	f104 0914 	add.w	r9, r4, #20
 80116e8:	f108 0514 	add.w	r5, r8, #20
 80116ec:	f100 0e14 	add.w	lr, r0, #20
 80116f0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80116f4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80116f8:	f108 0210 	add.w	r2, r8, #16
 80116fc:	46f2      	mov	sl, lr
 80116fe:	2100      	movs	r1, #0
 8011700:	f859 3b04 	ldr.w	r3, [r9], #4
 8011704:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8011708:	fa11 f88b 	uxtah	r8, r1, fp
 801170c:	b299      	uxth	r1, r3
 801170e:	0c1b      	lsrs	r3, r3, #16
 8011710:	eba8 0801 	sub.w	r8, r8, r1
 8011714:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8011718:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801171c:	fa1f f888 	uxth.w	r8, r8
 8011720:	1419      	asrs	r1, r3, #16
 8011722:	454e      	cmp	r6, r9
 8011724:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8011728:	f84a 3b04 	str.w	r3, [sl], #4
 801172c:	d8e8      	bhi.n	8011700 <__mdiff+0x80>
 801172e:	1b33      	subs	r3, r6, r4
 8011730:	3b15      	subs	r3, #21
 8011732:	f023 0303 	bic.w	r3, r3, #3
 8011736:	3304      	adds	r3, #4
 8011738:	3415      	adds	r4, #21
 801173a:	42a6      	cmp	r6, r4
 801173c:	bf38      	it	cc
 801173e:	2304      	movcc	r3, #4
 8011740:	441d      	add	r5, r3
 8011742:	4473      	add	r3, lr
 8011744:	469e      	mov	lr, r3
 8011746:	462e      	mov	r6, r5
 8011748:	4566      	cmp	r6, ip
 801174a:	d30e      	bcc.n	801176a <__mdiff+0xea>
 801174c:	f10c 0203 	add.w	r2, ip, #3
 8011750:	1b52      	subs	r2, r2, r5
 8011752:	f022 0203 	bic.w	r2, r2, #3
 8011756:	3d03      	subs	r5, #3
 8011758:	45ac      	cmp	ip, r5
 801175a:	bf38      	it	cc
 801175c:	2200      	movcc	r2, #0
 801175e:	4413      	add	r3, r2
 8011760:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8011764:	b17a      	cbz	r2, 8011786 <__mdiff+0x106>
 8011766:	6107      	str	r7, [r0, #16]
 8011768:	e7a4      	b.n	80116b4 <__mdiff+0x34>
 801176a:	f856 8b04 	ldr.w	r8, [r6], #4
 801176e:	fa11 f288 	uxtah	r2, r1, r8
 8011772:	1414      	asrs	r4, r2, #16
 8011774:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8011778:	b292      	uxth	r2, r2
 801177a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801177e:	f84e 2b04 	str.w	r2, [lr], #4
 8011782:	1421      	asrs	r1, r4, #16
 8011784:	e7e0      	b.n	8011748 <__mdiff+0xc8>
 8011786:	3f01      	subs	r7, #1
 8011788:	e7ea      	b.n	8011760 <__mdiff+0xe0>
 801178a:	bf00      	nop
 801178c:	08013520 	.word	0x08013520
 8011790:	080135a8 	.word	0x080135a8

08011794 <__ulp>:
 8011794:	b082      	sub	sp, #8
 8011796:	ed8d 0b00 	vstr	d0, [sp]
 801179a:	9a01      	ldr	r2, [sp, #4]
 801179c:	4b0f      	ldr	r3, [pc, #60]	; (80117dc <__ulp+0x48>)
 801179e:	4013      	ands	r3, r2
 80117a0:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80117a4:	2b00      	cmp	r3, #0
 80117a6:	dc08      	bgt.n	80117ba <__ulp+0x26>
 80117a8:	425b      	negs	r3, r3
 80117aa:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80117ae:	ea4f 5223 	mov.w	r2, r3, asr #20
 80117b2:	da04      	bge.n	80117be <__ulp+0x2a>
 80117b4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80117b8:	4113      	asrs	r3, r2
 80117ba:	2200      	movs	r2, #0
 80117bc:	e008      	b.n	80117d0 <__ulp+0x3c>
 80117be:	f1a2 0314 	sub.w	r3, r2, #20
 80117c2:	2b1e      	cmp	r3, #30
 80117c4:	bfda      	itte	le
 80117c6:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 80117ca:	40da      	lsrle	r2, r3
 80117cc:	2201      	movgt	r2, #1
 80117ce:	2300      	movs	r3, #0
 80117d0:	4619      	mov	r1, r3
 80117d2:	4610      	mov	r0, r2
 80117d4:	ec41 0b10 	vmov	d0, r0, r1
 80117d8:	b002      	add	sp, #8
 80117da:	4770      	bx	lr
 80117dc:	7ff00000 	.word	0x7ff00000

080117e0 <__b2d>:
 80117e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80117e4:	6906      	ldr	r6, [r0, #16]
 80117e6:	f100 0814 	add.w	r8, r0, #20
 80117ea:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80117ee:	1f37      	subs	r7, r6, #4
 80117f0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80117f4:	4610      	mov	r0, r2
 80117f6:	f7ff fd53 	bl	80112a0 <__hi0bits>
 80117fa:	f1c0 0320 	rsb	r3, r0, #32
 80117fe:	280a      	cmp	r0, #10
 8011800:	600b      	str	r3, [r1, #0]
 8011802:	491b      	ldr	r1, [pc, #108]	; (8011870 <__b2d+0x90>)
 8011804:	dc15      	bgt.n	8011832 <__b2d+0x52>
 8011806:	f1c0 0c0b 	rsb	ip, r0, #11
 801180a:	fa22 f30c 	lsr.w	r3, r2, ip
 801180e:	45b8      	cmp	r8, r7
 8011810:	ea43 0501 	orr.w	r5, r3, r1
 8011814:	bf34      	ite	cc
 8011816:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801181a:	2300      	movcs	r3, #0
 801181c:	3015      	adds	r0, #21
 801181e:	fa02 f000 	lsl.w	r0, r2, r0
 8011822:	fa23 f30c 	lsr.w	r3, r3, ip
 8011826:	4303      	orrs	r3, r0
 8011828:	461c      	mov	r4, r3
 801182a:	ec45 4b10 	vmov	d0, r4, r5
 801182e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011832:	45b8      	cmp	r8, r7
 8011834:	bf3a      	itte	cc
 8011836:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801183a:	f1a6 0708 	subcc.w	r7, r6, #8
 801183e:	2300      	movcs	r3, #0
 8011840:	380b      	subs	r0, #11
 8011842:	d012      	beq.n	801186a <__b2d+0x8a>
 8011844:	f1c0 0120 	rsb	r1, r0, #32
 8011848:	fa23 f401 	lsr.w	r4, r3, r1
 801184c:	4082      	lsls	r2, r0
 801184e:	4322      	orrs	r2, r4
 8011850:	4547      	cmp	r7, r8
 8011852:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8011856:	bf8c      	ite	hi
 8011858:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 801185c:	2200      	movls	r2, #0
 801185e:	4083      	lsls	r3, r0
 8011860:	40ca      	lsrs	r2, r1
 8011862:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8011866:	4313      	orrs	r3, r2
 8011868:	e7de      	b.n	8011828 <__b2d+0x48>
 801186a:	ea42 0501 	orr.w	r5, r2, r1
 801186e:	e7db      	b.n	8011828 <__b2d+0x48>
 8011870:	3ff00000 	.word	0x3ff00000

08011874 <__d2b>:
 8011874:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011878:	460f      	mov	r7, r1
 801187a:	2101      	movs	r1, #1
 801187c:	ec59 8b10 	vmov	r8, r9, d0
 8011880:	4616      	mov	r6, r2
 8011882:	f7ff fc1b 	bl	80110bc <_Balloc>
 8011886:	4604      	mov	r4, r0
 8011888:	b930      	cbnz	r0, 8011898 <__d2b+0x24>
 801188a:	4602      	mov	r2, r0
 801188c:	4b24      	ldr	r3, [pc, #144]	; (8011920 <__d2b+0xac>)
 801188e:	4825      	ldr	r0, [pc, #148]	; (8011924 <__d2b+0xb0>)
 8011890:	f240 310f 	movw	r1, #783	; 0x30f
 8011894:	f000 fcd2 	bl	801223c <__assert_func>
 8011898:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801189c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80118a0:	bb2d      	cbnz	r5, 80118ee <__d2b+0x7a>
 80118a2:	9301      	str	r3, [sp, #4]
 80118a4:	f1b8 0300 	subs.w	r3, r8, #0
 80118a8:	d026      	beq.n	80118f8 <__d2b+0x84>
 80118aa:	4668      	mov	r0, sp
 80118ac:	9300      	str	r3, [sp, #0]
 80118ae:	f7ff fd17 	bl	80112e0 <__lo0bits>
 80118b2:	e9dd 1200 	ldrd	r1, r2, [sp]
 80118b6:	b1e8      	cbz	r0, 80118f4 <__d2b+0x80>
 80118b8:	f1c0 0320 	rsb	r3, r0, #32
 80118bc:	fa02 f303 	lsl.w	r3, r2, r3
 80118c0:	430b      	orrs	r3, r1
 80118c2:	40c2      	lsrs	r2, r0
 80118c4:	6163      	str	r3, [r4, #20]
 80118c6:	9201      	str	r2, [sp, #4]
 80118c8:	9b01      	ldr	r3, [sp, #4]
 80118ca:	61a3      	str	r3, [r4, #24]
 80118cc:	2b00      	cmp	r3, #0
 80118ce:	bf14      	ite	ne
 80118d0:	2202      	movne	r2, #2
 80118d2:	2201      	moveq	r2, #1
 80118d4:	6122      	str	r2, [r4, #16]
 80118d6:	b1bd      	cbz	r5, 8011908 <__d2b+0x94>
 80118d8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80118dc:	4405      	add	r5, r0
 80118de:	603d      	str	r5, [r7, #0]
 80118e0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80118e4:	6030      	str	r0, [r6, #0]
 80118e6:	4620      	mov	r0, r4
 80118e8:	b003      	add	sp, #12
 80118ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80118ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80118f2:	e7d6      	b.n	80118a2 <__d2b+0x2e>
 80118f4:	6161      	str	r1, [r4, #20]
 80118f6:	e7e7      	b.n	80118c8 <__d2b+0x54>
 80118f8:	a801      	add	r0, sp, #4
 80118fa:	f7ff fcf1 	bl	80112e0 <__lo0bits>
 80118fe:	9b01      	ldr	r3, [sp, #4]
 8011900:	6163      	str	r3, [r4, #20]
 8011902:	3020      	adds	r0, #32
 8011904:	2201      	movs	r2, #1
 8011906:	e7e5      	b.n	80118d4 <__d2b+0x60>
 8011908:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801190c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8011910:	6038      	str	r0, [r7, #0]
 8011912:	6918      	ldr	r0, [r3, #16]
 8011914:	f7ff fcc4 	bl	80112a0 <__hi0bits>
 8011918:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801191c:	e7e2      	b.n	80118e4 <__d2b+0x70>
 801191e:	bf00      	nop
 8011920:	08013520 	.word	0x08013520
 8011924:	080135a8 	.word	0x080135a8

08011928 <__ratio>:
 8011928:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801192c:	4688      	mov	r8, r1
 801192e:	4669      	mov	r1, sp
 8011930:	4681      	mov	r9, r0
 8011932:	f7ff ff55 	bl	80117e0 <__b2d>
 8011936:	a901      	add	r1, sp, #4
 8011938:	4640      	mov	r0, r8
 801193a:	ec55 4b10 	vmov	r4, r5, d0
 801193e:	f7ff ff4f 	bl	80117e0 <__b2d>
 8011942:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8011946:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801194a:	eba3 0c02 	sub.w	ip, r3, r2
 801194e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8011952:	1a9b      	subs	r3, r3, r2
 8011954:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8011958:	ec51 0b10 	vmov	r0, r1, d0
 801195c:	2b00      	cmp	r3, #0
 801195e:	bfd6      	itet	le
 8011960:	460a      	movle	r2, r1
 8011962:	462a      	movgt	r2, r5
 8011964:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8011968:	468b      	mov	fp, r1
 801196a:	462f      	mov	r7, r5
 801196c:	bfd4      	ite	le
 801196e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8011972:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8011976:	4620      	mov	r0, r4
 8011978:	ee10 2a10 	vmov	r2, s0
 801197c:	465b      	mov	r3, fp
 801197e:	4639      	mov	r1, r7
 8011980:	f7ee ff7c 	bl	800087c <__aeabi_ddiv>
 8011984:	ec41 0b10 	vmov	d0, r0, r1
 8011988:	b003      	add	sp, #12
 801198a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801198e <__copybits>:
 801198e:	3901      	subs	r1, #1
 8011990:	b570      	push	{r4, r5, r6, lr}
 8011992:	1149      	asrs	r1, r1, #5
 8011994:	6914      	ldr	r4, [r2, #16]
 8011996:	3101      	adds	r1, #1
 8011998:	f102 0314 	add.w	r3, r2, #20
 801199c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80119a0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80119a4:	1f05      	subs	r5, r0, #4
 80119a6:	42a3      	cmp	r3, r4
 80119a8:	d30c      	bcc.n	80119c4 <__copybits+0x36>
 80119aa:	1aa3      	subs	r3, r4, r2
 80119ac:	3b11      	subs	r3, #17
 80119ae:	f023 0303 	bic.w	r3, r3, #3
 80119b2:	3211      	adds	r2, #17
 80119b4:	42a2      	cmp	r2, r4
 80119b6:	bf88      	it	hi
 80119b8:	2300      	movhi	r3, #0
 80119ba:	4418      	add	r0, r3
 80119bc:	2300      	movs	r3, #0
 80119be:	4288      	cmp	r0, r1
 80119c0:	d305      	bcc.n	80119ce <__copybits+0x40>
 80119c2:	bd70      	pop	{r4, r5, r6, pc}
 80119c4:	f853 6b04 	ldr.w	r6, [r3], #4
 80119c8:	f845 6f04 	str.w	r6, [r5, #4]!
 80119cc:	e7eb      	b.n	80119a6 <__copybits+0x18>
 80119ce:	f840 3b04 	str.w	r3, [r0], #4
 80119d2:	e7f4      	b.n	80119be <__copybits+0x30>

080119d4 <__any_on>:
 80119d4:	f100 0214 	add.w	r2, r0, #20
 80119d8:	6900      	ldr	r0, [r0, #16]
 80119da:	114b      	asrs	r3, r1, #5
 80119dc:	4298      	cmp	r0, r3
 80119de:	b510      	push	{r4, lr}
 80119e0:	db11      	blt.n	8011a06 <__any_on+0x32>
 80119e2:	dd0a      	ble.n	80119fa <__any_on+0x26>
 80119e4:	f011 011f 	ands.w	r1, r1, #31
 80119e8:	d007      	beq.n	80119fa <__any_on+0x26>
 80119ea:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80119ee:	fa24 f001 	lsr.w	r0, r4, r1
 80119f2:	fa00 f101 	lsl.w	r1, r0, r1
 80119f6:	428c      	cmp	r4, r1
 80119f8:	d10b      	bne.n	8011a12 <__any_on+0x3e>
 80119fa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80119fe:	4293      	cmp	r3, r2
 8011a00:	d803      	bhi.n	8011a0a <__any_on+0x36>
 8011a02:	2000      	movs	r0, #0
 8011a04:	bd10      	pop	{r4, pc}
 8011a06:	4603      	mov	r3, r0
 8011a08:	e7f7      	b.n	80119fa <__any_on+0x26>
 8011a0a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011a0e:	2900      	cmp	r1, #0
 8011a10:	d0f5      	beq.n	80119fe <__any_on+0x2a>
 8011a12:	2001      	movs	r0, #1
 8011a14:	e7f6      	b.n	8011a04 <__any_on+0x30>

08011a16 <__ascii_wctomb>:
 8011a16:	b149      	cbz	r1, 8011a2c <__ascii_wctomb+0x16>
 8011a18:	2aff      	cmp	r2, #255	; 0xff
 8011a1a:	bf85      	ittet	hi
 8011a1c:	238a      	movhi	r3, #138	; 0x8a
 8011a1e:	6003      	strhi	r3, [r0, #0]
 8011a20:	700a      	strbls	r2, [r1, #0]
 8011a22:	f04f 30ff 	movhi.w	r0, #4294967295
 8011a26:	bf98      	it	ls
 8011a28:	2001      	movls	r0, #1
 8011a2a:	4770      	bx	lr
 8011a2c:	4608      	mov	r0, r1
 8011a2e:	4770      	bx	lr

08011a30 <__sfputc_r>:
 8011a30:	6893      	ldr	r3, [r2, #8]
 8011a32:	3b01      	subs	r3, #1
 8011a34:	2b00      	cmp	r3, #0
 8011a36:	b410      	push	{r4}
 8011a38:	6093      	str	r3, [r2, #8]
 8011a3a:	da08      	bge.n	8011a4e <__sfputc_r+0x1e>
 8011a3c:	6994      	ldr	r4, [r2, #24]
 8011a3e:	42a3      	cmp	r3, r4
 8011a40:	db01      	blt.n	8011a46 <__sfputc_r+0x16>
 8011a42:	290a      	cmp	r1, #10
 8011a44:	d103      	bne.n	8011a4e <__sfputc_r+0x1e>
 8011a46:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011a4a:	f7fe be38 	b.w	80106be <__swbuf_r>
 8011a4e:	6813      	ldr	r3, [r2, #0]
 8011a50:	1c58      	adds	r0, r3, #1
 8011a52:	6010      	str	r0, [r2, #0]
 8011a54:	7019      	strb	r1, [r3, #0]
 8011a56:	4608      	mov	r0, r1
 8011a58:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011a5c:	4770      	bx	lr

08011a5e <__sfputs_r>:
 8011a5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011a60:	4606      	mov	r6, r0
 8011a62:	460f      	mov	r7, r1
 8011a64:	4614      	mov	r4, r2
 8011a66:	18d5      	adds	r5, r2, r3
 8011a68:	42ac      	cmp	r4, r5
 8011a6a:	d101      	bne.n	8011a70 <__sfputs_r+0x12>
 8011a6c:	2000      	movs	r0, #0
 8011a6e:	e007      	b.n	8011a80 <__sfputs_r+0x22>
 8011a70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011a74:	463a      	mov	r2, r7
 8011a76:	4630      	mov	r0, r6
 8011a78:	f7ff ffda 	bl	8011a30 <__sfputc_r>
 8011a7c:	1c43      	adds	r3, r0, #1
 8011a7e:	d1f3      	bne.n	8011a68 <__sfputs_r+0xa>
 8011a80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011a84 <_vfiprintf_r>:
 8011a84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a88:	460d      	mov	r5, r1
 8011a8a:	b09d      	sub	sp, #116	; 0x74
 8011a8c:	4614      	mov	r4, r2
 8011a8e:	4698      	mov	r8, r3
 8011a90:	4606      	mov	r6, r0
 8011a92:	b118      	cbz	r0, 8011a9c <_vfiprintf_r+0x18>
 8011a94:	6a03      	ldr	r3, [r0, #32]
 8011a96:	b90b      	cbnz	r3, 8011a9c <_vfiprintf_r+0x18>
 8011a98:	f7fe fd2a 	bl	80104f0 <__sinit>
 8011a9c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011a9e:	07d9      	lsls	r1, r3, #31
 8011aa0:	d405      	bmi.n	8011aae <_vfiprintf_r+0x2a>
 8011aa2:	89ab      	ldrh	r3, [r5, #12]
 8011aa4:	059a      	lsls	r2, r3, #22
 8011aa6:	d402      	bmi.n	8011aae <_vfiprintf_r+0x2a>
 8011aa8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011aaa:	f7fe ff38 	bl	801091e <__retarget_lock_acquire_recursive>
 8011aae:	89ab      	ldrh	r3, [r5, #12]
 8011ab0:	071b      	lsls	r3, r3, #28
 8011ab2:	d501      	bpl.n	8011ab8 <_vfiprintf_r+0x34>
 8011ab4:	692b      	ldr	r3, [r5, #16]
 8011ab6:	b99b      	cbnz	r3, 8011ae0 <_vfiprintf_r+0x5c>
 8011ab8:	4629      	mov	r1, r5
 8011aba:	4630      	mov	r0, r6
 8011abc:	f7fe fe3c 	bl	8010738 <__swsetup_r>
 8011ac0:	b170      	cbz	r0, 8011ae0 <_vfiprintf_r+0x5c>
 8011ac2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011ac4:	07dc      	lsls	r4, r3, #31
 8011ac6:	d504      	bpl.n	8011ad2 <_vfiprintf_r+0x4e>
 8011ac8:	f04f 30ff 	mov.w	r0, #4294967295
 8011acc:	b01d      	add	sp, #116	; 0x74
 8011ace:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ad2:	89ab      	ldrh	r3, [r5, #12]
 8011ad4:	0598      	lsls	r0, r3, #22
 8011ad6:	d4f7      	bmi.n	8011ac8 <_vfiprintf_r+0x44>
 8011ad8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011ada:	f7fe ff21 	bl	8010920 <__retarget_lock_release_recursive>
 8011ade:	e7f3      	b.n	8011ac8 <_vfiprintf_r+0x44>
 8011ae0:	2300      	movs	r3, #0
 8011ae2:	9309      	str	r3, [sp, #36]	; 0x24
 8011ae4:	2320      	movs	r3, #32
 8011ae6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011aea:	f8cd 800c 	str.w	r8, [sp, #12]
 8011aee:	2330      	movs	r3, #48	; 0x30
 8011af0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8011ca4 <_vfiprintf_r+0x220>
 8011af4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011af8:	f04f 0901 	mov.w	r9, #1
 8011afc:	4623      	mov	r3, r4
 8011afe:	469a      	mov	sl, r3
 8011b00:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011b04:	b10a      	cbz	r2, 8011b0a <_vfiprintf_r+0x86>
 8011b06:	2a25      	cmp	r2, #37	; 0x25
 8011b08:	d1f9      	bne.n	8011afe <_vfiprintf_r+0x7a>
 8011b0a:	ebba 0b04 	subs.w	fp, sl, r4
 8011b0e:	d00b      	beq.n	8011b28 <_vfiprintf_r+0xa4>
 8011b10:	465b      	mov	r3, fp
 8011b12:	4622      	mov	r2, r4
 8011b14:	4629      	mov	r1, r5
 8011b16:	4630      	mov	r0, r6
 8011b18:	f7ff ffa1 	bl	8011a5e <__sfputs_r>
 8011b1c:	3001      	adds	r0, #1
 8011b1e:	f000 80a9 	beq.w	8011c74 <_vfiprintf_r+0x1f0>
 8011b22:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011b24:	445a      	add	r2, fp
 8011b26:	9209      	str	r2, [sp, #36]	; 0x24
 8011b28:	f89a 3000 	ldrb.w	r3, [sl]
 8011b2c:	2b00      	cmp	r3, #0
 8011b2e:	f000 80a1 	beq.w	8011c74 <_vfiprintf_r+0x1f0>
 8011b32:	2300      	movs	r3, #0
 8011b34:	f04f 32ff 	mov.w	r2, #4294967295
 8011b38:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011b3c:	f10a 0a01 	add.w	sl, sl, #1
 8011b40:	9304      	str	r3, [sp, #16]
 8011b42:	9307      	str	r3, [sp, #28]
 8011b44:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011b48:	931a      	str	r3, [sp, #104]	; 0x68
 8011b4a:	4654      	mov	r4, sl
 8011b4c:	2205      	movs	r2, #5
 8011b4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011b52:	4854      	ldr	r0, [pc, #336]	; (8011ca4 <_vfiprintf_r+0x220>)
 8011b54:	f7ee fb5c 	bl	8000210 <memchr>
 8011b58:	9a04      	ldr	r2, [sp, #16]
 8011b5a:	b9d8      	cbnz	r0, 8011b94 <_vfiprintf_r+0x110>
 8011b5c:	06d1      	lsls	r1, r2, #27
 8011b5e:	bf44      	itt	mi
 8011b60:	2320      	movmi	r3, #32
 8011b62:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011b66:	0713      	lsls	r3, r2, #28
 8011b68:	bf44      	itt	mi
 8011b6a:	232b      	movmi	r3, #43	; 0x2b
 8011b6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011b70:	f89a 3000 	ldrb.w	r3, [sl]
 8011b74:	2b2a      	cmp	r3, #42	; 0x2a
 8011b76:	d015      	beq.n	8011ba4 <_vfiprintf_r+0x120>
 8011b78:	9a07      	ldr	r2, [sp, #28]
 8011b7a:	4654      	mov	r4, sl
 8011b7c:	2000      	movs	r0, #0
 8011b7e:	f04f 0c0a 	mov.w	ip, #10
 8011b82:	4621      	mov	r1, r4
 8011b84:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011b88:	3b30      	subs	r3, #48	; 0x30
 8011b8a:	2b09      	cmp	r3, #9
 8011b8c:	d94d      	bls.n	8011c2a <_vfiprintf_r+0x1a6>
 8011b8e:	b1b0      	cbz	r0, 8011bbe <_vfiprintf_r+0x13a>
 8011b90:	9207      	str	r2, [sp, #28]
 8011b92:	e014      	b.n	8011bbe <_vfiprintf_r+0x13a>
 8011b94:	eba0 0308 	sub.w	r3, r0, r8
 8011b98:	fa09 f303 	lsl.w	r3, r9, r3
 8011b9c:	4313      	orrs	r3, r2
 8011b9e:	9304      	str	r3, [sp, #16]
 8011ba0:	46a2      	mov	sl, r4
 8011ba2:	e7d2      	b.n	8011b4a <_vfiprintf_r+0xc6>
 8011ba4:	9b03      	ldr	r3, [sp, #12]
 8011ba6:	1d19      	adds	r1, r3, #4
 8011ba8:	681b      	ldr	r3, [r3, #0]
 8011baa:	9103      	str	r1, [sp, #12]
 8011bac:	2b00      	cmp	r3, #0
 8011bae:	bfbb      	ittet	lt
 8011bb0:	425b      	neglt	r3, r3
 8011bb2:	f042 0202 	orrlt.w	r2, r2, #2
 8011bb6:	9307      	strge	r3, [sp, #28]
 8011bb8:	9307      	strlt	r3, [sp, #28]
 8011bba:	bfb8      	it	lt
 8011bbc:	9204      	strlt	r2, [sp, #16]
 8011bbe:	7823      	ldrb	r3, [r4, #0]
 8011bc0:	2b2e      	cmp	r3, #46	; 0x2e
 8011bc2:	d10c      	bne.n	8011bde <_vfiprintf_r+0x15a>
 8011bc4:	7863      	ldrb	r3, [r4, #1]
 8011bc6:	2b2a      	cmp	r3, #42	; 0x2a
 8011bc8:	d134      	bne.n	8011c34 <_vfiprintf_r+0x1b0>
 8011bca:	9b03      	ldr	r3, [sp, #12]
 8011bcc:	1d1a      	adds	r2, r3, #4
 8011bce:	681b      	ldr	r3, [r3, #0]
 8011bd0:	9203      	str	r2, [sp, #12]
 8011bd2:	2b00      	cmp	r3, #0
 8011bd4:	bfb8      	it	lt
 8011bd6:	f04f 33ff 	movlt.w	r3, #4294967295
 8011bda:	3402      	adds	r4, #2
 8011bdc:	9305      	str	r3, [sp, #20]
 8011bde:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8011cb4 <_vfiprintf_r+0x230>
 8011be2:	7821      	ldrb	r1, [r4, #0]
 8011be4:	2203      	movs	r2, #3
 8011be6:	4650      	mov	r0, sl
 8011be8:	f7ee fb12 	bl	8000210 <memchr>
 8011bec:	b138      	cbz	r0, 8011bfe <_vfiprintf_r+0x17a>
 8011bee:	9b04      	ldr	r3, [sp, #16]
 8011bf0:	eba0 000a 	sub.w	r0, r0, sl
 8011bf4:	2240      	movs	r2, #64	; 0x40
 8011bf6:	4082      	lsls	r2, r0
 8011bf8:	4313      	orrs	r3, r2
 8011bfa:	3401      	adds	r4, #1
 8011bfc:	9304      	str	r3, [sp, #16]
 8011bfe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011c02:	4829      	ldr	r0, [pc, #164]	; (8011ca8 <_vfiprintf_r+0x224>)
 8011c04:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011c08:	2206      	movs	r2, #6
 8011c0a:	f7ee fb01 	bl	8000210 <memchr>
 8011c0e:	2800      	cmp	r0, #0
 8011c10:	d03f      	beq.n	8011c92 <_vfiprintf_r+0x20e>
 8011c12:	4b26      	ldr	r3, [pc, #152]	; (8011cac <_vfiprintf_r+0x228>)
 8011c14:	bb1b      	cbnz	r3, 8011c5e <_vfiprintf_r+0x1da>
 8011c16:	9b03      	ldr	r3, [sp, #12]
 8011c18:	3307      	adds	r3, #7
 8011c1a:	f023 0307 	bic.w	r3, r3, #7
 8011c1e:	3308      	adds	r3, #8
 8011c20:	9303      	str	r3, [sp, #12]
 8011c22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011c24:	443b      	add	r3, r7
 8011c26:	9309      	str	r3, [sp, #36]	; 0x24
 8011c28:	e768      	b.n	8011afc <_vfiprintf_r+0x78>
 8011c2a:	fb0c 3202 	mla	r2, ip, r2, r3
 8011c2e:	460c      	mov	r4, r1
 8011c30:	2001      	movs	r0, #1
 8011c32:	e7a6      	b.n	8011b82 <_vfiprintf_r+0xfe>
 8011c34:	2300      	movs	r3, #0
 8011c36:	3401      	adds	r4, #1
 8011c38:	9305      	str	r3, [sp, #20]
 8011c3a:	4619      	mov	r1, r3
 8011c3c:	f04f 0c0a 	mov.w	ip, #10
 8011c40:	4620      	mov	r0, r4
 8011c42:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011c46:	3a30      	subs	r2, #48	; 0x30
 8011c48:	2a09      	cmp	r2, #9
 8011c4a:	d903      	bls.n	8011c54 <_vfiprintf_r+0x1d0>
 8011c4c:	2b00      	cmp	r3, #0
 8011c4e:	d0c6      	beq.n	8011bde <_vfiprintf_r+0x15a>
 8011c50:	9105      	str	r1, [sp, #20]
 8011c52:	e7c4      	b.n	8011bde <_vfiprintf_r+0x15a>
 8011c54:	fb0c 2101 	mla	r1, ip, r1, r2
 8011c58:	4604      	mov	r4, r0
 8011c5a:	2301      	movs	r3, #1
 8011c5c:	e7f0      	b.n	8011c40 <_vfiprintf_r+0x1bc>
 8011c5e:	ab03      	add	r3, sp, #12
 8011c60:	9300      	str	r3, [sp, #0]
 8011c62:	462a      	mov	r2, r5
 8011c64:	4b12      	ldr	r3, [pc, #72]	; (8011cb0 <_vfiprintf_r+0x22c>)
 8011c66:	a904      	add	r1, sp, #16
 8011c68:	4630      	mov	r0, r6
 8011c6a:	f3af 8000 	nop.w
 8011c6e:	4607      	mov	r7, r0
 8011c70:	1c78      	adds	r0, r7, #1
 8011c72:	d1d6      	bne.n	8011c22 <_vfiprintf_r+0x19e>
 8011c74:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011c76:	07d9      	lsls	r1, r3, #31
 8011c78:	d405      	bmi.n	8011c86 <_vfiprintf_r+0x202>
 8011c7a:	89ab      	ldrh	r3, [r5, #12]
 8011c7c:	059a      	lsls	r2, r3, #22
 8011c7e:	d402      	bmi.n	8011c86 <_vfiprintf_r+0x202>
 8011c80:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011c82:	f7fe fe4d 	bl	8010920 <__retarget_lock_release_recursive>
 8011c86:	89ab      	ldrh	r3, [r5, #12]
 8011c88:	065b      	lsls	r3, r3, #25
 8011c8a:	f53f af1d 	bmi.w	8011ac8 <_vfiprintf_r+0x44>
 8011c8e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011c90:	e71c      	b.n	8011acc <_vfiprintf_r+0x48>
 8011c92:	ab03      	add	r3, sp, #12
 8011c94:	9300      	str	r3, [sp, #0]
 8011c96:	462a      	mov	r2, r5
 8011c98:	4b05      	ldr	r3, [pc, #20]	; (8011cb0 <_vfiprintf_r+0x22c>)
 8011c9a:	a904      	add	r1, sp, #16
 8011c9c:	4630      	mov	r0, r6
 8011c9e:	f000 f879 	bl	8011d94 <_printf_i>
 8011ca2:	e7e4      	b.n	8011c6e <_vfiprintf_r+0x1ea>
 8011ca4:	08013805 	.word	0x08013805
 8011ca8:	0801380f 	.word	0x0801380f
 8011cac:	00000000 	.word	0x00000000
 8011cb0:	08011a5f 	.word	0x08011a5f
 8011cb4:	0801380b 	.word	0x0801380b

08011cb8 <_printf_common>:
 8011cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011cbc:	4616      	mov	r6, r2
 8011cbe:	4699      	mov	r9, r3
 8011cc0:	688a      	ldr	r2, [r1, #8]
 8011cc2:	690b      	ldr	r3, [r1, #16]
 8011cc4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011cc8:	4293      	cmp	r3, r2
 8011cca:	bfb8      	it	lt
 8011ccc:	4613      	movlt	r3, r2
 8011cce:	6033      	str	r3, [r6, #0]
 8011cd0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011cd4:	4607      	mov	r7, r0
 8011cd6:	460c      	mov	r4, r1
 8011cd8:	b10a      	cbz	r2, 8011cde <_printf_common+0x26>
 8011cda:	3301      	adds	r3, #1
 8011cdc:	6033      	str	r3, [r6, #0]
 8011cde:	6823      	ldr	r3, [r4, #0]
 8011ce0:	0699      	lsls	r1, r3, #26
 8011ce2:	bf42      	ittt	mi
 8011ce4:	6833      	ldrmi	r3, [r6, #0]
 8011ce6:	3302      	addmi	r3, #2
 8011ce8:	6033      	strmi	r3, [r6, #0]
 8011cea:	6825      	ldr	r5, [r4, #0]
 8011cec:	f015 0506 	ands.w	r5, r5, #6
 8011cf0:	d106      	bne.n	8011d00 <_printf_common+0x48>
 8011cf2:	f104 0a19 	add.w	sl, r4, #25
 8011cf6:	68e3      	ldr	r3, [r4, #12]
 8011cf8:	6832      	ldr	r2, [r6, #0]
 8011cfa:	1a9b      	subs	r3, r3, r2
 8011cfc:	42ab      	cmp	r3, r5
 8011cfe:	dc26      	bgt.n	8011d4e <_printf_common+0x96>
 8011d00:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8011d04:	1e13      	subs	r3, r2, #0
 8011d06:	6822      	ldr	r2, [r4, #0]
 8011d08:	bf18      	it	ne
 8011d0a:	2301      	movne	r3, #1
 8011d0c:	0692      	lsls	r2, r2, #26
 8011d0e:	d42b      	bmi.n	8011d68 <_printf_common+0xb0>
 8011d10:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011d14:	4649      	mov	r1, r9
 8011d16:	4638      	mov	r0, r7
 8011d18:	47c0      	blx	r8
 8011d1a:	3001      	adds	r0, #1
 8011d1c:	d01e      	beq.n	8011d5c <_printf_common+0xa4>
 8011d1e:	6823      	ldr	r3, [r4, #0]
 8011d20:	6922      	ldr	r2, [r4, #16]
 8011d22:	f003 0306 	and.w	r3, r3, #6
 8011d26:	2b04      	cmp	r3, #4
 8011d28:	bf02      	ittt	eq
 8011d2a:	68e5      	ldreq	r5, [r4, #12]
 8011d2c:	6833      	ldreq	r3, [r6, #0]
 8011d2e:	1aed      	subeq	r5, r5, r3
 8011d30:	68a3      	ldr	r3, [r4, #8]
 8011d32:	bf0c      	ite	eq
 8011d34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011d38:	2500      	movne	r5, #0
 8011d3a:	4293      	cmp	r3, r2
 8011d3c:	bfc4      	itt	gt
 8011d3e:	1a9b      	subgt	r3, r3, r2
 8011d40:	18ed      	addgt	r5, r5, r3
 8011d42:	2600      	movs	r6, #0
 8011d44:	341a      	adds	r4, #26
 8011d46:	42b5      	cmp	r5, r6
 8011d48:	d11a      	bne.n	8011d80 <_printf_common+0xc8>
 8011d4a:	2000      	movs	r0, #0
 8011d4c:	e008      	b.n	8011d60 <_printf_common+0xa8>
 8011d4e:	2301      	movs	r3, #1
 8011d50:	4652      	mov	r2, sl
 8011d52:	4649      	mov	r1, r9
 8011d54:	4638      	mov	r0, r7
 8011d56:	47c0      	blx	r8
 8011d58:	3001      	adds	r0, #1
 8011d5a:	d103      	bne.n	8011d64 <_printf_common+0xac>
 8011d5c:	f04f 30ff 	mov.w	r0, #4294967295
 8011d60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011d64:	3501      	adds	r5, #1
 8011d66:	e7c6      	b.n	8011cf6 <_printf_common+0x3e>
 8011d68:	18e1      	adds	r1, r4, r3
 8011d6a:	1c5a      	adds	r2, r3, #1
 8011d6c:	2030      	movs	r0, #48	; 0x30
 8011d6e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011d72:	4422      	add	r2, r4
 8011d74:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011d78:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011d7c:	3302      	adds	r3, #2
 8011d7e:	e7c7      	b.n	8011d10 <_printf_common+0x58>
 8011d80:	2301      	movs	r3, #1
 8011d82:	4622      	mov	r2, r4
 8011d84:	4649      	mov	r1, r9
 8011d86:	4638      	mov	r0, r7
 8011d88:	47c0      	blx	r8
 8011d8a:	3001      	adds	r0, #1
 8011d8c:	d0e6      	beq.n	8011d5c <_printf_common+0xa4>
 8011d8e:	3601      	adds	r6, #1
 8011d90:	e7d9      	b.n	8011d46 <_printf_common+0x8e>
	...

08011d94 <_printf_i>:
 8011d94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011d98:	7e0f      	ldrb	r7, [r1, #24]
 8011d9a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8011d9c:	2f78      	cmp	r7, #120	; 0x78
 8011d9e:	4691      	mov	r9, r2
 8011da0:	4680      	mov	r8, r0
 8011da2:	460c      	mov	r4, r1
 8011da4:	469a      	mov	sl, r3
 8011da6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8011daa:	d807      	bhi.n	8011dbc <_printf_i+0x28>
 8011dac:	2f62      	cmp	r7, #98	; 0x62
 8011dae:	d80a      	bhi.n	8011dc6 <_printf_i+0x32>
 8011db0:	2f00      	cmp	r7, #0
 8011db2:	f000 80d4 	beq.w	8011f5e <_printf_i+0x1ca>
 8011db6:	2f58      	cmp	r7, #88	; 0x58
 8011db8:	f000 80c0 	beq.w	8011f3c <_printf_i+0x1a8>
 8011dbc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011dc0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8011dc4:	e03a      	b.n	8011e3c <_printf_i+0xa8>
 8011dc6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8011dca:	2b15      	cmp	r3, #21
 8011dcc:	d8f6      	bhi.n	8011dbc <_printf_i+0x28>
 8011dce:	a101      	add	r1, pc, #4	; (adr r1, 8011dd4 <_printf_i+0x40>)
 8011dd0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011dd4:	08011e2d 	.word	0x08011e2d
 8011dd8:	08011e41 	.word	0x08011e41
 8011ddc:	08011dbd 	.word	0x08011dbd
 8011de0:	08011dbd 	.word	0x08011dbd
 8011de4:	08011dbd 	.word	0x08011dbd
 8011de8:	08011dbd 	.word	0x08011dbd
 8011dec:	08011e41 	.word	0x08011e41
 8011df0:	08011dbd 	.word	0x08011dbd
 8011df4:	08011dbd 	.word	0x08011dbd
 8011df8:	08011dbd 	.word	0x08011dbd
 8011dfc:	08011dbd 	.word	0x08011dbd
 8011e00:	08011f45 	.word	0x08011f45
 8011e04:	08011e6d 	.word	0x08011e6d
 8011e08:	08011eff 	.word	0x08011eff
 8011e0c:	08011dbd 	.word	0x08011dbd
 8011e10:	08011dbd 	.word	0x08011dbd
 8011e14:	08011f67 	.word	0x08011f67
 8011e18:	08011dbd 	.word	0x08011dbd
 8011e1c:	08011e6d 	.word	0x08011e6d
 8011e20:	08011dbd 	.word	0x08011dbd
 8011e24:	08011dbd 	.word	0x08011dbd
 8011e28:	08011f07 	.word	0x08011f07
 8011e2c:	682b      	ldr	r3, [r5, #0]
 8011e2e:	1d1a      	adds	r2, r3, #4
 8011e30:	681b      	ldr	r3, [r3, #0]
 8011e32:	602a      	str	r2, [r5, #0]
 8011e34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011e38:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011e3c:	2301      	movs	r3, #1
 8011e3e:	e09f      	b.n	8011f80 <_printf_i+0x1ec>
 8011e40:	6820      	ldr	r0, [r4, #0]
 8011e42:	682b      	ldr	r3, [r5, #0]
 8011e44:	0607      	lsls	r7, r0, #24
 8011e46:	f103 0104 	add.w	r1, r3, #4
 8011e4a:	6029      	str	r1, [r5, #0]
 8011e4c:	d501      	bpl.n	8011e52 <_printf_i+0xbe>
 8011e4e:	681e      	ldr	r6, [r3, #0]
 8011e50:	e003      	b.n	8011e5a <_printf_i+0xc6>
 8011e52:	0646      	lsls	r6, r0, #25
 8011e54:	d5fb      	bpl.n	8011e4e <_printf_i+0xba>
 8011e56:	f9b3 6000 	ldrsh.w	r6, [r3]
 8011e5a:	2e00      	cmp	r6, #0
 8011e5c:	da03      	bge.n	8011e66 <_printf_i+0xd2>
 8011e5e:	232d      	movs	r3, #45	; 0x2d
 8011e60:	4276      	negs	r6, r6
 8011e62:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011e66:	485a      	ldr	r0, [pc, #360]	; (8011fd0 <_printf_i+0x23c>)
 8011e68:	230a      	movs	r3, #10
 8011e6a:	e012      	b.n	8011e92 <_printf_i+0xfe>
 8011e6c:	682b      	ldr	r3, [r5, #0]
 8011e6e:	6820      	ldr	r0, [r4, #0]
 8011e70:	1d19      	adds	r1, r3, #4
 8011e72:	6029      	str	r1, [r5, #0]
 8011e74:	0605      	lsls	r5, r0, #24
 8011e76:	d501      	bpl.n	8011e7c <_printf_i+0xe8>
 8011e78:	681e      	ldr	r6, [r3, #0]
 8011e7a:	e002      	b.n	8011e82 <_printf_i+0xee>
 8011e7c:	0641      	lsls	r1, r0, #25
 8011e7e:	d5fb      	bpl.n	8011e78 <_printf_i+0xe4>
 8011e80:	881e      	ldrh	r6, [r3, #0]
 8011e82:	4853      	ldr	r0, [pc, #332]	; (8011fd0 <_printf_i+0x23c>)
 8011e84:	2f6f      	cmp	r7, #111	; 0x6f
 8011e86:	bf0c      	ite	eq
 8011e88:	2308      	moveq	r3, #8
 8011e8a:	230a      	movne	r3, #10
 8011e8c:	2100      	movs	r1, #0
 8011e8e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011e92:	6865      	ldr	r5, [r4, #4]
 8011e94:	60a5      	str	r5, [r4, #8]
 8011e96:	2d00      	cmp	r5, #0
 8011e98:	bfa2      	ittt	ge
 8011e9a:	6821      	ldrge	r1, [r4, #0]
 8011e9c:	f021 0104 	bicge.w	r1, r1, #4
 8011ea0:	6021      	strge	r1, [r4, #0]
 8011ea2:	b90e      	cbnz	r6, 8011ea8 <_printf_i+0x114>
 8011ea4:	2d00      	cmp	r5, #0
 8011ea6:	d04b      	beq.n	8011f40 <_printf_i+0x1ac>
 8011ea8:	4615      	mov	r5, r2
 8011eaa:	fbb6 f1f3 	udiv	r1, r6, r3
 8011eae:	fb03 6711 	mls	r7, r3, r1, r6
 8011eb2:	5dc7      	ldrb	r7, [r0, r7]
 8011eb4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8011eb8:	4637      	mov	r7, r6
 8011eba:	42bb      	cmp	r3, r7
 8011ebc:	460e      	mov	r6, r1
 8011ebe:	d9f4      	bls.n	8011eaa <_printf_i+0x116>
 8011ec0:	2b08      	cmp	r3, #8
 8011ec2:	d10b      	bne.n	8011edc <_printf_i+0x148>
 8011ec4:	6823      	ldr	r3, [r4, #0]
 8011ec6:	07de      	lsls	r6, r3, #31
 8011ec8:	d508      	bpl.n	8011edc <_printf_i+0x148>
 8011eca:	6923      	ldr	r3, [r4, #16]
 8011ecc:	6861      	ldr	r1, [r4, #4]
 8011ece:	4299      	cmp	r1, r3
 8011ed0:	bfde      	ittt	le
 8011ed2:	2330      	movle	r3, #48	; 0x30
 8011ed4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8011ed8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8011edc:	1b52      	subs	r2, r2, r5
 8011ede:	6122      	str	r2, [r4, #16]
 8011ee0:	f8cd a000 	str.w	sl, [sp]
 8011ee4:	464b      	mov	r3, r9
 8011ee6:	aa03      	add	r2, sp, #12
 8011ee8:	4621      	mov	r1, r4
 8011eea:	4640      	mov	r0, r8
 8011eec:	f7ff fee4 	bl	8011cb8 <_printf_common>
 8011ef0:	3001      	adds	r0, #1
 8011ef2:	d14a      	bne.n	8011f8a <_printf_i+0x1f6>
 8011ef4:	f04f 30ff 	mov.w	r0, #4294967295
 8011ef8:	b004      	add	sp, #16
 8011efa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011efe:	6823      	ldr	r3, [r4, #0]
 8011f00:	f043 0320 	orr.w	r3, r3, #32
 8011f04:	6023      	str	r3, [r4, #0]
 8011f06:	4833      	ldr	r0, [pc, #204]	; (8011fd4 <_printf_i+0x240>)
 8011f08:	2778      	movs	r7, #120	; 0x78
 8011f0a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8011f0e:	6823      	ldr	r3, [r4, #0]
 8011f10:	6829      	ldr	r1, [r5, #0]
 8011f12:	061f      	lsls	r7, r3, #24
 8011f14:	f851 6b04 	ldr.w	r6, [r1], #4
 8011f18:	d402      	bmi.n	8011f20 <_printf_i+0x18c>
 8011f1a:	065f      	lsls	r7, r3, #25
 8011f1c:	bf48      	it	mi
 8011f1e:	b2b6      	uxthmi	r6, r6
 8011f20:	07df      	lsls	r7, r3, #31
 8011f22:	bf48      	it	mi
 8011f24:	f043 0320 	orrmi.w	r3, r3, #32
 8011f28:	6029      	str	r1, [r5, #0]
 8011f2a:	bf48      	it	mi
 8011f2c:	6023      	strmi	r3, [r4, #0]
 8011f2e:	b91e      	cbnz	r6, 8011f38 <_printf_i+0x1a4>
 8011f30:	6823      	ldr	r3, [r4, #0]
 8011f32:	f023 0320 	bic.w	r3, r3, #32
 8011f36:	6023      	str	r3, [r4, #0]
 8011f38:	2310      	movs	r3, #16
 8011f3a:	e7a7      	b.n	8011e8c <_printf_i+0xf8>
 8011f3c:	4824      	ldr	r0, [pc, #144]	; (8011fd0 <_printf_i+0x23c>)
 8011f3e:	e7e4      	b.n	8011f0a <_printf_i+0x176>
 8011f40:	4615      	mov	r5, r2
 8011f42:	e7bd      	b.n	8011ec0 <_printf_i+0x12c>
 8011f44:	682b      	ldr	r3, [r5, #0]
 8011f46:	6826      	ldr	r6, [r4, #0]
 8011f48:	6961      	ldr	r1, [r4, #20]
 8011f4a:	1d18      	adds	r0, r3, #4
 8011f4c:	6028      	str	r0, [r5, #0]
 8011f4e:	0635      	lsls	r5, r6, #24
 8011f50:	681b      	ldr	r3, [r3, #0]
 8011f52:	d501      	bpl.n	8011f58 <_printf_i+0x1c4>
 8011f54:	6019      	str	r1, [r3, #0]
 8011f56:	e002      	b.n	8011f5e <_printf_i+0x1ca>
 8011f58:	0670      	lsls	r0, r6, #25
 8011f5a:	d5fb      	bpl.n	8011f54 <_printf_i+0x1c0>
 8011f5c:	8019      	strh	r1, [r3, #0]
 8011f5e:	2300      	movs	r3, #0
 8011f60:	6123      	str	r3, [r4, #16]
 8011f62:	4615      	mov	r5, r2
 8011f64:	e7bc      	b.n	8011ee0 <_printf_i+0x14c>
 8011f66:	682b      	ldr	r3, [r5, #0]
 8011f68:	1d1a      	adds	r2, r3, #4
 8011f6a:	602a      	str	r2, [r5, #0]
 8011f6c:	681d      	ldr	r5, [r3, #0]
 8011f6e:	6862      	ldr	r2, [r4, #4]
 8011f70:	2100      	movs	r1, #0
 8011f72:	4628      	mov	r0, r5
 8011f74:	f7ee f94c 	bl	8000210 <memchr>
 8011f78:	b108      	cbz	r0, 8011f7e <_printf_i+0x1ea>
 8011f7a:	1b40      	subs	r0, r0, r5
 8011f7c:	6060      	str	r0, [r4, #4]
 8011f7e:	6863      	ldr	r3, [r4, #4]
 8011f80:	6123      	str	r3, [r4, #16]
 8011f82:	2300      	movs	r3, #0
 8011f84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011f88:	e7aa      	b.n	8011ee0 <_printf_i+0x14c>
 8011f8a:	6923      	ldr	r3, [r4, #16]
 8011f8c:	462a      	mov	r2, r5
 8011f8e:	4649      	mov	r1, r9
 8011f90:	4640      	mov	r0, r8
 8011f92:	47d0      	blx	sl
 8011f94:	3001      	adds	r0, #1
 8011f96:	d0ad      	beq.n	8011ef4 <_printf_i+0x160>
 8011f98:	6823      	ldr	r3, [r4, #0]
 8011f9a:	079b      	lsls	r3, r3, #30
 8011f9c:	d413      	bmi.n	8011fc6 <_printf_i+0x232>
 8011f9e:	68e0      	ldr	r0, [r4, #12]
 8011fa0:	9b03      	ldr	r3, [sp, #12]
 8011fa2:	4298      	cmp	r0, r3
 8011fa4:	bfb8      	it	lt
 8011fa6:	4618      	movlt	r0, r3
 8011fa8:	e7a6      	b.n	8011ef8 <_printf_i+0x164>
 8011faa:	2301      	movs	r3, #1
 8011fac:	4632      	mov	r2, r6
 8011fae:	4649      	mov	r1, r9
 8011fb0:	4640      	mov	r0, r8
 8011fb2:	47d0      	blx	sl
 8011fb4:	3001      	adds	r0, #1
 8011fb6:	d09d      	beq.n	8011ef4 <_printf_i+0x160>
 8011fb8:	3501      	adds	r5, #1
 8011fba:	68e3      	ldr	r3, [r4, #12]
 8011fbc:	9903      	ldr	r1, [sp, #12]
 8011fbe:	1a5b      	subs	r3, r3, r1
 8011fc0:	42ab      	cmp	r3, r5
 8011fc2:	dcf2      	bgt.n	8011faa <_printf_i+0x216>
 8011fc4:	e7eb      	b.n	8011f9e <_printf_i+0x20a>
 8011fc6:	2500      	movs	r5, #0
 8011fc8:	f104 0619 	add.w	r6, r4, #25
 8011fcc:	e7f5      	b.n	8011fba <_printf_i+0x226>
 8011fce:	bf00      	nop
 8011fd0:	08013816 	.word	0x08013816
 8011fd4:	08013827 	.word	0x08013827

08011fd8 <__sflush_r>:
 8011fd8:	898a      	ldrh	r2, [r1, #12]
 8011fda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011fde:	4605      	mov	r5, r0
 8011fe0:	0710      	lsls	r0, r2, #28
 8011fe2:	460c      	mov	r4, r1
 8011fe4:	d458      	bmi.n	8012098 <__sflush_r+0xc0>
 8011fe6:	684b      	ldr	r3, [r1, #4]
 8011fe8:	2b00      	cmp	r3, #0
 8011fea:	dc05      	bgt.n	8011ff8 <__sflush_r+0x20>
 8011fec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011fee:	2b00      	cmp	r3, #0
 8011ff0:	dc02      	bgt.n	8011ff8 <__sflush_r+0x20>
 8011ff2:	2000      	movs	r0, #0
 8011ff4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011ff8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011ffa:	2e00      	cmp	r6, #0
 8011ffc:	d0f9      	beq.n	8011ff2 <__sflush_r+0x1a>
 8011ffe:	2300      	movs	r3, #0
 8012000:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8012004:	682f      	ldr	r7, [r5, #0]
 8012006:	6a21      	ldr	r1, [r4, #32]
 8012008:	602b      	str	r3, [r5, #0]
 801200a:	d032      	beq.n	8012072 <__sflush_r+0x9a>
 801200c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801200e:	89a3      	ldrh	r3, [r4, #12]
 8012010:	075a      	lsls	r2, r3, #29
 8012012:	d505      	bpl.n	8012020 <__sflush_r+0x48>
 8012014:	6863      	ldr	r3, [r4, #4]
 8012016:	1ac0      	subs	r0, r0, r3
 8012018:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801201a:	b10b      	cbz	r3, 8012020 <__sflush_r+0x48>
 801201c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801201e:	1ac0      	subs	r0, r0, r3
 8012020:	2300      	movs	r3, #0
 8012022:	4602      	mov	r2, r0
 8012024:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012026:	6a21      	ldr	r1, [r4, #32]
 8012028:	4628      	mov	r0, r5
 801202a:	47b0      	blx	r6
 801202c:	1c43      	adds	r3, r0, #1
 801202e:	89a3      	ldrh	r3, [r4, #12]
 8012030:	d106      	bne.n	8012040 <__sflush_r+0x68>
 8012032:	6829      	ldr	r1, [r5, #0]
 8012034:	291d      	cmp	r1, #29
 8012036:	d82b      	bhi.n	8012090 <__sflush_r+0xb8>
 8012038:	4a29      	ldr	r2, [pc, #164]	; (80120e0 <__sflush_r+0x108>)
 801203a:	410a      	asrs	r2, r1
 801203c:	07d6      	lsls	r6, r2, #31
 801203e:	d427      	bmi.n	8012090 <__sflush_r+0xb8>
 8012040:	2200      	movs	r2, #0
 8012042:	6062      	str	r2, [r4, #4]
 8012044:	04d9      	lsls	r1, r3, #19
 8012046:	6922      	ldr	r2, [r4, #16]
 8012048:	6022      	str	r2, [r4, #0]
 801204a:	d504      	bpl.n	8012056 <__sflush_r+0x7e>
 801204c:	1c42      	adds	r2, r0, #1
 801204e:	d101      	bne.n	8012054 <__sflush_r+0x7c>
 8012050:	682b      	ldr	r3, [r5, #0]
 8012052:	b903      	cbnz	r3, 8012056 <__sflush_r+0x7e>
 8012054:	6560      	str	r0, [r4, #84]	; 0x54
 8012056:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012058:	602f      	str	r7, [r5, #0]
 801205a:	2900      	cmp	r1, #0
 801205c:	d0c9      	beq.n	8011ff2 <__sflush_r+0x1a>
 801205e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012062:	4299      	cmp	r1, r3
 8012064:	d002      	beq.n	801206c <__sflush_r+0x94>
 8012066:	4628      	mov	r0, r5
 8012068:	f7fe fc72 	bl	8010950 <_free_r>
 801206c:	2000      	movs	r0, #0
 801206e:	6360      	str	r0, [r4, #52]	; 0x34
 8012070:	e7c0      	b.n	8011ff4 <__sflush_r+0x1c>
 8012072:	2301      	movs	r3, #1
 8012074:	4628      	mov	r0, r5
 8012076:	47b0      	blx	r6
 8012078:	1c41      	adds	r1, r0, #1
 801207a:	d1c8      	bne.n	801200e <__sflush_r+0x36>
 801207c:	682b      	ldr	r3, [r5, #0]
 801207e:	2b00      	cmp	r3, #0
 8012080:	d0c5      	beq.n	801200e <__sflush_r+0x36>
 8012082:	2b1d      	cmp	r3, #29
 8012084:	d001      	beq.n	801208a <__sflush_r+0xb2>
 8012086:	2b16      	cmp	r3, #22
 8012088:	d101      	bne.n	801208e <__sflush_r+0xb6>
 801208a:	602f      	str	r7, [r5, #0]
 801208c:	e7b1      	b.n	8011ff2 <__sflush_r+0x1a>
 801208e:	89a3      	ldrh	r3, [r4, #12]
 8012090:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012094:	81a3      	strh	r3, [r4, #12]
 8012096:	e7ad      	b.n	8011ff4 <__sflush_r+0x1c>
 8012098:	690f      	ldr	r7, [r1, #16]
 801209a:	2f00      	cmp	r7, #0
 801209c:	d0a9      	beq.n	8011ff2 <__sflush_r+0x1a>
 801209e:	0793      	lsls	r3, r2, #30
 80120a0:	680e      	ldr	r6, [r1, #0]
 80120a2:	bf08      	it	eq
 80120a4:	694b      	ldreq	r3, [r1, #20]
 80120a6:	600f      	str	r7, [r1, #0]
 80120a8:	bf18      	it	ne
 80120aa:	2300      	movne	r3, #0
 80120ac:	eba6 0807 	sub.w	r8, r6, r7
 80120b0:	608b      	str	r3, [r1, #8]
 80120b2:	f1b8 0f00 	cmp.w	r8, #0
 80120b6:	dd9c      	ble.n	8011ff2 <__sflush_r+0x1a>
 80120b8:	6a21      	ldr	r1, [r4, #32]
 80120ba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80120bc:	4643      	mov	r3, r8
 80120be:	463a      	mov	r2, r7
 80120c0:	4628      	mov	r0, r5
 80120c2:	47b0      	blx	r6
 80120c4:	2800      	cmp	r0, #0
 80120c6:	dc06      	bgt.n	80120d6 <__sflush_r+0xfe>
 80120c8:	89a3      	ldrh	r3, [r4, #12]
 80120ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80120ce:	81a3      	strh	r3, [r4, #12]
 80120d0:	f04f 30ff 	mov.w	r0, #4294967295
 80120d4:	e78e      	b.n	8011ff4 <__sflush_r+0x1c>
 80120d6:	4407      	add	r7, r0
 80120d8:	eba8 0800 	sub.w	r8, r8, r0
 80120dc:	e7e9      	b.n	80120b2 <__sflush_r+0xda>
 80120de:	bf00      	nop
 80120e0:	dfbffffe 	.word	0xdfbffffe

080120e4 <_fflush_r>:
 80120e4:	b538      	push	{r3, r4, r5, lr}
 80120e6:	690b      	ldr	r3, [r1, #16]
 80120e8:	4605      	mov	r5, r0
 80120ea:	460c      	mov	r4, r1
 80120ec:	b913      	cbnz	r3, 80120f4 <_fflush_r+0x10>
 80120ee:	2500      	movs	r5, #0
 80120f0:	4628      	mov	r0, r5
 80120f2:	bd38      	pop	{r3, r4, r5, pc}
 80120f4:	b118      	cbz	r0, 80120fe <_fflush_r+0x1a>
 80120f6:	6a03      	ldr	r3, [r0, #32]
 80120f8:	b90b      	cbnz	r3, 80120fe <_fflush_r+0x1a>
 80120fa:	f7fe f9f9 	bl	80104f0 <__sinit>
 80120fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012102:	2b00      	cmp	r3, #0
 8012104:	d0f3      	beq.n	80120ee <_fflush_r+0xa>
 8012106:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8012108:	07d0      	lsls	r0, r2, #31
 801210a:	d404      	bmi.n	8012116 <_fflush_r+0x32>
 801210c:	0599      	lsls	r1, r3, #22
 801210e:	d402      	bmi.n	8012116 <_fflush_r+0x32>
 8012110:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012112:	f7fe fc04 	bl	801091e <__retarget_lock_acquire_recursive>
 8012116:	4628      	mov	r0, r5
 8012118:	4621      	mov	r1, r4
 801211a:	f7ff ff5d 	bl	8011fd8 <__sflush_r>
 801211e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012120:	07da      	lsls	r2, r3, #31
 8012122:	4605      	mov	r5, r0
 8012124:	d4e4      	bmi.n	80120f0 <_fflush_r+0xc>
 8012126:	89a3      	ldrh	r3, [r4, #12]
 8012128:	059b      	lsls	r3, r3, #22
 801212a:	d4e1      	bmi.n	80120f0 <_fflush_r+0xc>
 801212c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801212e:	f7fe fbf7 	bl	8010920 <__retarget_lock_release_recursive>
 8012132:	e7dd      	b.n	80120f0 <_fflush_r+0xc>

08012134 <__swhatbuf_r>:
 8012134:	b570      	push	{r4, r5, r6, lr}
 8012136:	460c      	mov	r4, r1
 8012138:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801213c:	2900      	cmp	r1, #0
 801213e:	b096      	sub	sp, #88	; 0x58
 8012140:	4615      	mov	r5, r2
 8012142:	461e      	mov	r6, r3
 8012144:	da0d      	bge.n	8012162 <__swhatbuf_r+0x2e>
 8012146:	89a3      	ldrh	r3, [r4, #12]
 8012148:	f013 0f80 	tst.w	r3, #128	; 0x80
 801214c:	f04f 0100 	mov.w	r1, #0
 8012150:	bf0c      	ite	eq
 8012152:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8012156:	2340      	movne	r3, #64	; 0x40
 8012158:	2000      	movs	r0, #0
 801215a:	6031      	str	r1, [r6, #0]
 801215c:	602b      	str	r3, [r5, #0]
 801215e:	b016      	add	sp, #88	; 0x58
 8012160:	bd70      	pop	{r4, r5, r6, pc}
 8012162:	466a      	mov	r2, sp
 8012164:	f000 f848 	bl	80121f8 <_fstat_r>
 8012168:	2800      	cmp	r0, #0
 801216a:	dbec      	blt.n	8012146 <__swhatbuf_r+0x12>
 801216c:	9901      	ldr	r1, [sp, #4]
 801216e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8012172:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8012176:	4259      	negs	r1, r3
 8012178:	4159      	adcs	r1, r3
 801217a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801217e:	e7eb      	b.n	8012158 <__swhatbuf_r+0x24>

08012180 <__smakebuf_r>:
 8012180:	898b      	ldrh	r3, [r1, #12]
 8012182:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012184:	079d      	lsls	r5, r3, #30
 8012186:	4606      	mov	r6, r0
 8012188:	460c      	mov	r4, r1
 801218a:	d507      	bpl.n	801219c <__smakebuf_r+0x1c>
 801218c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012190:	6023      	str	r3, [r4, #0]
 8012192:	6123      	str	r3, [r4, #16]
 8012194:	2301      	movs	r3, #1
 8012196:	6163      	str	r3, [r4, #20]
 8012198:	b002      	add	sp, #8
 801219a:	bd70      	pop	{r4, r5, r6, pc}
 801219c:	ab01      	add	r3, sp, #4
 801219e:	466a      	mov	r2, sp
 80121a0:	f7ff ffc8 	bl	8012134 <__swhatbuf_r>
 80121a4:	9900      	ldr	r1, [sp, #0]
 80121a6:	4605      	mov	r5, r0
 80121a8:	4630      	mov	r0, r6
 80121aa:	f7fd fa6f 	bl	800f68c <_malloc_r>
 80121ae:	b948      	cbnz	r0, 80121c4 <__smakebuf_r+0x44>
 80121b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80121b4:	059a      	lsls	r2, r3, #22
 80121b6:	d4ef      	bmi.n	8012198 <__smakebuf_r+0x18>
 80121b8:	f023 0303 	bic.w	r3, r3, #3
 80121bc:	f043 0302 	orr.w	r3, r3, #2
 80121c0:	81a3      	strh	r3, [r4, #12]
 80121c2:	e7e3      	b.n	801218c <__smakebuf_r+0xc>
 80121c4:	89a3      	ldrh	r3, [r4, #12]
 80121c6:	6020      	str	r0, [r4, #0]
 80121c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80121cc:	81a3      	strh	r3, [r4, #12]
 80121ce:	9b00      	ldr	r3, [sp, #0]
 80121d0:	6163      	str	r3, [r4, #20]
 80121d2:	9b01      	ldr	r3, [sp, #4]
 80121d4:	6120      	str	r0, [r4, #16]
 80121d6:	b15b      	cbz	r3, 80121f0 <__smakebuf_r+0x70>
 80121d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80121dc:	4630      	mov	r0, r6
 80121de:	f000 f81d 	bl	801221c <_isatty_r>
 80121e2:	b128      	cbz	r0, 80121f0 <__smakebuf_r+0x70>
 80121e4:	89a3      	ldrh	r3, [r4, #12]
 80121e6:	f023 0303 	bic.w	r3, r3, #3
 80121ea:	f043 0301 	orr.w	r3, r3, #1
 80121ee:	81a3      	strh	r3, [r4, #12]
 80121f0:	89a3      	ldrh	r3, [r4, #12]
 80121f2:	431d      	orrs	r5, r3
 80121f4:	81a5      	strh	r5, [r4, #12]
 80121f6:	e7cf      	b.n	8012198 <__smakebuf_r+0x18>

080121f8 <_fstat_r>:
 80121f8:	b538      	push	{r3, r4, r5, lr}
 80121fa:	4d07      	ldr	r5, [pc, #28]	; (8012218 <_fstat_r+0x20>)
 80121fc:	2300      	movs	r3, #0
 80121fe:	4604      	mov	r4, r0
 8012200:	4608      	mov	r0, r1
 8012202:	4611      	mov	r1, r2
 8012204:	602b      	str	r3, [r5, #0]
 8012206:	f7f1 ff3c 	bl	8004082 <_fstat>
 801220a:	1c43      	adds	r3, r0, #1
 801220c:	d102      	bne.n	8012214 <_fstat_r+0x1c>
 801220e:	682b      	ldr	r3, [r5, #0]
 8012210:	b103      	cbz	r3, 8012214 <_fstat_r+0x1c>
 8012212:	6023      	str	r3, [r4, #0]
 8012214:	bd38      	pop	{r3, r4, r5, pc}
 8012216:	bf00      	nop
 8012218:	20001628 	.word	0x20001628

0801221c <_isatty_r>:
 801221c:	b538      	push	{r3, r4, r5, lr}
 801221e:	4d06      	ldr	r5, [pc, #24]	; (8012238 <_isatty_r+0x1c>)
 8012220:	2300      	movs	r3, #0
 8012222:	4604      	mov	r4, r0
 8012224:	4608      	mov	r0, r1
 8012226:	602b      	str	r3, [r5, #0]
 8012228:	f7f1 ff3b 	bl	80040a2 <_isatty>
 801222c:	1c43      	adds	r3, r0, #1
 801222e:	d102      	bne.n	8012236 <_isatty_r+0x1a>
 8012230:	682b      	ldr	r3, [r5, #0]
 8012232:	b103      	cbz	r3, 8012236 <_isatty_r+0x1a>
 8012234:	6023      	str	r3, [r4, #0]
 8012236:	bd38      	pop	{r3, r4, r5, pc}
 8012238:	20001628 	.word	0x20001628

0801223c <__assert_func>:
 801223c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801223e:	4614      	mov	r4, r2
 8012240:	461a      	mov	r2, r3
 8012242:	4b09      	ldr	r3, [pc, #36]	; (8012268 <__assert_func+0x2c>)
 8012244:	681b      	ldr	r3, [r3, #0]
 8012246:	4605      	mov	r5, r0
 8012248:	68d8      	ldr	r0, [r3, #12]
 801224a:	b14c      	cbz	r4, 8012260 <__assert_func+0x24>
 801224c:	4b07      	ldr	r3, [pc, #28]	; (801226c <__assert_func+0x30>)
 801224e:	9100      	str	r1, [sp, #0]
 8012250:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012254:	4906      	ldr	r1, [pc, #24]	; (8012270 <__assert_func+0x34>)
 8012256:	462b      	mov	r3, r5
 8012258:	f000 f824 	bl	80122a4 <fiprintf>
 801225c:	f000 f834 	bl	80122c8 <abort>
 8012260:	4b04      	ldr	r3, [pc, #16]	; (8012274 <__assert_func+0x38>)
 8012262:	461c      	mov	r4, r3
 8012264:	e7f3      	b.n	801224e <__assert_func+0x12>
 8012266:	bf00      	nop
 8012268:	200001fc 	.word	0x200001fc
 801226c:	08013838 	.word	0x08013838
 8012270:	08013845 	.word	0x08013845
 8012274:	08013873 	.word	0x08013873

08012278 <_calloc_r>:
 8012278:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801227a:	fba1 2402 	umull	r2, r4, r1, r2
 801227e:	b94c      	cbnz	r4, 8012294 <_calloc_r+0x1c>
 8012280:	4611      	mov	r1, r2
 8012282:	9201      	str	r2, [sp, #4]
 8012284:	f7fd fa02 	bl	800f68c <_malloc_r>
 8012288:	9a01      	ldr	r2, [sp, #4]
 801228a:	4605      	mov	r5, r0
 801228c:	b930      	cbnz	r0, 801229c <_calloc_r+0x24>
 801228e:	4628      	mov	r0, r5
 8012290:	b003      	add	sp, #12
 8012292:	bd30      	pop	{r4, r5, pc}
 8012294:	220c      	movs	r2, #12
 8012296:	6002      	str	r2, [r0, #0]
 8012298:	2500      	movs	r5, #0
 801229a:	e7f8      	b.n	801228e <_calloc_r+0x16>
 801229c:	4621      	mov	r1, r4
 801229e:	f7fe faa3 	bl	80107e8 <memset>
 80122a2:	e7f4      	b.n	801228e <_calloc_r+0x16>

080122a4 <fiprintf>:
 80122a4:	b40e      	push	{r1, r2, r3}
 80122a6:	b503      	push	{r0, r1, lr}
 80122a8:	4601      	mov	r1, r0
 80122aa:	ab03      	add	r3, sp, #12
 80122ac:	4805      	ldr	r0, [pc, #20]	; (80122c4 <fiprintf+0x20>)
 80122ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80122b2:	6800      	ldr	r0, [r0, #0]
 80122b4:	9301      	str	r3, [sp, #4]
 80122b6:	f7ff fbe5 	bl	8011a84 <_vfiprintf_r>
 80122ba:	b002      	add	sp, #8
 80122bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80122c0:	b003      	add	sp, #12
 80122c2:	4770      	bx	lr
 80122c4:	200001fc 	.word	0x200001fc

080122c8 <abort>:
 80122c8:	b508      	push	{r3, lr}
 80122ca:	2006      	movs	r0, #6
 80122cc:	f000 f82c 	bl	8012328 <raise>
 80122d0:	2001      	movs	r0, #1
 80122d2:	f7f1 fe87 	bl	8003fe4 <_exit>

080122d6 <_raise_r>:
 80122d6:	291f      	cmp	r1, #31
 80122d8:	b538      	push	{r3, r4, r5, lr}
 80122da:	4604      	mov	r4, r0
 80122dc:	460d      	mov	r5, r1
 80122de:	d904      	bls.n	80122ea <_raise_r+0x14>
 80122e0:	2316      	movs	r3, #22
 80122e2:	6003      	str	r3, [r0, #0]
 80122e4:	f04f 30ff 	mov.w	r0, #4294967295
 80122e8:	bd38      	pop	{r3, r4, r5, pc}
 80122ea:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80122ec:	b112      	cbz	r2, 80122f4 <_raise_r+0x1e>
 80122ee:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80122f2:	b94b      	cbnz	r3, 8012308 <_raise_r+0x32>
 80122f4:	4620      	mov	r0, r4
 80122f6:	f000 f831 	bl	801235c <_getpid_r>
 80122fa:	462a      	mov	r2, r5
 80122fc:	4601      	mov	r1, r0
 80122fe:	4620      	mov	r0, r4
 8012300:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012304:	f000 b818 	b.w	8012338 <_kill_r>
 8012308:	2b01      	cmp	r3, #1
 801230a:	d00a      	beq.n	8012322 <_raise_r+0x4c>
 801230c:	1c59      	adds	r1, r3, #1
 801230e:	d103      	bne.n	8012318 <_raise_r+0x42>
 8012310:	2316      	movs	r3, #22
 8012312:	6003      	str	r3, [r0, #0]
 8012314:	2001      	movs	r0, #1
 8012316:	e7e7      	b.n	80122e8 <_raise_r+0x12>
 8012318:	2400      	movs	r4, #0
 801231a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801231e:	4628      	mov	r0, r5
 8012320:	4798      	blx	r3
 8012322:	2000      	movs	r0, #0
 8012324:	e7e0      	b.n	80122e8 <_raise_r+0x12>
	...

08012328 <raise>:
 8012328:	4b02      	ldr	r3, [pc, #8]	; (8012334 <raise+0xc>)
 801232a:	4601      	mov	r1, r0
 801232c:	6818      	ldr	r0, [r3, #0]
 801232e:	f7ff bfd2 	b.w	80122d6 <_raise_r>
 8012332:	bf00      	nop
 8012334:	200001fc 	.word	0x200001fc

08012338 <_kill_r>:
 8012338:	b538      	push	{r3, r4, r5, lr}
 801233a:	4d07      	ldr	r5, [pc, #28]	; (8012358 <_kill_r+0x20>)
 801233c:	2300      	movs	r3, #0
 801233e:	4604      	mov	r4, r0
 8012340:	4608      	mov	r0, r1
 8012342:	4611      	mov	r1, r2
 8012344:	602b      	str	r3, [r5, #0]
 8012346:	f7f1 fe3d 	bl	8003fc4 <_kill>
 801234a:	1c43      	adds	r3, r0, #1
 801234c:	d102      	bne.n	8012354 <_kill_r+0x1c>
 801234e:	682b      	ldr	r3, [r5, #0]
 8012350:	b103      	cbz	r3, 8012354 <_kill_r+0x1c>
 8012352:	6023      	str	r3, [r4, #0]
 8012354:	bd38      	pop	{r3, r4, r5, pc}
 8012356:	bf00      	nop
 8012358:	20001628 	.word	0x20001628

0801235c <_getpid_r>:
 801235c:	f7f1 be2a 	b.w	8003fb4 <_getpid>

08012360 <pow>:
 8012360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012362:	ed2d 8b02 	vpush	{d8}
 8012366:	eeb0 8a40 	vmov.f32	s16, s0
 801236a:	eef0 8a60 	vmov.f32	s17, s1
 801236e:	ec55 4b11 	vmov	r4, r5, d1
 8012372:	f000 f94d 	bl	8012610 <__ieee754_pow>
 8012376:	4622      	mov	r2, r4
 8012378:	462b      	mov	r3, r5
 801237a:	4620      	mov	r0, r4
 801237c:	4629      	mov	r1, r5
 801237e:	ec57 6b10 	vmov	r6, r7, d0
 8012382:	f7ee fbeb 	bl	8000b5c <__aeabi_dcmpun>
 8012386:	2800      	cmp	r0, #0
 8012388:	d13b      	bne.n	8012402 <pow+0xa2>
 801238a:	ec51 0b18 	vmov	r0, r1, d8
 801238e:	2200      	movs	r2, #0
 8012390:	2300      	movs	r3, #0
 8012392:	f7ee fbb1 	bl	8000af8 <__aeabi_dcmpeq>
 8012396:	b1b8      	cbz	r0, 80123c8 <pow+0x68>
 8012398:	2200      	movs	r2, #0
 801239a:	2300      	movs	r3, #0
 801239c:	4620      	mov	r0, r4
 801239e:	4629      	mov	r1, r5
 80123a0:	f7ee fbaa 	bl	8000af8 <__aeabi_dcmpeq>
 80123a4:	2800      	cmp	r0, #0
 80123a6:	d146      	bne.n	8012436 <pow+0xd6>
 80123a8:	ec45 4b10 	vmov	d0, r4, r5
 80123ac:	f000 f848 	bl	8012440 <finite>
 80123b0:	b338      	cbz	r0, 8012402 <pow+0xa2>
 80123b2:	2200      	movs	r2, #0
 80123b4:	2300      	movs	r3, #0
 80123b6:	4620      	mov	r0, r4
 80123b8:	4629      	mov	r1, r5
 80123ba:	f7ee fba7 	bl	8000b0c <__aeabi_dcmplt>
 80123be:	b300      	cbz	r0, 8012402 <pow+0xa2>
 80123c0:	f7fe fa82 	bl	80108c8 <__errno>
 80123c4:	2322      	movs	r3, #34	; 0x22
 80123c6:	e01b      	b.n	8012400 <pow+0xa0>
 80123c8:	ec47 6b10 	vmov	d0, r6, r7
 80123cc:	f000 f838 	bl	8012440 <finite>
 80123d0:	b9e0      	cbnz	r0, 801240c <pow+0xac>
 80123d2:	eeb0 0a48 	vmov.f32	s0, s16
 80123d6:	eef0 0a68 	vmov.f32	s1, s17
 80123da:	f000 f831 	bl	8012440 <finite>
 80123de:	b1a8      	cbz	r0, 801240c <pow+0xac>
 80123e0:	ec45 4b10 	vmov	d0, r4, r5
 80123e4:	f000 f82c 	bl	8012440 <finite>
 80123e8:	b180      	cbz	r0, 801240c <pow+0xac>
 80123ea:	4632      	mov	r2, r6
 80123ec:	463b      	mov	r3, r7
 80123ee:	4630      	mov	r0, r6
 80123f0:	4639      	mov	r1, r7
 80123f2:	f7ee fbb3 	bl	8000b5c <__aeabi_dcmpun>
 80123f6:	2800      	cmp	r0, #0
 80123f8:	d0e2      	beq.n	80123c0 <pow+0x60>
 80123fa:	f7fe fa65 	bl	80108c8 <__errno>
 80123fe:	2321      	movs	r3, #33	; 0x21
 8012400:	6003      	str	r3, [r0, #0]
 8012402:	ecbd 8b02 	vpop	{d8}
 8012406:	ec47 6b10 	vmov	d0, r6, r7
 801240a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801240c:	2200      	movs	r2, #0
 801240e:	2300      	movs	r3, #0
 8012410:	4630      	mov	r0, r6
 8012412:	4639      	mov	r1, r7
 8012414:	f7ee fb70 	bl	8000af8 <__aeabi_dcmpeq>
 8012418:	2800      	cmp	r0, #0
 801241a:	d0f2      	beq.n	8012402 <pow+0xa2>
 801241c:	eeb0 0a48 	vmov.f32	s0, s16
 8012420:	eef0 0a68 	vmov.f32	s1, s17
 8012424:	f000 f80c 	bl	8012440 <finite>
 8012428:	2800      	cmp	r0, #0
 801242a:	d0ea      	beq.n	8012402 <pow+0xa2>
 801242c:	ec45 4b10 	vmov	d0, r4, r5
 8012430:	f000 f806 	bl	8012440 <finite>
 8012434:	e7c3      	b.n	80123be <pow+0x5e>
 8012436:	4f01      	ldr	r7, [pc, #4]	; (801243c <pow+0xdc>)
 8012438:	2600      	movs	r6, #0
 801243a:	e7e2      	b.n	8012402 <pow+0xa2>
 801243c:	3ff00000 	.word	0x3ff00000

08012440 <finite>:
 8012440:	b082      	sub	sp, #8
 8012442:	ed8d 0b00 	vstr	d0, [sp]
 8012446:	9801      	ldr	r0, [sp, #4]
 8012448:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 801244c:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8012450:	0fc0      	lsrs	r0, r0, #31
 8012452:	b002      	add	sp, #8
 8012454:	4770      	bx	lr
	...

08012458 <__ieee754_sqrt>:
 8012458:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801245c:	ec55 4b10 	vmov	r4, r5, d0
 8012460:	4e67      	ldr	r6, [pc, #412]	; (8012600 <__ieee754_sqrt+0x1a8>)
 8012462:	43ae      	bics	r6, r5
 8012464:	ee10 0a10 	vmov	r0, s0
 8012468:	ee10 2a10 	vmov	r2, s0
 801246c:	4629      	mov	r1, r5
 801246e:	462b      	mov	r3, r5
 8012470:	d10d      	bne.n	801248e <__ieee754_sqrt+0x36>
 8012472:	f7ee f8d9 	bl	8000628 <__aeabi_dmul>
 8012476:	4602      	mov	r2, r0
 8012478:	460b      	mov	r3, r1
 801247a:	4620      	mov	r0, r4
 801247c:	4629      	mov	r1, r5
 801247e:	f7ed ff1d 	bl	80002bc <__adddf3>
 8012482:	4604      	mov	r4, r0
 8012484:	460d      	mov	r5, r1
 8012486:	ec45 4b10 	vmov	d0, r4, r5
 801248a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801248e:	2d00      	cmp	r5, #0
 8012490:	dc0b      	bgt.n	80124aa <__ieee754_sqrt+0x52>
 8012492:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8012496:	4326      	orrs	r6, r4
 8012498:	d0f5      	beq.n	8012486 <__ieee754_sqrt+0x2e>
 801249a:	b135      	cbz	r5, 80124aa <__ieee754_sqrt+0x52>
 801249c:	f7ed ff0c 	bl	80002b8 <__aeabi_dsub>
 80124a0:	4602      	mov	r2, r0
 80124a2:	460b      	mov	r3, r1
 80124a4:	f7ee f9ea 	bl	800087c <__aeabi_ddiv>
 80124a8:	e7eb      	b.n	8012482 <__ieee754_sqrt+0x2a>
 80124aa:	1509      	asrs	r1, r1, #20
 80124ac:	f000 808d 	beq.w	80125ca <__ieee754_sqrt+0x172>
 80124b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80124b4:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 80124b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80124bc:	07c9      	lsls	r1, r1, #31
 80124be:	bf5c      	itt	pl
 80124c0:	005b      	lslpl	r3, r3, #1
 80124c2:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 80124c6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80124ca:	bf58      	it	pl
 80124cc:	0052      	lslpl	r2, r2, #1
 80124ce:	2500      	movs	r5, #0
 80124d0:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80124d4:	1076      	asrs	r6, r6, #1
 80124d6:	0052      	lsls	r2, r2, #1
 80124d8:	f04f 0e16 	mov.w	lr, #22
 80124dc:	46ac      	mov	ip, r5
 80124de:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80124e2:	eb0c 0001 	add.w	r0, ip, r1
 80124e6:	4298      	cmp	r0, r3
 80124e8:	bfde      	ittt	le
 80124ea:	1a1b      	suble	r3, r3, r0
 80124ec:	eb00 0c01 	addle.w	ip, r0, r1
 80124f0:	186d      	addle	r5, r5, r1
 80124f2:	005b      	lsls	r3, r3, #1
 80124f4:	f1be 0e01 	subs.w	lr, lr, #1
 80124f8:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80124fc:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8012500:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8012504:	d1ed      	bne.n	80124e2 <__ieee754_sqrt+0x8a>
 8012506:	4674      	mov	r4, lr
 8012508:	2720      	movs	r7, #32
 801250a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 801250e:	4563      	cmp	r3, ip
 8012510:	eb01 000e 	add.w	r0, r1, lr
 8012514:	dc02      	bgt.n	801251c <__ieee754_sqrt+0xc4>
 8012516:	d113      	bne.n	8012540 <__ieee754_sqrt+0xe8>
 8012518:	4290      	cmp	r0, r2
 801251a:	d811      	bhi.n	8012540 <__ieee754_sqrt+0xe8>
 801251c:	2800      	cmp	r0, #0
 801251e:	eb00 0e01 	add.w	lr, r0, r1
 8012522:	da57      	bge.n	80125d4 <__ieee754_sqrt+0x17c>
 8012524:	f1be 0f00 	cmp.w	lr, #0
 8012528:	db54      	blt.n	80125d4 <__ieee754_sqrt+0x17c>
 801252a:	f10c 0801 	add.w	r8, ip, #1
 801252e:	eba3 030c 	sub.w	r3, r3, ip
 8012532:	4290      	cmp	r0, r2
 8012534:	bf88      	it	hi
 8012536:	f103 33ff 	addhi.w	r3, r3, #4294967295
 801253a:	1a12      	subs	r2, r2, r0
 801253c:	440c      	add	r4, r1
 801253e:	46c4      	mov	ip, r8
 8012540:	005b      	lsls	r3, r3, #1
 8012542:	3f01      	subs	r7, #1
 8012544:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8012548:	ea4f 0151 	mov.w	r1, r1, lsr #1
 801254c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8012550:	d1dd      	bne.n	801250e <__ieee754_sqrt+0xb6>
 8012552:	4313      	orrs	r3, r2
 8012554:	d01b      	beq.n	801258e <__ieee754_sqrt+0x136>
 8012556:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8012604 <__ieee754_sqrt+0x1ac>
 801255a:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8012608 <__ieee754_sqrt+0x1b0>
 801255e:	e9da 0100 	ldrd	r0, r1, [sl]
 8012562:	e9db 2300 	ldrd	r2, r3, [fp]
 8012566:	f7ed fea7 	bl	80002b8 <__aeabi_dsub>
 801256a:	e9da 8900 	ldrd	r8, r9, [sl]
 801256e:	4602      	mov	r2, r0
 8012570:	460b      	mov	r3, r1
 8012572:	4640      	mov	r0, r8
 8012574:	4649      	mov	r1, r9
 8012576:	f7ee fad3 	bl	8000b20 <__aeabi_dcmple>
 801257a:	b140      	cbz	r0, 801258e <__ieee754_sqrt+0x136>
 801257c:	f1b4 3fff 	cmp.w	r4, #4294967295
 8012580:	e9da 0100 	ldrd	r0, r1, [sl]
 8012584:	e9db 2300 	ldrd	r2, r3, [fp]
 8012588:	d126      	bne.n	80125d8 <__ieee754_sqrt+0x180>
 801258a:	3501      	adds	r5, #1
 801258c:	463c      	mov	r4, r7
 801258e:	106a      	asrs	r2, r5, #1
 8012590:	0863      	lsrs	r3, r4, #1
 8012592:	07e9      	lsls	r1, r5, #31
 8012594:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8012598:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 801259c:	bf48      	it	mi
 801259e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80125a2:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 80125a6:	461c      	mov	r4, r3
 80125a8:	e76d      	b.n	8012486 <__ieee754_sqrt+0x2e>
 80125aa:	0ad3      	lsrs	r3, r2, #11
 80125ac:	3815      	subs	r0, #21
 80125ae:	0552      	lsls	r2, r2, #21
 80125b0:	2b00      	cmp	r3, #0
 80125b2:	d0fa      	beq.n	80125aa <__ieee754_sqrt+0x152>
 80125b4:	02dc      	lsls	r4, r3, #11
 80125b6:	d50a      	bpl.n	80125ce <__ieee754_sqrt+0x176>
 80125b8:	f1c1 0420 	rsb	r4, r1, #32
 80125bc:	fa22 f404 	lsr.w	r4, r2, r4
 80125c0:	1e4d      	subs	r5, r1, #1
 80125c2:	408a      	lsls	r2, r1
 80125c4:	4323      	orrs	r3, r4
 80125c6:	1b41      	subs	r1, r0, r5
 80125c8:	e772      	b.n	80124b0 <__ieee754_sqrt+0x58>
 80125ca:	4608      	mov	r0, r1
 80125cc:	e7f0      	b.n	80125b0 <__ieee754_sqrt+0x158>
 80125ce:	005b      	lsls	r3, r3, #1
 80125d0:	3101      	adds	r1, #1
 80125d2:	e7ef      	b.n	80125b4 <__ieee754_sqrt+0x15c>
 80125d4:	46e0      	mov	r8, ip
 80125d6:	e7aa      	b.n	801252e <__ieee754_sqrt+0xd6>
 80125d8:	f7ed fe70 	bl	80002bc <__adddf3>
 80125dc:	e9da 8900 	ldrd	r8, r9, [sl]
 80125e0:	4602      	mov	r2, r0
 80125e2:	460b      	mov	r3, r1
 80125e4:	4640      	mov	r0, r8
 80125e6:	4649      	mov	r1, r9
 80125e8:	f7ee fa90 	bl	8000b0c <__aeabi_dcmplt>
 80125ec:	b120      	cbz	r0, 80125f8 <__ieee754_sqrt+0x1a0>
 80125ee:	1ca0      	adds	r0, r4, #2
 80125f0:	bf08      	it	eq
 80125f2:	3501      	addeq	r5, #1
 80125f4:	3402      	adds	r4, #2
 80125f6:	e7ca      	b.n	801258e <__ieee754_sqrt+0x136>
 80125f8:	3401      	adds	r4, #1
 80125fa:	f024 0401 	bic.w	r4, r4, #1
 80125fe:	e7c6      	b.n	801258e <__ieee754_sqrt+0x136>
 8012600:	7ff00000 	.word	0x7ff00000
 8012604:	20000200 	.word	0x20000200
 8012608:	20000208 	.word	0x20000208
 801260c:	00000000 	.word	0x00000000

08012610 <__ieee754_pow>:
 8012610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012614:	ed2d 8b06 	vpush	{d8-d10}
 8012618:	b089      	sub	sp, #36	; 0x24
 801261a:	ed8d 1b00 	vstr	d1, [sp]
 801261e:	e9dd 2900 	ldrd	r2, r9, [sp]
 8012622:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8012626:	ea58 0102 	orrs.w	r1, r8, r2
 801262a:	ec57 6b10 	vmov	r6, r7, d0
 801262e:	d115      	bne.n	801265c <__ieee754_pow+0x4c>
 8012630:	19b3      	adds	r3, r6, r6
 8012632:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8012636:	4152      	adcs	r2, r2
 8012638:	4299      	cmp	r1, r3
 801263a:	4b89      	ldr	r3, [pc, #548]	; (8012860 <__ieee754_pow+0x250>)
 801263c:	4193      	sbcs	r3, r2
 801263e:	f080 84d1 	bcs.w	8012fe4 <__ieee754_pow+0x9d4>
 8012642:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012646:	4630      	mov	r0, r6
 8012648:	4639      	mov	r1, r7
 801264a:	f7ed fe37 	bl	80002bc <__adddf3>
 801264e:	ec41 0b10 	vmov	d0, r0, r1
 8012652:	b009      	add	sp, #36	; 0x24
 8012654:	ecbd 8b06 	vpop	{d8-d10}
 8012658:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801265c:	4b81      	ldr	r3, [pc, #516]	; (8012864 <__ieee754_pow+0x254>)
 801265e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8012662:	429c      	cmp	r4, r3
 8012664:	ee10 aa10 	vmov	sl, s0
 8012668:	463d      	mov	r5, r7
 801266a:	dc06      	bgt.n	801267a <__ieee754_pow+0x6a>
 801266c:	d101      	bne.n	8012672 <__ieee754_pow+0x62>
 801266e:	2e00      	cmp	r6, #0
 8012670:	d1e7      	bne.n	8012642 <__ieee754_pow+0x32>
 8012672:	4598      	cmp	r8, r3
 8012674:	dc01      	bgt.n	801267a <__ieee754_pow+0x6a>
 8012676:	d10f      	bne.n	8012698 <__ieee754_pow+0x88>
 8012678:	b172      	cbz	r2, 8012698 <__ieee754_pow+0x88>
 801267a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 801267e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8012682:	ea55 050a 	orrs.w	r5, r5, sl
 8012686:	d1dc      	bne.n	8012642 <__ieee754_pow+0x32>
 8012688:	e9dd 3200 	ldrd	r3, r2, [sp]
 801268c:	18db      	adds	r3, r3, r3
 801268e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8012692:	4152      	adcs	r2, r2
 8012694:	429d      	cmp	r5, r3
 8012696:	e7d0      	b.n	801263a <__ieee754_pow+0x2a>
 8012698:	2d00      	cmp	r5, #0
 801269a:	da3b      	bge.n	8012714 <__ieee754_pow+0x104>
 801269c:	4b72      	ldr	r3, [pc, #456]	; (8012868 <__ieee754_pow+0x258>)
 801269e:	4598      	cmp	r8, r3
 80126a0:	dc51      	bgt.n	8012746 <__ieee754_pow+0x136>
 80126a2:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80126a6:	4598      	cmp	r8, r3
 80126a8:	f340 84ab 	ble.w	8013002 <__ieee754_pow+0x9f2>
 80126ac:	ea4f 5328 	mov.w	r3, r8, asr #20
 80126b0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80126b4:	2b14      	cmp	r3, #20
 80126b6:	dd0f      	ble.n	80126d8 <__ieee754_pow+0xc8>
 80126b8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80126bc:	fa22 f103 	lsr.w	r1, r2, r3
 80126c0:	fa01 f303 	lsl.w	r3, r1, r3
 80126c4:	4293      	cmp	r3, r2
 80126c6:	f040 849c 	bne.w	8013002 <__ieee754_pow+0x9f2>
 80126ca:	f001 0101 	and.w	r1, r1, #1
 80126ce:	f1c1 0302 	rsb	r3, r1, #2
 80126d2:	9304      	str	r3, [sp, #16]
 80126d4:	b182      	cbz	r2, 80126f8 <__ieee754_pow+0xe8>
 80126d6:	e05f      	b.n	8012798 <__ieee754_pow+0x188>
 80126d8:	2a00      	cmp	r2, #0
 80126da:	d15b      	bne.n	8012794 <__ieee754_pow+0x184>
 80126dc:	f1c3 0314 	rsb	r3, r3, #20
 80126e0:	fa48 f103 	asr.w	r1, r8, r3
 80126e4:	fa01 f303 	lsl.w	r3, r1, r3
 80126e8:	4543      	cmp	r3, r8
 80126ea:	f040 8487 	bne.w	8012ffc <__ieee754_pow+0x9ec>
 80126ee:	f001 0101 	and.w	r1, r1, #1
 80126f2:	f1c1 0302 	rsb	r3, r1, #2
 80126f6:	9304      	str	r3, [sp, #16]
 80126f8:	4b5c      	ldr	r3, [pc, #368]	; (801286c <__ieee754_pow+0x25c>)
 80126fa:	4598      	cmp	r8, r3
 80126fc:	d132      	bne.n	8012764 <__ieee754_pow+0x154>
 80126fe:	f1b9 0f00 	cmp.w	r9, #0
 8012702:	f280 8477 	bge.w	8012ff4 <__ieee754_pow+0x9e4>
 8012706:	4959      	ldr	r1, [pc, #356]	; (801286c <__ieee754_pow+0x25c>)
 8012708:	4632      	mov	r2, r6
 801270a:	463b      	mov	r3, r7
 801270c:	2000      	movs	r0, #0
 801270e:	f7ee f8b5 	bl	800087c <__aeabi_ddiv>
 8012712:	e79c      	b.n	801264e <__ieee754_pow+0x3e>
 8012714:	2300      	movs	r3, #0
 8012716:	9304      	str	r3, [sp, #16]
 8012718:	2a00      	cmp	r2, #0
 801271a:	d13d      	bne.n	8012798 <__ieee754_pow+0x188>
 801271c:	4b51      	ldr	r3, [pc, #324]	; (8012864 <__ieee754_pow+0x254>)
 801271e:	4598      	cmp	r8, r3
 8012720:	d1ea      	bne.n	80126f8 <__ieee754_pow+0xe8>
 8012722:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8012726:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 801272a:	ea53 030a 	orrs.w	r3, r3, sl
 801272e:	f000 8459 	beq.w	8012fe4 <__ieee754_pow+0x9d4>
 8012732:	4b4f      	ldr	r3, [pc, #316]	; (8012870 <__ieee754_pow+0x260>)
 8012734:	429c      	cmp	r4, r3
 8012736:	dd08      	ble.n	801274a <__ieee754_pow+0x13a>
 8012738:	f1b9 0f00 	cmp.w	r9, #0
 801273c:	f2c0 8456 	blt.w	8012fec <__ieee754_pow+0x9dc>
 8012740:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012744:	e783      	b.n	801264e <__ieee754_pow+0x3e>
 8012746:	2302      	movs	r3, #2
 8012748:	e7e5      	b.n	8012716 <__ieee754_pow+0x106>
 801274a:	f1b9 0f00 	cmp.w	r9, #0
 801274e:	f04f 0000 	mov.w	r0, #0
 8012752:	f04f 0100 	mov.w	r1, #0
 8012756:	f6bf af7a 	bge.w	801264e <__ieee754_pow+0x3e>
 801275a:	e9dd 0300 	ldrd	r0, r3, [sp]
 801275e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8012762:	e774      	b.n	801264e <__ieee754_pow+0x3e>
 8012764:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8012768:	d106      	bne.n	8012778 <__ieee754_pow+0x168>
 801276a:	4632      	mov	r2, r6
 801276c:	463b      	mov	r3, r7
 801276e:	4630      	mov	r0, r6
 8012770:	4639      	mov	r1, r7
 8012772:	f7ed ff59 	bl	8000628 <__aeabi_dmul>
 8012776:	e76a      	b.n	801264e <__ieee754_pow+0x3e>
 8012778:	4b3e      	ldr	r3, [pc, #248]	; (8012874 <__ieee754_pow+0x264>)
 801277a:	4599      	cmp	r9, r3
 801277c:	d10c      	bne.n	8012798 <__ieee754_pow+0x188>
 801277e:	2d00      	cmp	r5, #0
 8012780:	db0a      	blt.n	8012798 <__ieee754_pow+0x188>
 8012782:	ec47 6b10 	vmov	d0, r6, r7
 8012786:	b009      	add	sp, #36	; 0x24
 8012788:	ecbd 8b06 	vpop	{d8-d10}
 801278c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012790:	f7ff be62 	b.w	8012458 <__ieee754_sqrt>
 8012794:	2300      	movs	r3, #0
 8012796:	9304      	str	r3, [sp, #16]
 8012798:	ec47 6b10 	vmov	d0, r6, r7
 801279c:	f000 fc62 	bl	8013064 <fabs>
 80127a0:	ec51 0b10 	vmov	r0, r1, d0
 80127a4:	f1ba 0f00 	cmp.w	sl, #0
 80127a8:	d129      	bne.n	80127fe <__ieee754_pow+0x1ee>
 80127aa:	b124      	cbz	r4, 80127b6 <__ieee754_pow+0x1a6>
 80127ac:	4b2f      	ldr	r3, [pc, #188]	; (801286c <__ieee754_pow+0x25c>)
 80127ae:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80127b2:	429a      	cmp	r2, r3
 80127b4:	d123      	bne.n	80127fe <__ieee754_pow+0x1ee>
 80127b6:	f1b9 0f00 	cmp.w	r9, #0
 80127ba:	da05      	bge.n	80127c8 <__ieee754_pow+0x1b8>
 80127bc:	4602      	mov	r2, r0
 80127be:	460b      	mov	r3, r1
 80127c0:	2000      	movs	r0, #0
 80127c2:	492a      	ldr	r1, [pc, #168]	; (801286c <__ieee754_pow+0x25c>)
 80127c4:	f7ee f85a 	bl	800087c <__aeabi_ddiv>
 80127c8:	2d00      	cmp	r5, #0
 80127ca:	f6bf af40 	bge.w	801264e <__ieee754_pow+0x3e>
 80127ce:	9b04      	ldr	r3, [sp, #16]
 80127d0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80127d4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80127d8:	431c      	orrs	r4, r3
 80127da:	d108      	bne.n	80127ee <__ieee754_pow+0x1de>
 80127dc:	4602      	mov	r2, r0
 80127de:	460b      	mov	r3, r1
 80127e0:	4610      	mov	r0, r2
 80127e2:	4619      	mov	r1, r3
 80127e4:	f7ed fd68 	bl	80002b8 <__aeabi_dsub>
 80127e8:	4602      	mov	r2, r0
 80127ea:	460b      	mov	r3, r1
 80127ec:	e78f      	b.n	801270e <__ieee754_pow+0xfe>
 80127ee:	9b04      	ldr	r3, [sp, #16]
 80127f0:	2b01      	cmp	r3, #1
 80127f2:	f47f af2c 	bne.w	801264e <__ieee754_pow+0x3e>
 80127f6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80127fa:	4619      	mov	r1, r3
 80127fc:	e727      	b.n	801264e <__ieee754_pow+0x3e>
 80127fe:	0feb      	lsrs	r3, r5, #31
 8012800:	3b01      	subs	r3, #1
 8012802:	9306      	str	r3, [sp, #24]
 8012804:	9a06      	ldr	r2, [sp, #24]
 8012806:	9b04      	ldr	r3, [sp, #16]
 8012808:	4313      	orrs	r3, r2
 801280a:	d102      	bne.n	8012812 <__ieee754_pow+0x202>
 801280c:	4632      	mov	r2, r6
 801280e:	463b      	mov	r3, r7
 8012810:	e7e6      	b.n	80127e0 <__ieee754_pow+0x1d0>
 8012812:	4b19      	ldr	r3, [pc, #100]	; (8012878 <__ieee754_pow+0x268>)
 8012814:	4598      	cmp	r8, r3
 8012816:	f340 80fb 	ble.w	8012a10 <__ieee754_pow+0x400>
 801281a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 801281e:	4598      	cmp	r8, r3
 8012820:	4b13      	ldr	r3, [pc, #76]	; (8012870 <__ieee754_pow+0x260>)
 8012822:	dd0c      	ble.n	801283e <__ieee754_pow+0x22e>
 8012824:	429c      	cmp	r4, r3
 8012826:	dc0f      	bgt.n	8012848 <__ieee754_pow+0x238>
 8012828:	f1b9 0f00 	cmp.w	r9, #0
 801282c:	da0f      	bge.n	801284e <__ieee754_pow+0x23e>
 801282e:	2000      	movs	r0, #0
 8012830:	b009      	add	sp, #36	; 0x24
 8012832:	ecbd 8b06 	vpop	{d8-d10}
 8012836:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801283a:	f000 bcc2 	b.w	80131c2 <__math_oflow>
 801283e:	429c      	cmp	r4, r3
 8012840:	dbf2      	blt.n	8012828 <__ieee754_pow+0x218>
 8012842:	4b0a      	ldr	r3, [pc, #40]	; (801286c <__ieee754_pow+0x25c>)
 8012844:	429c      	cmp	r4, r3
 8012846:	dd19      	ble.n	801287c <__ieee754_pow+0x26c>
 8012848:	f1b9 0f00 	cmp.w	r9, #0
 801284c:	dcef      	bgt.n	801282e <__ieee754_pow+0x21e>
 801284e:	2000      	movs	r0, #0
 8012850:	b009      	add	sp, #36	; 0x24
 8012852:	ecbd 8b06 	vpop	{d8-d10}
 8012856:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801285a:	f000 bca9 	b.w	80131b0 <__math_uflow>
 801285e:	bf00      	nop
 8012860:	fff00000 	.word	0xfff00000
 8012864:	7ff00000 	.word	0x7ff00000
 8012868:	433fffff 	.word	0x433fffff
 801286c:	3ff00000 	.word	0x3ff00000
 8012870:	3fefffff 	.word	0x3fefffff
 8012874:	3fe00000 	.word	0x3fe00000
 8012878:	41e00000 	.word	0x41e00000
 801287c:	4b60      	ldr	r3, [pc, #384]	; (8012a00 <__ieee754_pow+0x3f0>)
 801287e:	2200      	movs	r2, #0
 8012880:	f7ed fd1a 	bl	80002b8 <__aeabi_dsub>
 8012884:	a354      	add	r3, pc, #336	; (adr r3, 80129d8 <__ieee754_pow+0x3c8>)
 8012886:	e9d3 2300 	ldrd	r2, r3, [r3]
 801288a:	4604      	mov	r4, r0
 801288c:	460d      	mov	r5, r1
 801288e:	f7ed fecb 	bl	8000628 <__aeabi_dmul>
 8012892:	a353      	add	r3, pc, #332	; (adr r3, 80129e0 <__ieee754_pow+0x3d0>)
 8012894:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012898:	4606      	mov	r6, r0
 801289a:	460f      	mov	r7, r1
 801289c:	4620      	mov	r0, r4
 801289e:	4629      	mov	r1, r5
 80128a0:	f7ed fec2 	bl	8000628 <__aeabi_dmul>
 80128a4:	4b57      	ldr	r3, [pc, #348]	; (8012a04 <__ieee754_pow+0x3f4>)
 80128a6:	4682      	mov	sl, r0
 80128a8:	468b      	mov	fp, r1
 80128aa:	2200      	movs	r2, #0
 80128ac:	4620      	mov	r0, r4
 80128ae:	4629      	mov	r1, r5
 80128b0:	f7ed feba 	bl	8000628 <__aeabi_dmul>
 80128b4:	4602      	mov	r2, r0
 80128b6:	460b      	mov	r3, r1
 80128b8:	a14b      	add	r1, pc, #300	; (adr r1, 80129e8 <__ieee754_pow+0x3d8>)
 80128ba:	e9d1 0100 	ldrd	r0, r1, [r1]
 80128be:	f7ed fcfb 	bl	80002b8 <__aeabi_dsub>
 80128c2:	4622      	mov	r2, r4
 80128c4:	462b      	mov	r3, r5
 80128c6:	f7ed feaf 	bl	8000628 <__aeabi_dmul>
 80128ca:	4602      	mov	r2, r0
 80128cc:	460b      	mov	r3, r1
 80128ce:	2000      	movs	r0, #0
 80128d0:	494d      	ldr	r1, [pc, #308]	; (8012a08 <__ieee754_pow+0x3f8>)
 80128d2:	f7ed fcf1 	bl	80002b8 <__aeabi_dsub>
 80128d6:	4622      	mov	r2, r4
 80128d8:	4680      	mov	r8, r0
 80128da:	4689      	mov	r9, r1
 80128dc:	462b      	mov	r3, r5
 80128de:	4620      	mov	r0, r4
 80128e0:	4629      	mov	r1, r5
 80128e2:	f7ed fea1 	bl	8000628 <__aeabi_dmul>
 80128e6:	4602      	mov	r2, r0
 80128e8:	460b      	mov	r3, r1
 80128ea:	4640      	mov	r0, r8
 80128ec:	4649      	mov	r1, r9
 80128ee:	f7ed fe9b 	bl	8000628 <__aeabi_dmul>
 80128f2:	a33f      	add	r3, pc, #252	; (adr r3, 80129f0 <__ieee754_pow+0x3e0>)
 80128f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80128f8:	f7ed fe96 	bl	8000628 <__aeabi_dmul>
 80128fc:	4602      	mov	r2, r0
 80128fe:	460b      	mov	r3, r1
 8012900:	4650      	mov	r0, sl
 8012902:	4659      	mov	r1, fp
 8012904:	f7ed fcd8 	bl	80002b8 <__aeabi_dsub>
 8012908:	4602      	mov	r2, r0
 801290a:	460b      	mov	r3, r1
 801290c:	4680      	mov	r8, r0
 801290e:	4689      	mov	r9, r1
 8012910:	4630      	mov	r0, r6
 8012912:	4639      	mov	r1, r7
 8012914:	f7ed fcd2 	bl	80002bc <__adddf3>
 8012918:	2000      	movs	r0, #0
 801291a:	4632      	mov	r2, r6
 801291c:	463b      	mov	r3, r7
 801291e:	4604      	mov	r4, r0
 8012920:	460d      	mov	r5, r1
 8012922:	f7ed fcc9 	bl	80002b8 <__aeabi_dsub>
 8012926:	4602      	mov	r2, r0
 8012928:	460b      	mov	r3, r1
 801292a:	4640      	mov	r0, r8
 801292c:	4649      	mov	r1, r9
 801292e:	f7ed fcc3 	bl	80002b8 <__aeabi_dsub>
 8012932:	9b04      	ldr	r3, [sp, #16]
 8012934:	9a06      	ldr	r2, [sp, #24]
 8012936:	3b01      	subs	r3, #1
 8012938:	4313      	orrs	r3, r2
 801293a:	4682      	mov	sl, r0
 801293c:	468b      	mov	fp, r1
 801293e:	f040 81e7 	bne.w	8012d10 <__ieee754_pow+0x700>
 8012942:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 80129f8 <__ieee754_pow+0x3e8>
 8012946:	eeb0 8a47 	vmov.f32	s16, s14
 801294a:	eef0 8a67 	vmov.f32	s17, s15
 801294e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8012952:	2600      	movs	r6, #0
 8012954:	4632      	mov	r2, r6
 8012956:	463b      	mov	r3, r7
 8012958:	e9dd 0100 	ldrd	r0, r1, [sp]
 801295c:	f7ed fcac 	bl	80002b8 <__aeabi_dsub>
 8012960:	4622      	mov	r2, r4
 8012962:	462b      	mov	r3, r5
 8012964:	f7ed fe60 	bl	8000628 <__aeabi_dmul>
 8012968:	e9dd 2300 	ldrd	r2, r3, [sp]
 801296c:	4680      	mov	r8, r0
 801296e:	4689      	mov	r9, r1
 8012970:	4650      	mov	r0, sl
 8012972:	4659      	mov	r1, fp
 8012974:	f7ed fe58 	bl	8000628 <__aeabi_dmul>
 8012978:	4602      	mov	r2, r0
 801297a:	460b      	mov	r3, r1
 801297c:	4640      	mov	r0, r8
 801297e:	4649      	mov	r1, r9
 8012980:	f7ed fc9c 	bl	80002bc <__adddf3>
 8012984:	4632      	mov	r2, r6
 8012986:	463b      	mov	r3, r7
 8012988:	4680      	mov	r8, r0
 801298a:	4689      	mov	r9, r1
 801298c:	4620      	mov	r0, r4
 801298e:	4629      	mov	r1, r5
 8012990:	f7ed fe4a 	bl	8000628 <__aeabi_dmul>
 8012994:	460b      	mov	r3, r1
 8012996:	4604      	mov	r4, r0
 8012998:	460d      	mov	r5, r1
 801299a:	4602      	mov	r2, r0
 801299c:	4649      	mov	r1, r9
 801299e:	4640      	mov	r0, r8
 80129a0:	f7ed fc8c 	bl	80002bc <__adddf3>
 80129a4:	4b19      	ldr	r3, [pc, #100]	; (8012a0c <__ieee754_pow+0x3fc>)
 80129a6:	4299      	cmp	r1, r3
 80129a8:	ec45 4b19 	vmov	d9, r4, r5
 80129ac:	4606      	mov	r6, r0
 80129ae:	460f      	mov	r7, r1
 80129b0:	468b      	mov	fp, r1
 80129b2:	f340 82f0 	ble.w	8012f96 <__ieee754_pow+0x986>
 80129b6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80129ba:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80129be:	4303      	orrs	r3, r0
 80129c0:	f000 81e4 	beq.w	8012d8c <__ieee754_pow+0x77c>
 80129c4:	ec51 0b18 	vmov	r0, r1, d8
 80129c8:	2200      	movs	r2, #0
 80129ca:	2300      	movs	r3, #0
 80129cc:	f7ee f89e 	bl	8000b0c <__aeabi_dcmplt>
 80129d0:	3800      	subs	r0, #0
 80129d2:	bf18      	it	ne
 80129d4:	2001      	movne	r0, #1
 80129d6:	e72b      	b.n	8012830 <__ieee754_pow+0x220>
 80129d8:	60000000 	.word	0x60000000
 80129dc:	3ff71547 	.word	0x3ff71547
 80129e0:	f85ddf44 	.word	0xf85ddf44
 80129e4:	3e54ae0b 	.word	0x3e54ae0b
 80129e8:	55555555 	.word	0x55555555
 80129ec:	3fd55555 	.word	0x3fd55555
 80129f0:	652b82fe 	.word	0x652b82fe
 80129f4:	3ff71547 	.word	0x3ff71547
 80129f8:	00000000 	.word	0x00000000
 80129fc:	bff00000 	.word	0xbff00000
 8012a00:	3ff00000 	.word	0x3ff00000
 8012a04:	3fd00000 	.word	0x3fd00000
 8012a08:	3fe00000 	.word	0x3fe00000
 8012a0c:	408fffff 	.word	0x408fffff
 8012a10:	4bd5      	ldr	r3, [pc, #852]	; (8012d68 <__ieee754_pow+0x758>)
 8012a12:	402b      	ands	r3, r5
 8012a14:	2200      	movs	r2, #0
 8012a16:	b92b      	cbnz	r3, 8012a24 <__ieee754_pow+0x414>
 8012a18:	4bd4      	ldr	r3, [pc, #848]	; (8012d6c <__ieee754_pow+0x75c>)
 8012a1a:	f7ed fe05 	bl	8000628 <__aeabi_dmul>
 8012a1e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8012a22:	460c      	mov	r4, r1
 8012a24:	1523      	asrs	r3, r4, #20
 8012a26:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8012a2a:	4413      	add	r3, r2
 8012a2c:	9305      	str	r3, [sp, #20]
 8012a2e:	4bd0      	ldr	r3, [pc, #832]	; (8012d70 <__ieee754_pow+0x760>)
 8012a30:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8012a34:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8012a38:	429c      	cmp	r4, r3
 8012a3a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8012a3e:	dd08      	ble.n	8012a52 <__ieee754_pow+0x442>
 8012a40:	4bcc      	ldr	r3, [pc, #816]	; (8012d74 <__ieee754_pow+0x764>)
 8012a42:	429c      	cmp	r4, r3
 8012a44:	f340 8162 	ble.w	8012d0c <__ieee754_pow+0x6fc>
 8012a48:	9b05      	ldr	r3, [sp, #20]
 8012a4a:	3301      	adds	r3, #1
 8012a4c:	9305      	str	r3, [sp, #20]
 8012a4e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8012a52:	2400      	movs	r4, #0
 8012a54:	00e3      	lsls	r3, r4, #3
 8012a56:	9307      	str	r3, [sp, #28]
 8012a58:	4bc7      	ldr	r3, [pc, #796]	; (8012d78 <__ieee754_pow+0x768>)
 8012a5a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8012a5e:	ed93 7b00 	vldr	d7, [r3]
 8012a62:	4629      	mov	r1, r5
 8012a64:	ec53 2b17 	vmov	r2, r3, d7
 8012a68:	eeb0 9a47 	vmov.f32	s18, s14
 8012a6c:	eef0 9a67 	vmov.f32	s19, s15
 8012a70:	4682      	mov	sl, r0
 8012a72:	f7ed fc21 	bl	80002b8 <__aeabi_dsub>
 8012a76:	4652      	mov	r2, sl
 8012a78:	4606      	mov	r6, r0
 8012a7a:	460f      	mov	r7, r1
 8012a7c:	462b      	mov	r3, r5
 8012a7e:	ec51 0b19 	vmov	r0, r1, d9
 8012a82:	f7ed fc1b 	bl	80002bc <__adddf3>
 8012a86:	4602      	mov	r2, r0
 8012a88:	460b      	mov	r3, r1
 8012a8a:	2000      	movs	r0, #0
 8012a8c:	49bb      	ldr	r1, [pc, #748]	; (8012d7c <__ieee754_pow+0x76c>)
 8012a8e:	f7ed fef5 	bl	800087c <__aeabi_ddiv>
 8012a92:	ec41 0b1a 	vmov	d10, r0, r1
 8012a96:	4602      	mov	r2, r0
 8012a98:	460b      	mov	r3, r1
 8012a9a:	4630      	mov	r0, r6
 8012a9c:	4639      	mov	r1, r7
 8012a9e:	f7ed fdc3 	bl	8000628 <__aeabi_dmul>
 8012aa2:	2300      	movs	r3, #0
 8012aa4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012aa8:	9302      	str	r3, [sp, #8]
 8012aaa:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8012aae:	46ab      	mov	fp, r5
 8012ab0:	106d      	asrs	r5, r5, #1
 8012ab2:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8012ab6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8012aba:	ec41 0b18 	vmov	d8, r0, r1
 8012abe:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8012ac2:	2200      	movs	r2, #0
 8012ac4:	4640      	mov	r0, r8
 8012ac6:	4649      	mov	r1, r9
 8012ac8:	4614      	mov	r4, r2
 8012aca:	461d      	mov	r5, r3
 8012acc:	f7ed fdac 	bl	8000628 <__aeabi_dmul>
 8012ad0:	4602      	mov	r2, r0
 8012ad2:	460b      	mov	r3, r1
 8012ad4:	4630      	mov	r0, r6
 8012ad6:	4639      	mov	r1, r7
 8012ad8:	f7ed fbee 	bl	80002b8 <__aeabi_dsub>
 8012adc:	ec53 2b19 	vmov	r2, r3, d9
 8012ae0:	4606      	mov	r6, r0
 8012ae2:	460f      	mov	r7, r1
 8012ae4:	4620      	mov	r0, r4
 8012ae6:	4629      	mov	r1, r5
 8012ae8:	f7ed fbe6 	bl	80002b8 <__aeabi_dsub>
 8012aec:	4602      	mov	r2, r0
 8012aee:	460b      	mov	r3, r1
 8012af0:	4650      	mov	r0, sl
 8012af2:	4659      	mov	r1, fp
 8012af4:	f7ed fbe0 	bl	80002b8 <__aeabi_dsub>
 8012af8:	4642      	mov	r2, r8
 8012afa:	464b      	mov	r3, r9
 8012afc:	f7ed fd94 	bl	8000628 <__aeabi_dmul>
 8012b00:	4602      	mov	r2, r0
 8012b02:	460b      	mov	r3, r1
 8012b04:	4630      	mov	r0, r6
 8012b06:	4639      	mov	r1, r7
 8012b08:	f7ed fbd6 	bl	80002b8 <__aeabi_dsub>
 8012b0c:	ec53 2b1a 	vmov	r2, r3, d10
 8012b10:	f7ed fd8a 	bl	8000628 <__aeabi_dmul>
 8012b14:	ec53 2b18 	vmov	r2, r3, d8
 8012b18:	ec41 0b19 	vmov	d9, r0, r1
 8012b1c:	ec51 0b18 	vmov	r0, r1, d8
 8012b20:	f7ed fd82 	bl	8000628 <__aeabi_dmul>
 8012b24:	a37c      	add	r3, pc, #496	; (adr r3, 8012d18 <__ieee754_pow+0x708>)
 8012b26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b2a:	4604      	mov	r4, r0
 8012b2c:	460d      	mov	r5, r1
 8012b2e:	f7ed fd7b 	bl	8000628 <__aeabi_dmul>
 8012b32:	a37b      	add	r3, pc, #492	; (adr r3, 8012d20 <__ieee754_pow+0x710>)
 8012b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b38:	f7ed fbc0 	bl	80002bc <__adddf3>
 8012b3c:	4622      	mov	r2, r4
 8012b3e:	462b      	mov	r3, r5
 8012b40:	f7ed fd72 	bl	8000628 <__aeabi_dmul>
 8012b44:	a378      	add	r3, pc, #480	; (adr r3, 8012d28 <__ieee754_pow+0x718>)
 8012b46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b4a:	f7ed fbb7 	bl	80002bc <__adddf3>
 8012b4e:	4622      	mov	r2, r4
 8012b50:	462b      	mov	r3, r5
 8012b52:	f7ed fd69 	bl	8000628 <__aeabi_dmul>
 8012b56:	a376      	add	r3, pc, #472	; (adr r3, 8012d30 <__ieee754_pow+0x720>)
 8012b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b5c:	f7ed fbae 	bl	80002bc <__adddf3>
 8012b60:	4622      	mov	r2, r4
 8012b62:	462b      	mov	r3, r5
 8012b64:	f7ed fd60 	bl	8000628 <__aeabi_dmul>
 8012b68:	a373      	add	r3, pc, #460	; (adr r3, 8012d38 <__ieee754_pow+0x728>)
 8012b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b6e:	f7ed fba5 	bl	80002bc <__adddf3>
 8012b72:	4622      	mov	r2, r4
 8012b74:	462b      	mov	r3, r5
 8012b76:	f7ed fd57 	bl	8000628 <__aeabi_dmul>
 8012b7a:	a371      	add	r3, pc, #452	; (adr r3, 8012d40 <__ieee754_pow+0x730>)
 8012b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b80:	f7ed fb9c 	bl	80002bc <__adddf3>
 8012b84:	4622      	mov	r2, r4
 8012b86:	4606      	mov	r6, r0
 8012b88:	460f      	mov	r7, r1
 8012b8a:	462b      	mov	r3, r5
 8012b8c:	4620      	mov	r0, r4
 8012b8e:	4629      	mov	r1, r5
 8012b90:	f7ed fd4a 	bl	8000628 <__aeabi_dmul>
 8012b94:	4602      	mov	r2, r0
 8012b96:	460b      	mov	r3, r1
 8012b98:	4630      	mov	r0, r6
 8012b9a:	4639      	mov	r1, r7
 8012b9c:	f7ed fd44 	bl	8000628 <__aeabi_dmul>
 8012ba0:	4642      	mov	r2, r8
 8012ba2:	4604      	mov	r4, r0
 8012ba4:	460d      	mov	r5, r1
 8012ba6:	464b      	mov	r3, r9
 8012ba8:	ec51 0b18 	vmov	r0, r1, d8
 8012bac:	f7ed fb86 	bl	80002bc <__adddf3>
 8012bb0:	ec53 2b19 	vmov	r2, r3, d9
 8012bb4:	f7ed fd38 	bl	8000628 <__aeabi_dmul>
 8012bb8:	4622      	mov	r2, r4
 8012bba:	462b      	mov	r3, r5
 8012bbc:	f7ed fb7e 	bl	80002bc <__adddf3>
 8012bc0:	4642      	mov	r2, r8
 8012bc2:	4682      	mov	sl, r0
 8012bc4:	468b      	mov	fp, r1
 8012bc6:	464b      	mov	r3, r9
 8012bc8:	4640      	mov	r0, r8
 8012bca:	4649      	mov	r1, r9
 8012bcc:	f7ed fd2c 	bl	8000628 <__aeabi_dmul>
 8012bd0:	4b6b      	ldr	r3, [pc, #428]	; (8012d80 <__ieee754_pow+0x770>)
 8012bd2:	2200      	movs	r2, #0
 8012bd4:	4606      	mov	r6, r0
 8012bd6:	460f      	mov	r7, r1
 8012bd8:	f7ed fb70 	bl	80002bc <__adddf3>
 8012bdc:	4652      	mov	r2, sl
 8012bde:	465b      	mov	r3, fp
 8012be0:	f7ed fb6c 	bl	80002bc <__adddf3>
 8012be4:	2000      	movs	r0, #0
 8012be6:	4604      	mov	r4, r0
 8012be8:	460d      	mov	r5, r1
 8012bea:	4602      	mov	r2, r0
 8012bec:	460b      	mov	r3, r1
 8012bee:	4640      	mov	r0, r8
 8012bf0:	4649      	mov	r1, r9
 8012bf2:	f7ed fd19 	bl	8000628 <__aeabi_dmul>
 8012bf6:	4b62      	ldr	r3, [pc, #392]	; (8012d80 <__ieee754_pow+0x770>)
 8012bf8:	4680      	mov	r8, r0
 8012bfa:	4689      	mov	r9, r1
 8012bfc:	2200      	movs	r2, #0
 8012bfe:	4620      	mov	r0, r4
 8012c00:	4629      	mov	r1, r5
 8012c02:	f7ed fb59 	bl	80002b8 <__aeabi_dsub>
 8012c06:	4632      	mov	r2, r6
 8012c08:	463b      	mov	r3, r7
 8012c0a:	f7ed fb55 	bl	80002b8 <__aeabi_dsub>
 8012c0e:	4602      	mov	r2, r0
 8012c10:	460b      	mov	r3, r1
 8012c12:	4650      	mov	r0, sl
 8012c14:	4659      	mov	r1, fp
 8012c16:	f7ed fb4f 	bl	80002b8 <__aeabi_dsub>
 8012c1a:	ec53 2b18 	vmov	r2, r3, d8
 8012c1e:	f7ed fd03 	bl	8000628 <__aeabi_dmul>
 8012c22:	4622      	mov	r2, r4
 8012c24:	4606      	mov	r6, r0
 8012c26:	460f      	mov	r7, r1
 8012c28:	462b      	mov	r3, r5
 8012c2a:	ec51 0b19 	vmov	r0, r1, d9
 8012c2e:	f7ed fcfb 	bl	8000628 <__aeabi_dmul>
 8012c32:	4602      	mov	r2, r0
 8012c34:	460b      	mov	r3, r1
 8012c36:	4630      	mov	r0, r6
 8012c38:	4639      	mov	r1, r7
 8012c3a:	f7ed fb3f 	bl	80002bc <__adddf3>
 8012c3e:	4606      	mov	r6, r0
 8012c40:	460f      	mov	r7, r1
 8012c42:	4602      	mov	r2, r0
 8012c44:	460b      	mov	r3, r1
 8012c46:	4640      	mov	r0, r8
 8012c48:	4649      	mov	r1, r9
 8012c4a:	f7ed fb37 	bl	80002bc <__adddf3>
 8012c4e:	a33e      	add	r3, pc, #248	; (adr r3, 8012d48 <__ieee754_pow+0x738>)
 8012c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c54:	2000      	movs	r0, #0
 8012c56:	4604      	mov	r4, r0
 8012c58:	460d      	mov	r5, r1
 8012c5a:	f7ed fce5 	bl	8000628 <__aeabi_dmul>
 8012c5e:	4642      	mov	r2, r8
 8012c60:	ec41 0b18 	vmov	d8, r0, r1
 8012c64:	464b      	mov	r3, r9
 8012c66:	4620      	mov	r0, r4
 8012c68:	4629      	mov	r1, r5
 8012c6a:	f7ed fb25 	bl	80002b8 <__aeabi_dsub>
 8012c6e:	4602      	mov	r2, r0
 8012c70:	460b      	mov	r3, r1
 8012c72:	4630      	mov	r0, r6
 8012c74:	4639      	mov	r1, r7
 8012c76:	f7ed fb1f 	bl	80002b8 <__aeabi_dsub>
 8012c7a:	a335      	add	r3, pc, #212	; (adr r3, 8012d50 <__ieee754_pow+0x740>)
 8012c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c80:	f7ed fcd2 	bl	8000628 <__aeabi_dmul>
 8012c84:	a334      	add	r3, pc, #208	; (adr r3, 8012d58 <__ieee754_pow+0x748>)
 8012c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c8a:	4606      	mov	r6, r0
 8012c8c:	460f      	mov	r7, r1
 8012c8e:	4620      	mov	r0, r4
 8012c90:	4629      	mov	r1, r5
 8012c92:	f7ed fcc9 	bl	8000628 <__aeabi_dmul>
 8012c96:	4602      	mov	r2, r0
 8012c98:	460b      	mov	r3, r1
 8012c9a:	4630      	mov	r0, r6
 8012c9c:	4639      	mov	r1, r7
 8012c9e:	f7ed fb0d 	bl	80002bc <__adddf3>
 8012ca2:	9a07      	ldr	r2, [sp, #28]
 8012ca4:	4b37      	ldr	r3, [pc, #220]	; (8012d84 <__ieee754_pow+0x774>)
 8012ca6:	4413      	add	r3, r2
 8012ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012cac:	f7ed fb06 	bl	80002bc <__adddf3>
 8012cb0:	4682      	mov	sl, r0
 8012cb2:	9805      	ldr	r0, [sp, #20]
 8012cb4:	468b      	mov	fp, r1
 8012cb6:	f7ed fc4d 	bl	8000554 <__aeabi_i2d>
 8012cba:	9a07      	ldr	r2, [sp, #28]
 8012cbc:	4b32      	ldr	r3, [pc, #200]	; (8012d88 <__ieee754_pow+0x778>)
 8012cbe:	4413      	add	r3, r2
 8012cc0:	e9d3 8900 	ldrd	r8, r9, [r3]
 8012cc4:	4606      	mov	r6, r0
 8012cc6:	460f      	mov	r7, r1
 8012cc8:	4652      	mov	r2, sl
 8012cca:	465b      	mov	r3, fp
 8012ccc:	ec51 0b18 	vmov	r0, r1, d8
 8012cd0:	f7ed faf4 	bl	80002bc <__adddf3>
 8012cd4:	4642      	mov	r2, r8
 8012cd6:	464b      	mov	r3, r9
 8012cd8:	f7ed faf0 	bl	80002bc <__adddf3>
 8012cdc:	4632      	mov	r2, r6
 8012cde:	463b      	mov	r3, r7
 8012ce0:	f7ed faec 	bl	80002bc <__adddf3>
 8012ce4:	2000      	movs	r0, #0
 8012ce6:	4632      	mov	r2, r6
 8012ce8:	463b      	mov	r3, r7
 8012cea:	4604      	mov	r4, r0
 8012cec:	460d      	mov	r5, r1
 8012cee:	f7ed fae3 	bl	80002b8 <__aeabi_dsub>
 8012cf2:	4642      	mov	r2, r8
 8012cf4:	464b      	mov	r3, r9
 8012cf6:	f7ed fadf 	bl	80002b8 <__aeabi_dsub>
 8012cfa:	ec53 2b18 	vmov	r2, r3, d8
 8012cfe:	f7ed fadb 	bl	80002b8 <__aeabi_dsub>
 8012d02:	4602      	mov	r2, r0
 8012d04:	460b      	mov	r3, r1
 8012d06:	4650      	mov	r0, sl
 8012d08:	4659      	mov	r1, fp
 8012d0a:	e610      	b.n	801292e <__ieee754_pow+0x31e>
 8012d0c:	2401      	movs	r4, #1
 8012d0e:	e6a1      	b.n	8012a54 <__ieee754_pow+0x444>
 8012d10:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8012d60 <__ieee754_pow+0x750>
 8012d14:	e617      	b.n	8012946 <__ieee754_pow+0x336>
 8012d16:	bf00      	nop
 8012d18:	4a454eef 	.word	0x4a454eef
 8012d1c:	3fca7e28 	.word	0x3fca7e28
 8012d20:	93c9db65 	.word	0x93c9db65
 8012d24:	3fcd864a 	.word	0x3fcd864a
 8012d28:	a91d4101 	.word	0xa91d4101
 8012d2c:	3fd17460 	.word	0x3fd17460
 8012d30:	518f264d 	.word	0x518f264d
 8012d34:	3fd55555 	.word	0x3fd55555
 8012d38:	db6fabff 	.word	0xdb6fabff
 8012d3c:	3fdb6db6 	.word	0x3fdb6db6
 8012d40:	33333303 	.word	0x33333303
 8012d44:	3fe33333 	.word	0x3fe33333
 8012d48:	e0000000 	.word	0xe0000000
 8012d4c:	3feec709 	.word	0x3feec709
 8012d50:	dc3a03fd 	.word	0xdc3a03fd
 8012d54:	3feec709 	.word	0x3feec709
 8012d58:	145b01f5 	.word	0x145b01f5
 8012d5c:	be3e2fe0 	.word	0xbe3e2fe0
 8012d60:	00000000 	.word	0x00000000
 8012d64:	3ff00000 	.word	0x3ff00000
 8012d68:	7ff00000 	.word	0x7ff00000
 8012d6c:	43400000 	.word	0x43400000
 8012d70:	0003988e 	.word	0x0003988e
 8012d74:	000bb679 	.word	0x000bb679
 8012d78:	08013878 	.word	0x08013878
 8012d7c:	3ff00000 	.word	0x3ff00000
 8012d80:	40080000 	.word	0x40080000
 8012d84:	08013898 	.word	0x08013898
 8012d88:	08013888 	.word	0x08013888
 8012d8c:	a3b3      	add	r3, pc, #716	; (adr r3, 801305c <__ieee754_pow+0xa4c>)
 8012d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d92:	4640      	mov	r0, r8
 8012d94:	4649      	mov	r1, r9
 8012d96:	f7ed fa91 	bl	80002bc <__adddf3>
 8012d9a:	4622      	mov	r2, r4
 8012d9c:	ec41 0b1a 	vmov	d10, r0, r1
 8012da0:	462b      	mov	r3, r5
 8012da2:	4630      	mov	r0, r6
 8012da4:	4639      	mov	r1, r7
 8012da6:	f7ed fa87 	bl	80002b8 <__aeabi_dsub>
 8012daa:	4602      	mov	r2, r0
 8012dac:	460b      	mov	r3, r1
 8012dae:	ec51 0b1a 	vmov	r0, r1, d10
 8012db2:	f7ed fec9 	bl	8000b48 <__aeabi_dcmpgt>
 8012db6:	2800      	cmp	r0, #0
 8012db8:	f47f ae04 	bne.w	80129c4 <__ieee754_pow+0x3b4>
 8012dbc:	4aa2      	ldr	r2, [pc, #648]	; (8013048 <__ieee754_pow+0xa38>)
 8012dbe:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8012dc2:	4293      	cmp	r3, r2
 8012dc4:	f340 8107 	ble.w	8012fd6 <__ieee754_pow+0x9c6>
 8012dc8:	151b      	asrs	r3, r3, #20
 8012dca:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8012dce:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8012dd2:	fa4a fa03 	asr.w	sl, sl, r3
 8012dd6:	44da      	add	sl, fp
 8012dd8:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8012ddc:	489b      	ldr	r0, [pc, #620]	; (801304c <__ieee754_pow+0xa3c>)
 8012dde:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8012de2:	4108      	asrs	r0, r1
 8012de4:	ea00 030a 	and.w	r3, r0, sl
 8012de8:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8012dec:	f1c1 0114 	rsb	r1, r1, #20
 8012df0:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8012df4:	fa4a fa01 	asr.w	sl, sl, r1
 8012df8:	f1bb 0f00 	cmp.w	fp, #0
 8012dfc:	f04f 0200 	mov.w	r2, #0
 8012e00:	4620      	mov	r0, r4
 8012e02:	4629      	mov	r1, r5
 8012e04:	bfb8      	it	lt
 8012e06:	f1ca 0a00 	rsblt	sl, sl, #0
 8012e0a:	f7ed fa55 	bl	80002b8 <__aeabi_dsub>
 8012e0e:	ec41 0b19 	vmov	d9, r0, r1
 8012e12:	4642      	mov	r2, r8
 8012e14:	464b      	mov	r3, r9
 8012e16:	ec51 0b19 	vmov	r0, r1, d9
 8012e1a:	f7ed fa4f 	bl	80002bc <__adddf3>
 8012e1e:	a37a      	add	r3, pc, #488	; (adr r3, 8013008 <__ieee754_pow+0x9f8>)
 8012e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e24:	2000      	movs	r0, #0
 8012e26:	4604      	mov	r4, r0
 8012e28:	460d      	mov	r5, r1
 8012e2a:	f7ed fbfd 	bl	8000628 <__aeabi_dmul>
 8012e2e:	ec53 2b19 	vmov	r2, r3, d9
 8012e32:	4606      	mov	r6, r0
 8012e34:	460f      	mov	r7, r1
 8012e36:	4620      	mov	r0, r4
 8012e38:	4629      	mov	r1, r5
 8012e3a:	f7ed fa3d 	bl	80002b8 <__aeabi_dsub>
 8012e3e:	4602      	mov	r2, r0
 8012e40:	460b      	mov	r3, r1
 8012e42:	4640      	mov	r0, r8
 8012e44:	4649      	mov	r1, r9
 8012e46:	f7ed fa37 	bl	80002b8 <__aeabi_dsub>
 8012e4a:	a371      	add	r3, pc, #452	; (adr r3, 8013010 <__ieee754_pow+0xa00>)
 8012e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e50:	f7ed fbea 	bl	8000628 <__aeabi_dmul>
 8012e54:	a370      	add	r3, pc, #448	; (adr r3, 8013018 <__ieee754_pow+0xa08>)
 8012e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e5a:	4680      	mov	r8, r0
 8012e5c:	4689      	mov	r9, r1
 8012e5e:	4620      	mov	r0, r4
 8012e60:	4629      	mov	r1, r5
 8012e62:	f7ed fbe1 	bl	8000628 <__aeabi_dmul>
 8012e66:	4602      	mov	r2, r0
 8012e68:	460b      	mov	r3, r1
 8012e6a:	4640      	mov	r0, r8
 8012e6c:	4649      	mov	r1, r9
 8012e6e:	f7ed fa25 	bl	80002bc <__adddf3>
 8012e72:	4604      	mov	r4, r0
 8012e74:	460d      	mov	r5, r1
 8012e76:	4602      	mov	r2, r0
 8012e78:	460b      	mov	r3, r1
 8012e7a:	4630      	mov	r0, r6
 8012e7c:	4639      	mov	r1, r7
 8012e7e:	f7ed fa1d 	bl	80002bc <__adddf3>
 8012e82:	4632      	mov	r2, r6
 8012e84:	463b      	mov	r3, r7
 8012e86:	4680      	mov	r8, r0
 8012e88:	4689      	mov	r9, r1
 8012e8a:	f7ed fa15 	bl	80002b8 <__aeabi_dsub>
 8012e8e:	4602      	mov	r2, r0
 8012e90:	460b      	mov	r3, r1
 8012e92:	4620      	mov	r0, r4
 8012e94:	4629      	mov	r1, r5
 8012e96:	f7ed fa0f 	bl	80002b8 <__aeabi_dsub>
 8012e9a:	4642      	mov	r2, r8
 8012e9c:	4606      	mov	r6, r0
 8012e9e:	460f      	mov	r7, r1
 8012ea0:	464b      	mov	r3, r9
 8012ea2:	4640      	mov	r0, r8
 8012ea4:	4649      	mov	r1, r9
 8012ea6:	f7ed fbbf 	bl	8000628 <__aeabi_dmul>
 8012eaa:	a35d      	add	r3, pc, #372	; (adr r3, 8013020 <__ieee754_pow+0xa10>)
 8012eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012eb0:	4604      	mov	r4, r0
 8012eb2:	460d      	mov	r5, r1
 8012eb4:	f7ed fbb8 	bl	8000628 <__aeabi_dmul>
 8012eb8:	a35b      	add	r3, pc, #364	; (adr r3, 8013028 <__ieee754_pow+0xa18>)
 8012eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ebe:	f7ed f9fb 	bl	80002b8 <__aeabi_dsub>
 8012ec2:	4622      	mov	r2, r4
 8012ec4:	462b      	mov	r3, r5
 8012ec6:	f7ed fbaf 	bl	8000628 <__aeabi_dmul>
 8012eca:	a359      	add	r3, pc, #356	; (adr r3, 8013030 <__ieee754_pow+0xa20>)
 8012ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ed0:	f7ed f9f4 	bl	80002bc <__adddf3>
 8012ed4:	4622      	mov	r2, r4
 8012ed6:	462b      	mov	r3, r5
 8012ed8:	f7ed fba6 	bl	8000628 <__aeabi_dmul>
 8012edc:	a356      	add	r3, pc, #344	; (adr r3, 8013038 <__ieee754_pow+0xa28>)
 8012ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ee2:	f7ed f9e9 	bl	80002b8 <__aeabi_dsub>
 8012ee6:	4622      	mov	r2, r4
 8012ee8:	462b      	mov	r3, r5
 8012eea:	f7ed fb9d 	bl	8000628 <__aeabi_dmul>
 8012eee:	a354      	add	r3, pc, #336	; (adr r3, 8013040 <__ieee754_pow+0xa30>)
 8012ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ef4:	f7ed f9e2 	bl	80002bc <__adddf3>
 8012ef8:	4622      	mov	r2, r4
 8012efa:	462b      	mov	r3, r5
 8012efc:	f7ed fb94 	bl	8000628 <__aeabi_dmul>
 8012f00:	4602      	mov	r2, r0
 8012f02:	460b      	mov	r3, r1
 8012f04:	4640      	mov	r0, r8
 8012f06:	4649      	mov	r1, r9
 8012f08:	f7ed f9d6 	bl	80002b8 <__aeabi_dsub>
 8012f0c:	4604      	mov	r4, r0
 8012f0e:	460d      	mov	r5, r1
 8012f10:	4602      	mov	r2, r0
 8012f12:	460b      	mov	r3, r1
 8012f14:	4640      	mov	r0, r8
 8012f16:	4649      	mov	r1, r9
 8012f18:	f7ed fb86 	bl	8000628 <__aeabi_dmul>
 8012f1c:	2200      	movs	r2, #0
 8012f1e:	ec41 0b19 	vmov	d9, r0, r1
 8012f22:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8012f26:	4620      	mov	r0, r4
 8012f28:	4629      	mov	r1, r5
 8012f2a:	f7ed f9c5 	bl	80002b8 <__aeabi_dsub>
 8012f2e:	4602      	mov	r2, r0
 8012f30:	460b      	mov	r3, r1
 8012f32:	ec51 0b19 	vmov	r0, r1, d9
 8012f36:	f7ed fca1 	bl	800087c <__aeabi_ddiv>
 8012f3a:	4632      	mov	r2, r6
 8012f3c:	4604      	mov	r4, r0
 8012f3e:	460d      	mov	r5, r1
 8012f40:	463b      	mov	r3, r7
 8012f42:	4640      	mov	r0, r8
 8012f44:	4649      	mov	r1, r9
 8012f46:	f7ed fb6f 	bl	8000628 <__aeabi_dmul>
 8012f4a:	4632      	mov	r2, r6
 8012f4c:	463b      	mov	r3, r7
 8012f4e:	f7ed f9b5 	bl	80002bc <__adddf3>
 8012f52:	4602      	mov	r2, r0
 8012f54:	460b      	mov	r3, r1
 8012f56:	4620      	mov	r0, r4
 8012f58:	4629      	mov	r1, r5
 8012f5a:	f7ed f9ad 	bl	80002b8 <__aeabi_dsub>
 8012f5e:	4642      	mov	r2, r8
 8012f60:	464b      	mov	r3, r9
 8012f62:	f7ed f9a9 	bl	80002b8 <__aeabi_dsub>
 8012f66:	460b      	mov	r3, r1
 8012f68:	4602      	mov	r2, r0
 8012f6a:	4939      	ldr	r1, [pc, #228]	; (8013050 <__ieee754_pow+0xa40>)
 8012f6c:	2000      	movs	r0, #0
 8012f6e:	f7ed f9a3 	bl	80002b8 <__aeabi_dsub>
 8012f72:	ec41 0b10 	vmov	d0, r0, r1
 8012f76:	ee10 3a90 	vmov	r3, s1
 8012f7a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8012f7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8012f82:	da2b      	bge.n	8012fdc <__ieee754_pow+0x9cc>
 8012f84:	4650      	mov	r0, sl
 8012f86:	f000 f877 	bl	8013078 <scalbn>
 8012f8a:	ec51 0b10 	vmov	r0, r1, d0
 8012f8e:	ec53 2b18 	vmov	r2, r3, d8
 8012f92:	f7ff bbee 	b.w	8012772 <__ieee754_pow+0x162>
 8012f96:	4b2f      	ldr	r3, [pc, #188]	; (8013054 <__ieee754_pow+0xa44>)
 8012f98:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8012f9c:	429e      	cmp	r6, r3
 8012f9e:	f77f af0d 	ble.w	8012dbc <__ieee754_pow+0x7ac>
 8012fa2:	4b2d      	ldr	r3, [pc, #180]	; (8013058 <__ieee754_pow+0xa48>)
 8012fa4:	440b      	add	r3, r1
 8012fa6:	4303      	orrs	r3, r0
 8012fa8:	d009      	beq.n	8012fbe <__ieee754_pow+0x9ae>
 8012faa:	ec51 0b18 	vmov	r0, r1, d8
 8012fae:	2200      	movs	r2, #0
 8012fb0:	2300      	movs	r3, #0
 8012fb2:	f7ed fdab 	bl	8000b0c <__aeabi_dcmplt>
 8012fb6:	3800      	subs	r0, #0
 8012fb8:	bf18      	it	ne
 8012fba:	2001      	movne	r0, #1
 8012fbc:	e448      	b.n	8012850 <__ieee754_pow+0x240>
 8012fbe:	4622      	mov	r2, r4
 8012fc0:	462b      	mov	r3, r5
 8012fc2:	f7ed f979 	bl	80002b8 <__aeabi_dsub>
 8012fc6:	4642      	mov	r2, r8
 8012fc8:	464b      	mov	r3, r9
 8012fca:	f7ed fdb3 	bl	8000b34 <__aeabi_dcmpge>
 8012fce:	2800      	cmp	r0, #0
 8012fd0:	f43f aef4 	beq.w	8012dbc <__ieee754_pow+0x7ac>
 8012fd4:	e7e9      	b.n	8012faa <__ieee754_pow+0x99a>
 8012fd6:	f04f 0a00 	mov.w	sl, #0
 8012fda:	e71a      	b.n	8012e12 <__ieee754_pow+0x802>
 8012fdc:	ec51 0b10 	vmov	r0, r1, d0
 8012fe0:	4619      	mov	r1, r3
 8012fe2:	e7d4      	b.n	8012f8e <__ieee754_pow+0x97e>
 8012fe4:	491a      	ldr	r1, [pc, #104]	; (8013050 <__ieee754_pow+0xa40>)
 8012fe6:	2000      	movs	r0, #0
 8012fe8:	f7ff bb31 	b.w	801264e <__ieee754_pow+0x3e>
 8012fec:	2000      	movs	r0, #0
 8012fee:	2100      	movs	r1, #0
 8012ff0:	f7ff bb2d 	b.w	801264e <__ieee754_pow+0x3e>
 8012ff4:	4630      	mov	r0, r6
 8012ff6:	4639      	mov	r1, r7
 8012ff8:	f7ff bb29 	b.w	801264e <__ieee754_pow+0x3e>
 8012ffc:	9204      	str	r2, [sp, #16]
 8012ffe:	f7ff bb7b 	b.w	80126f8 <__ieee754_pow+0xe8>
 8013002:	2300      	movs	r3, #0
 8013004:	f7ff bb65 	b.w	80126d2 <__ieee754_pow+0xc2>
 8013008:	00000000 	.word	0x00000000
 801300c:	3fe62e43 	.word	0x3fe62e43
 8013010:	fefa39ef 	.word	0xfefa39ef
 8013014:	3fe62e42 	.word	0x3fe62e42
 8013018:	0ca86c39 	.word	0x0ca86c39
 801301c:	be205c61 	.word	0xbe205c61
 8013020:	72bea4d0 	.word	0x72bea4d0
 8013024:	3e663769 	.word	0x3e663769
 8013028:	c5d26bf1 	.word	0xc5d26bf1
 801302c:	3ebbbd41 	.word	0x3ebbbd41
 8013030:	af25de2c 	.word	0xaf25de2c
 8013034:	3f11566a 	.word	0x3f11566a
 8013038:	16bebd93 	.word	0x16bebd93
 801303c:	3f66c16c 	.word	0x3f66c16c
 8013040:	5555553e 	.word	0x5555553e
 8013044:	3fc55555 	.word	0x3fc55555
 8013048:	3fe00000 	.word	0x3fe00000
 801304c:	fff00000 	.word	0xfff00000
 8013050:	3ff00000 	.word	0x3ff00000
 8013054:	4090cbff 	.word	0x4090cbff
 8013058:	3f6f3400 	.word	0x3f6f3400
 801305c:	652b82fe 	.word	0x652b82fe
 8013060:	3c971547 	.word	0x3c971547

08013064 <fabs>:
 8013064:	ec51 0b10 	vmov	r0, r1, d0
 8013068:	ee10 2a10 	vmov	r2, s0
 801306c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8013070:	ec43 2b10 	vmov	d0, r2, r3
 8013074:	4770      	bx	lr
	...

08013078 <scalbn>:
 8013078:	b570      	push	{r4, r5, r6, lr}
 801307a:	ec55 4b10 	vmov	r4, r5, d0
 801307e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8013082:	4606      	mov	r6, r0
 8013084:	462b      	mov	r3, r5
 8013086:	b999      	cbnz	r1, 80130b0 <scalbn+0x38>
 8013088:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801308c:	4323      	orrs	r3, r4
 801308e:	d03f      	beq.n	8013110 <scalbn+0x98>
 8013090:	4b35      	ldr	r3, [pc, #212]	; (8013168 <scalbn+0xf0>)
 8013092:	4629      	mov	r1, r5
 8013094:	ee10 0a10 	vmov	r0, s0
 8013098:	2200      	movs	r2, #0
 801309a:	f7ed fac5 	bl	8000628 <__aeabi_dmul>
 801309e:	4b33      	ldr	r3, [pc, #204]	; (801316c <scalbn+0xf4>)
 80130a0:	429e      	cmp	r6, r3
 80130a2:	4604      	mov	r4, r0
 80130a4:	460d      	mov	r5, r1
 80130a6:	da10      	bge.n	80130ca <scalbn+0x52>
 80130a8:	a327      	add	r3, pc, #156	; (adr r3, 8013148 <scalbn+0xd0>)
 80130aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80130ae:	e01f      	b.n	80130f0 <scalbn+0x78>
 80130b0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80130b4:	4291      	cmp	r1, r2
 80130b6:	d10c      	bne.n	80130d2 <scalbn+0x5a>
 80130b8:	ee10 2a10 	vmov	r2, s0
 80130bc:	4620      	mov	r0, r4
 80130be:	4629      	mov	r1, r5
 80130c0:	f7ed f8fc 	bl	80002bc <__adddf3>
 80130c4:	4604      	mov	r4, r0
 80130c6:	460d      	mov	r5, r1
 80130c8:	e022      	b.n	8013110 <scalbn+0x98>
 80130ca:	460b      	mov	r3, r1
 80130cc:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80130d0:	3936      	subs	r1, #54	; 0x36
 80130d2:	f24c 3250 	movw	r2, #50000	; 0xc350
 80130d6:	4296      	cmp	r6, r2
 80130d8:	dd0d      	ble.n	80130f6 <scalbn+0x7e>
 80130da:	2d00      	cmp	r5, #0
 80130dc:	a11c      	add	r1, pc, #112	; (adr r1, 8013150 <scalbn+0xd8>)
 80130de:	e9d1 0100 	ldrd	r0, r1, [r1]
 80130e2:	da02      	bge.n	80130ea <scalbn+0x72>
 80130e4:	a11c      	add	r1, pc, #112	; (adr r1, 8013158 <scalbn+0xe0>)
 80130e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80130ea:	a319      	add	r3, pc, #100	; (adr r3, 8013150 <scalbn+0xd8>)
 80130ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80130f0:	f7ed fa9a 	bl	8000628 <__aeabi_dmul>
 80130f4:	e7e6      	b.n	80130c4 <scalbn+0x4c>
 80130f6:	1872      	adds	r2, r6, r1
 80130f8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80130fc:	428a      	cmp	r2, r1
 80130fe:	dcec      	bgt.n	80130da <scalbn+0x62>
 8013100:	2a00      	cmp	r2, #0
 8013102:	dd08      	ble.n	8013116 <scalbn+0x9e>
 8013104:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8013108:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801310c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8013110:	ec45 4b10 	vmov	d0, r4, r5
 8013114:	bd70      	pop	{r4, r5, r6, pc}
 8013116:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801311a:	da08      	bge.n	801312e <scalbn+0xb6>
 801311c:	2d00      	cmp	r5, #0
 801311e:	a10a      	add	r1, pc, #40	; (adr r1, 8013148 <scalbn+0xd0>)
 8013120:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013124:	dac0      	bge.n	80130a8 <scalbn+0x30>
 8013126:	a10e      	add	r1, pc, #56	; (adr r1, 8013160 <scalbn+0xe8>)
 8013128:	e9d1 0100 	ldrd	r0, r1, [r1]
 801312c:	e7bc      	b.n	80130a8 <scalbn+0x30>
 801312e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8013132:	3236      	adds	r2, #54	; 0x36
 8013134:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8013138:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801313c:	4620      	mov	r0, r4
 801313e:	4b0c      	ldr	r3, [pc, #48]	; (8013170 <scalbn+0xf8>)
 8013140:	2200      	movs	r2, #0
 8013142:	e7d5      	b.n	80130f0 <scalbn+0x78>
 8013144:	f3af 8000 	nop.w
 8013148:	c2f8f359 	.word	0xc2f8f359
 801314c:	01a56e1f 	.word	0x01a56e1f
 8013150:	8800759c 	.word	0x8800759c
 8013154:	7e37e43c 	.word	0x7e37e43c
 8013158:	8800759c 	.word	0x8800759c
 801315c:	fe37e43c 	.word	0xfe37e43c
 8013160:	c2f8f359 	.word	0xc2f8f359
 8013164:	81a56e1f 	.word	0x81a56e1f
 8013168:	43500000 	.word	0x43500000
 801316c:	ffff3cb0 	.word	0xffff3cb0
 8013170:	3c900000 	.word	0x3c900000

08013174 <with_errno>:
 8013174:	b570      	push	{r4, r5, r6, lr}
 8013176:	4604      	mov	r4, r0
 8013178:	460d      	mov	r5, r1
 801317a:	4616      	mov	r6, r2
 801317c:	f7fd fba4 	bl	80108c8 <__errno>
 8013180:	4629      	mov	r1, r5
 8013182:	6006      	str	r6, [r0, #0]
 8013184:	4620      	mov	r0, r4
 8013186:	bd70      	pop	{r4, r5, r6, pc}

08013188 <xflow>:
 8013188:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801318a:	4614      	mov	r4, r2
 801318c:	461d      	mov	r5, r3
 801318e:	b108      	cbz	r0, 8013194 <xflow+0xc>
 8013190:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8013194:	e9cd 2300 	strd	r2, r3, [sp]
 8013198:	e9dd 2300 	ldrd	r2, r3, [sp]
 801319c:	4620      	mov	r0, r4
 801319e:	4629      	mov	r1, r5
 80131a0:	f7ed fa42 	bl	8000628 <__aeabi_dmul>
 80131a4:	2222      	movs	r2, #34	; 0x22
 80131a6:	b003      	add	sp, #12
 80131a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80131ac:	f7ff bfe2 	b.w	8013174 <with_errno>

080131b0 <__math_uflow>:
 80131b0:	b508      	push	{r3, lr}
 80131b2:	2200      	movs	r2, #0
 80131b4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80131b8:	f7ff ffe6 	bl	8013188 <xflow>
 80131bc:	ec41 0b10 	vmov	d0, r0, r1
 80131c0:	bd08      	pop	{r3, pc}

080131c2 <__math_oflow>:
 80131c2:	b508      	push	{r3, lr}
 80131c4:	2200      	movs	r2, #0
 80131c6:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80131ca:	f7ff ffdd 	bl	8013188 <xflow>
 80131ce:	ec41 0b10 	vmov	d0, r0, r1
 80131d2:	bd08      	pop	{r3, pc}

080131d4 <_init>:
 80131d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80131d6:	bf00      	nop
 80131d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80131da:	bc08      	pop	{r3}
 80131dc:	469e      	mov	lr, r3
 80131de:	4770      	bx	lr

080131e0 <_fini>:
 80131e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80131e2:	bf00      	nop
 80131e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80131e6:	bc08      	pop	{r3}
 80131e8:	469e      	mov	lr, r3
 80131ea:	4770      	bx	lr
